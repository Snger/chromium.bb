/* Copyright 2013 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/**
 * This file defines the <code>PPB_UDPSocket_Dev</code> interface.
 * TODO(yzshen): Tidy up the document.
 */

[generate_thunk]

label Chrome {
  M29 = 0.1
};

[assert_size(4)]
enum PP_UDPSocket_Option_Dev {
  // Allows the socket to share the local address to which it will be bound with
  // other processes. Value's type should be PP_VARTYPE_BOOL.
  // This option can only be set before calling Bind().
  PP_UDPSOCKET_OPTION_ADDRESS_REUSE = 0,

  // Allows sending and receiving packets to and from broadcast addresses.
  // Value's type should be PP_VARTYPE_BOOL.
  // This option can only be set before calling Bind().
  PP_UDPSOCKET_OPTION_BROADCAST = 1,

  // Specifies the total per-socket buffer space reserved for sends. Value's
  // type should be PP_VARTYPE_INT32.
  // This option can only be set after a successful Bind() call.
  // Note: This is only treated as a hint for the browser to set the buffer
  // size. Even if SetOption() reports that this option has been successfully
  // set, the browser doesn't guarantee it will conform to it.
  PP_UDPSOCKET_OPTION_SEND_BUFFER_SIZE = 2,

  // Specifies the total per-socket buffer space reserved for receives. Value's
  // type should be PP_VARTYPE_INT32.
  // This option can only be set after a successful Bind() call.
  // Note: This is only treated as a hint for the browser to set the buffer
  // size. Even if SetOption() reports that this option has been successfully
  // set, the browser doesn't guarantee it will conform to it.
  PP_UDPSOCKET_OPTION_RECV_BUFFER_SIZE = 3
};

interface PPB_UDPSocket_Dev {
  /**
   * Creates a UDP socket resource.
   */
  PP_Resource Create([in] PP_Instance instance);

  /**
   * Determines if a given resource is a UDP socket.
   */
  PP_Bool IsUDPSocket([in] PP_Resource resource);

  /**
   * Binds to the address given by |addr|, which is a PPB_NetAddress_Dev
   * resource.
   */
  int32_t Bind([in] PP_Resource udp_socket,
               [in] PP_Resource addr,
               [in] PP_CompletionCallback callback);

  /**
   * Returns the address that the socket has bound to, as a PPB_NetAddress_Dev
   * resource.  Bind must be called and succeed first. Returns 0 if Bind fails,
   * or if Close has been called.
   */
  PP_Resource GetBoundAddress([in] PP_Resource udp_socket);

  /**
   * Performs a non-blocking recvfrom call on socket.
   * Bind must be called first. |callback| is invoked when recvfrom reads data.
   * |addr| will store a PPB_NetAddress_Dev resource on success.
   */
  int32_t RecvFrom([in] PP_Resource udp_socket,
                   [out] str_t buffer,
                   [in] int32_t num_bytes,
                   [out] PP_Resource addr,
                   [in] PP_CompletionCallback callback);

  /**
   * Performs a non-blocking sendto call on the socket.
   * Bind must be called first. |addr| is a PPB_NetAddress_Dev resource holding
   * the target address. |callback| is invoked when sendto completes.
   */
  int32_t SendTo([in] PP_Resource udp_socket,
                 [in] str_t buffer,
                 [in] int32_t num_bytes,
                 [in] PP_Resource addr,
                 [in] PP_CompletionCallback callback);

  /**
   * Cancels all pending reads and writes, and closes the socket.
   */
  void Close([in] PP_Resource udp_socket);

  /**
   * Sets a socket option on |udp_socket|.
   * See the PP_UDPSocket_Option_Dev description for option names, value types
   * and allowed values.
   * Returns PP_OK on success. Otherwise, returns PP_ERROR_BADRESOURCE (if bad
   * |udp_socket| provided), PP_ERROR_BADARGUMENT (if bad name/value/value's
   * type provided) or PP_ERROR_FAILED in the case of internal errors.
   */
  int32_t SetOption([in] PP_Resource udp_socket,
                    [in] PP_UDPSocket_Option_Dev name,
                    [in] PP_Var value,
                    [in] PP_CompletionCallback callback);
};
