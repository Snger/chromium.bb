// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Bluetooth API.
// TODO(bryeung): mark this API as ChromeOS only (see crbug.com/119398).

[nodoc] namespace experimental.bluetooth {
  dictionary Device {
    // The address of the device, in the format 'XX:XX:XX:XX:XX:XX'.
    DOMString address;

    // The human-readable name of the device.
    DOMString name;

    // Indicates whether or not the device is paired with the system.
    boolean paired;

    // Indicates whether or not the device is bonded with the system.  A device
    // is bonded if it is paired and high-security link keys have been
    // exchanged so that connections may be encrypted.
    boolean bonded;

    // Indicates whether the device is currently connected to the system.
    boolean connected;
  };

  dictionary Socket {
    Device device;
    DOMString serviceUUID;
    long id;
  };

  dictionary OutOfBandPairingData {
    // Simple Pairing Hash C
    // Always 16 octets long.
    ArrayBuffer hash;

    // Simple Pairing Randomizer R
    // Always 16 octets long.
    ArrayBuffer randomizer;
  };

  // Reports failures via chrome.extension.lastError.
  callback ResultCallback = void ();
  callback BooleanCallback = void (boolean result);
  callback AddressCallback = void (DOMString result);
  callback DevicesCallback = void (Device[] result);
  callback SocketCallback = void (Socket result);
  callback DataCallback = void (ArrayBuffer result);
  callback SizeCallback = void (long result);
  callback OutOfBandPairingDataCallback = void (OutOfBandPairingData data);

  interface Functions {
    // Checks if the system has bluetooth support.
    // |callback| : Called with the boolean result.
    static void isAvailable(BooleanCallback callback);

    // Checks if the system's bluetooth module has power.
    // |callback| : Called with the boolean result.
    static void isPowered(BooleanCallback callback);

    // Get the bluetooth address of the system's bluetooth module.
    // |callback| : Called with the address, or null if there was an error.
    static void getAddress(AddressCallback callback);

    // Get a list of bluetooth devices that support a service.
    // |service|  : The UUID of the desired service.
    // |callback| : Called with an array of Device objects, all of which
    //              provide a service with UUID equal to |uuid|.
    static void getDevicesWithServiceUUID(
        DOMString uuid, DevicesCallback callback);

    // Get a list of bluetooth devices that support a service.
    // |service|  : The name of the desired service.
    // |callback| : Called with an array of Device objects, all of which
    //              provide a service with name equal to |name|.
    static void getDevicesWithServiceName(
        DOMString name, DevicesCallback callback);

    // Connect to a service on a device.
    // |device|   : The target device.
    // |service|  : The target service UUID.
    // |callback| : Called when the connection is established with a Socket
    //              that can be used to communicate with |device|.
    static void connect(
        Device device, DOMString service, SocketCallback callback);

    // Close a bluetooth connection.
    // |socket|   : The socket to disconnect.
    // |callback| : Called to indicate success or failure.
    static void disconnect(Socket socket, optional ResultCallback callback);

    // Read data from a bluetooth connection.
    // |socket|   : The socket to read from.
    // |callback| : Called with the data when it is available.
    static void read(Socket socket, DataCallback callback);

    // Write data to a bluetooth connection.
    // |socket|   : The socket to write to.
    // |data|     : The data to write.
    // |callback| : Called with the number of bytes written.
    static void write(
        Socket socket, ArrayBuffer data, optional SizeCallback callback);

    // Get the local Out of Band Pairing data.
    // |callback| : Called with the data.
    static void getLocalOutOfBandPairingData(
        OutOfBandPairingDataCallback callback);

    // Set the Out Of Band Pairing Data for the bluetooth device at |address|.
    // Any previous Out Of Band Pairing Data for this device is overwritten.
    // |address|  : The bluetooth address of the device sending the data.
    // |data|     : The data.
    // |callback| : Called to indicate success or failure.
    static void setOutOfBandPairingData(
        DOMString address,
        OutOfBandPairingData data,
        optional ResultCallback callback);

    // Clear any Out Of Band Pairing Data for the bluetooth device at |address|.
    // |address|  : The bluetooth address for which data should be cleared.
    // |callback| : Called to indicate success or failure.
    static void clearOutOfBandPairingData(
        DOMString address,
        optional ResultCallback callback);
  };

  interface Events {
    // Fired when the availability of bluetooth on the system changes.
    // |available| : True if bluetooth is available, false otherwise.
    static void onAvailabilityChanged(boolean available);

    // Fired when the power state of bluetooth on the system changes.
    // |powered| : True if bluetooth is powered, false otherwise.
    static void onPowerChanged(boolean has_power);
  };
};
