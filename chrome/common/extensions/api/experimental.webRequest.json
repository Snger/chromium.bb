// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[
  {
    "namespace": "experimental.webRequest",
    "types": [
      {
        "id": "RequestMatcher",
        "type": "object",
        "description": "Matches network events by various criteria.",
        "properties": {
          "hostContains": {
            "type": "string",
            "description": "Matches if the host name of the URL contains a specified string.",
            "optional": true
          },
          "hostEquals": {
            "type": "string",
            "description": "Matches if the host name of the URL is equal to a specified string.",
            "optional": true
          },
          "hostPrefix": {
            "type": "string",
            "description": "Matches if the host name of the URL starts with a specified string.",
            "optional": true
          },
          "hostSuffix": {
            "type": "string",
            "description": "Matches if the host name of the URL ends with a specified string.",
            "optional": true
          },
          "pathContains": {
            "type": "string",
            "description": "Matches if the path segment of the URL contains a specified string.",
            "optional": true
          },
          "pathEquals": {
            "type": "string",
            "description": "Matches if the path segment of the URL is equal to a specified string.",
            "optional": true
          },
          "pathPrefix": {
            "type": "string",
            "description": "Matches if the path segment of the URL starts with a specified string.",
            "optional": true
          },
          "pathSuffix": {
            "type": "string",
            "description": "Matches if the path segment of the URL ends with a specified string.",
            "optional": true
          },
          "queryEquals": {
            "type": "string",
            "description": "Matches if the query segment of the URL is equal to a specified string.",
            "optional": true
          },
          "queryPrefix": {
            "type": "string",
            "description": "Matches if the query segment of the URL starts with a specified string.",
            "optional": true
          },
          "querySuffix": {
            "type": "string",
            "description": "Matches if the query segment of the URL ends with a specified string.",
            "optional": true
          },
          "urlSuffix": {
            "type": "string",
            "description": "Matches if the URL ends with a specified string.",
            "optional": true
          },
          "urlEquals": {
            "type": "string",
            "description": "Matches if the URL is equal to a specified string.",
            "optional": true
          },
          "urlPrefix": {
            "type": "string",
            "description": "Matches if the URL starts with a specified string.",
            "optional": true
          },
          "urlSuffix": {
            "type": "string",
            "description": "Matches if the URL ends with a specified string.",
            "optional": true
          },
          "schemes": {
            "type": "array",
            "description": "Matches if the scheme of the URL is equal to any of the schemes specified in the array.",
            "optional": true,
            "items": { "type": "string" }
          },
          "ports": {
            "type": "array",
            "description": "Matches if the port of the URL is contained in any of the specified port lists. For example <code>[80, 443, [1000, 1200]]</code> matches all requests on port 80, 443 and in the range 1000-1200.",
            "optional": true,
            "items": {
              "choices": [
                {"type": "integer", "description": "A specific port."},
                {"type": "array", "items": {"type": "integer"}, "description": "A pair of integers identiying the start and end (both inclusive) of a port range."}
              ]
            }
          },
          "resourceType": {
            "type": "array",
            "optional": true,
            "description": "Matches if the request type of a request is contained in the list. Requests that cannot match any of the types will be filtered out.",
            "items": { "type": "string", "enum": ["main_frame", "sub_frame", "stylesheet", "script", "image", "object", "xmlhttprequest", "other"] }
          },
          "instanceType": { "type": "string", "enum": ["experimental.webRequest.RequestMatcher"] }
        }
      },
      {
        "id": "CancelRequest",
        "description": "Declarative event action that cancels a network request.",
        "type": "object",
        "properties": {
          "instanceType": { "type": "string", "enum": ["experimental.webRequest.CancelRequest"] }
        }
      },
      {
        "id": "RedirectRequest",
        "description": "Declarative event action that redirects a network request. (TODO: add destination)",
        "type": "object",
        "properties": {
          "instanceType": { "type": "string", "enum": ["experimental.webRequest.RedirectRequest"] },
          "redirectUrl": { "type": "string", "description": "Destination to where the request is redirected."}
        }
      }
    ],
    "functions": [
    ],
    "events": [
      {
        "name": "onRequest",
        "options": {
          "supportsListeners": false,
          "supportsRules": true,
          "conditions": ["RequestMatcher"],
          "actions": ["CancelRequest", "RedirectRequest"]
        }
      }
    ]
  }
]
