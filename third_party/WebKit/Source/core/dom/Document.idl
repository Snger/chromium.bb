/*
 * Copyright (C) 2006, 2007, 2011 Apple Inc. All rights reserved.
 * Copyright (C) 2006, 2007 Samuel Weinig <sam@webkit.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

callback CustomElementConstructor = Element ();

typedef (CanvasRenderingContext2D or WebGLRenderingContext) RenderingContext;

// http://www.w3.org/TR/page-visibility/#VisibilityState
enum VisibilityState { "hidden", "visible", "prerender", "unloaded" };

// https://dom.spec.whatwg.org/#interface-document

[
    TypeChecking=Unrestricted,
] interface Document : Node {
    readonly attribute DOMImplementation implementation;
    readonly attribute DOMString URL;
    [ImplementedAs=url] readonly attribute DOMString? documentURI;
    readonly attribute DOMString origin;
    readonly attribute DOMString compatMode;
    readonly attribute DOMString? characterSet;
    [MeasureAs=DocumentInputEncoding, ImplementedAs=characterSet] readonly attribute DOMString? inputEncoding;
    readonly attribute DOMString contentType;

    readonly attribute DocumentType doctype;
    readonly attribute Element documentElement;
    HTMLCollection getElementsByTagName(DOMString localName);
    HTMLCollection getElementsByTagNameNS(DOMString? namespaceURI, DOMString localName);
    HTMLCollection getElementsByClassName(DOMString classNames);

    [CustomElementCallbacks, PerWorldBindings, RaisesException] Element createElement(DOMString tagName);
    [CustomElementCallbacks, RaisesException] Element createElementNS(DOMString? namespaceURI, DOMString qualifiedName);
    DocumentFragment createDocumentFragment();
    Text createTextNode(DOMString data);
    Comment createComment(DOMString data);
    [RaisesException] ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);

    [CustomElementCallbacks, RaisesException, TypeChecking=Interface] Node importNode(Node node, optional boolean deep = false);
    [RaisesException, CustomElementCallbacks, TypeChecking=Interface] Node adoptNode(Node node);

    [RaisesException, MeasureAs=DocumentCreateAttribute] Attr createAttribute(DOMString name);
    [RaisesException, MeasureAs=DocumentCreateAttributeNS] Attr createAttributeNS(DOMString? namespaceURI, DOMString? qualifiedName);

    [RaisesException] Event createEvent(DOMString eventType);

    Range createRange();

    // NodeFilter.SHOW_ALL = 0xFFFFFFFF
    [RaisesException, TypeChecking=Interface] NodeIterator createNodeIterator(Node root,
                                                                              optional unsigned long whatToShow = 0xFFFFFFFF,
                                                                              optional NodeFilter? filter = null);
    [RaisesException, TypeChecking=Interface] TreeWalker createTreeWalker(Node root,
                                                                          optional unsigned long whatToShow = 0xFFFFFFFF,
                                                                          optional NodeFilter? filter = null);

    // FIXME: CDATASection has been removed from the spec. crbug.com/437205
    [RaisesException, MeasureAs=DocumentCreateCDATASection] CDATASection createCDATASection(DOMString data); // Removed from DOM4.

    // FIXME: xmlEncoding/xmlVersion/xmlStandalone have been removed from the spec.
    [MeasureAs=DocumentXMLEncoding] readonly attribute DOMString? xmlEncoding; // Removed from DOM4.
    [RaisesException=Setter, MeasureAs=DocumentXMLVersion] attribute DOMString? xmlVersion; // Removed from DOM4.
    [RaisesException=Setter, MeasureAs=DocumentXMLStandalone] attribute boolean xmlStandalone; // Removed from DOM4.

    // https://dom.spec.whatwg.org/#interface-nonelementparentnode

    [PerWorldBindings] Element getElementById(DOMString elementId);

    // https://html.spec.whatwg.org/#the-document-object

    // resource metadata management
    [PutForwards=href, Unforgeable] readonly attribute Location location;
             [TreatNullAs=NullString, RaisesException=Setter] attribute DOMString domain;
    readonly attribute DOMString referrer;
             [TreatNullAs=NullString, RaisesException] attribute DOMString cookie;
    readonly attribute DOMString lastModified;
    [TreatReturnedNullStringAs=Undefined] readonly attribute DOMString readyState;

    // DOM tree accessors
             [TreatNullAs=NullString, CustomElementCallbacks] attribute DOMString title;
             [TreatNullAs=NullString, CustomElementCallbacks] attribute DOMString dir;
    [RaisesException=Setter, CustomElementCallbacks, PerWorldBindings, TypeChecking=Interface, ExposeJSAccessors] attribute HTMLElement? body;
    readonly attribute HTMLHeadElement head;
    readonly attribute HTMLCollection images;
    readonly attribute HTMLCollection embeds;
    [ImplementedAs=embeds] readonly attribute HTMLCollection plugins;
    readonly attribute HTMLCollection links;
    readonly attribute HTMLCollection forms;
    readonly attribute HTMLCollection scripts;
    [PerWorldBindings] NodeList getElementsByName(DOMString elementName);
    readonly attribute HTMLScriptElement currentScript;

    // user interaction
    [ImplementedAs=domWindow] readonly attribute Window defaultView;
    readonly attribute Element activeElement;
    boolean hasFocus();
             [TreatNullAs=NullString, CustomElementCallbacks] attribute DOMString designMode;
    [CustomElementCallbacks]
    boolean execCommand(DOMString command, optional boolean showUI = false, optional DOMString value = "");
    boolean queryCommandEnabled(DOMString command);
    boolean queryCommandIndeterm(DOMString command);
    boolean queryCommandState(DOMString command);
    boolean queryCommandSupported(DOMString command);
    DOMString queryCommandValue(DOMString command);

    // special event handler IDL attributes that only apply to Document objects
    attribute EventHandler onreadystatechange;

    // https://html.spec.whatwg.org/#Document-partial

    readonly attribute HTMLCollection anchors;
    readonly attribute HTMLCollection applets;

    // http://dev.w3.org/csswg/cssom/#extensions-to-the-document-interface
    readonly attribute StyleSheetList styleSheets;
             attribute DOMString? selectedStylesheetSet;
    readonly attribute DOMString? preferredStylesheetSet;

    // http://dev.w3.org/csswg/cssom-view/#extensions-to-the-document-interface
    Element            elementFromPoint(long x, long y);
    Element[]          elementsFromPoint(long x, long y);

    // http://w3c.github.io/selection-api/#extensions-to-document-interface
    Selection          getSelection();

    // https://dvcs.w3.org/hg/pointerlock/raw-file/default/index.html#extensions-to-the-document-interface
    attribute EventHandler onpointerlockchange;
    attribute EventHandler onpointerlockerror;
    [MeasureAs=DocumentPointerLockElement] readonly attribute Element pointerLockElement;
    [MeasureAs=DocumentExitPointerLock] void exitPointerLock();

    // http://www.w3.org/TR/touch-events/#extensions-to-the-document-interface
    [RuntimeEnabled=Touch] Touch createTouch([Default=Undefined] optional Window window,
                                             [Default=Undefined] optional EventTarget target,
                                             [Default=Undefined] optional long identifier,
                                             [Default=Undefined] optional unrestricted double pageX,
                                             [Default=Undefined] optional unrestricted double pageY,
                                             [Default=Undefined] optional unrestricted double screenX,
                                             [Default=Undefined] optional unrestricted double screenY,
                                             [Default=Undefined] optional unrestricted double webkitRadiusX,
                                             [Default=Undefined] optional unrestricted double webkitRadiusY,
                                             [Default=Undefined] optional unrestricted float webkitRotationAngle,
                                             [Default=Undefined] optional unrestricted float webkitForce);
    [RuntimeEnabled=Touch] TouchList createTouchList(Touch... touches);

    [RuntimeEnabled=Touch] attribute EventHandler ontouchstart;
    [RuntimeEnabled=Touch] attribute EventHandler ontouchend;
    [RuntimeEnabled=Touch] attribute EventHandler ontouchmove;
    [RuntimeEnabled=Touch] attribute EventHandler ontouchcancel;

    // http://w3c.github.io/webcomponents/spec/custom/#extensions-to-document-interface-to-register
    [CallWith=ScriptState, CustomElementCallbacks, RaisesException, MeasureAs=DocumentRegisterElement] CustomElementConstructor registerElement(DOMString name, optional ElementRegistrationOptions options);

    // http://w3c.github.io/webcomponents/spec/custom/#extensions-to-document-interface-to-instantiate
    [CustomElementCallbacks, PerWorldBindings, RaisesException] Element createElement(DOMString localName, DOMString? typeExtension);
    [CustomElementCallbacks, RaisesException] Element createElementNS(DOMString? namespaceURI, DOMString qualifiedName, DOMString? typeExtension);

    // http://www.w3.org/TR/page-visibility/#sec-document-interface
    readonly attribute boolean hidden;
    readonly attribute VisibilityState visibilityState;

    // Non-standard APIs
    [MeasureAs=DocumentGetOverrideStyle] CSSStyleDeclaration getOverrideStyle();
    [MeasureAs=DocumentCharset, TreatReturnedNullStringAs=Undefined, TreatNullAs=NullString] attribute DOMString charset;
    [MeasureAs=DocumentDefaultCharset, TreatReturnedNullStringAs=Undefined] readonly attribute DOMString defaultCharset;
    [MeasureAs=DocumentCaretRangeFromPoint]
    Range              caretRangeFromPoint([Default=Undefined] optional long x,
                                           [Default=Undefined] optional long y);
    [MeasureAs=DocumentGetCSSCanvasContext] RenderingContext getCSSCanvasContext(DOMString contextId, DOMString name, long width, long height);

    // Deprecated prefixed page visibility API.
    // TODO(davidben): This is a property so attaching a deprecation warning results in false positives when outputting
    // document in the console. It's possible http://crbug.com/43394 will resolve this.
    [MeasureAs=PrefixedPageVisibility, ImplementedAs=visibilityState] readonly attribute DOMString webkitVisibilityState;
    [MeasureAs=PrefixedPageVisibility, ImplementedAs=hidden] readonly attribute boolean webkitHidden;

    // Event handler attributes
    attribute EventHandler onbeforecopy;
    attribute EventHandler onbeforecut;
    attribute EventHandler onbeforepaste;
    attribute EventHandler oncopy;
    attribute EventHandler oncut;
    attribute EventHandler onpaste;
    attribute EventHandler onsearch;
    [RuntimeEnabled=ExperimentalContentSecurityPolicyFeatures] attribute EventHandler onsecuritypolicyviolation;
    attribute EventHandler onselectionchange;
    attribute EventHandler onselectstart;
    attribute EventHandler onwheel;
};

Document implements GlobalEventHandlers;
Document implements ParentNode;
