# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# force inclusion of entire library, so that we can validate it
# NOTE: This approach does not work for -lc because of tons of
#       undefined symbols which would have to be stubbed out
DEP_LIBS = ['nacl', 'srpc', 'imc_syscalls', 'platform', 'gio', 'pthread', 'm']

# -lgcc is not exposed to the bitcode in PNaCl
if env.Bit('bitcode'):
  LIBGCC = []
else:
  LIBGCC = ['-lgcc']

DEP_LINKFLAGS = (['-Wl,--whole-archive'] + LIBGCC +
                   ['-l' + name for name in DEP_LIBS] +
                   ['-Wl,--no-whole-archive'])

# All the libraries were already included via -l switches in LINKFLAGS.
# But we use them again in LIBS so scons knows about the dependencies.
# _LIBFLAGS is the internal variable that puts the expansion of LIBS
# into the command line; so by clearing that, we prevent scons from
# adding repeated -l switches at the end of the link.
nexe = env.ComponentProgram('dummy', 'dummy.c',
                            EXTRA_LINKFLAGS=DEP_LINKFLAGS,
                            LIBS=DEP_LIBS,
                            _LIBFLAGS='')
node = env.CommandValidatorTestNacl('whole_archive_test.out',
                                    image=nexe)
env.AddNodeToTestSuite(node,
                       ['toolchain_tests', 'small_tests'],
                       'run_whole_archive_test')


TESTS_TO_RUN = [
     # (src, exit_status, golden_file, cond),
     # The valus None for golden_file means no golden file, c.f.
     #  SConstruct::CommandTest()
     ('setlongjmp.c', '55', None, True),
     ('intrinsics.cc', '55', None, True),
     ('float2.c', '0', True, True),
     ('frame_addresses.c', '0', None, True),
     # NOTE: this test uses bitcode asm's
     ('llvm_math_intrinsics.c', '0', True, env.Bit('bitcode')),
     # NOTE: this test uses bitcode asm's
     ('llvm_bitmanip_intrinsics.c', '0', True, env.Bit('bitcode')),
]

for src, exit_status, golden_file, cond in TESTS_TO_RUN:
  if not cond: continue
  name = src.split('.')[0]
  if golden_file == True:
    golden_file = env.File(name + '.stdout')

  nexe = env.ComponentProgram(name, src, EXTRA_LIBS=['${NONIRT_LIBS}'])
  node = env.CommandSelLdrTestNacl(name + '.out',
                                   nexe,
                                   exit_status=exit_status,
                                   stdout_golden=golden_file)
  env.AddNodeToTestSuite(node,
                         ['toolchain_tests','small_tests'],
                         'run_' + name + '_test')


# initfini test
initfini_obj = env.ComponentObject('initfini.c')

def AddInitFiniTest(env, name, extra_libs):
  nexe = env.ComponentProgram(name,
                              [initfini_obj],
                              EXTRA_LIBS=extra_libs + ['${NONIRT_LIBS}'])
  golden_file = env.File(name + '.stdout')
  node = env.CommandSelLdrTestNacl(name + '.out',
                                   nexe,
                                   stdout_golden=golden_file)
  env.AddNodeToTestSuite(node,
                         ['toolchain_tests', 'small_tests'],
                         'run_' + name + '_test')

AddInitFiniTest(env, 'initfini_static', [])
if env.Bit('nacl_glibc') and not env.Bit('nacl_disable_shared'):
  # Additional case: Add initfini_shared.c as a shared object.
  # For a shared object, the init/fini arrays are executed by
  # the dynamic loader. This exercises a different code path.
  env.NaClSdkLibrary('initfini_s', 'initfini_shared.c')
  AddInitFiniTest(env, 'initfini_shared', ['initfini_s'])


if env.Bit('nacl_glibc'):
  bias_env = env.Clone()
  # PNaCl bias is needed until __jmp_buf (defined in bits/setjmp.h) has
  # the same size on X86-32 and X86-64.
  # BUG= http://code.google.com/p/nativeclient/issues/detail?id=2490
  if env.Bit('bitcode'):
    bias_env.AddBiasForPNaCl()
  nexe = bias_env.ComponentProgram('pthread_cleanup', 'pthread_cleanup.c',
                              EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])
  node = bias_env.CommandSelLdrTestNacl('pthread_cleanup.out', nexe)
  bias_env.AddNodeToTestSuite(node, ['toolchain_tests', 'small_tests'],
                              'run_pthread_cleanup_test')


# NOTE: the tests below break easily under valgrid and since
#       they do not exercise malloc/free we exclude
if env.IsRunningUnderValgrind():
  Return()


sloppy_env = env.Clone()
# return_address test has some casts the compiler does not like
sloppy_env.FilterOut(CFLAGS=['-pedantic'])
sloppy_env.FilterOut(CCFLAGS=['-pedantic'])

nexe = sloppy_env.ComponentProgram('return_address', 'return_address.c',
                                   EXTRA_LIBS=['${NONIRT_LIBS}'])
node = sloppy_env.CommandSelLdrTestNacl('return_address.out',
                                        nexe,
                                        exit_status='55')
sloppy_env.AddNodeToTestSuite(node,
                              ['toolchain_tests', 'small_tests'],
                              'run_return_address_test')

# NOTE: we assume that the incoming env contains '-O2', '-fomit-frame-pointer'
def MakeEnv(use_opts, use_frames):
  new_env = env.Clone()
  new_env.Append(CPPDEFINES=['TARGET_FULLARCH=${TARGET_FULLARCH}'])
  new_env.FilterOut(CFLAGS=['-pedantic'])
  new_env.FilterOut(CCFLAGS=['-pedantic'])
  if use_frames:
    new_env.FilterOut(CFLAGS=['-fomit-frame-pointer'])
    new_env.FilterOut(CCFLAGS=['-fomit-frame-pointer'])
  else:
    new_env.Append(CFLAGS=['-fomit-frame-pointer'])
    new_env.Append(CCFLAGS=['-fomit-frame-pointer'])
  if use_opts:
    new_env.Append(CFLAGS=['-O2'])
    new_env.Append(CCFLAGS=['-O2'])
  else:
    new_env.FilterOut(CFLAGS=['-O2'])
    new_env.FilterOut(CCFLAGS=['-O2'])
    new_env.FilterOut(LINKFLAGS=['-O3'])
  return new_env

ENVIRONMENTS_TO_TRY = [ ('noopt_frame', MakeEnv(False, True)),
                        ('noopt_noframe', MakeEnv(False, False)),
                        ('opt_frame', MakeEnv(True, True)),
                        ('opt_noframe', MakeEnv(True, False)),
                        ]

for tag, e in ENVIRONMENTS_TO_TRY:
  for src in ['unwind_trace.cc',
              'stack_frame.cc',
              'eh_return.c',
              'eh_virtual_dtor.cc',
              'eh_loop_single.cc',
              'eh_loop_many.cc',
              'eh_catch_many.cc',
              'eh_loop_break.cc',
              ]:
    is_broken = False
    if not env.Bit('bitcode') and src in ['stack_frame.cc']:
      # This tests makes pnacl specific assumptions which
      # may not hold for the nacl-gcc TC
      is_broken = True

    if not env.Bit('bitcode') and src in ['eh_return.c']:
      # for some reason gcc does not allow us to use
      #  __builtin_eh_return
      continue

    # BUG=http://code.google.com/p/nativeclient/issues/detail?id=2644
    if env.Bit('bitcode') and not env.Bit('target_x86_64'):
      is_broken = True

    name = src.split('.')[0] + '_' + tag
    nobj = e.ComponentObject(name + '.o', src)
    nexe = e.ComponentProgram(name, nobj, EXTRA_LIBS=['${NONIRT_LIBS}'])
    node = e.CommandSelLdrTestNacl(name + '.out',
                                   nexe,
                                   exit_status='55')
    e.AddNodeToTestSuite(node, ['toolchain_tests', 'small_tests'],
                         'run_' + name  +'_test', is_broken=is_broken)


abi_types_nexe = env.ComponentProgram('abi_types',
                                      'abi_types.cc',
                                      EXTRA_LIBS=['${NONIRT_LIBS}'])

node = env.CommandSelLdrTestNacl('abi_types_test.out',
                                 abi_types_nexe)
env.AddNodeToTestSuite(node,
                       ['toolchain_tests', 'small_tests'],
                       'run_abi_types_test')

strtoll_nexe = env.ComponentProgram('strtoll', 'strtoll.c',
                                    EXTRA_LIBS=['${NONIRT_LIBS}'])
node = env.CommandSelLdrTestNacl('strtoll.out', strtoll_nexe)
env.AddNodeToTestSuite(node,
                       ['toolchain_tests', 'small_tests'],
                       'run_strtoll_test')

strtoull_nexe = env.ComponentProgram('strtoull', 'strtoull.c',
                                    EXTRA_LIBS=['${NONIRT_LIBS}'])
node = env.CommandSelLdrTestNacl('strtoull.out', strtoull_nexe)
env.AddNodeToTestSuite(node,
                       ['toolchain_tests', 'small_tests'],
                       'run_strtoull_test')

wcstoll_nexe = env.ComponentProgram('wcstoll', 'wcstoll.c',
                                    EXTRA_LIBS=['${NONIRT_LIBS}'])
node = env.CommandSelLdrTestNacl('wcstoll.out', wcstoll_nexe)
env.AddNodeToTestSuite(node,
                       ['toolchain_tests', 'small_tests'],
                       'run_wcstoll_test',
                       is_broken=env.Bit('nacl_glibc'))
