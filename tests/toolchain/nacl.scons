# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# force inclusion of entire library, so that we can validate it
# NOTE: This approach does not work for -lc because of tons of
#       undefined symbols which would have to be stubbed out
wa_env = env.Clone()
if not wa_env.Bit('bitcode'):
  # NOTE: the pnacl linker does not understand '-Wl,-whole-archive'
  # c.f. http://code.google.com/p/nativeclient/issues/detail?id=943
  wa_env.Prepend(LINKFLAGS=['-Wl,-whole-archive',
                            '-lgcc',
                            '-lm',
                            '-lnacl',
                            '-lsrpc',
                            '-limc_syscalls',
                            '-lplatform',
                            '-lgio',
                            '-lpthread',
                            '-Wl,-no-whole-archive'])


nexe = wa_env.ComponentProgram('dummy', 'dummy.c')
node = wa_env.CommandValidatorTestNacl('whole_archive_test.out',
                                       image=[nexe])
wa_env.AddNodeToTestSuite(node,
                          ['toolchain_tests', 'small_tests'],
                          'run_whole_archive_test')

nexe = env.ComponentProgram('setlongjmp', 'setlongjmp.c')
node = env.CommandSelLdrTestNacl('setlongjmp.out',
                                 nexe,
                                 exit_status='55')
env.AddNodeToTestSuite(node,
                       ['toolchain_tests','small_tests'],
                       'run_setlongjmp_test')

nexe = env.ComponentProgram('intrinsics', 'intrinsics.cc')
node = env.CommandSelLdrTestNacl('intrinsics.out',
                                 nexe,
                                 exit_status='55')
env.AddNodeToTestSuite(node,
                       ['toolchain_tests','small_tests'],
                       'run_intrinsics_test')

nexe = env.ComponentProgram('float2', 'float2.c')
node = env.CommandSelLdrTestNacl('float2.out',
                                 nexe,
                                 stdout_golden=env.File('float2.stdout'))
env.AddNodeToTestSuite(node,
                       ['toolchain_tests','small_tests'],
                       'run_float2_test')


if env.Bit('bitcode'):
  # NOTE: this test uses bitcode asm's
  nexe = env.ComponentProgram('llvm_math_intrinsics', 'llvm_math_intrinsics.c')
  node = env.CommandSelLdrTestNacl(
      'llvm_math_intrinsics.out',
      nexe,
      stdout_golden=env.File('llvm_math_intrinsics.stdout'))
  env.AddNodeToTestSuite(node,
                         ['toolchain_tests','small_tests'],
                         'run_llvm_math_intrinsics_test')


nexe = env.ComponentProgram('initfini', 'initfini.c')
node = env.CommandSelLdrTestNacl('initfini.out',
                                 nexe,
                                 stdout_golden=env.File('initfini.stdout'))

# NOTE: this currently only works for PNaCl, c.f:
# http://code.google.com/p/nativeclient/issues/detail?id=968
env.AddNodeToTestSuite(node, ['toolchain_tests', 'small_tests'],
                       'run_initfini_test', is_broken=not env.Bit('bitcode'))


# NOTE: the tests below break easily under valgrid and since
#       they do not exercise malloc/free we exclude
if env.IsRunningUnderValgrind():
  Return()


sloppy_env = env.Clone()
# return_address test has some casts the compiler does not like
sloppy_env.FilterOut(CFLAGS=['-pedantic', '-O2'])
sloppy_env.FilterOut(CCFLAGS=['-pedantic', '-O2'])
# lto inlining breaks this test
if env.Bit('bitcode'):
  sloppy_env.FilterOut(LINKFLAGS=['-O3'])

nexe = sloppy_env.ComponentProgram('return_address', 'return_address.c')
node = sloppy_env.CommandSelLdrTestNacl('return_address.out',
                                        nexe,
                                        exit_status='55')
sloppy_env.AddNodeToTestSuite(node,
                              ['toolchain_tests', 'small_tests'],
                              'run_return_address_test')

# NOTE: we assume that the incoming env contains '-O2', '-fomit-frame-pointer'
def MakeEnv(use_opts, use_frames):
  new_env = env.Clone()
  new_env.Append(CPPDEFINES=['TARGET_FULLARCH=${TARGET_FULLARCH}'])
  new_env.FilterOut(CFLAGS=['-pedantic'])
  new_env.FilterOut(CCFLAGS=['-pedantic'])
  if use_frames:
    new_env.FilterOut(CFLAGS=['-fomit-frame-pointer'])
    new_env.FilterOut(CCFLAGS=['-fomit-frame-pointer'])
  else:
    new_env.Append(CFLAGS=['-fomit-frame-pointer'])
    new_env.Append(CCFLAGS=['-fomit-frame-pointer'])
  if use_opts:
    new_env.Append(CFLAGS=['-O2'])
    new_env.Append(CCFLAGS=['-O2'])
    # TODO(dschuff) remove this once we merge closer to tip and fix bug 1941
    if env.Bit('bitcode'):
      new_env.Append(LINKFLAGS=['-Wl,--add-opt-option=-std-compile-opts'])
  else:
    new_env.FilterOut(CFLAGS=['-O2'])
    new_env.FilterOut(CCFLAGS=['-O2'])
    new_env.FilterOut(LINKFLAGS=['-O3'])
  return new_env

ENVIRONMENTS_TO_TRY = [ ('noopt_frame', MakeEnv(False, True)),
                        ('noopt_noframe', MakeEnv(False, False)),
                        ('opt_frame', MakeEnv(True, True)),
                        ('opt_noframe', MakeEnv(True, False)),
                        ]

for tag, e in ENVIRONMENTS_TO_TRY:
  for src in ['unwind_trace.cc',
              # TODO(mcgrathr): This test has bad assumptions and needs
              # to be rewritten.  Disabling it for now.
              # 'stack_frame.cc',
              'eh_virtual_dtor.cc',
              'eh_loop_single.cc',
              'eh_loop_many.cc',
              'eh_catch_many.cc',
              'eh_loop_break.cc']:
    is_broken = False
    if src in ['unwind_trace.cc', 'stack_frame.cc']:
      # the tracing gets messed up by optimizations
      is_broken |= tag.startswith('opt')

    name = src.split('.')[0] + '_' + tag
    nobj = e.ComponentObject(name + '.o', src)
    nexe = e.ComponentProgram(name, nobj)
    node = e.CommandSelLdrTestNacl(name + '.out',
                                   nexe,
                                   exit_status='55')
    e.AddNodeToTestSuite(node, ['toolchain_tests', 'small_tests'],
                         'run_' + name  +'_test', is_broken=is_broken)
