# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

srpc_hw_libs = ['srpc', 'platform', 'gio', 'imc', 'imc_syscalls']

srpc_hw_obj = env.ComponentObject('srpc_hw.o', 'srpc_hw.c')
srpc_hw_nexe_name = 'srpc_hw_%s' % env.get('TARGET_FULLARCH')
srpc_hw_nexe = env.ComponentProgram(srpc_hw_nexe_name,
                                    srpc_hw_obj,
                                    EXTRA_LIBS=srpc_hw_libs + [
                                        '${PTHREAD_LIBS}',
                                        '${NON_PPAPI_BROWSER_LIBS}'])

env.Publish(srpc_hw_nexe_name, 'run',
            ['srpc_hw.html',
             'srpc_hw.nmf',
             'srpc_hw_data.html'])

srpc_hw_nonbrowser = env.ComponentProgram('srpc_hw_nonbrowser',
                                           srpc_hw_obj,
                                           EXTRA_LIBS=srpc_hw_libs + [
                                               '${PTHREAD_LIBS}',
                                               '${NONIRT_LIBS}'])

node = env.SelUniversalTest(
    'srpc_hw_test.out',
    srpc_hw_nonbrowser,
    sel_universal_flags=['--command_file', env.File('srpc_hw_test.stdin')],
    stdout_golden=env.File('srpc_hw_test.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['small_tests'],
                       'run_srpc_hw_test')

# chrome_browser_tests

node = env.PPAPIBrowserTester(
    'srpc_hw_browser_test.out',
    url='srpc_hw.html',
    files=env.ExtractPublishedFiles(srpc_hw_nexe_name),
    args=['--debug', '--enable_experimental_js'])

env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_hw_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

# A test that manifests can be coded by data URIs.
node = env.PPAPIBrowserTester(
    'srpc_hw_data_browser_test.out',
    url='srpc_hw_data.html',
    files=env.ExtractPublishedFiles(srpc_hw_nexe_name),
    # have to hardcode the port so the data URI can encode an absolute path
    args=['--debug', '--enable_experimental_js'])

env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_hw_data_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())
