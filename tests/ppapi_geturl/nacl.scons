# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

# This is a C PPAPI-based version of ../npapi_geturl.
#
# ppapi_geturl.html - test driver that loads the nexe and scripts it
# ppapi_geturl_success.html - to be url-loaded and displayed w/n driver html
#
# ppapi_geturl.cc - implementation of PPP interface
# module.h/cc - implementation of PPP_Instance interface
# scriptable_object.h/cc - implementation of the scripting interface
# url_load_request.h/cc - url loading helper
# nacl_file_main.cc - uses main() to test NaClFile interface

Import('env')

env.Prepend(CPPDEFINES=['XP_UNIX'])

ppapi_geturl_target = 'ppapi_geturl_%s.nexe' % env.get('TARGET_FULLARCH')
env.Alias('ppapi_geturl.nexe', ['$STAGING_DIR/%s' % ppapi_geturl_target])

ppapi_geturl_nexe = env.ComponentProgram(ppapi_geturl_target,
                                         ['nacl_file_main.cc',
                                          'module.cc',
                                          'ppapi_geturl.cc',
                                          'scriptable_object.cc',
                                          'url_load_request.cc',
                                          ],
                                         EXTRA_LIBS=['nacl_file',
                                                     'ppruntime',
                                                     'imc',
                                                     'platform',
                                                     'gio',
                                                     'pthread',
                                                     'm',
                                                     'srpc'])

# Note that the html and a .nmf manifest is required to run this program.
dest_copy = env.Replicate('$STAGING_DIR',
            ['ppapi_geturl.html',
             'ppapi_geturl.nmf',
             'ppapi_geturl_success.html',
             env.File('${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/'
                      'nacltest.js'),
             ])
env.Depends(ppapi_geturl_target, dest_copy)

node = env.PPAPIBrowserTester(
    'ppapi_geturl_browser_test.out',
     url='ppapi_geturl.html',
     files=[ppapi_geturl_nexe,
            env.File('ppapi_geturl.html'),
            env.File('ppapi_geturl.nmf'),
            env.File('ppapi_geturl_success.html'),
            env.File('${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/'
                     'nacltest.js'),
            ],
     args=['--allow_404'],
     )
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_ppapi_geturl_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken()
                       )

for suffix in ['valid', 'invalid']:
  basename = 'ppapi_geturl_' + suffix
  node = env.SelUniversalTest(
      basename + '.out',
      sel_universal_flags=['--silenence_nexe',
                           '--command_file',
                           env.File('${SCONSTRUCT_DIR}/tests/ppapi_proxy'
                                    '/sel_universal_ppapi_replay_prolog.stdin'),
                           '--command_file',
                           env.File(basename + '.stdin'),
                           ],
      command=[ppapi_geturl_nexe],
      stdout_golden=env.File(basename + '.stdout'),
      # filter out a line that contains unpredictable values
      filter_regex="'ScriptableObject::Call'",
      filter_inverse='true',
      )

  # Note: we use the sysv shm feature in sel_universal which is only available
  # on linux.
  env.AddNodeToTestSuite(node,
                         ['small_tests', 'sel_ldr_tests'],
                         'run_' + basename + '_test')
