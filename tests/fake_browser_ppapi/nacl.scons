# -*- python -*-
# Copyright 2009 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

if 'TRUSTED_ENV' not in env:
  Return()

if env['TARGET_ARCHITECTURE'] == 'arm':
  # The test fails in our ARM cross-compile/QEMU environment, but only
  # because the environment lacks libraries, which causes the dlopen()
  # to fail.
  Return()

trusted_env = env['TRUSTED_ENV'].Clone()

if not trusted_env.Bit('mac'):
  trusted_env['COMPONENT_STATIC'] = False


if trusted_env.Bit('linux'):
    trusted_env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        # Catch unresolved symbols in libraries.
        LINKFLAGS=['-Wl,-z,defs'],
        )

    # We usually try to build things statically, but the plugin is a .so
    trusted_env.FilterOut(LINKFLAGS=['-static'])
    trusted_env.Replace(LIBS=['dl', 'pthread', '$OPTIONAL_COVERAGE_LIBS'])

if trusted_env.Bit('windows'):
    trusted_env.Append(
        CCFLAGS = ['/EHsc',],
        CPPDEFINES = ['WIN32', '_WINDOWS'],
    )
    trusted_env.Tool('atlmfc_vc80')

# TODO(sehr,polina): when the plugin is built on Win/Mac, enable this test.
if not trusted_env.Bit('linux'):
  Return()


trusted_env.Append(LIBS=['ppapi_browser', 'ppapi_plugin', 'platform', 'gio'])

fake_browser = trusted_env.ComponentProgram('fake_browser_ppapi',
                                            ['fake_core.cc',
                                             'fake_host.cc',
                                             'fake_instance.cc',
                                             'fake_object.cc',
                                             'fake_window.cc',
                                             'main.cc'])

if trusted_env.Bit('mac'):
  plugin = trusted_env.File('${STAGING_DIR}/ppNaClPlugin')
else:
  plugin = trusted_env.File('${STAGING_DIR}/${SHLIBPREFIX}'
                            'ppNaClPlugin${SHLIBSUFFIX}')
sel_ldr = trusted_env.File('${STAGING_DIR}/${PROGPREFIX}sel_ldr${PROGSUFFIX}')
log_file = env.File('fake_browser_ppapi.out').abspath

node = env.CommandTest('fake_browser_ppapi.out',
                       [fake_browser[0],
                        plugin,
                        'http://localhost:5103/srpc_hw.html',
                        '"id=nacl_module;src=srpc_hw.nexe"',
                        '${STAGING_DIR}'
                       ],
                       'medium',
                       osenv=('NACL_SEL_LDR=%s,NACLLOG=%s'
                              % (sel_ldr, log_file)),
                       extra_deps=[sel_ldr])

env.AddNodeToTestSuite(node, ['medium_tests'], 'run_fake_browser_ppapi_test')
