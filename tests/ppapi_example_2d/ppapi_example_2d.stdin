# First register a bunch of dummy replays with zero count
# so that those signatures will get registered during "install_upcalls"
# Note: because of the zero count we do not have to get the parameters right
#
# Enumerating all known methods ahead of time helps in many ways:
# * we can delay registering non zero count replays till later which help
#   readability
# * we get an error if for some reason the nexe calls one of these functions.
#   Sadly, the nexe usually fails silently when a method is missing from a
#   service
#
# On the downside, this is currently replicated and must be updated by hand
# when signatures change.

replay 0 HasProperty:CCC:iC *
replay 0 HasMethod:CCC:iC *
replay 0 GetProperty:CCC:CC *
replay 0 GetAllPropertyNames:CC:iCC *
replay 0 SetProperty:CCCC:C *
replay 0 RemoveProperty:CCC:C *
replay 0 Call:CCiCC:CC *
replay 0 Construct:CiCC:CC *
replay 0 Deallocate:C: *
replay 0 PPB_GetInterface:s:i *

replay 0 PPB_Audio_Dev_Create:ii:i *
replay 0 PPB_Audio_Dev_IsAudio:i:i *
replay 0 PPB_Audio_Dev_GetCurrentConfig:i:i *
replay 0 PPB_Audio_Dev_StopPlayback:i:i *
replay 0 PPB_Audio_Dev_StartPlayback:i:i *

replay 0 PPB_AudioConfig_Dev_CreateStereo16Bit:lii:l *
replay 0 PPB_AudioConfig_Dev_IsAudioConfig:l:i *
replay 0 PPB_AudioConfig_Dev_RecommendSampleFrameCount:i:i *
replay 0 PPB_AudioConfig_Dev_GetSampleRate:l:i *
replay 0 PPB_AudioConfig_Dev_GetSampleFrameCount:l:i *

replay 0 PPB_Core_AddRefResource:i: *
replay 0 PPB_Core_ReleaseResource:i: *
replay 0 PPB_Core_GetTime::d *
replay 0 ReleaseResourceMultipleTimes:ii: *

replay 0 PPB_Graphics2D_Create:iCi:i *
replay 0 PPB_Graphics2D_IsGraphics2D:i:i *
replay 0 PPB_Graphics2D_Describe:i:Cii *
replay 0 PPB_Graphics2D_PaintImageData:iiCC: *
replay 0 PPB_Graphics2D_Scroll:iCC: *
replay 0 PPB_Graphics2D_ReplaceContents:ii: *
replay 0 PPB_Graphics2D_Flush:ii:i *

replay 0 PPB_ImageData_GetNativeImageDataFormat::i *
replay 0 PPB_ImageData_IsImageDataFormatSupported:i:i *
replay 0 PPB_ImageData_Create:iiCi:i *
replay 0 PPB_ImageData_IsImageData:i:i *
replay 0 PPB_ImageData_Describe:i:Chii *

replay 0 PPB_Instance_GetWindowObject:i:C *
replay 0 PPB_Instance_GetOwnerElementObject:i:C *
replay 0 PPB_Instance_BindGraphics:ii:i *
replay 0 PPB_Instance_IsFullFrame:i:i *
replay 0 PPB_Instance_ExecuteScript:iCC:CC *

replay 0 PPB_URLRequestInfo_Create:i:l *
replay 0 PPB_URLRequestInfo_IsURLRequestInfo:i:i *
replay 0 PPB_URLRequestInfo_SetProperty:iiC:i *
replay 0 PPB_URLRequestInfo_AppendDataToBody:iC:i *
replay 0 PPB_URLRequestInfo_AppendFileToBody:illld:i *

replay 0 PPB_URLLoader_Open:iii:i *
replay 0 PPB_URLLoader_FollowRedirect:ii:i *
replay 0 PPB_URLLoader_GetUploadProgress:i:lli *
replay 0 PPB_URLLoader_GetDownloadProgress:i:lli *
replay 0 PPB_URLLoader_ReadResponseBody:iii:Ci *
replay 0 PPB_URLLoader_Close:i: *

replay 0 PPB_URLResponseInfo_IsURLResponseInfo:i:i *
replay 0 PPB_URLResponseInfo_GetProperty:ii:C *
replay 0 PPB_URLResponseInfo_GetBodyAsFileRef:i:l *

# define a bunch of variables for readability

set_variable MODULE i(4444)
set_variable INSTANCE i(5555)
# PP_Size
set_variable IMG_FMT  R(8,4:400,4:400)
set_variable IMG_HANDLE i(7)
set_variable GRAPHICS_HANLDE i(8)
# PP_ImageDataDesc
set_variable IMG_FMT2 R(16,4:0,4:400,4:400,4:1600)
set_variable IMG_SIZE 64000
# PP_Size
set_variable GRAPHICS_FMT  R(8,4:400,4:400)

# Register signatures found in all previous replay commands for export
# via install_upcalls
echo
echo "*** REGISTER REPLAY METHODS"
replay_activate

# This is not strictly necessary
echo
echo "*** INITIALIZE PEPPER"
initialize_pepper pepper_desc

# create a upcall service on the channel between nexe and sel_univeral
echo
echo "*** CREATE UPCALL SERVICE"
install_upcalls service_string

echo
echo "*** INIT MODULE"
replay 1 PPB_GetInterface:s:i  s("PPB_Core;0.3") * i(1)
replay 1 PPB_GetInterface:s:i  s("PPB_Instance;0.4") * i(1)
replay 1 PPB_GetInterface:s:i  s("PPB_ImageData;0.3") * i(1)
replay 1 PPB_GetInterface:s:i  s("PPB_Graphics2D;0.3") * i(1)
rpc PPP_InitializeModule i(0) ${MODULE} h(pepper_desc) s("${service_string}") * i(0) i(0)

echo
echo "*** INIT INSTANCE"
set_variable TAGS C(23,id\000name\000src\000style\000type\000)
set_variable VALUES C(74,naclModule\000naclModule\000ppapi.nexe\000background-color:gray\000application/x-nacl\000)

# The PPP_GetInterface() call is probably not necessary, we just emulate what
# happens in real life
rpc PPP_GetInterface s("PPP_Instance;0.4") * i(0)
rpc PPP_Instance_DidCreate ${INSTANCE} i(5) ${TAGS} ${VALUES} * i(0)

echo
echo "*** SETTTING UP VIDEO MEMORY"
shmem video_handle video_address 65536
memset ${video_address} 0  ${IMG_SIZE} 0
checksum ${video_address} 0 ${IMG_SIZE}

echo
echo "*** TRIGGER REPAINT"
replay 1 PPB_ImageData_Create:iiCi:i ${INSTANCE} i(0) ${IMG_FMT} i(1) * ${IMG_HANDLE}
replay 1 PPB_ImageData_Describe:i:Chii ${IMG_HANDLE} * ${IMG_FMT2} h(video_handle) i(${IMG_SIZE}) i(1)
replay 1 PPB_Graphics2D_Create:iCi:i ${INSTANCE} ${GRAPHICS_FMT} i(0) * ${GRAPHICS_HANLDE}
replay 1 PPB_Instance_BindGraphics:ii:i ${INSTANCE} ${GRAPHICS_HANLDE} * i(1)
replay 1 PPB_Graphics2D_ReplaceContents:ii:  ${GRAPHICS_HANLDE}  ${IMG_HANDLE} *
replay 1 PPB_Graphics2D_Flush:ii:i ${GRAPHICS_HANLDE} i(1) * i(-1)
replay 1 ReleaseResourceMultipleTimes:ii:  ${IMG_HANDLE} i(1) *
rpc PPP_Instance_DidChangeView ${INSTANCE} I(4,8,79,400,400) I(4,0,0,400,400) *

echo
echo "*** CHECKING MEMORY"
checksum ${video_address} 0 ${IMG_SIZE}

rpc PPP_ShutdownModule *
