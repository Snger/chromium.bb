# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

if 'TRUSTED_ENV' not in env:
  Return()

# TODO(mseaborn): Enable this test on ARM.
# See http://code.google.com/p/nativeclient/issues/detail?id=3092
if env.Bit('target_arm'):
  Return()

# We need -O0 to make stepping predictable and read local variables/function
# arguments that may otherwise be optimized out.
env.Append(CCFLAGS=['-O0', '-g', '-fno-omit-frame-pointer'])
# We need to disable PNaCl's link time optimizations so that functions
# do not get inlined, so that we can set breakpoints on these
# functions.
env.Append(LINKFLAGS=['-O0'])

sel_ldr = env.GetSelLdr()

env_vars = [
    'OUT_DIR=%s' % env.subst('${TARGET_ROOT}/test_results'),
    'NACL_SEL_LDR=%s' % sel_ldr,
    'NACL_GDB=%s' % env['GDB'],
    ]
extra_deps = [sel_ldr]
if env.Bit('tests_use_irt'):
  irt = env.GetIrtNexe()
  env_vars += ['NACL_IRT=%s' % irt]
  extra_deps += [irt]
if not env.Bit('nacl_static_link'):
  env_vars += ['NACL_LD_SO=%s' % env.subst('${NACL_SDK_LIB}/runnable-ld.so'),
               'NACL_LIBS=%s' % env['NACL_SDK_LIB']]

test_suites = ['medium_tests', 'gdb_tests']


gdb_test_guest = env.ComponentProgram(
    'gdb_test_guest', 'gdb_test_guest.c',
    EXTRA_LIBS=['${NONIRT_LIBS}'])
if env.ShouldTranslateToNexe(gdb_test_guest):
  gdb_test_guest = env.GetTranslatedNexe(gdb_test_guest)

node = env.CommandTest(
    'gdb_stepi_after_break.out',
    command=['${PYTHON}', env.File('stepi_after_break.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest.abspath],
    extra_deps=extra_deps + [gdb_test_guest])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_stepi_after_break_test')
env.TestBindsFixedTcpPort(node)

node = env.CommandTest(
    'gdb_print_symbol.out',
    command=['${PYTHON}', env.File('print_symbol.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest.abspath],
    extra_deps=extra_deps + [gdb_test_guest])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_print_symbol_test')
env.TestBindsFixedTcpPort(node)

node = env.CommandTest(
    'gdb_stack_trace.out',
    command=['${PYTHON}', env.File('stack_trace.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest.abspath],
    extra_deps=extra_deps + [gdb_test_guest])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_stack_trace_test')
env.TestBindsFixedTcpPort(node)

node = env.CommandTest(
    'gdb_step_from_func_start.out',
    command=['${PYTHON}', env.File('step_from_func_start.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest.abspath],
    extra_deps=extra_deps + [gdb_test_guest])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_step_from_func_start_test')
env.TestBindsFixedTcpPort(node)

node = env.CommandTest(
    'gdb_call_from_gdb.out',
    command=['${PYTHON}', env.File('call_from_gdb.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest.abspath],
    extra_deps=extra_deps + [gdb_test_guest])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_call_from_gdb_test')
env.TestBindsFixedTcpPort(node)

node = env.CommandTest(
    'gdb_change_variable.out',
    command=['${PYTHON}', env.File('change_variable.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest.abspath],
    extra_deps = extra_deps + [gdb_test_guest])

# This test does not pass with PNaCl yet.
# TODO(mseaborn): Debug this and enable the test on PNaCl.
env.AddNodeToTestSuite(node, test_suites, 'run_gdb_change_variable_test',
                       is_broken=env.Bit('bitcode'))
env.TestBindsFixedTcpPort(node)

# GDB treats multithreaded programs specially. Provide distinct nexe for
# multithreaded tests to isolate multiple threads-specific issues.
gdb_test_guest_thread = env.ComponentProgram(
    'gdb_test_guest_thread', 'gdb_test_guest_thread.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])
if env.ShouldTranslateToNexe(gdb_test_guest_thread):
  gdb_test_guest_thread = env.GetTranslatedNexe(gdb_test_guest_thread)

node = env.CommandTest(
    'gdb_break_continue_thread.out',
    command=['${PYTHON}', env.File('break_continue_thread.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest_thread.abspath],
    extra_deps=extra_deps + [gdb_test_guest_thread])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_break_continue_thread_test')
env.TestBindsFixedTcpPort(node)

node = env.CommandTest(
    'gdb_syscall_thread.out',
    command=['${PYTHON}', env.File('syscall_thread.py')],
    osenv=env_vars + ['GDB_TEST_GUEST=%s' % gdb_test_guest_thread.abspath],
    extra_deps=extra_deps + [gdb_test_guest_thread])

env.AddNodeToTestSuite(node, test_suites, 'run_gdb_syscall_thread_test')
env.TestBindsFixedTcpPort(node)
