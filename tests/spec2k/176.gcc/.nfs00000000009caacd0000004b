	.file	"../gcc.spec/gcc.arm.noopt.bc"
	.macro emit_illegal_if_at_bundle_begining
	.set bundle_offset, (. - .XmagicX) % 16
	.fill  (1 >> bundle_offset)  , 4, 0xe1277777
	.endm


	.macro emit_nop_if_at_bundle_end
	.set bundle_offset, (. - .XmagicX) % 16
	.fill  bundle_offset / 12 , 4, 0xe1a00000
	.endm


	.macro emit_nops_till_bundle_end
	.set bundle_offset, (. - .XmagicX) % 16
	.fill  (12 - bundle_offset) / 4, 4, 0xe1a00000
	.endm


	.macro emit_data_mask reg cond
	bic\cond \reg, \reg, #0x80000000
	.endm


	.macro emit_code_mask reg cond=
	bic\cond \reg, \reg, #0xf000000f
	.endm


 @ ========================================
	.macro sfi_add rega regb imm rot=0
	emit_nop_if_at_bundle_end
	add \rega, \regb, \imm, \rot
	emit_data_mask \rega
	.endm


	.macro sfi_addeq rega regb imm rot=0
	emit_nop_if_at_bundle_end
	addeq \rega, \regb, \imm, \rot
	emit_data_mask \rega, eq
	.endm


	.macro sfi_addne rega regb imm rot=0
	emit_nop_if_at_bundle_end
	addne \rega, \regb, \imm, \rot
	emit_data_mask \rega, ne
	.endm


	.macro sfi_addlt rega regb imm rot=0
	emit_nop_if_at_bundle_end
	addne \rega, \regb, \imm, \rot
	emit_data_mask \rega, lt
	.endm


	.macro sfi_addge rega regb imm rot=0
	emit_nop_if_at_bundle_end
	addne \rega, \regb, \imm, \rot
	emit_data_mask \rega, ge
	.endm


	.macro sfi_addhs rega regb imm rot=0
	emit_nop_if_at_bundle_end
	addne \rega, \regb, \imm, \rot
	emit_data_mask \rega, hs
	.endm


 @ ========================================
	.macro sfi_sub rega regb imm rot=0
	emit_nop_if_at_bundle_end
	sub \rega, \regb, \imm, \rot
	emit_data_mask \rega
	.endm


	.macro sfi_subeq rega regb imm rot=0
	emit_nop_if_at_bundle_end
	sub \rega, \regb, \imm, \rot
	emit_data_mask \rega, eq
	.endm


	.macro sfi_subne rega regb imm rot=0
	emit_nop_if_at_bundle_end
	sub \rega, \regb, \imm, \rot
	emit_data_mask \rega, ne
	.endm


 @ ========================================
	.macro sfi_bx link
	emit_nop_if_at_bundle_end
	emit_code_mask \link
	bx \link
	.endm


 @ ========================================
	.text
	.fill 4, 4, 0x45464143 @ ========== SFI
	.align 4
.XmagicX:


	.text
	.globl	yyparse
	.align	4
yyparse:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add r11, sp, #28
	sfi_sub sp, sp, #220
	sfi_sub sp, sp, #1, 22 @ 1024
	ldr r3, .LCPI1_115
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_2	@ bb15
.LBB1_1:	@ bb
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_116
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_2:	@ bb15
	ldr r3, .LCPI1_117
	mov r2, #0
	@comment
str r2, [r11, #-1260]
	@comment
str r2, [r3]
	ldr r3, .LCPI1_118
	mvn r1, #1
	@comment
str r1, [r3]
	sub r0, r11, #1, 22 @ 1024
	sub r3, r0, #216
	@comment
str r3, [r11, #-1256]
	sub r3, r3, #2
	@comment
str r3, [r11, #-1248]
	mov r3, #200
	@comment
str r3, [r11, #-1252]
	sub r3, r11, #210, 30 @ 840
	@comment
str r3, [r11, #-1268]
	@comment
str r2, [r11, #-1264]
	mov r4, r3
	mov r5, r2
.LBB1_3:	@ yynewstate.outer
	ldr r1, [r11, #-1256]
.LBB1_4:	@ yynewstate
	ldr r3, [r11, #-1252]
	add r3, r1, r3, lsl #1
	sub r3, r3, #2
	ldr r2, [r11, #-1248]
	strh r5, [r2, #+2]!
	@comment
str r2, [r11, #-1248]
	cmp r3, r2
	bhi .LBB1_10	@ bb24
.LBB1_5:	@ bb16
	ldr r4, [r11, #-1248]
	sub r4, r4, r1
	mov r3, #1
	add r6, r3, r4, asr #1
	mov r4, r4, asr #1
	ldr r2, [r11, #-1252]
	ldr r3, .LCPI1_119
	cmp r2, r3
	bge .LBB1_636	@ bb17
.LBB1_6:	@ bb18
	ldr r7, [r11, #-1252]
	mov r7, r7, lsl #1
	ldr r3, .LCPI1_119
	cmp r7, r3
	movgt r7, r3
	@comment
str r7, [r11, #-1252]
	sub r8, sp, r7, lsl #1
	mov sp, r8
	mov r2, r6, lsl #1
	mov r0, r8
	emit_nops_till_bundle_end
	bl memcpy
	bic r3, sp, #7
	sub r7, r3, r7, lsl #2
	mov sp, r7
	mov r2, r6, lsl #2
	mov r0, r7
	ldr r1, [r11, #-1268]
	emit_nops_till_bundle_end
	bl memcpy
	add r3, r8, r4, lsl #1
	@comment
str r3, [r11, #-1248]
	add r4, r7, r4, lsl #2
	ldr r3, .LCPI1_115
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_8	@ bb22
.LBB1_7:	@ bb21
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_120
	ldr r2, [r11, #-1252]
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_8:	@ bb22
	ldr r3, [r11, #-1252]
	cmp r3, r6
	ble .LBB1_637	@ bb22.bb599_crit_edge
.LBB1_9:	@ bb22.bb24_crit_edge
	@comment
str r7, [r11, #-1268]
	mov r1, r8
.LBB1_10:	@ bb24
	@comment
str r1, [r11, #-1256]
	ldr r3, .LCPI1_115
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_12	@ yybackup
.LBB1_11:	@ bb25
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_121
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_12:	@ yybackup
	mov r3, r5, lsl #1
	ldr r2, .LCPI1_122
	ldrh r3, [r2, +r3]
	mov r2, r3, lsl #16
	mov r6, r2, asr #16
	cmp r3, #2, 18 @ 32768
	beq .LBB1_643	@ yydefault
.LBB1_13:	@ bb26
	ldr r3, .LCPI1_118
	ldr r0, [r3]
	cmn r0, #2
	bne .LBB1_17	@ bb26.bb30_crit_edge
.LBB1_14:	@ bb27
	ldr r3, .LCPI1_115
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_16	@ bb29
.LBB1_15:	@ bb28
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_123
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_16:	@ bb29
	emit_nops_till_bundle_end
	bl yylex
	ldr r3, .LCPI1_118
	@comment
str r0, [r3]
.LBB1_17:	@ bb26.bb30_crit_edge
	mov r3, r0
.LBB1_18:	@ bb30
	mov r7, r0
	cmp r3, #0
	bgt .LBB1_22	@ bb33
.LBB1_19:	@ bb31
	ldr r7, .LCPI1_118
	mov r3, #0
	@comment
str r3, [r7]
	ldr r7, .LCPI1_115
	ldr r7, [r7]
	cmp r7, #0
	beq .LBB1_21	@ bb31.bb38_crit_edge
.LBB1_20:	@ bb32
	mov r7, #2
	mov r0, r7
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_124
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_21:	@ bb31.bb38_crit_edge
	mov r7, #0
	@comment
str r7, [r11, #-1260]
	b .LBB1_26	@ bb38
.LBB1_22:	@ bb33
	cmp r7, #79, 30 @ 316
	movhi r3, #228
	ldrls r3, .LCPI1_125
	ldrlssb r3, [r3, +r7]
	@comment
str r3, [r11, #-1260]
	b .LBB1_24	@ bb36
.LBB1_23:	@ bb34
.LBB1_24:	@ bb36
	ldr r3, .LCPI1_115
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_26	@ bb38
.LBB1_25:	@ bb37
	mov r8, #2
	mov r0, r8
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI1_126
	ldr r2, [r11, #-1260]
	ldr r3, [r3, +r2, lsl #2]
	ldr r1, .LCPI1_127
	mov r2, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI1_118
	ldr r7, [r3]
	mov r0, r8
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI1_128
	ldr r2, [r3]
	mov r1, r7
	emit_nops_till_bundle_end
	bl yyprint
	mov r0, r8
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_129
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_26:	@ bb38
	ldr r3, [r11, #-1260]
	add r3, r3, r6
	ldr r2, .LCPI1_130
	cmp r3, r2
	bhs .LBB1_643	@ yydefault
.LBB1_27:	@ bb39
	mov r2, r3, lsl #1
	ldr r1, .LCPI1_131
	ldrsh r2, [r1, +r2]
	ldr r1, [r11, #-1260]
	cmp r2, r1
	bne .LBB1_643	@ yydefault
.LBB1_28:	@ bb40
	mov r3, r3, lsl #1
	ldr r2, .LCPI1_132
	ldrsh r6, [r2, +r3]
	cmp r6, #0
	bge .LBB1_42	@ bb43
.LBB1_29:	@ bb41
	ldr r3, .LCPI1_133
	and r3, r6, r3
	cmp r3, #2, 18 @ 32768
	beq .LBB1_644	@ yyerrlab
.LBB1_30:	@ bb42
	rsb r6, r6, #0
.LBB1_31:	@ yyreduce
	mov r3, r6, lsl #1
	ldr r2, .LCPI1_134
	ldrsh r3, [r2, +r3]
	@comment
str r3, [r11, #-1272]
	cmp r3, #0
	ldrgt r3, [r11, #-1272]
	rsbgt r3, r3, #1
	ldrgt r3, [r4, +r3, lsl #2]
	@comment
strgt r3, [r11, #-1244]
.LBB1_32:	@ bb53
.LBB1_33:	@ bb54
	ldr r3, .LCPI1_115
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_38	@ bb59
.LBB1_34:	@ bb55
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	mov r7, r6, lsl #1
	ldr r3, .LCPI1_135
	ldrsh r3, [r3, +r7]
	ldr r1, .LCPI1_136
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI1_137
	ldrsh r3, [r3, +r7]
	mov r2, r3, lsl #1
	ldr r1, .LCPI1_138
	ldrsh r2, [r1, +r2]
	cmp r2, #1
	blt .LBB1_37	@ bb58
.LBB1_35:	@ bb56.preheader
	mov r3, r3, lsl #16
	mov r3, r3, asr #16
	ldr r2, .LCPI1_138
	add r7, r2, r3, lsl #1
.LBB1_36:	@ bb56
	ldrsh r8, [r7]
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI1_126
	ldr r2, [r3, +r8, lsl #2]
	ldr r1, .LCPI1_139
	emit_nops_till_bundle_end
	bl fprintf
	ldrsh r3, [r7, #+2]!
	cmp r3, #0
	bgt .LBB1_36	@ bb56
.LBB1_37:	@ bb58
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	mov r3, r6, lsl #1
	ldr r2, .LCPI1_140
	ldrsh r3, [r2, +r3]
	ldr r2, .LCPI1_126
	ldr r2, [r2, +r3, lsl #2]
	ldr r1, .LCPI1_141
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_38:	@ bb59
	sub r3, r6, #1
	ldr r2, .LCPI1_142
	cmp r3, r2
	bhi .LBB1_597	@ bb566
.LBB1_39:	@ bb59
	.set PCRELV0, (.LJTI1_0_0-(.LPCRELL0+8))
.LPCRELL0:
	add r2, pc, #PCRELV0
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI1_0_0:
	.long	 .LBB1_49
	.long	 .LBB1_40
	.long	 .LBB1_53
	.long	 .LBB1_597
	.long	 .LBB1_54
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_57
	.long	 .LBB1_68
	.long	 .LBB1_73
	.long	 .LBB1_74
	.long	 .LBB1_75
	.long	 .LBB1_77
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_78
	.long	 .LBB1_82
	.long	 .LBB1_88
	.long	 .LBB1_89
	.long	 .LBB1_91
	.long	 .LBB1_93
	.long	 .LBB1_95
	.long	 .LBB1_99
	.long	 .LBB1_103
	.long	 .LBB1_106
	.long	 .LBB1_109
	.long	 .LBB1_110
	.long	 .LBB1_115
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_116
	.long	 .LBB1_118
	.long	 .LBB1_119
	.long	 .LBB1_121
	.long	 .LBB1_123
	.long	 .LBB1_125
	.long	 .LBB1_126
	.long	 .LBB1_127
	.long	 .LBB1_128
	.long	 .LBB1_597
	.long	 .LBB1_129
	.long	 .LBB1_130
	.long	 .LBB1_597
	.long	 .LBB1_131
	.long	 .LBB1_132
	.long	 .LBB1_133
	.long	 .LBB1_134
	.long	 .LBB1_135
	.long	 .LBB1_140
	.long	 .LBB1_144
	.long	 .LBB1_145
	.long	 .LBB1_146
	.long	 .LBB1_147
	.long	 .LBB1_148
	.long	 .LBB1_597
	.long	 .LBB1_149
	.long	 .LBB1_150
	.long	 .LBB1_151
	.long	 .LBB1_597
	.long	 .LBB1_157
	.long	 .LBB1_158
	.long	 .LBB1_159
	.long	 .LBB1_160
	.long	 .LBB1_161
	.long	 .LBB1_162
	.long	 .LBB1_163
	.long	 .LBB1_165
	.long	 .LBB1_166
	.long	 .LBB1_168
	.long	 .LBB1_169
	.long	 .LBB1_170
	.long	 .LBB1_172
	.long	 .LBB1_174
	.long	 .LBB1_175
	.long	 .LBB1_176
	.long	 .LBB1_177
	.long	 .LBB1_184
	.long	 .LBB1_597
	.long	 .LBB1_213
	.long	 .LBB1_214
	.long	 .LBB1_219
	.long	 .LBB1_220
	.long	 .LBB1_223
	.long	 .LBB1_227
	.long	 .LBB1_228
	.long	 .LBB1_229
	.long	 .LBB1_230
	.long	 .LBB1_231
	.long	 .LBB1_232
	.long	 .LBB1_597
	.long	 .LBB1_233
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_235
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_237
	.long	 .LBB1_238
	.long	 .LBB1_240
	.long	 .LBB1_241
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_244
	.long	 .LBB1_245
	.long	 .LBB1_246
	.long	 .LBB1_248
	.long	 .LBB1_249
	.long	 .LBB1_250
	.long	 .LBB1_251
	.long	 .LBB1_252
	.long	 .LBB1_253
	.long	 .LBB1_254
	.long	 .LBB1_255
	.long	 .LBB1_256
	.long	 .LBB1_258
	.long	 .LBB1_261
	.long	 .LBB1_262
	.long	 .LBB1_263
	.long	 .LBB1_264
	.long	 .LBB1_268
	.long	 .LBB1_269
	.long	 .LBB1_270
	.long	 .LBB1_271
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_272
	.long	 .LBB1_273
	.long	 .LBB1_274
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_275
	.long	 .LBB1_278
	.long	 .LBB1_281
	.long	 .LBB1_283
	.long	 .LBB1_287
	.long	 .LBB1_289
	.long	 .LBB1_290
	.long	 .LBB1_292
	.long	 .LBB1_293
	.long	 .LBB1_295
	.long	 .LBB1_296
	.long	 .LBB1_299
	.long	 .LBB1_300
	.long	 .LBB1_301
	.long	 .LBB1_302
	.long	 .LBB1_303
	.long	 .LBB1_305
	.long	 .LBB1_306
	.long	 .LBB1_307
	.long	 .LBB1_308
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_310
	.long	 .LBB1_311
	.long	 .LBB1_315
	.long	 .LBB1_317
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_319
	.long	 .LBB1_320
	.long	 .LBB1_322
	.long	 .LBB1_597
	.long	 .LBB1_323
	.long	 .LBB1_597
	.long	 .LBB1_324
	.long	 .LBB1_597
	.long	 .LBB1_325
	.long	 .LBB1_597
	.long	 .LBB1_326
	.long	 .LBB1_597
	.long	 .LBB1_327
	.long	 .LBB1_597
	.long	 .LBB1_328
	.long	 .LBB1_332
	.long	 .LBB1_333
	.long	 .LBB1_334
	.long	 .LBB1_336
	.long	 .LBB1_338
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_339
	.long	 .LBB1_340
	.long	 .LBB1_341
	.long	 .LBB1_342
	.long	 .LBB1_343
	.long	 .LBB1_344
	.long	 .LBB1_597
	.long	 .LBB1_345
	.long	 .LBB1_346
	.long	 .LBB1_347
	.long	 .LBB1_348
	.long	 .LBB1_349
	.long	 .LBB1_597
	.long	 .LBB1_350
	.long	 .LBB1_351
	.long	 .LBB1_352
	.long	 .LBB1_353
	.long	 .LBB1_354
	.long	 .LBB1_355
	.long	 .LBB1_597
	.long	 .LBB1_356
	.long	 .LBB1_357
	.long	 .LBB1_358
	.long	 .LBB1_359
	.long	 .LBB1_362
	.long	 .LBB1_363
	.long	 .LBB1_364
	.long	 .LBB1_365
	.long	 .LBB1_366
	.long	 .LBB1_367
	.long	 .LBB1_368
	.long	 .LBB1_369
	.long	 .LBB1_370
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_371
	.long	 .LBB1_373
	.long	 .LBB1_374
	.long	 .LBB1_375
	.long	 .LBB1_376
	.long	 .LBB1_377
	.long	 .LBB1_379
	.long	 .LBB1_380
	.long	 .LBB1_385
	.long	 .LBB1_386
	.long	 .LBB1_389
	.long	 .LBB1_597
	.long	 .LBB1_390
	.long	 .LBB1_391
	.long	 .LBB1_392
	.long	 .LBB1_393
	.long	 .LBB1_597
	.long	 .LBB1_394
	.long	 .LBB1_396
	.long	 .LBB1_397
	.long	 .LBB1_398
	.long	 .LBB1_399
	.long	 .LBB1_400
	.long	 .LBB1_401
	.long	 .LBB1_597
	.long	 .LBB1_402
	.long	 .LBB1_403
	.long	 .LBB1_404
	.long	 .LBB1_405
	.long	 .LBB1_406
	.long	 .LBB1_407
	.long	 .LBB1_408
	.long	 .LBB1_409
	.long	 .LBB1_411
	.long	 .LBB1_412
	.long	 .LBB1_414
	.long	 .LBB1_416
	.long	 .LBB1_417
	.long	 .LBB1_418
	.long	 .LBB1_419
	.long	 .LBB1_597
	.long	 .LBB1_422
	.long	 .LBB1_423
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_424
	.long	 .LBB1_597
	.long	 .LBB1_425
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_427
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_429
	.long	 .LBB1_430
	.long	 .LBB1_433
	.long	 .LBB1_436
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_439
	.long	 .LBB1_440
	.long	 .LBB1_441
	.long	 .LBB1_442
	.long	 .LBB1_443
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_444
	.long	 .LBB1_445
	.long	 .LBB1_446
	.long	 .LBB1_447
	.long	 .LBB1_597
	.long	 .LBB1_448
	.long	 .LBB1_449
	.long	 .LBB1_450
	.long	 .LBB1_453
	.long	 .LBB1_456
	.long	 .LBB1_457
	.long	 .LBB1_458
	.long	 .LBB1_459
	.long	 .LBB1_461
	.long	 .LBB1_463
	.long	 .LBB1_465
	.long	 .LBB1_468
	.long	 .LBB1_470
	.long	 .LBB1_473
	.long	 .LBB1_478
	.long	 .LBB1_479
	.long	 .LBB1_482
	.long	 .LBB1_485
	.long	 .LBB1_487
	.long	 .LBB1_488
	.long	 .LBB1_489
	.long	 .LBB1_499
	.long	 .LBB1_500
	.long	 .LBB1_501
	.long	 .LBB1_505
	.long	 .LBB1_508
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_510
	.long	 .LBB1_516
	.long	 .LBB1_519
	.long	 .LBB1_527
	.long	 .LBB1_540
	.long	 .LBB1_547
	.long	 .LBB1_550
	.long	 .LBB1_552
	.long	 .LBB1_553
	.long	 .LBB1_597
	.long	 .LBB1_554
	.long	 .LBB1_597
	.long	 .LBB1_597
	.long	 .LBB1_555
	.long	 .LBB1_556
	.long	 .LBB1_557
	.long	 .LBB1_558
	.long	 .LBB1_559
	.long	 .LBB1_560
	.long	 .LBB1_597
	.long	 .LBB1_561
	.long	 .LBB1_567
	.long	 .LBB1_568
	.long	 .LBB1_569
	.long	 .LBB1_570
	.long	 .LBB1_571
	.long	 .LBB1_572
	.long	 .LBB1_573
	.long	 .LBB1_574
	.long	 .LBB1_575
	.long	 .LBB1_577
	.long	 .LBB1_579
	.long	 .LBB1_580
	.long	 .LBB1_581
	.long	 .LBB1_582
	.long	 .LBB1_583
	.long	 .LBB1_597
	.long	 .LBB1_586
	.long	 .LBB1_592
	.long	 .LBB1_593
	.long	 .LBB1_594
	.long	 .LBB1_596

.text
@ JUMP TABLE END



	.align	2
.LBB1_40:	@ bb64.preheader
	emit_nops_till_bundle_end
	bl global_bindings_p
	cmp r0, #0
	bne .LBB1_52	@ bb65
.LBB1_41:	@ bb63
	mov r5, #0
	mov r0, r5
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl poplevel
	b .LBB1_40	@ bb64.preheader
.LBB1_42:	@ bb43
	ldr r3, .LCPI1_133
	tst r6, r3
	beq .LBB1_644	@ yyerrlab
.LBB1_43:	@ bb43
	ldr r5, .LCPI1_133
	and r5, r6, r5
	ldr r3, .LCPI1_143
	cmp r5, r3
	beq .LBB1_646	@ bb43.bb599_crit_edge
.LBB1_44:	@ bb46
	ldr r5, .LCPI1_115
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_46	@ bb48
.LBB1_45:	@ bb47
	ldr r5, .LCPI1_118
	ldr r5, [r5]
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI1_126
	ldr r2, [r11, #-1260]
	ldr r3, [r3, +r2, lsl #2]
	ldr r1, .LCPI1_144
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_46:	@ bb48
	ldr r5, .LCPI1_118
	ldr r5, [r5]
	cmp r5, #0
	ldrne r5, .LCPI1_118
	mvnne r3, #1
	@comment
strne r3, [r5]
.LBB1_47:	@ bb49
.LBB1_48:	@ bb50
	ldr r5, [r11, #-1264]
	sub r3, r5, #1
	cmp r5, #0
	moveq r3, r5
	ldr r5, .LCPI1_128
	ldr r5, [r5]
	str r5, [r4, #+4]!
	ldr r1, [r11, #-1256]
	@comment
str r3, [r11, #-1264]
	mov r5, r6
	b .LBB1_4	@ yynewstate
	.align	2
.LBB1_49:	@ bb60
	ldr r5, .LCPI1_145
	ldr r5, [r5]
	cmp r5, #0
	ldrne r0, .LCPI1_146
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_50:	@ bb61
.LBB1_51:	@ bb62
	emit_nops_till_bundle_end
	bl finish_file
	b .LBB1_597	@ bb566
.LBB1_52:	@ bb65
	emit_nops_till_bundle_end
	bl finish_file
	b .LBB1_597	@ bb566
	.align	2
.LBB1_53:	@ bb66
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_54:	@ bb67
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_55:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_115:
 	.long	yydebug

	.align	4
.LBB1_56:	@ bb68
	@comment
str r5, [r4, #-8]
	.align	2
.LBB1_57:	@ bb69
	ldr r0, [r4, #-8]
	ldrb r3, [r0, #+8]
	sub r5, r3, #105
	and r5, r5, #255
	cmp r5, #2
	bhi .LBB1_59	@ bb71
.LBB1_58:	@ bb70
	ldr r5, [r0, #+4]
	ldrb r2, [r5, #+29]
	ldr r5, [r0, #+16]
	ldr r1, [r5, #+4]
	ldrb r1, [r1, #+29]
	cmp r2, r1
	beq .LBB1_56	@ bb68
.LBB1_59:	@ bb71
	and r5, r3, #255
	cmp r5, #28
	beq .LBB1_63	@ bb74
.LBB1_60:	@ bb71
	and r5, r3, #255
	cmp r5, #110
	bne .LBB1_66	@ bb75
.LBB1_61:	@ bb72
	ldr r5, [r0, #+16]
	ldrb r5, [r5, #+8]
	cmp r5, #28
	andne r5, r3, #255
	cmpne r5, #28
	bne .LBB1_66	@ bb75
.LBB1_62:	@ bb72
.LBB1_63:	@ bb74
	emit_nops_till_bundle_end
	bl assemble_asm
	b .LBB1_597	@ bb566
	.align	4
.LBB1_64:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_116:
 	.long	.str

.LBB1_65:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_117:
 	.long	yynerrs

	.align	4
.LBB1_66:	@ bb75
	ldr r0, .LCPI1_147
	emit_nops_till_bundle_end
	bl error
	b .LBB1_597	@ bb566
	.align	4
.LBB1_67:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_118:
 	.long	yychar

	.align	4
.LBB1_68:	@ bb76
	ldr r5, .LCPI1_145
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB1_647	@ bb77
.LBB1_69:	@ bb78
	ldr r5, .LCPI1_148
	ldr r5, [r5]
	cmp r5, #0
	ldreq r0, .LCPI1_149
	emit_nops_till_bundle_end
	bleq warning
.LBB1_70:	@ bb79
.LBB1_71:	@ bb80
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_119:
 	.long	10000			@ 0x2710

	.align	4
.LBB1_73:	@ bb81
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_74:	@ bb82
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_75:	@ bb83
	ldr r0, .LCPI1_153
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	4
.LBB1_76:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_120:
 	.long	.str2

	.align	4
.LBB1_77:	@ bb84
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl shadow_tag
	b .LBB1_597	@ bb566
	.align	2
.LBB1_78:	@ bb85
	ldr r5, .LCPI1_145
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_79:	@ bb86
	ldr r0, .LCPI1_154
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	4
.LBB1_80:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_121:
 	.long	.str3

.LBB1_81:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_122:
 	.long	yypact

	.align	4
.LBB1_82:	@ bb87
	ldr r3, .LCPI1_152
	ldr r2, [r3]
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	sfi_sub sp, sp, #4
	mov r3, #0
	@comment
str r3, [sp]
	emit_nops_till_bundle_end
	bl start_function
	sfi_addeq sp, sp, #4
	cmp r0, #0
	bne .LBB1_86	@ bb89
.LBB1_83:	@ bb88
	ldr r0, .LCPI1_155
	emit_nops_till_bundle_end
	bl yyerror
.LBB1_84:	@ yyerrlab1
	ldr r6, [r11, #-1264]
	cmp r6, #3
	beq .LBB1_607	@ bb576
.LBB1_85:	@ yyerrlab1.yyerrhandle_crit_edge
	mov r6, #0
	b .LBB1_624	@ yyerrhandle
.LBB1_86:	@ bb89
	emit_nops_till_bundle_end
	bl reinit_parse_for_function
	b .LBB1_597	@ bb566
	.align	4
.LBB1_87:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_123:
 	.long	.str4

	.align	4
.LBB1_88:	@ bb90
	emit_nops_till_bundle_end
	bl store_parm_decls
	b .LBB1_597	@ bb566
	.align	2
.LBB1_89:	@ bb91
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl finish_function
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-20]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_90:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_124:
 	.long	.str5

	.align	4
.LBB1_91:	@ bb92
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_92:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_125:
 	.long	yytranslate

	.align	4
.LBB1_93:	@ bb93
	ldr r3, .LCPI1_152
	ldr r2, [r3]
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	sfi_sub sp, sp, #4
	mov r3, #0
	@comment
str r3, [sp]
	emit_nops_till_bundle_end
	bl start_function
	sfi_addeq sp, sp, #4
	cmp r0, #0
	beq .LBB1_83	@ bb88
.LBB1_94:	@ bb95
	emit_nops_till_bundle_end
	bl reinit_parse_for_function
	b .LBB1_597	@ bb566
	.align	2
.LBB1_95:	@ bb96
	emit_nops_till_bundle_end
	bl store_parm_decls
	b .LBB1_597	@ bb566
	.align	4
.LBB1_96:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_126:
 	.long	yytname

.LBB1_97:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_127:
 	.long	.str235

.LBB1_98:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_128:
 	.long	yylval

	.align	4
.LBB1_99:	@ bb97
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl finish_function
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-20]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_100:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_129:
 	.long	.str236

.LBB1_101:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_130:
 	.long	2116			@ 0x844

.LBB1_102:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_131:
 	.long	yycheck

	.align	4
.LBB1_103:	@ bb98
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_104:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_132:
 	.long	yytable

.LBB1_105:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_133:
 	.long	65535			@ 0xFFFF

	.align	4
.LBB1_106:	@ bb99
	ldr r3, .LCPI1_152
	ldr r2, [r3]
	ldr r1, [r4]
	sfi_sub sp, sp, #4
	mov r3, #0
	@comment
str r3, [sp]
	mov r0, r3
	emit_nops_till_bundle_end
	bl start_function
	sfi_addeq sp, sp, #4
	cmp r0, #0
	beq .LBB1_83	@ bb88
.LBB1_107:	@ bb101
	emit_nops_till_bundle_end
	bl reinit_parse_for_function
	b .LBB1_597	@ bb566
	.align	4
.LBB1_108:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_134:
 	.long	yyr2

	.align	4
.LBB1_109:	@ bb102
	emit_nops_till_bundle_end
	bl store_parm_decls
	b .LBB1_597	@ bb566
	.align	2
.LBB1_110:	@ bb103
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl finish_function
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-20]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_111:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_135:
 	.long	yyrline

.LBB1_112:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_136:
 	.long	.str238

.LBB1_113:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_137:
 	.long	yyprhs

.LBB1_114:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_138:
 	.long	yyrhs

	.align	4
.LBB1_115:	@ bb104
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_116:	@ bb105
	mov r5, #110
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_117:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_139:
 	.long	.str239

	.align	4
.LBB1_118:	@ bb106
	mov r5, #75
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_119:	@ bb107
	mov r5, #105
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_120:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_140:
 	.long	yyr1

	.align	4
.LBB1_121:	@ bb108
	mov r5, #118
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_122:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_141:
 	.long	.str240

	.align	4
.LBB1_123:	@ bb109
	mov r5, #117
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_124:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_142:
 	.long	373			@ 0x175

	.align	4
.LBB1_125:	@ bb110
	mov r5, #88
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_126:	@ bb111
	mov r5, #94
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_127:	@ bb112
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl build_compound_expr
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_128:	@ bb113
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_129:	@ bb114
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_130:	@ bb115
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r0
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl chainon
	b .LBB1_597	@ bb566
	.align	2
.LBB1_131:	@ bb116
	ldr r0, [r4]
	ldr r1, .LCPI1_156
	emit_nops_till_bundle_end
	bl build_indirect_ref
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_132:	@ bb117
	ldr r5, .LCPI1_145
	ldr r3, [r5]
	@comment
str r3, [r4]
	mov r3, #0
	@comment
str r3, [r5]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_133:	@ bb118
	ldr r5, [r4, #-8]
	ldr r3, [r4]
	@comment
str r3, [r11, #-1244]
	ldr r3, .LCPI1_145
	@comment
str r5, [r3]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_134:	@ bb119
	ldmda r4, {r0, r1}
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_unary_op
	@comment
str r0, [r11, #-1244]
	emit_nops_till_bundle_end
	bl overflow_warning
	b .LBB1_597	@ bb566
	.align	2
.LBB1_135:	@ bb120
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl lookup_label
	ldr r5, .LCPI1_145
	ldr r5, [r5]
	mov r7, r0
	cmp r5, #0
	ldrne r0, .LCPI1_157
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_136:	@ bb121
.LBB1_137:	@ bb122
	cmp r7, #0
	bne .LBB1_139	@ bb124
.LBB1_138:	@ bb123
	ldr r5, .LCPI1_158
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
.LBB1_139:	@ bb124
	ldrb r5, [r7, #+10]
	ldrb r3, [r7, #+11]
	mov r2, r7
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+1]
	strb r1, [r2]
	orr r5, r5, r3, lsl #8
	orr r3, r1, r0, lsl #8
	orr r5, r3, r5, lsl #16
	orr r5, r5, #1, 16 @ 65536
	mov r5, r5, lsr #16
	strb r5, [r7, #+10]
	ldr r5, .LCPI1_159
	ldr r1, [r5]
	mov r5, #110
	mov r0, r5
	mov r2, r7
	emit_nops_till_bundle_end
	bl build1
	ldrb r5, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r5, r5, r1, lsl #8
	mov r5, r5, lsl #16
	ldrb r1, [r3, #+1]
	orr r5, r5, r1, lsl #8
	orr r5, r5, #2, 24 @ 512
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	strb r2, [r3]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_140:	@ bb125
	ldr r5, [r4]
	ldrb r3, [r5, #+8]
	cmp r3, #37
	bne .LBB1_143	@ bb131
.LBB1_141:	@ bb126
	ldr r5, [r5, #+20]
	ldrb r5, [r5, #+29]
	tst r5, #16
	ldrne r0, .LCPI1_160
	emit_nops_till_bundle_end
	blne error
.LBB1_142:	@ bb130
.LBB1_143:	@ bb131
	ldr r5, [r4]
	ldr r0, [r5, #+4]
	emit_nops_till_bundle_end
	bl c_sizeof
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_144:	@ bb132
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl groktypename
	emit_nops_till_bundle_end
	bl c_sizeof
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_145:	@ bb133
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl c_alignof_expr
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_146:	@ bb134
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl groktypename
	emit_nops_till_bundle_end
	bl c_alignof
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_147:	@ bb135
	ldr r1, [r4]
	mov r5, #115
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_unary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_148:	@ bb136
	ldr r1, [r4]
	mov r5, #116
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_unary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_149:	@ bb137
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl groktypename
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_c_cast
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_150:	@ bb138
	mov r5, #0
	mov r0, r5
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl start_init
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl groktypename
	@comment
str r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl really_start_incremental_init
	b .LBB1_597	@ bb566
	.align	2
.LBB1_151:	@ bb139
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl pop_init_level
	@comment
str r0, [r11, #-1244]
	ldr r5, [r4, #-20]
	emit_nops_till_bundle_end
	bl finish_init
	ldr r3, .LCPI1_145
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI1_161
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_152:	@ bb140
.LBB1_153:	@ bb141
	ldrb r3, [r5, #+8]
	cmp r3, #18
	ldreq r3, [r5, #+16]
	cmpeq r3, #0
	beq .LBB1_155	@ bb148
	b .LBB1_597	@ bb566
.LBB1_154:	@ bb147
.LBB1_155:	@ bb148
	mov r0, r5
	ldr r1, [r11, #-1244]
	mov r5, #1
	mov r2, r5
	emit_nops_till_bundle_end
	bl complete_array_type
	cmp r0, #0
	beq .LBB1_597	@ bb566
.LBB1_156:	@ bb149
	emit_nops_till_bundle_end
	bl abort
	.align	2
.LBB1_157:	@ bb150
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_158:	@ bb151
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_159:	@ bb152
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_160:	@ bb153
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_161:	@ bb154
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_162:	@ bb155
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_163:	@ bb156
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_164:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_143:
 	.long	658			@ 0x292

	.align	4
.LBB1_165:	@ bb157
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_166:	@ bb158
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_167:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_144:
 	.long	.str237

	.align	4
.LBB1_168:	@ bb159
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_169:	@ bb160
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_170:	@ bb161
	ldr r1, [r4, #-8]
	ldmda r4, {r0, r2}
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_145:
 	.long	pedantic

	.align	4
.LBB1_172:	@ bb162
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	mov r5, #89
	mov r0, r5
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_173:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_146:
 	.long	.str241

	.align	4
.LBB1_174:	@ bb163
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	mov r5, #90
	mov r0, r5
	emit_nops_till_bundle_end
	bl parser_build_binary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_175:	@ bb164
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	emit_nops_till_bundle_end
	bl build_conditional_expr
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_176:	@ bb165
	ldr r0, [r4, #-8]
	ldr r2, [r4]
	mov r5, #106
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_modify_expr
	mov r5, #45
	@comment
str r5, [r0, #+12]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_177:	@ bb166
	ldmda r4, {r0, r1, r2}
	emit_nops_till_bundle_end
	bl build_modify_expr
	mov r5, #0
	@comment
str r5, [r0, #+12]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_178:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_147:
 	.long	.str242

.LBB1_179:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_148:
 	.long	flag_traditional

.LBB1_180:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_149:
 	.long	.str244

.LBB1_181:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_150:
 	.long	declspec_stack

.LBB1_182:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_151:
 	.long	current_declspecs

.LBB1_183:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_152:
 	.long	prefix_attributes

	.align	4
.LBB1_184:	@ bb167
	ldr r5, .LCPI1_162
	ldr r5, [r5]
	cmp r5, #0
	ldrne r3, .LCPI1_163
	ldrne r3, [r3]
	@comment
strne r3, [r11, #-1244]
	cmpne r5, r3
	bne .LBB1_198	@ bb180
.LBB1_185:	@ bb168
.LBB1_186:	@ bb169
	ldr r5, .LCPI1_118
	ldr r0, [r5]
	cmn r0, #2
	bne .LBB1_188	@ bb171
.LBB1_187:	@ bb170
	emit_nops_till_bundle_end
	bl yylex
	ldr r5, .LCPI1_118
	@comment
str r0, [r5]
.LBB1_188:	@ bb171
	cmp r0, #40
	beq .LBB1_648	@ bb172
.LBB1_189:	@ bb173
	ldr r5, .LCPI1_164
	ldr r5, [r5]
	ldr r3, [r4]
	cmp r5, #0
	beq .LBB1_649	@ bb174
.LBB1_190:	@ bb175
	ldr r2, .LCPI1_163
	ldr r2, [r2]
	ldr r1, [r3, #+20]
	cmp r1, r2
	ldreq r2, [r3, #+36]
	cmpeq r2, r5
	beq .LBB1_194	@ bb179
.LBB1_191:	@ bb176
.LBB1_192:	@ bb177
	ldr r1, [r3, #+16]
	ldr r0, .LCPI1_165
	emit_nops_till_bundle_end
	bl error
	ldr r5, .LCPI1_166
	ldrb r5, [r5]
	cmp r5, #0
	bne .LBB1_194	@ bb179
.LBB1_193:	@ bb178
	ldr r0, .LCPI1_167
	emit_nops_till_bundle_end
	bl error
	ldr r0, .LCPI1_168
	emit_nops_till_bundle_end
	bl error
	ldr r5, .LCPI1_166
	mov r3, #1
	strb r3, [r5]
.LBB1_194:	@ bb179
	ldr r5, .LCPI1_163
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	ldr r3, [r4]
	@comment
str r5, [r3, #+20]
	ldr r5, .LCPI1_164
	ldr r5, [r5]
	ldr r3, [r4]
	@comment
str r5, [r3, #+36]
	b .LBB1_211	@ bb200
	.align	4
.LBB1_195:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_153:
 	.long	.str245

.LBB1_196:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_154:
 	.long	.str246

.LBB1_197:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_155:
 	.long	.str247

	.align	4
.LBB1_198:	@ bb180
	ldr r3, [r5, #+4]
	ldr r2, [r11, #-1244]
	cmp r3, r2
	beq .LBB1_211	@ bb200
.LBB1_199:	@ bb182
	ldrb r3, [r5, #+29]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 6 @ 134217728
	beq .LBB1_210	@ bb199
.LBB1_200:	@ bb187
	bic r3, r3, #2, 6 @ 134217728
	strb r3, [r5, #+28]
	mov r2, r3, lsr #24
	strb r2, [r5, #+31]
	mov r2, r3, lsr #16
	strb r2, [r5, #+30]
	mov r3, r3, lsr #8
	strb r3, [r5, #+29]
	ldr r3, .LCPI1_169
	ldr r0, [r3]
	cmn r0, #2
	bne .LBB1_202	@ bb189
.LBB1_201:	@ bb188
	emit_nops_till_bundle_end
	bl yylex
	ldr r3, .LCPI1_169
	@comment
str r0, [r3]
.LBB1_202:	@ bb189
	cmp r0, #40
	bne .LBB1_209	@ bb197
.LBB1_203:	@ bb190
	ldrb r3, [r5, #+8]
	cmp r3, #29
	bne .LBB1_650	@ bb191
.LBB1_204:	@ bb192
	ldr r3, .LCPI1_170
	ldr r3, [r3]
	ldrb r3, [r3, #+29]
	ldr r2, [r5, #+4]
	ldr r2, [r2, #+4]
	ldrb r1, [r2, #+29]
	cmp r1, r3
	beq .LBB1_207	@ bb195
.LBB1_205:	@ bb193
	ldr r3, .LCPI1_171
	ldr r3, [r3]
	cmp r2, r3
	ldrne r3, [r5, #+32]
	ldrne r1, [r3, #+16]
	ldrne r0, .LCPI1_172
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_206:	@ bb194
.LBB1_207:	@ bb195
	ldr r3, .LCPI1_171
	ldr r3, [r3]
	ldr r2, [r5, #+4]
	ldr r1, [r2, #+4]
	cmp r1, r3
	bne .LBB1_210	@ bb199
.LBB1_208:	@ bb196
	ldr r3, .LCPI1_170
	ldr r0, [r3]
	ldr r1, [r2, #+12]
	emit_nops_till_bundle_end
	bl build_function_type
	@comment
str r0, [r5, #+4]
	b .LBB1_210	@ bb199
.LBB1_209:	@ bb197
	ldr r3, [r5, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI1_173
	emit_nops_till_bundle_end
	bl pedwarn
.LBB1_210:	@ bb199
	mov r0, r5
	emit_nops_till_bundle_end
	bl assemble_external
	ldrb r3, [r5, #+10]
	ldrb r2, [r5, #+11]
	mov r1, r5
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	orr r3, r3, r2, lsl #8
	orr r3, r3, #1
	strb r3, [r5, #+10]
	strb r0, [r1]
	@comment
str r5, [r11, #-1244]
.LBB1_211:	@ bb200
	ldr r5, [r11, #-1244]
	ldrb r5, [r5, #+8]
	cmp r5, #31
	bne .LBB1_597	@ bb566
.LBB1_212:	@ bb201
	ldr r5, [r11, #-1244]
	ldr r2, [r5, #+48]
	ldr r1, [r2, #+4]
	mov r5, #106
	mov r0, r5
	emit_nops_till_bundle_end
	bl build1
	ldrb r5, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r5, r5, r1, lsl #8
	mov r5, r5, lsl #16
	ldrb r1, [r3, #+1]
	orr r5, r5, r1, lsl #8
	orr r5, r5, #2, 24 @ 512
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	strb r2, [r3]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_213:	@ bb202
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl combine_strings
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_214:	@ bb203
	ldr r5, .LCPI1_174
	ldr r5, [r5]
	ldr r3, [r4, #-4]
	ldrb r2, [r3, #+8]
	ldr r5, [r5, +r2, lsl #2]
	ldrb r5, [r5]
	sub r2, r5, #49
	and r2, r2, #255
	cmp r2, #2
	blo .LBB1_217	@ bb210
.LBB1_215:	@ bb203
	and r2, r5, #255
	cmp r2, #60
	andne r5, r5, #255
	cmpne r5, #101
	bne .LBB1_218	@ bb211
.LBB1_216:	@ bb203
.LBB1_217:	@ bb210
	mov r5, #0
	@comment
str r5, [r3, #+12]
.LBB1_218:	@ bb211
	ldr r5, [r4, #-4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_219:	@ bb212
	ldr r5, .LCPI1_163
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_220:	@ bb213
	ldr r3, .LCPI1_164
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB1_222	@ bb215
.LBB1_221:	@ bb214
	ldr r0, .LCPI1_175
	emit_nops_till_bundle_end
	bl error
	b .LBB1_84	@ yyerrlab1
.LBB1_222:	@ bb215
	emit_nops_till_bundle_end
	bl keep_next_level
	emit_nops_till_bundle_end
	bl push_iterator_stack
	emit_nops_till_bundle_end
	bl push_label_level
	emit_nops_till_bundle_end
	bl expand_start_stmt_expr
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_223:	@ bb216
	ldr r5, .LCPI1_145
	ldr r5, [r5]
	cmp r5, #0
	ldrne r0, .LCPI1_176
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_224:	@ bb217
.LBB1_225:	@ bb218
	emit_nops_till_bundle_end
	bl pop_iterator_stack
	emit_nops_till_bundle_end
	bl pop_label_level
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl expand_end_stmt_expr
	ldrb r5, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r5, r5, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r1, r2, r1, lsl #8
	orr r5, r1, r5, lsl #16
	orr r5, r5, #1, 24 @ 256
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	strb r2, [r3]
	ldr r5, [r4, #-4]
	@comment
str r5, [r11, #-1244]
	ldrb r5, [r5, #+8]
	mov r3, r0
	cmp r5, #5
	bne .LBB1_597	@ bb566
.LBB1_226:	@ bb219
	ldr r1, [r3, #+4]
	sfi_sub sp, sp, #4
	ldr r5, [r11, #-1244]
	@comment
str r5, [sp]
	mov r5, #49
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build
	sfi_addeq sp, sp, #4
	@comment
str r0, [r11, #-1244]
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl delete_block
	b .LBB1_597	@ bb566
	.align	2
.LBB1_227:	@ bb221
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_function_call
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_228:	@ bb222
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_array_ref
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_229:	@ bb223
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_component_ref
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_230:	@ bb224
	ldr r0, [r4, #-8]
	ldr r1, .LCPI1_177
	emit_nops_till_bundle_end
	bl build_indirect_ref
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_component_ref
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_231:	@ bb225
	ldr r1, [r4, #-4]
	mov r5, #120
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_unary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_232:	@ bb226
	ldr r1, [r4, #-4]
	mov r5, #119
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_unary_op
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_233:	@ bb227
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_234:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_156:
 	.long	.str248

	.align	4
.LBB1_235:	@ bb228
	emit_nops_till_bundle_end
	bl c_mark_varargs
	ldr r5, .LCPI1_145
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_236:	@ bb229
	ldr r0, .LCPI1_178
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_237:	@ bb230
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_238:	@ bb231
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_239:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_157:
 	.long	.str249

	.align	4
.LBB1_240:	@ bb232
	ldr r0, [r4, #-4]
	mov r5, #1
	mov r1, r5
	emit_nops_till_bundle_end
	bl shadow_tag_warned
	ldr r0, .LCPI1_153
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_241:	@ bb233
	ldr r0, .LCPI1_153
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	4
.LBB1_242:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_158:
 	.long	null_pointer_node

.LBB1_243:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_159:
 	.long	ptr_type_node

	.align	4
.LBB1_244:	@ bb234
	emit_nops_till_bundle_end
	bl suspend_momentary
	@comment
str r0, [r11, #-1244]
	emit_nops_till_bundle_end
	bl pending_xref_error
	ldr r5, .LCPI1_152
	ldr r0, [r5]
	ldr r7, .LCPI1_151
	ldr r1, [r7]
	ldr r8, .LCPI1_150
	ldr r2, [r8]
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r8]
	ldr r3, [r4]
	@comment
str r3, [r7]
	mov r3, #0
	@comment
str r3, [r5]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_245:	@ bb235
	ldr r5, .LCPI1_152
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r5]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_246:	@ bb236
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_247:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_160:
 	.long	.str250

	.align	4
.LBB1_248:	@ bb237
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_249:	@ bb238
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_250:	@ bb239
	ldr r5, .LCPI1_150
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI1_151
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_152
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_251:	@ bb240
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl shadow_tag
	b .LBB1_597	@ bb566
	.align	2
.LBB1_252:	@ bb241
	ldr r0, .LCPI1_153
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_253:	@ bb242
	ldmda r4, {r1, r2}
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_254:	@ bb243
	ldr r1, [r4, #-4]
	ldr r2, [r4, #-8]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_255:	@ bb244
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_256:	@ bb245
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_257:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_161:
 	.long	.str251

	.align	4
.LBB1_258:	@ bb246
	ldr r5, .LCPI1_179
	ldr r5, [r5]
	cmp r5, #0
	ldrne r5, [r4]
	ldrne r1, [r5, #+16]
	ldrne r0, .LCPI1_180
	emit_nops_till_bundle_end
	blne warning
.LBB1_259:	@ bb247
.LBB1_260:	@ bb248
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_261:	@ bb249
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	ldrb r5, [r0, #+10]
	ldrb r3, [r0, #+11]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r5, r5, r3, lsl #8
	orr r5, r5, #4
	strb r5, [r0, #+10]
	strb r1, [r2]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_262:	@ bb250
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_263:	@ bb251
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	ldrb r5, [r0, #+10]
	ldrb r3, [r0, #+11]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r5, r5, r3, lsl #8
	orr r5, r5, #4
	strb r5, [r0, #+10]
	strb r1, [r2]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_264:	@ bb252
	ldr r5, .LCPI1_179
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_267	@ bb259
.LBB1_265:	@ bb253
	ldr r5, [r4, #-4]
	ldrb r5, [r5, #+10]
	tst r5, #4
	ldrne r5, [r4]
	ldrne r1, [r5, #+16]
	ldrne r0, .LCPI1_180
	emit_nops_till_bundle_end
	blne warning
.LBB1_266:	@ bb258
.LBB1_267:	@ bb259
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	ldr r5, [r4, #-4]
	ldrb r3, [r5, #+8]!
	ldrb r3, [r5, #+1]
	ldrb r3, [r5, #+2]!
	ldrb r5, [r5, #+1]
	ldrb r5, [r0, #+11]
	ldrb r2, [r0, #+10]
	orr r5, r2, r5, lsl #8
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r5, r1, r5, lsl #16
	bic r5, r5, #1, 14 @ 262144
	strb r5, [r2]
	mov r1, r5, lsr #8
	strb r1, [r2, #+1]
	mov r2, r5, lsr #24
	strb r2, [r0, #+11]
	mov r2, #1, 14 @ 262144
	and r3, r2, r3, lsl #16
	orr r5, r5, r3
	mov r5, r5, lsr #16
	strb r5, [r0, #+10]
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_268:	@ bb266
	ldmda r4, {r1, r2}
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_269:	@ bb267
	ldr r1, [r4, #-4]
	ldr r2, [r4, #-8]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_270:	@ bb268
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_271:	@ bb269
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_272:	@ bb270
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl lookup_name
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_273:	@ bb271
	ldr r5, [r4, #-4]
	ldr r5, [r5, #+4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_274:	@ bb272
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl groktypename
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_275:	@ bb273
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_276:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_162:
 	.long	lastiddecl

.LBB1_277:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_163:
 	.long	error_mark_node

	.align	4
.LBB1_278:	@ bb274
	ldr r0, [r4, #-4]
	ldr r5, [r0]
	cmp r5, #0
	beq .LBB1_280	@ bb276
.LBB1_279:	@ bb275
	emit_nops_till_bundle_end
	bl combine_strings
	@comment
str r0, [r4, #-4]
.LBB1_280:	@ bb276
	ldr r5, [r4, #-4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_281:	@ bb277
	ldr r5, .LCPI1_181
	ldr r1, [r5]
	ldr r5, .LCPI1_182
	ldr r5, [r5]
	ldr r0, [r4, #-12]
	ldr r3, [r4, #-4]
	sfi_sub sp, sp, #4
	@comment
str r5, [sp]
	mov r5, #1
	mov r2, r5
	emit_nops_till_bundle_end
	bl start_decl
	sfi_addeq sp, sp, #4
	mov r5, r0
	@comment
str r5, [r11, #-1244]
	emit_nops_till_bundle_end
	bl global_bindings_p
	mov r2, r0
	ldr r1, [r4, #-8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl start_init
	b .LBB1_597	@ bb566
	.align	4
.LBB1_282:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_164:
 	.long	current_function_decl

	.align	4
.LBB1_283:	@ bb278
	emit_nops_till_bundle_end
	bl finish_init
	ldmda r4, {r0, r1}
	ldr r2, [r4, #-16]
	emit_nops_till_bundle_end
	bl finish_decl
	b .LBB1_597	@ bb566
	.align	4
.LBB1_284:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_165:
 	.long	.str253

.LBB1_285:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_166:
 	.long	undeclared_variable_notice.b

.LBB1_286:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_167:
 	.long	.str254

	.align	4
.LBB1_287:	@ bb279
	ldr r5, .LCPI1_181
	ldr r1, [r5]
	ldr r5, .LCPI1_182
	ldr r5, [r5]
	ldr r0, [r4, #-8]
	ldr r3, [r4]
	sfi_sub sp, sp, #4
	@comment
str r5, [sp]
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl start_decl
	sfi_addeq sp, sp, #4
	ldr r2, [r4, #-4]
	mov r1, r5
	emit_nops_till_bundle_end
	bl finish_decl
	b .LBB1_597	@ bb566
	.align	4
.LBB1_288:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_168:
 	.long	.str255

	.align	4
.LBB1_289:	@ bb280
	ldr r5, .LCPI1_181
	ldr r1, [r5]
	ldr r5, .LCPI1_182
	ldr r5, [r5]
	ldr r0, [r4, #-12]
	ldr r3, [r4, #-4]
	sfi_sub sp, sp, #4
	@comment
str r5, [sp]
	mov r5, #1
	mov r2, r5
	emit_nops_till_bundle_end
	bl start_decl
	sfi_addeq sp, sp, #4
	mov r5, r0
	@comment
str r5, [r11, #-1244]
	emit_nops_till_bundle_end
	bl global_bindings_p
	mov r2, r0
	ldr r1, [r4, #-8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl start_init
	b .LBB1_597	@ bb566
	.align	2
.LBB1_290:	@ bb281
	emit_nops_till_bundle_end
	bl finish_init
	ldr r5, .LCPI1_182
	ldr r2, [r5]
	ldr r0, [r4, #-4]
	ldr r1, [r4, #-12]
	emit_nops_till_bundle_end
	bl decl_attributes
	ldmda r4, {r0, r1}
	ldr r2, [r4, #-16]
	emit_nops_till_bundle_end
	bl finish_decl
	b .LBB1_597	@ bb566
	.align	4
.LBB1_291:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_169:
 	.long	yychar

	.align	4
.LBB1_292:	@ bb282
	ldr r5, .LCPI1_181
	ldr r1, [r5]
	ldr r5, .LCPI1_182
	ldr r5, [r5]
	ldr r0, [r4, #-8]
	ldr r3, [r4]
	sfi_sub sp, sp, #4
	@comment
str r5, [sp]
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl start_decl
	sfi_addeq sp, sp, #4
	ldr r2, [r4, #-4]
	mov r1, r5
	emit_nops_till_bundle_end
	bl finish_decl
	b .LBB1_597	@ bb566
	.align	2
.LBB1_293:	@ bb283
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_294:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_170:
 	.long	integer_type_node

	.align	4
.LBB1_295:	@ bb284
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_296:	@ bb285
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_297:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_171:
 	.long	void_type_node

.LBB1_298:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_172:
 	.long	.str257

	.align	4
.LBB1_299:	@ bb286
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_300:	@ bb287
	ldr r5, [r4, #-8]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_301:	@ bb288
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_302:	@ bb289
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_303:	@ bb290
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_304:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_173:
 	.long	.str258

	.align	4
.LBB1_305:	@ bb291
	ldr r0, [r4]
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_306:	@ bb292
	ldr r1, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r0
	ldr r0, [r4, #-12]
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_307:	@ bb293
	ldr r1, [r4, #-12]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r4, #-20]
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_308:	@ bb294
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_309:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_174:
 	.long	tree_code_type

	.align	4
.LBB1_310:	@ bb295
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl really_start_incremental_init
	emit_nops_till_bundle_end
	bl push_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_311:	@ bb296
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl pop_init_level
	ldr r5, .LCPI1_163
	ldr r5, [r5]
	@comment
str r0, [r11, #-1244]
	cmp r0, r5
	bne .LBB1_314	@ bb299
.LBB1_312:	@ bb297
	ldr r5, .LCPI1_169
	ldr r5, [r5]
	ldr r3, .LCPI1_183
	add r5, r5, r3
	cmp r5, #2
	blo .LBB1_314	@ bb299
.LBB1_313:	@ bb298
	emit_nops_till_bundle_end
	bl pop_momentary
	b .LBB1_597	@ bb566
.LBB1_314:	@ bb299
	emit_nops_till_bundle_end
	bl pop_momentary_nofree
	b .LBB1_597	@ bb566
	.align	2
.LBB1_315:	@ bb300
	ldr r5, .LCPI1_163
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_316:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_175:
 	.long	.str259

	.align	4
.LBB1_317:	@ bb301
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_318:	@ bb302
	ldr r0, .LCPI1_185
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_319:	@ bb303
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl process_init_element
	b .LBB1_597	@ bb566
	.align	2
.LBB1_320:	@ bb304
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl push_init_level
	b .LBB1_597	@ bb566
	.align	4
.LBB1_321:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_176:
 	.long	.str260

	.align	4
.LBB1_322:	@ bb305
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl pop_init_level
	emit_nops_till_bundle_end
	bl process_init_element
	b .LBB1_597	@ bb566
	.align	2
.LBB1_323:	@ bb306
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-8]
	emit_nops_till_bundle_end
	bl set_init_index
	b .LBB1_597	@ bb566
	.align	2
.LBB1_324:	@ bb307
	ldr r0, [r4, #-8]
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl set_init_index
	b .LBB1_597	@ bb566
	.align	2
.LBB1_325:	@ bb308
	ldr r0, [r4, #-4]
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl set_init_index
	b .LBB1_597	@ bb566
	.align	2
.LBB1_326:	@ bb309
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl set_init_label
	b .LBB1_597	@ bb566
	.align	2
.LBB1_327:	@ bb310
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl set_init_label
	b .LBB1_597	@ bb566
	.align	2
.LBB1_328:	@ bb311
	emit_nops_till_bundle_end
	bl push_c_function_context
	ldr r3, .LCPI1_181
	ldr r0, [r3]
	ldr r3, .LCPI1_182
	ldr r2, [r3]
	ldr r1, [r4]
	sfi_sub sp, sp, #4
	mov r3, #1
	@comment
str r3, [sp]
	mov r3, #0
	emit_nops_till_bundle_end
	bl start_function
	sfi_addeq sp, sp, #4
	cmp r0, #0
	bne .LBB1_330	@ bb313
.LBB1_329:	@ bb312
	emit_nops_till_bundle_end
	bl pop_c_function_context
	b .LBB1_83	@ bb88
.LBB1_330:	@ bb313
	emit_nops_till_bundle_end
	bl reinit_parse_for_function
	b .LBB1_597	@ bb566
	.align	4
.LBB1_331:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_177:
 	.long	.str261

	.align	4
.LBB1_332:	@ bb314
	emit_nops_till_bundle_end
	bl store_parm_decls
	b .LBB1_597	@ bb566
	.align	2
.LBB1_333:	@ bb315
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl finish_function
	emit_nops_till_bundle_end
	bl pop_c_function_context
	b .LBB1_597	@ bb566
	.align	2
.LBB1_334:	@ bb316
	emit_nops_till_bundle_end
	bl push_c_function_context
	ldr r3, .LCPI1_181
	ldr r0, [r3]
	ldr r3, .LCPI1_182
	ldr r2, [r3]
	ldr r1, [r4]
	sfi_sub sp, sp, #4
	mov r3, #1
	@comment
str r3, [sp]
	mov r3, #0
	emit_nops_till_bundle_end
	bl start_function
	sfi_addeq sp, sp, #4
	cmp r0, #0
	beq .LBB1_329	@ bb312
.LBB1_335:	@ bb318
	emit_nops_till_bundle_end
	bl reinit_parse_for_function
	b .LBB1_597	@ bb566
	.align	2
.LBB1_336:	@ bb319
	emit_nops_till_bundle_end
	bl store_parm_decls
	b .LBB1_597	@ bb566
	.align	4
.LBB1_337:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_178:
 	.long	.str262

	.align	4
.LBB1_338:	@ bb320
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl finish_function
	emit_nops_till_bundle_end
	bl pop_c_function_context
	b .LBB1_597	@ bb566
	.align	2
.LBB1_339:	@ bb321
	ldr r5, [r4, #-4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_340:	@ bb322
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	mov r5, #50
	mov r0, r5
	mov r5, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_341:	@ bb323
	ldr r1, [r4, #-12]
	ldr r2, [r4, #-4]
	mov r5, #42
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_342:	@ bb324
	ldr r1, [r4, #-8]
	mov r5, #42
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_343:	@ bb325
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl make_pointer_declarator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_344:	@ bb326
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_345:	@ bb327
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	mov r5, #50
	mov r0, r5
	mov r5, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_346:	@ bb328
	ldr r1, [r4, #-12]
	ldr r2, [r4, #-4]
	mov r5, #42
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_347:	@ bb329
	ldr r1, [r4, #-8]
	mov r5, #42
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_348:	@ bb330
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl make_pointer_declarator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_349:	@ bb331
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_350:	@ bb332
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	mov r5, #50
	mov r0, r5
	mov r5, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_351:	@ bb333
	ldr r5, [r4, #-4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_352:	@ bb334
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl make_pointer_declarator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_353:	@ bb335
	ldr r1, [r4, #-12]
	ldr r2, [r4, #-4]
	mov r5, #42
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_354:	@ bb336
	ldr r1, [r4, #-8]
	mov r5, #42
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_355:	@ bb337
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_356:	@ bb338
	ldr r1, [r4, #-4]
	mov r5, #20
	mov r0, r5
	emit_nops_till_bundle_end
	bl start_struct
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_357:	@ bb339
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	emit_nops_till_bundle_end
	bl finish_struct
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_358:	@ bb340
	ldr r5, [r4, #-8]
	ldr r7, [r4]
	mov r3, #20
	mov r0, r3
	mov r3, #0
	mov r1, r3
	emit_nops_till_bundle_end
	bl start_struct
	mov r1, r5
	mov r2, r7
	emit_nops_till_bundle_end
	bl finish_struct
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_359:	@ bb341
	ldr r1, [r4]
	mov r5, #20
	mov r0, r5
	emit_nops_till_bundle_end
	bl xref_tag
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_360:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_179:
 	.long	extra_warnings

.LBB1_361:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_180:
 	.long	.str263

	.align	4
.LBB1_362:	@ bb342
	ldr r1, [r4, #-4]
	mov r5, #21
	mov r0, r5
	emit_nops_till_bundle_end
	bl start_struct
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_363:	@ bb343
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	emit_nops_till_bundle_end
	bl finish_struct
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_364:	@ bb344
	ldr r5, [r4, #-8]
	ldr r7, [r4]
	mov r3, #21
	mov r0, r3
	mov r3, #0
	mov r1, r3
	emit_nops_till_bundle_end
	bl start_struct
	mov r1, r5
	mov r2, r7
	emit_nops_till_bundle_end
	bl finish_struct
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_365:	@ bb345
	ldr r1, [r4]
	mov r5, #21
	mov r0, r5
	emit_nops_till_bundle_end
	bl xref_tag
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_366:	@ bb346
	emit_nops_till_bundle_end
	bl suspend_momentary
	@comment
str r0, [r4]
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl start_enum
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_367:	@ bb347
	ldr r0, [r4, #-12]
	ldr r5, [r4]
	emit_nops_till_bundle_end
	bl nreverse
	mov r1, r0
	ldr r0, [r4, #-16]
	mov r2, r5
	emit_nops_till_bundle_end
	bl finish_enum
	@comment
str r0, [r11, #-1244]
	ldr r0, [r4, #-20]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_368:	@ bb348
	emit_nops_till_bundle_end
	bl suspend_momentary
	@comment
str r0, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl start_enum
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_369:	@ bb349
	ldr r0, [r4, #-12]
	ldr r5, [r4]
	emit_nops_till_bundle_end
	bl nreverse
	mov r1, r0
	ldr r0, [r4, #-16]
	mov r2, r5
	emit_nops_till_bundle_end
	bl finish_enum
	@comment
str r0, [r11, #-1244]
	ldr r0, [r4, #-20]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_370:	@ bb350
	ldr r1, [r4]
	mov r5, #10
	mov r0, r5
	emit_nops_till_bundle_end
	bl xref_tag
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_371:	@ bb351
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_372:	@ bb352
	ldr r0, .LCPI1_186
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_373:	@ bb353
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_374:	@ bb354
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	ldr r0, .LCPI1_187
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_375:	@ bb355
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_376:	@ bb356
	ldmdb r4, {r0, r1}
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_377:	@ bb357
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_378:	@ bb358
	ldr r0, .LCPI1_188
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_379:	@ bb359
	ldr r5, .LCPI1_189
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, [r4]
	@comment
str r1, [r11, #-1244]
	ldr r1, .LCPI1_181
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_182
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_380:	@ bb360
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	ldrne r0, .LCPI1_190
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_381:	@ bb361
.LBB1_382:	@ bb362
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl shadow_tag
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_383:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_181:
 	.long	current_declspecs

.LBB1_384:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_182:
 	.long	prefix_attributes

	.align	4
.LBB1_385:	@ bb363
	ldr r5, .LCPI1_189
	ldr r3, [r5]
	ldr r2, [r3, #+16]
	ldr r1, [r4]
	@comment
str r1, [r11, #-1244]
	ldr r1, .LCPI1_181
	@comment
str r2, [r1]
	ldr r2, [r3, #+12]
	ldr r1, .LCPI1_182
	@comment
str r2, [r1]
	ldr r3, [r3]
	@comment
str r3, [r5]
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_386:	@ bb364
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	ldrne r0, .LCPI1_190
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_387:	@ bb365
.LBB1_388:	@ bb366
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl shadow_tag
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_389:	@ bb367
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_390:	@ bb368
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_391:	@ bb369
	ldr r5, .LCPI1_181
	ldr r3, [r5]
	ldmdb r4, {r0, r1, r2}
	sfi_sub sp, sp, #4
	mov r5, #0
	@comment
str r5, [sp]
	emit_nops_till_bundle_end
	bl grokfield
	sfi_addeq sp, sp, #4
	@comment
str r0, [r11, #-1244]
	ldr r5, .LCPI1_182
	ldr r2, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl decl_attributes
	b .LBB1_597	@ bb566
	.align	2
.LBB1_392:	@ bb370
	ldr r5, .LCPI1_181
	ldr r3, [r5]
	sub r2, r4, #20
	ldmia r2, {r0, r1, r2}
	ldr r5, [r4, #-4]
	sfi_sub sp, sp, #4
	@comment
str r5, [sp]
	emit_nops_till_bundle_end
	bl grokfield
	sfi_addeq sp, sp, #4
	@comment
str r0, [r11, #-1244]
	ldr r5, .LCPI1_182
	ldr r2, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl decl_attributes
	b .LBB1_597	@ bb566
	.align	2
.LBB1_393:	@ bb371
	ldr r5, .LCPI1_181
	ldr r3, [r5]
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-12]
	ldr r5, [r4, #-4]
	sfi_sub sp, sp, #4
	@comment
str r5, [sp]
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl grokfield
	sfi_addeq sp, sp, #4
	@comment
str r0, [r11, #-1244]
	ldr r5, .LCPI1_182
	ldr r2, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl decl_attributes
	b .LBB1_597	@ bb566
	.align	2
.LBB1_394:	@ bb372
	ldr r5, .LCPI1_191
	ldr r5, [r5]
	ldr r3, [r4, #-8]
	@comment
str r3, [r11, #-1244]
	cmp r3, r5
	beq .LBB1_597	@ bb566
.LBB1_395:	@ bb374
	ldr r0, [r4]
	ldr r1, [r11, #-1244]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_396:	@ bb375
	ldr r5, .LCPI1_191
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_397:	@ bb376
	ldr r0, [r4]
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_enumerator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_398:	@ bb377
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_enumerator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_399:	@ bb378
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_400:	@ bb379
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_401:	@ bb380
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_402:	@ bb381
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_403:	@ bb382
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_404:	@ bb383
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_405:	@ bb384
	ldr r1, [r4]
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_406:	@ bb385
	ldr r5, [r4, #-4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_407:	@ bb386
	ldmda r4, {r0, r1}
	emit_nops_till_bundle_end
	bl make_pointer_declarator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_408:	@ bb387
	ldr r0, [r4]
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl make_pointer_declarator
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_409:	@ bb388
	ldr r1, [r4, #-8]
	ldr r2, [r4]
	mov r5, #50
	mov r0, r5
	mov r5, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_410:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_183:
 	.long	4294967033			@ 0xFFFFFEF9

	.align	4
.LBB1_411:	@ bb389
	ldr r1, [r4, #-12]
	ldr r2, [r4, #-4]
	mov r5, #42
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_412:	@ bb390
	ldr r1, [r4, #-8]
	mov r5, #42
	mov r0, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_413:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_184:
 	.long	pedantic

	.align	4
.LBB1_414:	@ bb391
	ldr r2, [r4]
	mov r5, #50
	mov r0, r5
	mov r5, #0
	mov r1, r5
	mov r3, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_415:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_185:
 	.long	.str264

	.align	4
.LBB1_416:	@ bb392
	ldr r2, [r4, #-4]
	mov r5, #42
	mov r0, r5
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_417:	@ bb393
	mov r5, #42
	mov r0, r5
	mov r5, #0
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_nt
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_418:	@ bb394
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_419:	@ bb395
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	ldrne r5, [r4]
	cmpne r5, #0
	bne .LBB1_421	@ bb397
	b .LBB1_597	@ bb566
.LBB1_420:	@ bb396
.LBB1_421:	@ bb397
	ldr r0, .LCPI1_192
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_422:	@ bb398
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_423:	@ bb399
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_424:	@ bb400
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl pushlevel
	emit_nops_till_bundle_end
	bl clear_last_expr
	emit_nops_till_bundle_end
	bl push_momentary
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_start_bindings
	b .LBB1_597	@ bb566
	.align	2
.LBB1_425:	@ bb401
	ldr r5, .LCPI1_184
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_426:	@ bb402
	ldr r0, .LCPI1_195
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB1_597	@ bb566
	.align	2
.LBB1_427:	@ bb403
	ldr r5, [r4, #-4]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_428:	@ bb404
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl shadow_label
	ldrb r3, [r0, #+10]
	ldrb r2, [r0, #+11]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 10 @ 8388608
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	emit_nops_till_bundle_end
	bl declare_nonlocal_label
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB1_428	@ bb404
	b .LBB1_597	@ bb566
	.align	2
.LBB1_429:	@ bb406
	ldr r5, .LCPI1_196
	ldr r0, [r5]
	ldr r5, .LCPI1_197
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_430:	@ bb407
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl getdecls
	mov r5, #1
	mov r1, r5
	mov r7, #0
	mov r2, r7
	emit_nops_till_bundle_end
	bl expand_end_bindings
	mov r0, r5
	mov r1, r5
	mov r2, r7
	emit_nops_till_bundle_end
	bl poplevel
	ldr r5, .LCPI1_198
	ldr r5, [r5]
	ldr r3, .LCPI1_183
	add r5, r5, r3
	@comment
str r0, [r11, #-1244]
	cmp r5, #1
	bhi .LBB1_432	@ bb409
.LBB1_431:	@ bb408
	emit_nops_till_bundle_end
	bl pop_momentary_nofree
	b .LBB1_597	@ bb566
.LBB1_432:	@ bb409
	emit_nops_till_bundle_end
	bl pop_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_433:	@ bb410
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl kept_level_p
	mov r5, r0
	emit_nops_till_bundle_end
	bl getdecls
	mov r1, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl expand_end_bindings
	emit_nops_till_bundle_end
	bl kept_level_p
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl poplevel
	ldr r5, .LCPI1_198
	ldr r5, [r5]
	ldr r3, .LCPI1_183
	add r5, r5, r3
	@comment
str r0, [r11, #-1244]
	cmp r5, #1
	bhi .LBB1_435	@ bb412
.LBB1_434:	@ bb411
	emit_nops_till_bundle_end
	bl pop_momentary_nofree
	b .LBB1_597	@ bb566
.LBB1_435:	@ bb412
	emit_nops_till_bundle_end
	bl pop_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_436:	@ bb413
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl kept_level_p
	mov r5, r0
	emit_nops_till_bundle_end
	bl getdecls
	mov r1, r5
	mov r5, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl expand_end_bindings
	emit_nops_till_bundle_end
	bl kept_level_p
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl poplevel
	ldr r5, .LCPI1_198
	ldr r5, [r5]
	ldr r3, .LCPI1_183
	add r5, r5, r3
	@comment
str r0, [r11, #-1244]
	cmp r5, #1
	bhi .LBB1_438	@ bb415
.LBB1_437:	@ bb414
	emit_nops_till_bundle_end
	bl pop_momentary_nofree
	b .LBB1_597	@ bb566
.LBB1_438:	@ bb415
	emit_nops_till_bundle_end
	bl pop_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_439:	@ bb416
	ldr r0, [r4, #-20]
	ldr r1, [r4, #-16]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r5, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl expand_start_cond
	ldr r5, [r4, #-20]
	ldr r3, .LCPI1_199
	ldr r3, [r3]
	@comment
str r3, [r11, #-1244]
	ldr r3, .LCPI1_200
	@comment
str r5, [r3]
	ldr r5, [r4, #-16]
	ldr r3, .LCPI1_201
	@comment
str r5, [r3]
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_440:	@ bb417
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldmdb r4, {r0, r1}
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl emit_nop
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_start_loop_continue_elsewhere
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_441:	@ bb418
	emit_nops_till_bundle_end
	bl expand_loop_continue_here
	b .LBB1_597	@ bb566
	.align	2
.LBB1_442:	@ bb419
	ldr r5, .LCPI1_193
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_443:	@ bb420
	ldr r5, .LCPI1_194
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_444:	@ bb421
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_445:	@ bb422
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_446:	@ bb423
	mov r5, #1
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_447:	@ bb424
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_448:	@ bb425
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-8]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl iterator_expand
	emit_nops_till_bundle_end
	bl clear_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_449:	@ bb426
	emit_nops_till_bundle_end
	bl expand_start_else
	ldr r5, .LCPI1_199
	ldr r5, [r5]
	@comment
str r5, [r4, #-4]
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_450:	@ bb427
	emit_nops_till_bundle_end
	bl expand_end_cond
	ldr r5, .LCPI1_202
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_451:	@ bb428
	ldr r5, .LCPI1_199
	ldr r5, [r5]
	ldr r3, [r4, #-12]
	cmp r3, r5
	bne .LBB1_597	@ bb566
.LBB1_452:	@ bb429
	ldr r0, .LCPI1_203
	emit_nops_till_bundle_end
	bl warning
	b .LBB1_597	@ bb566
	.align	2
.LBB1_453:	@ bb430
	emit_nops_till_bundle_end
	bl expand_end_cond
	ldr r5, .LCPI1_202
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_454:	@ bb431
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r2, r3, #1
	ldr r1, [r4]
	@comment
str r2, [r5]
	cmp r3, r1
	bne .LBB1_597	@ bb566
.LBB1_455:	@ bb433
	ldr r5, .LCPI1_200
	ldr r0, [r5]
	ldr r5, .LCPI1_201
	ldr r1, [r5]
	ldr r2, .LCPI1_204
	emit_nops_till_bundle_end
	bl warning_with_file_and_line
	b .LBB1_597	@ bb566
	.align	2
.LBB1_456:	@ bb434
	emit_nops_till_bundle_end
	bl expand_end_cond
	b .LBB1_597	@ bb566
	.align	2
.LBB1_457:	@ bb435
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldmdb r4, {r0, r1}
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl emit_nop
	b .LBB1_597	@ bb566
	.align	2
.LBB1_458:	@ bb436
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_start_loop
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r1, r0
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_exit_loop_if_false
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_459:	@ bb437
	emit_nops_till_bundle_end
	bl expand_end_loop
	b .LBB1_597	@ bb566
	.align	4
.LBB1_460:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_186:
 	.long	.str265

	.align	4
.LBB1_461:	@ bb438
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r1, r0
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_exit_loop_if_false
	emit_nops_till_bundle_end
	bl expand_end_loop
	emit_nops_till_bundle_end
	bl clear_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_462:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_187:
 	.long	.str266

	.align	4
.LBB1_463:	@ bb439
	emit_nops_till_bundle_end
	bl expand_end_loop
	emit_nops_till_bundle_end
	bl clear_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_464:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_188:
 	.long	.str267

	.align	4
.LBB1_465:	@ bb440
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-20]
	ldr r1, [r4, #-16]
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl emit_nop
	ldr r0, [r4, #-4]
	cmp r0, #0
	beq .LBB1_597	@ bb566
.LBB1_466:	@ bb441
	emit_nops_till_bundle_end
	bl c_expand_expr_stmt
	b .LBB1_597	@ bb566
	.align	4
.LBB1_467:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_189:
 	.long	declspec_stack

	.align	4
.LBB1_468:	@ bb442
	ldr r5, .LCPI1_194
	ldr r5, [r5]
	@comment
str r5, [r4]
	ldr r5, .LCPI1_193
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_469:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_190:
 	.long	.str268

	.align	4
.LBB1_470:	@ bb443
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_start_loop_continue_elsewhere
	ldr r0, [r4, #-8]
	ldr r1, [r4, #-12]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-16]
	cmp r0, #0
	beq .LBB1_472	@ bb445
.LBB1_471:	@ bb444
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r1, r0
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_exit_loop_if_false
.LBB1_472:	@ bb445
	emit_nops_till_bundle_end
	bl push_momentary
	ldr r5, .LCPI1_194
	ldr r5, [r5]
	@comment
str r5, [r4, #-12]
	ldr r5, .LCPI1_193
	ldr r5, [r5]
	@comment
str r5, [r4, #-8]
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_473:	@ bb446
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-20]
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl expand_loop_continue_here
	ldr r0, [r4, #-12]
	cmp r0, #0
	emit_nops_till_bundle_end
	blne c_expand_expr_stmt
.LBB1_474:	@ bb447
.LBB1_475:	@ bb448
	ldr r5, .LCPI1_198
	ldr r5, [r5]
	ldr r3, .LCPI1_183
	add r5, r5, r3
	cmp r5, #1
	bls .LBB1_651	@ bb449
.LBB1_476:	@ bb450
	emit_nops_till_bundle_end
	bl pop_momentary
.LBB1_477:	@ bb451
	emit_nops_till_bundle_end
	bl expand_end_loop
	b .LBB1_597	@ bb566
	.align	2
.LBB1_478:	@ bb452
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-20]
	ldr r1, [r4, #-16]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl c_expand_start_case
	emit_nops_till_bundle_end
	bl push_momentary
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_479:	@ bb453
	ldr r0, [r4, #-12]
	emit_nops_till_bundle_end
	bl expand_end_case
	ldr r5, .LCPI1_198
	ldr r5, [r5]
	ldr r3, .LCPI1_183
	add r5, r5, r3
	cmp r5, #1
	bhi .LBB1_481	@ bb455
.LBB1_480:	@ bb454
	emit_nops_till_bundle_end
	bl pop_momentary_nofree
	b .LBB1_597	@ bb566
.LBB1_481:	@ bb455
	emit_nops_till_bundle_end
	bl pop_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_482:	@ bb456
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-8]
	emit_nops_till_bundle_end
	bl emit_line_note
	emit_nops_till_bundle_end
	bl expand_exit_something
	cmp r0, #0
	bne .LBB1_597	@ bb566
.LBB1_483:	@ bb457
	ldr r0, .LCPI1_205
	emit_nops_till_bundle_end
	bl error
	b .LBB1_597	@ bb566
	.align	4
.LBB1_484:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_191:
 	.long	error_mark_node

	.align	4
.LBB1_485:	@ bb458
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-8]
	emit_nops_till_bundle_end
	bl emit_line_note
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_continue_loop
	cmp r0, #0
	bne .LBB1_597	@ bb566
.LBB1_486:	@ bb459
	ldr r0, .LCPI1_206
	emit_nops_till_bundle_end
	bl error
	b .LBB1_597	@ bb566
	.align	2
.LBB1_487:	@ bb460
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-8]
	emit_nops_till_bundle_end
	bl emit_line_note
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl c_expand_return
	b .LBB1_597	@ bb566
	.align	2
.LBB1_488:	@ bb461
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-12]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl c_expand_return
	b .LBB1_597	@ bb566
	.align	2
.LBB1_489:	@ bb462
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-28]
	ldr r1, [r4, #-24]
	emit_nops_till_bundle_end
	bl emit_line_note
	b .LBB1_491	@ bb464
.LBB1_490:	@ bb463
	@comment
str r5, [r4, #-8]
.LBB1_491:	@ bb464
	ldr r0, [r4, #-8]
	ldrb r3, [r0, #+8]
	sub r5, r3, #105
	and r5, r5, #255
	cmp r5, #2
	bhi .LBB1_493	@ bb466
.LBB1_492:	@ bb465
	ldr r5, [r0, #+4]
	ldrb r2, [r5, #+29]
	ldr r5, [r0, #+16]
	ldr r1, [r5, #+4]
	ldrb r1, [r1, #+29]
	cmp r2, r1
	beq .LBB1_490	@ bb463
.LBB1_493:	@ bb466
	and r5, r3, #255
	cmp r5, #28
	beq .LBB1_497	@ bb469
.LBB1_494:	@ bb466
	and r5, r3, #255
	cmp r5, #110
	bne .LBB1_498	@ bb470
.LBB1_495:	@ bb467
	ldr r5, [r0, #+16]
	ldrb r5, [r5, #+8]
	cmp r5, #28
	andne r5, r3, #255
	cmpne r5, #28
	bne .LBB1_498	@ bb470
.LBB1_496:	@ bb467
.LBB1_497:	@ bb469
	emit_nops_till_bundle_end
	bl expand_asm
	b .LBB1_597	@ bb566
.LBB1_498:	@ bb470
	ldr r0, .LCPI1_207
	emit_nops_till_bundle_end
	bl error
	b .LBB1_597	@ bb566
	.align	2
.LBB1_499:	@ bb471
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-36]
	ldr r1, [r4, #-32]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r5, .LCPI1_208
	ldr r5, [r5, #+68]
	ldr r3, .LCPI1_193
	ldr r3, [r3]
	ldr r2, .LCPI1_194
	ldr r2, [r2]
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-8]
	ldr r12, [r4, #-24]
	sfi_sub sp, sp, #12
	@comment
str r2, [sp, #+8]
	@comment
str r3, [sp, #+4]
	cmp r12, r5
	mov r5, #0
	mov r3, #1
	moveq r5, r3
	@comment
str r5, [sp]
	mov r5, #0
	mov r2, r5
	mov r3, r5
	emit_nops_till_bundle_end
	bl c_expand_asm_operands
	sfi_addeq sp, sp, #12
	b .LBB1_597	@ bb566
	.align	2
.LBB1_500:	@ bb472
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-44]
	ldr r1, [r4, #-40]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r5, .LCPI1_208
	ldr r5, [r5, #+68]
	ldr r3, .LCPI1_193
	ldr r3, [r3]
	ldr r2, .LCPI1_194
	ldr r12, [r2]
	ldr r0, [r4, #-24]
	ldr r1, [r4, #-16]
	ldr r2, [r4, #-8]
	ldr lr, [r4, #-32]
	sfi_sub sp, sp, #12
	stmfa sp, {r3, r12}
	cmp lr, r5
	mov r5, #0
	mov r3, #1
	moveq r5, r3
	@comment
str r5, [sp]
	mov r5, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl c_expand_asm_operands
	sfi_addeq sp, sp, #12
	b .LBB1_597	@ bb566
	.align	2
.LBB1_501:	@ bb473
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-52]
	ldr r1, [r4, #-48]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r5, .LCPI1_208
	ldr r5, [r5, #+68]
	ldr r3, .LCPI1_193
	ldr r12, [r3]
	ldr r3, .LCPI1_194
	ldr lr, [r3]
	ldr r0, [r4, #-32]
	ldr r1, [r4, #-24]
	ldr r2, [r4, #-16]
	ldr r3, [r4, #-8]
	ldr r7, [r4, #-40]
	sfi_sub sp, sp, #12
	stmfa sp, {r12, lr}
	cmp r7, r5
	mov r5, #0
	mov r12, #1
	moveq r5, r12
	@comment
str r5, [sp]
	emit_nops_till_bundle_end
	bl c_expand_asm_operands
	sfi_addeq sp, sp, #12
	b .LBB1_597	@ bb566
	.align	4
.LBB1_502:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_192:
 	.long	.str269

.LBB1_503:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_193:
 	.long	input_filename

.LBB1_504:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_194:
 	.long	lineno

	.align	4
.LBB1_505:	@ bb474
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-16]
	ldr r1, [r4, #-12]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl lookup_label
	cmp r0, #0
	beq .LBB1_597	@ bb566
.LBB1_506:	@ bb475
	ldrb r5, [r0, #+10]
	ldrb r3, [r0, #+11]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	strb r1, [r2]
	orr r5, r5, r3, lsl #8
	orr r3, r1, r12, lsl #8
	orr r5, r3, r5, lsl #16
	orr r5, r5, #1, 16 @ 65536
	mov r5, r5, lsr #16
	strb r5, [r0, #+10]
	emit_nops_till_bundle_end
	bl expand_goto
	b .LBB1_597	@ bb566
	.align	4
.LBB1_507:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_195:
 	.long	.str270

	.align	4
.LBB1_508:	@ bb476
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r0, [r4, #-20]
	ldr r1, [r4, #-16]
	emit_nops_till_bundle_end
	bl emit_line_note
	ldr r5, .LCPI1_209
	ldr r0, [r5]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl convert
	emit_nops_till_bundle_end
	bl expand_computed_goto
	b .LBB1_597	@ bb566
	.align	4
.LBB1_509:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_196:
 	.long	void_type_node

	.align	4
.LBB1_510:	@ bb477
	ldr r0, [r4, #-4]
	ldrb r5, [r0, #+8]
	cmp r5, #33
	bne .LBB1_652	@ bb478
.LBB1_511:	@ bb479
	ldrb r5, [r0, #+31]
	tst r5, #16
	beq .LBB1_653	@ bb484
.LBB1_512:	@ bb485
	ldrb r5, [r0, #+9]
	tst r5, #32
	beq .LBB1_515	@ bb491
.LBB1_513:	@ bb490
	ldr r5, [r0, #+32]
	ldr r1, [r5, #+16]
	ldr r0, .LCPI1_210
	emit_nops_till_bundle_end
	bl error
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_514:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_197:
 	.long	integer_zero_node

	.align	4
.LBB1_515:	@ bb491
	emit_nops_till_bundle_end
	bl iterator_for_loop_start
	mov r5, #1
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_516:	@ bb492
	ldr r5, [r4, #-4]
	cmp r5, #0
	beq .LBB1_597	@ bb566
.LBB1_517:	@ bb493
	ldr r0, [r4, #-12]
	emit_nops_till_bundle_end
	bl iterator_for_loop_end
	b .LBB1_597	@ bb566
	.align	4
.LBB1_518:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_198:
 	.long	yychar

	.align	4
.LBB1_519:	@ bb494
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl check_case_value
	mov r5, r0
	mov r3, #30
	mov r0, r3
	mov r3, #0
	mov r1, r3
	mov r2, r3
	emit_nops_till_bundle_end
	bl build_decl
	ldr r3, .LCPI1_199
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI1_191
	ldr r3, [r3]
	mov r2, r0
	cmp r5, r3
	beq .LBB1_526	@ bb503
.LBB1_520:	@ bb495
	ldr r1, .LCPI1_211
	sub r3, r11, #40
	mov r0, r5
	emit_nops_till_bundle_end
	bl pushcase
	sub r5, r0, #1
	cmp r5, #4
	bhi .LBB1_526	@ bb503
.LBB1_521:	@ bb495
	.set PCRELV1, (.LJTI1_1_1-(.LPCRELL1+8))
.LPCRELL1:
	add r3, pc, #PCRELV1
	ldr pc, [r3, +r5, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI1_1_1:
	.long	 .LBB1_522
	.long	 .LBB1_523
	.long	 .LBB1_524
	.long	 .LBB1_526
	.long	 .LBB1_525

.text
@ JUMP TABLE END



	.align	2
.LBB1_522:	@ bb496
	ldr r0, .LCPI1_212
	emit_nops_till_bundle_end
	bl error
	b .LBB1_526	@ bb503
	.align	2
.LBB1_523:	@ bb498
	ldr r0, .LCPI1_213
	emit_nops_till_bundle_end
	bl error
	ldr r0, [r11, #-40]
	ldr r1, .LCPI1_214
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB1_526	@ bb503
	.align	2
.LBB1_524:	@ bb500
	ldr r0, .LCPI1_215
	emit_nops_till_bundle_end
	bl warning
	b .LBB1_526	@ bb503
	.align	2
.LBB1_525:	@ bb502
	ldr r0, .LCPI1_216
	emit_nops_till_bundle_end
	bl error
	.align	2
.LBB1_526:	@ bb503
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_527:	@ bb504
	ldr r0, [r4, #-12]
	emit_nops_till_bundle_end
	bl check_case_value
	mov r5, r0
	ldr r0, [r4, #-4]
	emit_nops_till_bundle_end
	bl check_case_value
	mov r7, r0
	mov r3, #30
	mov r0, r3
	mov r3, #0
	mov r1, r3
	mov r2, r3
	emit_nops_till_bundle_end
	bl build_decl
	ldr r3, .LCPI1_199
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI1_191
	ldr r2, [r3]
	mov r3, r0
	cmp r5, r2
	cmpne r7, r2
	bne .LBB1_532	@ bb506
	b .LBB1_539	@ bb516
	.align	4
.LBB1_528:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_199:
 	.long	stmt_count

.LBB1_529:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_200:
 	.long	if_stmt_file

.LBB1_530:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_201:
 	.long	if_stmt_line

.LBB1_531:	@ bb504
	.align	4
.LBB1_532:	@ bb506
	sfi_sub sp, sp, #4
	sub r2, r11, #36
	@comment
str r2, [sp]
	ldr r2, .LCPI1_211
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl pushcase_range
	sfi_addeq sp, sp, #4
	sub r5, r0, #1
	cmp r5, #4
	bhi .LBB1_539	@ bb516
.LBB1_533:	@ bb506
	.set PCRELV2, (.LJTI1_2_2-(.LPCRELL2+8))
.LPCRELL2:
	add r3, pc, #PCRELV2
	ldr pc, [r3, +r5, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI1_2_2:
	.long	 .LBB1_534
	.long	 .LBB1_535
	.long	 .LBB1_536
	.long	 .LBB1_537
	.long	 .LBB1_538

.text
@ JUMP TABLE END



	.align	2
.LBB1_534:	@ bb507
	ldr r0, .LCPI1_212
	emit_nops_till_bundle_end
	bl error
	b .LBB1_539	@ bb516
	.align	2
.LBB1_535:	@ bb509
	ldr r0, .LCPI1_213
	emit_nops_till_bundle_end
	bl error
	ldr r0, [r11, #-36]
	ldr r1, .LCPI1_214
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB1_539	@ bb516
	.align	2
.LBB1_536:	@ bb511
	ldr r0, .LCPI1_215
	emit_nops_till_bundle_end
	bl warning
	b .LBB1_539	@ bb516
	.align	2
.LBB1_537:	@ bb513
	ldr r0, .LCPI1_217
	emit_nops_till_bundle_end
	bl warning
	b .LBB1_539	@ bb516
	.align	2
.LBB1_538:	@ bb515
	ldr r0, .LCPI1_216
	emit_nops_till_bundle_end
	bl error
.LBB1_539:	@ bb516
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_540:	@ bb517
	mov r5, #30
	mov r0, r5
	mov r5, #0
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_decl
	mov r2, r0
	sub r3, r11, #32
	mov r0, r5
	mov r1, r5
	emit_nops_till_bundle_end
	bl pushcase
	ldr r5, .LCPI1_199
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	cmp r0, #2
	beq .LBB1_543	@ bb520
.LBB1_541:	@ bb517
	cmp r0, #1
	bne .LBB1_544	@ bb521
.LBB1_542:	@ bb518
	ldr r0, .LCPI1_218
	emit_nops_till_bundle_end
	bl error
	b .LBB1_544	@ bb521
.LBB1_543:	@ bb520
	ldr r0, .LCPI1_219
	emit_nops_till_bundle_end
	bl error
	ldr r0, [r11, #-32]
	ldr r1, .LCPI1_220
	emit_nops_till_bundle_end
	bl error_with_decl
.LBB1_544:	@ bb521
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	4
.LBB1_545:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_202:
 	.long	extra_warnings

.LBB1_546:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_203:
 	.long	.str271

	.align	4
.LBB1_547:	@ bb522
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	ldr r2, [r4, #-4]
	emit_nops_till_bundle_end
	bl define_label
	mov r5, r0
	ldr r3, .LCPI1_199
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	emit_nops_till_bundle_end
	bl emit_nop
	cmp r5, #0
	movne r0, r5
	emit_nops_till_bundle_end
	blne expand_label
.LBB1_548:	@ bb523
.LBB1_549:	@ bb524
	emit_nops_till_bundle_end
	bl position_after_white_space
	b .LBB1_597	@ bb566
	.align	2
.LBB1_550:	@ bb525
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_551:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_204:
 	.long	.str272

	.align	4
.LBB1_552:	@ bb526
	ldr r5, .LCPI1_193
	ldr r0, [r5]
	ldr r5, .LCPI1_194
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl emit_line_note
	b .LBB1_597	@ bb566
	.align	2
.LBB1_553:	@ bb527
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_554:	@ bb528
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_555:	@ bb529
	ldr r0, [r4, #-8]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_556:	@ bb530
	ldr r0, [r4, #-12]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_557:	@ bb531
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl combine_strings
	mov r1, r0
	mov r5, #0
	mov r0, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_558:	@ bb532
	ldr r0, [r4]
	ldr r5, [r4, #-8]
	emit_nops_till_bundle_end
	bl combine_strings
	mov r1, r0
	mov r3, #0
	mov r0, r3
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_559:	@ bb533
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl pushlevel
	emit_nops_till_bundle_end
	bl clear_parm_order
	mov r0, r5
	emit_nops_till_bundle_end
	bl declare_parm_level
	b .LBB1_597	@ bb566
	.align	2
.LBB1_560:	@ bb534
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	emit_nops_till_bundle_end
	bl parmlist_tags_warning
	mov r5, #0
	mov r0, r5
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl poplevel
	b .LBB1_597	@ bb566
	.align	2
.LBB1_561:	@ bb535
	ldr r5, .LCPI1_27
	ldr r5, [r5]
	cmp r5, #0
	ldrne r0, .LCPI1_97
	emit_nops_till_bundle_end
	blne pedwarn
.LBB1_562:	@ bb536
.LBB1_563:	@ bb537
	emit_nops_till_bundle_end
	bl getdecls
	b .LBB1_565	@ bb538
.LBB1_564:	@ bb538
	ldrb r5, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r5, r5, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r1, r2, r1, lsl #8
	orr r5, r1, r5, lsl #16
	orr r5, r5, #2, 18 @ 32768
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	strb r2, [r3]
	ldr r0, [r0]
.LBB1_565:	@ bb538
	cmp r0, #0
	bne .LBB1_564	@ bb538
.LBB1_566:	@ bb540
	emit_nops_till_bundle_end
	bl clear_parm_order
	b .LBB1_597	@ bb566
	.align	2
.LBB1_567:	@ bb541
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_568:	@ bb542
	mov r5, #0
	mov r0, r5
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_569:	@ bb543
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_parm_info
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_570:	@ bb544
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_parm_info
	@comment
str r0, [r11, #-1244]
	ldr r0, .LCPI1_98
	emit_nops_till_bundle_end
	bl error
	b .LBB1_597	@ bb566
	.align	2
.LBB1_571:	@ bb545
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_parm_info
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_572:	@ bb546
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_parm_info
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_573:	@ bb547
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl push_parm_decl
	b .LBB1_597	@ bb566
	.align	2
.LBB1_574:	@ bb548
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl push_parm_decl
	b .LBB1_597	@ bb566
	.align	2
.LBB1_575:	@ bb549
	ldr r5, .LCPI1_35
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r7, r0
	ldr r8, .LCPI1_34
	ldr r0, [r8]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	ldr r3, .LCPI1_33
	ldr r2, [r3]
	ldr r1, [r2, #+16]
	@comment
str r1, [r8]
	ldr r1, [r2, #+12]
	@comment
str r1, [r5]
	ldr r5, [r2]
	@comment
str r5, [r3]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_576:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_205:
 	.long	.str273

	.align	4
.LBB1_577:	@ bb550
	ldr r5, .LCPI1_35
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r7, r0
	ldr r8, .LCPI1_34
	ldr r0, [r8]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	ldr r3, .LCPI1_33
	ldr r2, [r3]
	ldr r1, [r2, #+16]
	@comment
str r1, [r8]
	ldr r1, [r2, #+12]
	@comment
str r1, [r5]
	ldr r5, [r2]
	@comment
str r5, [r3]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	4
.LBB1_578:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_206:
 	.long	.str274

	.align	4
.LBB1_579:	@ bb551
	ldr r5, .LCPI1_35
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r7, r0
	ldr r8, .LCPI1_34
	ldr r0, [r8]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	ldr r3, .LCPI1_33
	ldr r2, [r3]
	ldr r1, [r2, #+16]
	@comment
str r1, [r8]
	ldr r1, [r2, #+12]
	@comment
str r1, [r5]
	ldr r5, [r2]
	@comment
str r5, [r3]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_580:	@ bb552
	ldr r5, .LCPI1_35
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r7, r0
	ldr r8, .LCPI1_34
	ldr r0, [r8]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	ldr r3, .LCPI1_33
	ldr r2, [r3]
	ldr r1, [r2, #+16]
	@comment
str r1, [r8]
	ldr r1, [r2, #+12]
	@comment
str r1, [r5]
	ldr r5, [r2]
	@comment
str r5, [r3]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_581:	@ bb553
	ldr r5, .LCPI1_35
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r7, r0
	ldr r8, .LCPI1_34
	ldr r0, [r8]
	ldr r1, [r4, #-4]
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	ldr r3, .LCPI1_33
	ldr r2, [r3]
	ldr r1, [r2, #+16]
	@comment
str r1, [r8]
	ldr r1, [r2, #+12]
	@comment
str r1, [r5]
	ldr r5, [r2]
	@comment
str r5, [r3]
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl resume_momentary
	b .LBB1_597	@ bb566
	.align	2
.LBB1_582:	@ bb554
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl pushlevel
	emit_nops_till_bundle_end
	bl clear_parm_order
	mov r5, #1
	mov r0, r5
	emit_nops_till_bundle_end
	bl declare_parm_level
	b .LBB1_597	@ bb566
	.align	2
.LBB1_583:	@ bb555
	ldr r5, [r4]
	@comment
str r5, [r11, #-1244]
	emit_nops_till_bundle_end
	bl parmlist_tags_warning
	mov r5, #0
	mov r0, r5
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl poplevel
	b .LBB1_597	@ bb566
	.align	4
.LBB1_584:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_207:
 	.long	.str242

.LBB1_585:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_208:
 	.long	ridpointers

	.align	4
.LBB1_586:	@ bb556
	ldr r5, [r4, #-4]
.LBB1_587:	@ bb556
	cmp r5, #0
	beq .LBB1_591	@ bb561
.LBB1_588:	@ bb557
	ldr r3, [r5, #+16]
	cmp r3, #0
	ldreq r0, .LCPI1_99
	emit_nops_till_bundle_end
	bleq error
.LBB1_589:	@ bb558
.LBB1_590:	@ bb559
	ldr r5, [r5]
	b .LBB1_587	@ bb556
.LBB1_591:	@ bb561
	ldr r2, [r4, #-4]
	mov r5, #0
	mov r0, r5
	mov r1, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_592:	@ bb562
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_593:	@ bb563
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r0
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	2
.LBB1_594:	@ bb564
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_595:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_209:
 	.long	ptr_type_node

	.align	4
.LBB1_596:	@ bb565
	ldr r1, [r4]
	mov r5, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r1, r0
	ldr r0, [r4, #-8]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r11, #-1244]
	.align	2
.LBB1_597:	@ bb566
	ldr r5, [r11, #-1272]
	rsb r5, r5, #0
	ldr r3, [r11, #-1248]
	add r3, r3, r5, lsl #1
	@comment
str r3, [r11, #-1248]
	ldr r5, .LCPI1_0
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_602	@ bb571
.LBB1_598:	@ bb567
	mov r5, #2
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_100
	emit_nops_till_bundle_end
	bl fprintf
	ldr r5, [r11, #-1256]
	sub r5, r5, #2
	ldr r3, [r11, #-1248]
	cmp r5, r3
	beq .LBB1_601	@ bb570
.LBB1_599:	@ bb567.bb568_crit_edge
	ldr r5, [r11, #-1256]
.LBB1_600:	@ bb568
	mov r7, r5
	ldrsh r8, [r7], #+2
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_101
	mov r2, r8
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, [r11, #-1248]
	cmp r5, r3
	mov r5, r7
	bne .LBB1_600	@ bb568
.LBB1_601:	@ bb570
	mov r5, #2
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_102
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_602:	@ bb571
	ldr r5, [r11, #-1272]
	rsb r5, r5, #1
	ldr r3, [r11, #-1244]
	str r3, [r4, +r5, lsl #2]!
	mov r5, r6, lsl #1
	ldr r6, .LCPI1_25
	ldrsh r5, [r6, +r5]
	sub r5, r5, #84
	mov r6, r5, lsl #1
	ldr r3, .LCPI1_103
	ldrsh r6, [r3, +r6]
	ldr r3, [r11, #-1248]
	ldrsh r3, [r3]
	add r6, r3, r6
	ldr r2, .LCPI1_114
	cmp r6, r2
	bhi .LBB1_606	@ bb574
.LBB1_603:	@ bb572
	mov r2, r6, lsl #1
	ldr r1, .LCPI1_15
	ldrh r2, [r1, +r2]
	ldr r1, .LCPI1_111
	and r3, r3, r1
	cmp r2, r3
	bne .LBB1_606	@ bb574
.LBB1_604:	@ bb573
	mov r5, r6, lsl #1
	ldr r6, .LCPI1_16
	ldrsh r5, [r6, +r5]
	b .LBB1_3	@ yynewstate.outer
	.align	4
.LBB1_605:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_210:
 	.long	.str277

	.align	4
.LBB1_606:	@ bb574
	mov r5, r5, lsl #1
	ldr r6, .LCPI1_104
	ldrsh r5, [r6, +r5]
	b .LBB1_3	@ yynewstate.outer
.LBB1_607:	@ bb576
	ldr r6, .LCPI1_3
	ldr r6, [r6]
	cmp r6, #0
	beq .LBB1_637	@ bb22.bb599_crit_edge
.LBB1_608:	@ bb578
	ldr r3, .LCPI1_0
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB1_610	@ bb580
.LBB1_609:	@ bb579
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI1_11
	ldr r2, [r11, #-1260]
	ldr r3, [r3, +r2, lsl #2]
	ldr r1, .LCPI1_106
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_610:	@ bb580
	ldr r6, .LCPI1_3
	mvn r3, #1
	@comment
str r3, [r6]
	b .LBB1_85	@ yyerrlab1.yyerrhandle_crit_edge
	.align	4
.LBB1_611:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_211:
 	.long	convert_and_check

.LBB1_612:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_212:
 	.long	.str278

.LBB1_613:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_213:
 	.long	.str279

.LBB1_614:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_214:
 	.long	.str280

.LBB1_615:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_215:
 	.long	.str281

.LBB1_616:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_216:
 	.long	.str282

	.align	4
.LBB1_617:	@ yyerrpop
	ldr r5, [r11, #-1248]
	ldr r3, [r11, #-1256]
	cmp r5, r3
	beq .LBB1_637	@ bb22.bb599_crit_edge
.LBB1_618:	@ bb583
	ldr r5, .LCPI1_0
	ldr r3, [r5]
	ldr r7, [r11, #-1248]
	ldrsh r5, [r7, #-2]!
	cmp r3, #0
	beq .LBB1_623	@ yyerrhandle.backedge
.LBB1_619:	@ bb584
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_107
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r11, #-1248]
	ldr r3, [r11, #-1256]
	cmp r3, r2
	beq .LBB1_622	@ bb587
.LBB1_620:	@ bb584.bb585_crit_edge
	ldr r8, [r11, #-1256]
.LBB1_621:	@ bb585
	mov r9, r8
	ldrsh r10, [r9], #+2
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_101
	mov r2, r10
	emit_nops_till_bundle_end
	bl fprintf
	cmp r8, r7
	mov r8, r9
	bne .LBB1_621	@ bb585
.LBB1_622:	@ bb587
	mov r3, #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_102
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_623:	@ yyerrhandle.backedge
	sub r6, r6, #4
	ldr r3, [r11, #-1248]
	sub r3, r3, #2
	@comment
str r3, [r11, #-1248]
.LBB1_624:	@ yyerrhandle
	mov r3, r5, lsl #1
	ldr r2, .LCPI1_7
	ldrh r3, [r2, +r3]
	cmp r3, #2, 18 @ 32768
	beq .LBB1_617	@ yyerrpop
.LBB1_625:	@ bb588
	mov r3, r3, lsl #16
	mov r2, #1
	add r3, r2, r3, asr #16
	ldr r2, .LCPI1_114
	cmp r3, r2
	bhi .LBB1_617	@ yyerrpop
.LBB1_626:	@ bb589
	mov r2, r3, lsl #1
	ldr r1, .LCPI1_15
	ldrh r2, [r1, +r2]
	cmp r2, #1
	bne .LBB1_617	@ yyerrpop
.LBB1_627:	@ bb590
	mov r3, r3, lsl #1
	ldr r2, .LCPI1_16
	ldrsh r7, [r2, +r3]
	cmp r7, #0
	bge .LBB1_631	@ bb593
.LBB1_628:	@ bb591
	ldr r3, .LCPI1_111
	and r3, r7, r3
	cmp r3, #2, 18 @ 32768
	beq .LBB1_617	@ yyerrpop
.LBB1_629:	@ bb592
	add r4, r4, r6
	rsb r6, r7, #0
	mov r7, #3
	@comment
str r7, [r11, #-1264]
	b .LBB1_31	@ yyreduce
	.align	4
.LBB1_630:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_217:
 	.long	.str283

	.align	4
.LBB1_631:	@ bb593
	ldr r5, .LCPI1_111
	tst r7, r5
	beq .LBB1_617	@ yyerrpop
.LBB1_632:	@ bb593
	ldr r5, .LCPI1_111
	and r5, r7, r5
	ldr r3, .LCPI1_112
	cmp r5, r3
	beq .LBB1_646	@ bb43.bb599_crit_edge
.LBB1_633:	@ bb596
	ldr r5, .LCPI1_0
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB1_635	@ bb598
.LBB1_634:	@ bb597
	mov r5, #2
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI1_108
	emit_nops_till_bundle_end
	bl fprintf
.LBB1_635:	@ bb598
	add r4, r4, r6
	ldr r5, .LCPI1_13
	ldr r5, [r5]
	str r5, [r4, #+4]!
	mov r5, #3
	@comment
str r5, [r11, #-1264]
	mov r5, r7
	b .LBB1_3	@ yynewstate.outer
.LBB1_636:	@ bb17
	ldr r0, .LCPI1_4
	emit_nops_till_bundle_end
	bl yyerror
	mov r0, #2
	b .LBB1_638	@ bb599
.LBB1_637:	@ bb22.bb599_crit_edge
	mov r0, #1
.LBB1_638:	@ bb599
	sub sp, r11, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
	.align	4
.LBB1_639:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_218:
 	.long	.str284

.LBB1_640:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_219:
 	.long	.str285

.LBB1_641:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_220:
 	.long	.str286

.LBB1_642:	@ bb33.bb36_crit_edge
	.align	4
.LBB1_643:	@ yydefault
	mov r6, r5, lsl #1
	ldr r3, .LCPI1_18
	ldrh r3, [r3, +r6]
	mov r6, r3, lsl #16
	mov r6, r6, asr #16
	cmp r3, #0
	bne .LBB1_31	@ yyreduce
.LBB1_644:	@ yyerrlab
	ldr r6, [r11, #-1264]
	cmp r6, #0
	bne .LBB1_84	@ yyerrlab1
.LBB1_645:	@ bb575
	ldr r6, .LCPI1_2
	ldr r3, [r6]
	add r3, r3, #1
	@comment
str r3, [r6]
	ldr r0, .LCPI1_105
	emit_nops_till_bundle_end
	bl yyerror
	b .LBB1_84	@ yyerrlab1
.LBB1_646:	@ bb43.bb599_crit_edge
	mov r0, #0
	b .LBB1_638	@ bb599
.LBB1_647:	@ bb77
	ldr r0, .LCPI1_30
	emit_nops_till_bundle_end
	bl error
	b .LBB1_71	@ bb80
.LBB1_648:	@ bb172
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl implicitly_declare
	mov r5, r0
	@comment
str r5, [r11, #-1244]
	emit_nops_till_bundle_end
	bl assemble_external
	ldrb r3, [r5, #+10]
	ldrb r2, [r5, #+11]
	mov r1, r5
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	orr r3, r3, r2, lsl #8
	orr r3, r3, #1
	strb r3, [r5, #+10]
	strb r0, [r1]
	b .LBB1_211	@ bb200
.LBB1_649:	@ bb174
	ldr r1, [r3, #+16]
	ldr r0, .LCPI1_48
	emit_nops_till_bundle_end
	bl error
	ldr r5, .LCPI1_46
	ldr r5, [r5]
	@comment
str r5, [r11, #-1244]
	b .LBB1_211	@ bb200
.LBB1_650:	@ bb191
	ldr r3, [r5, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI1_53
	emit_nops_till_bundle_end
	bl error
	b .LBB1_207	@ bb195
.LBB1_651:	@ bb449
	emit_nops_till_bundle_end
	bl pop_momentary_nofree
	b .LBB1_477	@ bb451
.LBB1_652:	@ bb478
	ldr r0, .LCPI1_84
	emit_nops_till_bundle_end
	bl error
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
.LBB1_653:	@ bb484
	ldr r5, [r0, #+32]
	ldr r1, [r5, #+16]
	ldr r0, .LCPI1_85
	emit_nops_till_bundle_end
	bl error
	mov r5, #0
	@comment
str r5, [r11, #-1244]
	b .LBB1_597	@ bb566
	.align	4
.LBB1_654:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_0:
 	.long	yydebug

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_2:
 	.long	yynerrs

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_3:
 	.long	yychar

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_4:
 	.long	.str1

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_7:
 	.long	yypact

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_11:
 	.long	yytname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_13:
 	.long	yylval

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_15:
 	.long	yycheck

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_16:
 	.long	yytable

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_18:
 	.long	yydefact

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_25:
 	.long	yyr1

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_27:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_30:
 	.long	.str243

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_33:
 	.long	declspec_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_34:
 	.long	current_declspecs

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_35:
 	.long	prefix_attributes

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_46:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_48:
 	.long	.str252

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_53:
 	.long	.str256

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_84:
 	.long	.str275

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_85:
 	.long	.str276

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_97:
 	.long	.str287

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_98:
 	.long	.str288

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_99:
 	.long	.str289

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_100:
 	.long	.str290

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_101:
 	.long	.str291

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_102:
 	.long	.str292

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_103:
 	.long	yypgoto

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_104:
 	.long	yydefgoto

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_105:
 	.long	.str293

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_106:
 	.long	.str294

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_107:
 	.long	.str295

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_108:
 	.long	.str296

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_111:
 	.long	65535			@ 0xFFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_112:
 	.long	658			@ 0x292

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI1_114:
 	.long	2115			@ 0x843

	.size yyparse, .-yyparse


	.globl	lang_decode_option
	.align	4
lang_decode_option:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	emit_nops_till_bundle_end
	bl c_decode_option
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size lang_decode_option, .-lang_decode_option


	.globl	lang_finish
	.align	4
lang_finish:
	sfi_bx lr
	.size lang_finish, .-lang_finish


	.globl	lang_identify
	.align	4
lang_identify:
	ldr r0, .LCPI4_0
	sfi_bx lr
	.align	4
.LBB4_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI4_0:
 	.long	.str298

	.size lang_identify, .-lang_identify


	.globl	print_lang_statistics
	.align	4
print_lang_statistics:
	sfi_bx lr
	.size print_lang_statistics, .-print_lang_statistics


	.globl	lookup_interface
	.align	4
lookup_interface:
	mov r0, #0
	sfi_bx lr
	.size lookup_interface, .-lookup_interface


	.globl	is_class_name
	.align	4
is_class_name:
	mov r0, #0
	sfi_bx lr
	.size is_class_name, .-is_class_name


	.globl	maybe_objc_check_decl
	.align	4
maybe_objc_check_decl:
	sfi_bx lr
	.size maybe_objc_check_decl, .-maybe_objc_check_decl


	.globl	maybe_objc_comptypes
	.align	4
maybe_objc_comptypes:
	mvn r0, #0
	sfi_bx lr
	.size maybe_objc_comptypes, .-maybe_objc_comptypes


	.globl	maybe_objc_method_name
	.align	4
maybe_objc_method_name:
	mov r0, #0
	sfi_bx lr
	.size maybe_objc_method_name, .-maybe_objc_method_name


	.globl	maybe_building_objc_message_expr
	.align	4
maybe_building_objc_message_expr:
	mov r0, #0
	sfi_bx lr
	.size maybe_building_objc_message_expr, .-maybe_building_objc_message_expr


	.globl	recognize_objc_keyword
	.align	4
recognize_objc_keyword:
	mov r0, #0
	sfi_bx lr
	.size recognize_objc_keyword, .-recognize_objc_keyword


	.globl	finish_file
	.align	4
finish_file:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI13_0
	ldr r1, [r3]
	mov r0, #0
	emit_nops_till_bundle_end
	bl build_tree_list
	ldr r3, .LCPI13_1
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	beq .LBB13_5	@ return
.LBB13_1:	@ bb
	mov r0, #73
	emit_nops_till_bundle_end
	bl get_file_function_name
	mov r1, r0
	mov r5, #0
	mov r0, #50
	mov r2, r4
	mov r3, #0
	emit_nops_till_bundle_end
	bl build_parse_node
	mov r1, r0
	@comment
str r5, [sp]
	mov r0, r4
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl start_function
	ldr r3, .LCPI13_2
	ldr r3, [r3]
	ldr r4, [r3, #+56]
	emit_nops_till_bundle_end
	bl store_parm_decls
	ldr r3, .LCPI13_1
	ldr r3, [r3]
	b .LBB13_3	@ bb1
.LBB13_2:	@ bb1
	ldr r0, [r3, #+16]
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_function_call
	emit_nops_till_bundle_end
	bl expand_expr_stmt
	ldr r2, .LCPI13_1
	ldr r3, [r2]
	ldr r3, [r3]
	@comment
str r3, [r2]
.LBB13_3:	@ bb1
	cmp r3, #0
	bne .LBB13_2	@ bb1
.LBB13_4:	@ bb3
	mov r0, #0
	emit_nops_till_bundle_end
	bl finish_function
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl assemble_constructor
.LBB13_5:	@ return
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB13_6:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI13_0:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI13_1:
 	.long	static_ctors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI13_2:
 	.long	current_function_decl

	.size finish_file, .-finish_file


	.globl	GNU_xref_end
	.align	4
GNU_xref_end:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r0, .LCPI14_0
	emit_nops_till_bundle_end
	bl fatal
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB14_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI14_0:
 	.long	.str1299

	.size GNU_xref_end, .-GNU_xref_end


	.globl	GNU_xref_begin
	.align	4
GNU_xref_begin:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r0, .LCPI15_0
	emit_nops_till_bundle_end
	bl fatal
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB15_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI15_0:
 	.long	.str1299

	.size GNU_xref_begin, .-GNU_xref_begin


	.globl	build_objc_string
	.align	4
build_objc_string:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	emit_nops_till_bundle_end
	bl abort
	.size build_objc_string, .-build_objc_string


	.globl	lang_init
	.align	4
lang_init:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI17_0
	ldr r4, [r3]
	emit_nops_till_bundle_end
	bl check_newline
	mov r1, r4
	emit_nops_till_bundle_end
	bl ungetc
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB17_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI17_0:
 	.long	finput

	.size lang_init, .-lang_init


	.globl	forget_protocol_qualifiers
	.align	4
forget_protocol_qualifiers:
	mov r3, #0
	ldr r2, .LCPI18_0
	mov r1, #179, 30 @ 716
	orr r1, r1, #1, 22 @ 1024
.LBB18_1:	@ bb
	add r0, r2, r3
	ldr r0, [r0, #+8]
	sub r0, r0, #22
	cmp r0, #4
	ldrls r0, .LCPI18_1
	@comment
strls r0, [r2, +r3]
.LBB18_2:	@ bb1
.LBB18_3:	@ bb3
	add r3, r3, #12
	cmp r3, r1
	sfi_bxeq lr
	b .LBB18_1	@ bb
.LBB18_4:	@ return
	.align	4
.LBB18_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI18_0:
 	.long	wordlist

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI18_1:
 	.long	.str301

	.size forget_protocol_qualifiers, .-forget_protocol_qualifiers


	.globl	remember_protocol_qualifiers
	.align	4
remember_protocol_qualifiers:
	mov r3, #0
	ldr r2, .LCPI19_0
	mov r1, #179, 30 @ 716
	orr r1, r1, #1, 22 @ 1024
.LBB19_1:	@ bb
	add r0, r2, r3
	ldr r0, [r0, #+8]
	sub r0, r0, #22
	cmp r0, #4
	bhi .LBB19_8	@ bb11
.LBB19_2:	@ bb
	.set PCRELV3, (.LJTI19_0_0-(.LPCRELL3+8))
.LPCRELL3:
	add r12, pc, #PCRELV3
	ldr pc, [r12, +r0, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI19_0_0:
	.long	 .LBB19_3
	.long	 .LBB19_4
	.long	 .LBB19_5
	.long	 .LBB19_6
	.long	 .LBB19_7

.text
@ JUMP TABLE END



	.align	2
.LBB19_3:	@ bb1
	ldr r0, .LCPI19_1
	@comment
str r0, [r2, +r3]
	b .LBB19_8	@ bb11
	.align	2
.LBB19_4:	@ bb3
	ldr r0, .LCPI19_2
	@comment
str r0, [r2, +r3]
	b .LBB19_8	@ bb11
	.align	2
.LBB19_5:	@ bb5
	ldr r0, .LCPI19_3
	@comment
str r0, [r2, +r3]
	b .LBB19_8	@ bb11
	.align	2
.LBB19_6:	@ bb7
	ldr r0, .LCPI19_4
	@comment
str r0, [r2, +r3]
	b .LBB19_8	@ bb11
	.align	2
.LBB19_7:	@ bb9
	ldr r0, .LCPI19_5
	@comment
str r0, [r2, +r3]
.LBB19_8:	@ bb11
	add r3, r3, #12
	cmp r3, r1
	sfi_bxeq lr
	b .LBB19_1	@ bb
.LBB19_9:	@ return
	.align	4
.LBB19_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI19_0:
 	.long	wordlist

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI19_1:
 	.long	.str21322

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI19_2:
 	.long	.str52353

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI19_3:
 	.long	.str57358

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI19_4:
 	.long	.str19320

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI19_5:
 	.long	.str58359

	.size remember_protocol_qualifiers, .-remember_protocol_qualifiers


	.globl	reinit_parse_for_function
	.align	4
reinit_parse_for_function:
	sfi_bx lr
	.size reinit_parse_for_function, .-reinit_parse_for_function


	.globl	set_yydebug
	.align	4
set_yydebug:
	ldr r3, .LCPI21_0
	@comment
str r0, [r3]
	sfi_bx lr
	.align	4
.LBB21_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI21_0:
 	.long	yydebug

	.size set_yydebug, .-set_yydebug


	.globl	yyprint
	.align	4
yyprint:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI22_0
	add r3, r1, r3
	cmp r3, #2
	blo .LBB22_3	@ bb
.LBB22_1:	@ entry
	mov r3, #7
	orr r3, r3, #1, 24 @ 256
	cmp r1, r3
	beq .LBB22_5	@ bb2
.LBB22_2:	@ entry
	mov r3, #57
	orr r3, r3, #1, 24 @ 256
	cmp r1, r3
	bne .LBB22_7	@ return
.LBB22_3:	@ bb
	ldr r2, [r2, #+16]
	cmp r2, #0
	beq .LBB22_7	@ return
.LBB22_4:	@ bb1
	ldr r1, .LCPI22_1
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB22_7	@ return
.LBB22_5:	@ bb2
	ldrb r3, [r2, #+8]
	cmp r3, #25
	bne .LBB22_7	@ return
.LBB22_6:	@ bb3
	ldr r12, [r2, #+16]
	ldr r3, [r2, #+12]
	ldr r1, .LCPI22_2
	mov r2, r12
	emit_nops_till_bundle_end
	bl fprintf
.LBB22_7:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB22_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI22_0:
 	.long	4294967038			@ 0xFFFFFEFE

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI22_1:
 	.long	.str80381

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI22_2:
 	.long	.str81382

	.size yyprint, .-yyprint


	.align	4
readescape:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	mov r4, r0
	ldr r3, .LCPI23_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	mov r5, r0
	cmp r0, #33
	ble .LBB23_66	@ entry
.LBB23_1:	@ entry
	cmp r5, #90
	bgt .LBB23_14	@ entry
.LBB23_2:	@ entry
	cmp r5, #47
	bgt .LBB23_8	@ entry
.LBB23_3:	@ entry
	sub r4, r5, #34
	cmp r4, #6
	bhi .LBB23_63	@ bb57
.LBB23_4:	@ entry
	.set PCRELV4, (.LJTI23_2_2-(.LPCRELL4+8))
.LPCRELL4:
	add r3, pc, #PCRELV4
	ldr pc, [r3, +r4, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI23_2_2:
	.long	 .LBB23_13
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_5
	.long	 .LBB23_63
	.long	 .LBB23_13
	.long	 .LBB23_5

.text
@ JUMP TABLE END



	.align	2
.LBB23_5:	@ bb54
	ldr r3, .LCPI23_9
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB23_13	@ bb61
.LBB23_6:	@ bb55
	ldr r0, .LCPI23_11
.LBB23_7:	@ bb55
	mov r1, r5
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB23_13	@ bb61
.LBB23_8:	@ entry
	sub r4, r5, #48
	cmp r4, #8
	blo .LBB23_68	@ entry.bb33_crit_edge
.LBB23_9:	@ entry
	cmp r5, #63
	beq .LBB23_13	@ bb61
.LBB23_10:	@ entry
	cmp r5, #69
	bne .LBB23_63	@ bb57
	.align	2
.LBB23_11:	@ bb50
	ldr r3, .LCPI23_9
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB23_62	@ bb51
.LBB23_12:	@ bb50.bb61_crit_edge
	mov r5, #27
	.align	2
.LBB23_13:	@ bb61
	mov r0, r5
	b .LBB23_54	@ bb39
.LBB23_14:	@ entry
	cmp r5, #109
	bgt .LBB23_18	@ entry
.LBB23_15:	@ entry
	sub r4, r5, #91
	cmp r4, #11
	bhi .LBB23_63	@ bb57
.LBB23_16:	@ entry
	.set PCRELV5, (.LJTI23_1_1-(.LPCRELL5+8))
.LPCRELL5:
	add r3, pc, #PCRELV5
	ldr pc, [r3, +r4, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI23_1_1:
	.long	 .LBB23_5
	.long	 .LBB23_13
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_58
	.long	 .LBB23_57
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_11
	.long	 .LBB23_17

.text
@ JUMP TABLE END



	.align	2
.LBB23_17:	@ bb42
	mov r0, #12
	b .LBB23_54	@ bb39
.LBB23_18:	@ entry
	sub r4, r5, #110
	cmp r4, #13
	bhi .LBB23_63	@ bb57
.LBB23_19:	@ entry
	.set PCRELV6, (.LJTI23_0_0-(.LPCRELL6+8))
.LPCRELL6:
	add r3, pc, #PCRELV6
	ldr pc, [r3, +r4, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI23_0_0:
	.long	 .LBB23_53
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_56
	.long	 .LBB23_63
	.long	 .LBB23_55
	.long	 .LBB23_63
	.long	 .LBB23_61
	.long	 .LBB23_63
	.long	 .LBB23_20
	.long	 .LBB23_63
	.long	 .LBB23_63
	.long	 .LBB23_5

.text
@ JUMP TABLE END



	.align	2
.LBB23_20:	@ bb
	ldr r4, .LCPI23_1
	ldr r4, [r4]
	cmp r4, #0
	ldrne r0, .LCPI23_2
	emit_nops_till_bundle_end
	blne warning
.LBB23_21:	@ bb1
.LBB23_22:	@ bb2
	ldr r4, .LCPI23_3
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB23_13	@ bb61
.LBB23_23:	@ bb2.bb5.outer_crit_edge
	mov r4, #0
	mov r6, r4
	mov r7, r4
	mov r5, r4
	mov r8, r4
	mov r9, r4
.LBB23_24:	@ bb5.outer
	cmp r7, #0
	beq .LBB23_35	@ bb5
.LBB23_25:	@ bb5.us
	ldr r3, .LCPI23_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	sub r3, r0, #97
	sub r2, r0, #65
	cmp r3, #6
	cmphs r2, #5
	bhi .LBB23_32	@ bb8.us
.LBB23_26:	@ bb5.us
.LBB23_27:	@ bb10.us
	mov r9, r5, lsl #4
	cmp r3, #6
	addlo r9, r9, r0
	sublo r9, r9, #87
.LBB23_28:	@ bb11.us
.LBB23_29:	@ bb12.us
	cmp r2, #6
	addlo r9, r0, r9
	sublo r9, r9, #55
.LBB23_30:	@ bb13.us
.LBB23_31:	@ bb14.us
	sub r3, r0, #48
	add r5, r3, r9
	cmp r3, #9
	movhi r5, r9
	b .LBB23_43	@ bb20.split
.LBB23_32:	@ bb8.us
	sub r1, r0, #48
	cmp r1, #10
	blo .LBB23_27	@ bb10.us
.LBB23_33:	@ bb9.split
	ldr r3, .LCPI23_0
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl ungetc
	cmp r9, #0
	bne .LBB23_44	@ bb25
.LBB23_34:	@ bb24
	ldr r0, .LCPI23_4
	emit_nops_till_bundle_end
	bl error
	b .LBB23_13	@ bb61
.LBB23_35:	@ bb5
	ldr r3, .LCPI23_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	sub r3, r0, #97
	sub r2, r0, #65
	cmp r3, #6
	cmphs r2, #6
	bhs .LBB23_37	@ bb8
	b .LBB23_38	@ bb10
.LBB23_36:	@ bb5
.LBB23_37:	@ bb8
	sub r1, r0, #48
	cmp r1, #10
	bhs .LBB23_33	@ bb9.split
.LBB23_38:	@ bb10
	mov r9, r5, lsl #4
	cmp r3, #6
	addlo r9, r9, r0
	sublo r9, r9, #87
.LBB23_39:	@ bb11
.LBB23_40:	@ bb12
	cmp r2, #6
	addlo r9, r0, r9
	sublo r9, r9, #55
.LBB23_41:	@ bb13
.LBB23_42:	@ bb14
	sub r3, r0, #48
	add r5, r3, r9
	cmp r3, #9
	movhi r5, r9
	mov r9, #1
	cmp r5, #0
	beq .LBB23_35	@ bb5
.LBB23_43:	@ bb20.split
	cmp r7, #0
	moveq r8, r5
	sub r4, r4, #4
	add r6, r6, #4
	add r7, r7, #1
	mov r9, #1
	b .LBB23_24	@ bb5.outer
.LBB23_44:	@ bb25
	cmp r7, #0
	beq .LBB23_13	@ bb61
.LBB23_45:	@ bb26
	sub r6, r6, #4
	ldr r3, .LCPI23_5
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	cmp r6, r3
	bhs .LBB23_48	@ bb29
.LBB23_46:	@ bb27
	cmp r7, #2
	blo .LBB23_13	@ bb61
.LBB23_47:	@ bb28
	and r6, r3, #255
	add r4, r4, r6
	add r4, r4, #4
	mov r6, #1
	mov r4, r6, lsl r4
	cmp r4, r8
	bhi .LBB23_13	@ bb61
.LBB23_48:	@ bb29
	ldr r0, .LCPI23_6
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB23_13	@ bb61
.LBB23_49:	@ bb32
	ldr r3, .LCPI23_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	add r5, r5, r6, lsl #3
	sub r6, r5, #48
	add r4, r4, #1
.LBB23_50:	@ bb33
	mov r5, r0
	sub r3, r5, #48
	cmp r3, #7
	cmpls r4, #3
	blo .LBB23_49	@ bb32
.LBB23_51:	@ bb33
.LBB23_52:	@ bb36
	ldr r4, .LCPI23_0
	ldr r1, [r4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl ungetc
	mov r0, r6
	b .LBB23_54	@ bb39
	.align	2
.LBB23_53:	@ bb39
	mov r0, #10
.LBB23_54:	@ bb39
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
	.align	2
.LBB23_55:	@ bb40
	mov r0, #9
	b .LBB23_54	@ bb39
	.align	2
.LBB23_56:	@ bb41
	mov r0, #13
	b .LBB23_54	@ bb39
	.align	2
.LBB23_57:	@ bb43
	mov r0, #8
	b .LBB23_54	@ bb39
	.align	2
.LBB23_58:	@ bb44
	ldr r3, .LCPI23_1
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI23_8
	emit_nops_till_bundle_end
	blne warning
.LBB23_59:	@ bb45
.LBB23_60:	@ bb46
	ldr r3, .LCPI23_3
	ldr r3, [r3]
	mov r2, #7
	cmp r3, #0
	mov r0, r5
	moveq r0, r2
	b .LBB23_54	@ bb39
	.align	2
.LBB23_61:	@ bb49
	mov r0, #11
	b .LBB23_54	@ bb39
.LBB23_62:	@ bb51
	ldr r0, .LCPI23_10
	mov r1, r5
	emit_nops_till_bundle_end
	bl pedwarn
	mov r0, #27
	b .LBB23_54	@ bb39
	.align	2
.LBB23_63:	@ bb57
	sub r3, r5, #32
	cmp r3, #94
	ldrhi r0, .LCPI23_13
	ldrls r0, .LCPI23_12
	b .LBB23_7	@ bb55
.LBB23_64:	@ bb58
.LBB23_65:	@ bb59
.LBB23_66:	@ entry
	cmp r5, #10
	bne .LBB23_63	@ bb57
.LBB23_67:	@ bb38
	ldr r5, .LCPI23_7
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	mov r5, #1
	@comment
str r5, [r4]
	mov r0, #0
	b .LBB23_54	@ bb39
.LBB23_68:	@ entry.bb33_crit_edge
	mov r4, #0
	mov r6, r4
	mov r0, r5
	b .LBB23_50	@ bb33
	.align	4
.LBB23_69:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_0:
 	.long	finput

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_1:
 	.long	warn_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_2:
 	.long	.str82383

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_3:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_4:
 	.long	.str83384

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_5:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_6:
 	.long	.str84385

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_7:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_8:
 	.long	.str85386

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_9:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_10:
 	.long	.str86387

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_11:
 	.long	.str87388

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_12:
 	.long	.str88389

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI23_13:
 	.long	.str89390

	.size readescape, .-readescape


	.globl	yyerror
	.align	4
yyerror:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #200
	mov r1, r0
	mov r0, sp
	emit_nops_till_bundle_end
	bl strcpy
	ldr r3, .LCPI24_0
	ldrb r3, [r3]
	teq r3, #1
	beq .LBB24_10	@ bb
.LBB24_1:	@ bb3
	ldr r3, .LCPI24_2
	ldr r3, [r3]
	ldrb r4, [r3]
	cmp r4, #39
	beq .LBB24_6	@ bb10
.LBB24_2:	@ bb3
	and r3, r4, #255
	cmp r3, #34
	beq .LBB24_5	@ bb7
.LBB24_3:	@ bb3
	tst r4, #255
	bne .LBB24_7	@ bb12
.LBB24_4:	@ bb4
	mov r0, sp
	ldr r1, .LCPI24_3
	emit_nops_till_bundle_end
	bl strcat
	b .LBB24_9	@ bb18
.LBB24_5:	@ bb7
	mov r0, sp
	ldr r1, .LCPI24_4
	emit_nops_till_bundle_end
	bl strcat
	b .LBB24_9	@ bb18
.LBB24_6:	@ bb10
	mov r0, sp
	ldr r1, .LCPI24_5
	emit_nops_till_bundle_end
	bl strcat
	b .LBB24_9	@ bb18
.LBB24_7:	@ bb12
	sub r3, r4, #32
	and r3, r3, #255
	cmp r3, #95
	bhs .LBB24_11	@ bb13
.LBB24_8:	@ bb16
	mov r0, sp
	ldr r1, .LCPI24_7
	emit_nops_till_bundle_end
	bl strcat
.LBB24_9:	@ bb18
	ldr r3, .LCPI24_2
	ldr r1, [r3]
	mov r0, sp
	emit_nops_till_bundle_end
	bl error
	sfi_add sp, sp, #200
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB24_10:	@ bb
	mov r0, sp
	ldr r1, .LCPI24_1
	emit_nops_till_bundle_end
	bl strcat
	b .LBB24_9	@ bb18
.LBB24_11:	@ bb13
	mov r5, sp
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	add r0, r5, r0
	and r2, r4, #255
	ldr r1, .LCPI24_6
	emit_nops_till_bundle_end
	bl sprintf
	b .LBB24_9	@ bb18
	.align	4
.LBB24_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_0:
 	.long	end_of_file.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_1:
 	.long	.str90391

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_2:
 	.long	token_buffer

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_3:
 	.long	.str91392

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_4:
 	.long	.str92393

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_5:
 	.long	.str93394

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_6:
 	.long	.str94395

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI24_7:
 	.long	.str95396

	.size yyerror, .-yyerror


	.globl	make_pointer_declarator
	.align	4
make_pointer_declarator:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r2, r1
	mov r1, r0
	mov r0, #39
	emit_nops_till_bundle_end
	bl build1
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size make_pointer_declarator, .-make_pointer_declarator


	.globl	is_reserved_word
	.align	4
is_reserved_word:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	sub r3, r1, #2
	cmp r3, #19
	bhs .LBB26_9	@ bb4
.LBB26_1:	@ bb
	sub r3, r1, #1
	cmp r3, #1
	movls r3, r1
	ldrhisb r3, [r0, #+2]
	ldrhi r2, .LCPI26_0
	ldrhib r3, [r2, +r3]
	addhi r3, r3, r1
	b .LBB26_3	@ hash.exit
.LBB26_2:	@ bb.i
.LBB26_3:	@ hash.exit
	mov r2, r0
	ldrsb r1, [r2], +r1
	ldrsb r2, [r2, #-1]
	ldr r12, .LCPI26_0
	ldrb r2, [r12, +r2]
	ldrb r12, [r12, +r1]
	add r3, r12, r3
	add r4, r3, r2
	cmp r4, #145
	bhs .LBB26_9	@ bb4
.LBB26_4:	@ bb1
	mov r3, #12
	mul r3, r4, r3
	ldr r2, .LCPI26_1
	ldr r3, [r2, +r3]
	ldrb r2, [r3]
	and r1, r1, #255
	cmp r2, r1
	bne .LBB26_9	@ bb4
.LBB26_5:	@ bb2
	add r0, r0, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB26_9	@ bb4
.LBB26_6:	@ bb3
	ldr r3, .LCPI26_1
	mov r2, #12
	mla r0, r4, r2, r3
.LBB26_7:	@ bb3
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB26_8:	@ bb.hash.exit_crit_edge
.LBB26_9:	@ bb4
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI26_2
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #0
	b .LBB26_7	@ bb3
	.align	4
.LBB26_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI26_0:
 	.long	asso_values.4083

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI26_1:
 	.long	wordlist

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI26_2:
 	.long	.str96397

	.size is_reserved_word, .-is_reserved_word


	.globl	yylex
	.align	4
yylex:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add r11, sp, #28
	sfi_sub sp, sp, #228
	ldr r3, .LCPI27_70
	ldr r0, [r3]
	cmp r0, #0
	bge .LBB27_477	@ bb
.LBB27_1:	@ bb6
	ldr r3, .LCPI27_71
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
.LBB27_2:	@ bb7
	cmp r0, #91
	bgt .LBB27_7	@ bb7
.LBB27_3:	@ bb7
	cmp r0, #46
	bgt .LBB27_8	@ bb7
.LBB27_4:	@ bb7
	sub r3, r0, #8
	cmp r3, #24
	bhi .LBB27_10	@ found_nonwhite
.LBB27_5:	@ bb7
	mov r2, #1
	mov r1, #27
	orr r1, r1, #1, 8 @ 16777216
	tst r1, r2, lsl r3
	bne .LBB27_1	@ bb6
.LBB27_6:	@ bb7
	mov r2, #1
	mov r1, #36
	tst r1, r2, lsl r3
	bne .LBB27_9	@ bb9
	b .LBB27_10	@ found_nonwhite
.LBB27_7:	@ bb7
	cmp r0, #92
	emit_nops_till_bundle_end
	bleq skip_white_space
	b .LBB27_10	@ found_nonwhite
.LBB27_8:	@ bb7
	cmp r0, #47
	bne .LBB27_10	@ found_nonwhite
.LBB27_9:	@ bb9
	emit_nops_till_bundle_end
	bl skip_white_space
.LBB27_10:	@ found_nonwhite
	mov r3, r0
	@comment
str r3, [r11, #-240]
	ldr r2, .LCPI27_72
	ldr r1, [r2]
	strb r3, [r1]
	ldr r2, [r2]
	mov r1, #0
	strb r1, [r2, #+1]
	add r3, r3, #1
	cmp r3, #125
	bhi .LBB27_473	@ done
.LBB27_11:	@ found_nonwhite
	.set PCRELV7, (.LJTI27_0_0-(.LPCRELL7+8))
.LPCRELL7:
	add r2, pc, #PCRELV7
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI27_0_0:
	.long	 .LBB27_26
	.long	 .LBB27_23
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_398
	.long	 .LBB27_12
	.long	 .LBB27_473
	.long	 .LBB27_474
	.long	 .LBB27_398
	.long	 .LBB27_398
	.long	 .LBB27_332
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_398
	.long	 .LBB27_398
	.long	 .LBB27_473
	.long	 .LBB27_398
	.long	 .LBB27_24
	.long	 .LBB27_398
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_24
	.long	 .LBB27_398
	.long	 .LBB27_473
	.long	 .LBB27_398
	.long	 .LBB27_398
	.long	 .LBB27_398
	.long	 .LBB27_473
	.long	 .LBB27_31
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_27
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_473
	.long	 .LBB27_398
	.long	 .LBB27_34
	.long	 .LBB27_473
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_34
	.long	 .LBB27_473
	.long	 .LBB27_398

.text
@ JUMP TABLE END



	.align	2
.LBB27_12:	@ found_nonwhite.string_constant_crit_edge
	mov r3, #0
	@comment
str r3, [r11, #-236]
	mov r4, r3
.LBB27_13:	@ string_constant
	ldr r3, .LCPI27_71
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	ldr r3, .LCPI27_72
	ldr r3, [r3]
	add r5, r3, #1
	cmp r0, #34
	beq .LBB27_385	@ bb506
.LBB27_14:	@ string_constant
	cmp r0, #0
	blt .LBB27_385	@ bb506
.LBB27_15:	@ bb.nph787
	mov r6, #12
	mov r7, #0
	mov r8, #1
	mov r9, r0
.LBB27_16:	@ bb489
	cmp r9, #10
	beq .LBB27_377	@ bb496
.LBB27_17:	@ bb489
	cmp r9, #92
	bne .LBB27_380	@ bb499
.LBB27_18:	@ bb490
	@comment
str r7, [r11, #-32]
	sub r0, r11, #32
	emit_nops_till_bundle_end
	bl readescape
	ldr r3, [r11, #-32]
	mov r9, r0
	cmp r3, #0
	bne .LBB27_383	@ skipnewline
.LBB27_19:	@ bb491
	cmp r4, #0
	bne .LBB27_380	@ bb499
.LBB27_20:	@ bb492
	ldr r3, .LCPI27_73
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	cmp r3, #31
	bhi .LBB27_380	@ bb499
.LBB27_21:	@ bb493
	and r3, r3, #255
	mov r3, r8, lsl r3
	cmp r3, r9
	bgt .LBB27_380	@ bb499
.LBB27_22:	@ bb494
	ldr r0, .LCPI27_74
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB27_380	@ bb499
	.align	2
.LBB27_23:	@ found_nonwhite.done_crit_edge
	mov r4, #1
	@comment
str r4, [r11, #-240]
	b .LBB27_473	@ done
	.align	2
.LBB27_24:	@ bb75.preheader
	sub r0, r11, #232
	mov r1, #0
	mov r2, #40
	emit_nops_till_bundle_end
	bl memset
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	mov r5, r4
	ldr r3, [r11, #-240]
	strb r3, [r5], #+1
	cmp r3, #48
	beq .LBB27_74	@ bb77
.LBB27_25:	@ bb75.preheader.bb124.outer_crit_edge
	mov r4, #0
	mov r6, #10
	@comment
str r4, [r11, #-244]
	@comment
str r4, [r11, #-236]
	mov r7, r4
	b .LBB27_88	@ bb124.outer
	.align	2
.LBB27_26:	@ bb10
	ldr r4, .LCPI27_75
	mov r5, #1
	strb r5, [r4]
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	mov r5, #0
	strb r5, [r4]
	mvn r4, #0
	@comment
str r4, [r11, #-240]
	b .LBB27_473	@ done
	.align	2
.LBB27_27:	@ bb13
	ldr r4, .LCPI27_71
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #39
	beq .LBB27_30	@ bb13.tryagain.preheader_crit_edge
.LBB27_28:	@ bb13
	cmp r0, #34
	bne .LBB27_33	@ bb22
.LBB27_29:	@ bb13.string_constant_crit_edge
	mov r4, #1
	mov r5, #0
	@comment
str r5, [r11, #-236]
	b .LBB27_13	@ string_constant
.LBB27_30:	@ bb13.tryagain.preheader_crit_edge
	mov r4, #32
	@comment
str r4, [r11, #-236]
	mov r4, #1
	@comment
str r4, [r11, #-252]
	mov r0, r4
	b .LBB27_333	@ tryagain.preheader
	.align	2
.LBB27_31:	@ bb18
	ldr r4, .LCPI27_76
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB27_473	@ done
.LBB27_32:	@ bb20
	ldr r4, .LCPI27_71
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #34
	beq .LBB27_478	@ bb20.string_constant_crit_edge
.LBB27_33:	@ bb22
	ldr r4, .LCPI27_71
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl ungetc
	.align	2
.LBB27_34:	@ letter
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	mov r5, #10
	mov r6, #12
	ldr r0, [r11, #-240]
	b .LBB27_43	@ bb30
.LBB27_35:	@ bb23
	cmp r7, #36
	beq .LBB27_39	@ bb26
.LBB27_36:	@ bb23
	cmp r7, #64
	bne .LBB27_40	@ bb27
.LBB27_37:	@ bb24
	ldr r3, .LCPI27_76
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB27_47	@ bb35
.LBB27_38:	@ bb25
	cmp r7, #36
	bne .LBB27_40	@ bb27
.LBB27_39:	@ bb26
	ldr r3, .LCPI27_77
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB27_47	@ bb35
.LBB27_40:	@ bb27
	ldr r3, .LCPI27_78
	ldr r3, [r3]
	ldr r2, .LCPI27_72
	ldr r8, [r2]
	add r2, r8, r3
	cmp r2, r4
	bhi .LBB27_42	@ bb29
.LBB27_41:	@ bb28
	add r2, r5, r3, lsl #1
	ldr r1, .LCPI27_78
	@comment
str r2, [r1]
	add r1, r6, r3, lsl #1
	mov r0, r8
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_72
	@comment
str r0, [r3]
	sub r4, r4, r8
	add r4, r0, r4
.LBB27_42:	@ bb29
	strb r7, [r4], #+1
	ldr r7, .LCPI27_71
	ldr r0, [r7]
	emit_nops_till_bundle_end
	bl getc
.LBB27_43:	@ bb30
	mov r7, r0
	emit_nops_till_bundle_end
	bl isalnum
	cmp r0, #0
	bne .LBB27_35	@ bb23
.LBB27_44:	@ bb31
	cmp r7, #36
	beq .LBB27_39	@ bb26
.LBB27_45:	@ bb31
	cmp r7, #64
	beq .LBB27_37	@ bb24
.LBB27_46:	@ bb31
	cmp r7, #95
	beq .LBB27_40	@ bb27
.LBB27_47:	@ bb35
	mov r5, #0
	strb r5, [r4]
	ldr r6, .LCPI27_70
	@comment
str r7, [r6]
	ldr r6, .LCPI27_79
	@comment
str r5, [r6]
	ldr r5, .LCPI27_72
	ldr r0, [r5]
	sub r1, r4, r0
	emit_nops_till_bundle_end
	bl is_reserved_word
	mov r4, r0
	cmp r0, #0
	beq .LBB27_479	@ bb35.bb51_crit_edge
.LBB27_48:	@ bb36
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI27_80
	emit_nops_till_bundle_end
	bl fprintf
	ldr r5, [r4, #+8]
	cmp r5, #0
	ldrne r6, .LCPI27_81
	ldrne r5, [r6, +r5, lsl #2]
	ldrne r6, .LCPI27_79
	@comment
strne r5, [r6]
.LBB27_49:	@ bb37
.LBB27_50:	@ bb38
	ldr r5, .LCPI27_76
	ldr r5, [r5]
	ldrsh r6, [r4, #+4]
	@comment
str r6, [r11, #-240]
	cmp r5, #0
	beq .LBB27_55	@ bb45
.LBB27_51:	@ bb38
	mov r5, #255
	orr r5, r5, #255, 24 @ 65280
	ldr r6, [r11, #-240]
	and r5, r6, r5
	mov r6, #57
	orr r6, r6, #1, 24 @ 256
	cmp r5, r6
	bne .LBB27_55	@ bb45
.LBB27_52:	@ bb42
	ldr r5, .LCPI27_79
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl lookup_name
	ldr r5, .LCPI27_82
	@comment
str r0, [r5]
	cmp r0, #0
	beq .LBB27_54	@ bb44
.LBB27_53:	@ bb43
	ldrb r5, [r0, #+8]
	cmp r5, #32
	movne r5, #2
	orrne r5, r5, #1, 24 @ 256
	@comment
strne r5, [r11, #-240]
	b .LBB27_55	@ bb45
.LBB27_54:	@ bb44
	mov r5, #2
	orr r5, r5, #1, 24 @ 256
	@comment
str r5, [r11, #-240]
.LBB27_55:	@ bb45
	ldr r5, .LCPI27_83
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB27_60	@ bb50
.LBB27_56:	@ bb46
	ldr r5, .LCPI27_84
	ldr r6, [r11, #-240]
	add r5, r6, r5
	cmp r5, #2
	blo .LBB27_58	@ bb48
.LBB27_57:	@ bb47
	ldr r4, [r4, #+8]
	cmp r4, #18
	bne .LBB27_60	@ bb50
.LBB27_58:	@ bb48
	ldr r4, .LCPI27_72
	ldr r1, [r4]
	ldrb r4, [r1]
	cmp r4, #95
	ldrne r0, .LCPI27_85
	emit_nops_till_bundle_end
	blne pedwarn
.LBB27_59:	@ bb49
.LBB27_60:	@ bb50
	mov r4, #2
	orr r4, r4, #1, 24 @ 256
	ldr r5, [r11, #-240]
	cmp r5, r4
	bne .LBB27_473	@ done
.LBB27_61:	@ bb51
	ldr r4, .LCPI27_72
	ldr r1, [r4]
	ldrb r4, [r1]
	cmp r4, #64
	ldreq r0, .LCPI27_86
	emit_nops_till_bundle_end
	bleq error
.LBB27_62:	@ bb52
.LBB27_63:	@ bb53
	ldr r4, .LCPI27_72
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r4, .LCPI27_79
	@comment
str r0, [r4]
	emit_nops_till_bundle_end
	bl lookup_name
	ldr r4, .LCPI27_82
	@comment
str r0, [r4]
	cmp r0, #0
	beq .LBB27_71	@ bb70
.LBB27_64:	@ bb54
	ldrb r4, [r0, #+8]
	cmp r4, #32
	beq .LBB27_481	@ bb54.done_crit_edge
.LBB27_65:	@ bb56
	cmp r0, #0
	beq .LBB27_71	@ bb70
.LBB27_66:	@ bb57
	ldrb r4, [r0, #+8]
	cmp r4, #33
	bne .LBB27_71	@ bb70
.LBB27_67:	@ bb58
	ldrb r4, [r0, #+29]
	tst r4, #64
	beq .LBB27_71	@ bb70
.LBB27_68:	@ bb62
	ldrb r4, [r0, #+9]
	tst r4, #32
	ldrne r4, [r0, #+48]
	cmpne r4, #0
	bne .LBB27_70	@ bb68
	b .LBB27_71	@ bb70
.LBB27_69:	@ bb67
.LBB27_70:	@ bb68
	ldrb r5, [r4, #+8]
	cmp r5, #28
	beq .LBB27_482	@ bb69
.LBB27_71:	@ bb70
	ldr r4, .LCPI27_76
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB27_473	@ done
.LBB27_72:	@ bb71
	ldr r4, .LCPI27_79
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl is_class_name
	cmp r0, #0
	ldrne r4, .LCPI27_79
	@comment
strne r0, [r4]
	movne r4, #77, 30 @ 308
	@comment
strne r4, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_73:	@ bb72
.LBB27_74:	@ bb77
	ldr r5, .LCPI27_71
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	strb r0, [r4, #+1]
	add r5, r4, #2
	cmp r0, #88
	cmpne r0, #120
	bne .LBB27_76	@ bb82
	b .LBB27_483	@ bb81
.LBB27_75:	@ bb77
.LBB27_76:	@ bb82
	sub r4, r0, #48
	cmp r4, #9
	mov r4, #1
	@comment
str r4, [r11, #-244]
	mov r4, #0
	movls r6, #8
	movhi r6, #10
	b .LBB27_78	@ bb82.bb124.outer_crit_edge
.LBB27_77:	@ bb82.bb124.outer_crit_edge
.LBB27_78:	@ bb82.bb124.outer_crit_edge
	@comment
str r4, [r11, #-236]
	mov r7, r4
	@comment
str r0, [r11, #-240]
	b .LBB27_88	@ bb124.outer
.LBB27_79:	@ bb84
.LBB27_80:	@ bb85
	cmp r5, #46
	bne .LBB27_96	@ bb99
.LBB27_81:	@ bb86
	cmp r6, #16
	ldreq r0, .LCPI27_87
	emit_nops_till_bundle_end
	bleq error
.LBB27_82:	@ bb87
.LBB27_83:	@ bb88
	cmp r7, #1
	beq .LBB27_485	@ bb90
.LBB27_84:	@ bb88
	cmp r7, #2
	movne r7, #1
.LBB27_85:	@ bb91
.LBB27_86:	@ bb92
	ldr r5, .LCPI27_71
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	mov r5, r8
	strb r0, [r5], #+1
	ldr r6, .LCPI27_72
	ldr r6, [r6]
	add r6, r6, #2
	@comment
str r0, [r11, #-240]
	cmp r6, r5
	beq .LBB27_89	@ bb93
.LBB27_87:	@ bb124.outer.backedge
	ldr r6, [r11, #-244]
	add r6, r6, r9
	@comment
str r6, [r11, #-244]
	mov r6, #10
.LBB27_88:	@ bb124.outer
	ldr r0, [r11, #-240]
	mov r9, #0
	mov r8, r5
	mov r5, r4
	ldr r10, [r11, #-236]
	b .LBB27_122	@ bb124
.LBB27_89:	@ bb93
	ldr r0, [r11, #-240]
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	bne .LBB27_87	@ bb124.outer.backedge
.LBB27_90:	@ bb94
	ldr r4, [r11, #-240]
	cmp r4, #46
	bne .LBB27_93	@ bb98
.LBB27_91:	@ bb95
	ldr r4, .LCPI27_71
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	@comment
str r0, [r11, #-240]
	cmp r0, #46
	beq .LBB27_488	@ bb96
.LBB27_92:	@ bb97
	ldr r0, .LCPI27_88
	emit_nops_till_bundle_end
	bl error
.LBB27_93:	@ bb98
	ldr r0, [r11, #-240]
	ldr r4, .LCPI27_71
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl ungetc
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	mov r5, #0
	strb r5, [r4, #+1]
	mov r4, #46
	@comment
str r4, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_94:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_70:
 	.long	nextchar

.LBB27_95:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_71:
 	.long	finput

	.align	4
.LBB27_96:	@ bb99
	mov r0, r5
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	bne .LBB27_489	@ bb100
.LBB27_97:	@ bb101
	cmp r6, #10
	bgt .LBB27_112	@ bb108
.LBB27_98:	@ bb102
	cmp r5, #69
	cmpne r5, #101
	bne .LBB27_111	@ bb107
.LBB27_99:	@ bb102
.LBB27_100:	@ bb102.bb159_crit_edge
	mov r7, #1
	mov r6, #10
.LBB27_101:	@ bb159
	ldr r3, [r11, #-244]
	add r3, r3, r9
	cmp r3, #0
	ldreq r0, .LCPI27_89
	emit_nops_till_bundle_end
	bleq error
.LBB27_102:	@ bb160
.LBB27_103:	@ bb161
	cmp r4, r6
	ldrge r0, .LCPI27_90
	emit_nops_till_bundle_end
	blge error
.LBB27_104:	@ bb162
.LBB27_105:	@ bb163
	mov r4, #0
	strb r4, [r8, #-1]!
	cmp r7, #0
	bne .LBB27_142	@ bb164
.LBB27_106:	@ bb163.bb253_crit_edge
	mov r4, #0
	@comment
str r4, [r11, #-240]
	mov r7, r4
	mov r9, r4
	@comment
str r4, [r11, #-244]
.LBB27_107:	@ bb253
	cmp r5, #84
	bgt .LBB27_227	@ bb253
.LBB27_108:	@ bb253
	cmp r5, #76
	bne .LBB27_241	@ bb271
.LBB27_109:	@ bb264
	cmp r7, #0
	bne .LBB27_237	@ bb265
.LBB27_110:	@ bb264.bb319_crit_edge
	mov r7, #1
	b .LBB27_232	@ bb319
.LBB27_111:	@ bb107
	ldr r0, .LCPI27_91
	emit_nops_till_bundle_end
	bl error
	mov r10, #0
	b .LBB27_115	@ bb118.thread
.LBB27_112:	@ bb108
	cmp r5, #97
	sublt r10, r5, #55
	subge r10, r5, #87
	b .LBB27_115	@ bb118.thread
	.align	4
.LBB27_113:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_72:
 	.long	token_buffer

.LBB27_114:	@ bb110
	.align	4
.LBB27_115:	@ bb118.thread
	cmp r10, r4
	mov r5, r10
	movlt r5, r4
	mov r4, #0
	sub r3, r11, #232
.LBB27_116:	@ bb114
	ldr r2, [r3]
	mul r2, r2, r6
	@comment
str r2, [r3]
	cmp r4, #0
	ldreq r2, [r11, #-232]
	addeq r2, r2, r10
	@comment
streq r2, [r11, #-232]
	ldrne r1, [r3, #-4]
	addne r2, r2, r1, asr #8
	@comment
strne r2, [r3]
	ldrneb r2, [r3, #-4]
	@comment
strne r2, [r3, #-4]
	b .LBB27_118	@ bb118
.LBB27_117:	@ bb116
.LBB27_118:	@ bb118
	add r4, r4, #1
	add r3, r3, #4
	cmp r4, #10
	bne .LBB27_116	@ bb114
.LBB27_119:	@ bb119
	ldr r4, [r11, #-196]
	mov r10, #1
	cmp r4, #0
	ldr r4, [r11, #-236]
	moveq r10, r4
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	ldr r3, .LCPI27_78
	ldr r3, [r3]
	add r2, r3, r4
	sub r2, r2, #3
	cmp r2, r8
	bhi .LBB27_121	@ bb123
.LBB27_120:	@ bb122
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r1, .LCPI27_78
	@comment
str r2, [r1]
	mov r2, #12
	add r1, r2, r3, lsl #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_72
	@comment
str r0, [r3]
	sub r4, r8, r4
	add r8, r0, r4
.LBB27_121:	@ bb123
	ldr r4, .LCPI27_71
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	strb r0, [r8], #+1
	add r9, r9, #1
.LBB27_122:	@ bb124
	mov r4, r5
	@comment
str r10, [r11, #-236]
	mov r5, r0
	cmp r5, #46
	beq .LBB27_81	@ bb86
.LBB27_123:	@ bb125
	mov r0, r5
	emit_nops_till_bundle_end
	bl isalnum
	cmp r0, #0
	beq .LBB27_101	@ bb159
.LBB27_124:	@ bb126
	cmp r5, #116
	bgt .LBB27_131	@ bb126
.LBB27_125:	@ bb126
	cmp r5, #104
	bgt .LBB27_129	@ bb126
.LBB27_126:	@ bb126
	sub r3, r5, #73
	cmp r3, #12
	bhi .LBB27_132	@ bb154
.LBB27_127:	@ bb126
	mov r2, #1
	mov r1, #11
	orr r1, r1, #1, 20 @ 4096
.LBB27_128:	@ bb126
	tst r1, r2, lsl r3
	bne .LBB27_101	@ bb159
	b .LBB27_132	@ bb154
.LBB27_129:	@ bb126
	sub r3, r5, #105
	cmp r3, #3
	bhi .LBB27_132	@ bb154
.LBB27_130:	@ bb126
	mov r2, #1
	mov r1, #11
	b .LBB27_128	@ bb126
.LBB27_131:	@ bb126
	cmp r5, #117
	beq .LBB27_101	@ bb159
.LBB27_132:	@ bb154
	cmp r7, #0
	beq .LBB27_80	@ bb85
.LBB27_133:	@ bb155
	cmp r5, #46
	beq .LBB27_81	@ bb86
.LBB27_134:	@ bb155
	cmp r5, #70
	beq .LBB27_101	@ bb159
.LBB27_135:	@ bb155
	cmp r5, #102
	bne .LBB27_96	@ bb99
	b .LBB27_101	@ bb159
	.align	4
.LBB27_136:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_73:
 	.long	char_type_node

.LBB27_137:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_74:
 	.long	.str126429

.LBB27_138:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_75:
 	.long	end_of_file.b

.LBB27_139:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_76:
 	.long	doing_objc_thang

.LBB27_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_77:
 	.long	dollars_in_ident

.LBB27_141:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_78:
 	.long	maxtoken

	.align	4
.LBB27_142:	@ bb164
	ldr r4, .LCPI27_92
	ldr r4, [r4]
	@comment
str r4, [r11, #-240]
	cmp r5, #69
	cmpne r5, #101
	bne .LBB27_157	@ bb181
.LBB27_143:	@ bb164
.LBB27_144:	@ bb168
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	ldr r6, .LCPI27_78
	ldr r6, [r6]
	add r7, r6, r4
	sub r7, r7, #3
	cmp r7, r8
	bhi .LBB27_146	@ bb170
.LBB27_145:	@ bb169
	mov r7, #10
	add r7, r7, r6, lsl #1
	ldr r9, .LCPI27_78
	@comment
str r7, [r9]
	mov r7, #12
	add r1, r7, r6, lsl #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r6, .LCPI27_72
	@comment
str r0, [r6]
	sub r4, r8, r4
	add r8, r0, r4
.LBB27_146:	@ bb170
	mov r4, r8
	strb r5, [r4], #+1
	ldr r5, .LCPI27_71
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #43
	cmpne r0, #45
	bne .LBB27_149	@ bb175
.LBB27_147:	@ bb170
.LBB27_148:	@ bb174
	strb r0, [r8, #+1]
	ldr r4, .LCPI27_71
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	add r4, r8, #2
.LBB27_149:	@ bb175
	mov r5, r0
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	ldreq r0, .LCPI27_93
	emit_nops_till_bundle_end
	bleq error
.LBB27_150:	@ bb176
.LBB27_151:	@ bb180.preheader
	mov r0, r5
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	beq .LBB27_156	@ bb179.bb181_crit_edge
.LBB27_152:	@ bb180.preheader.bb177_crit_edge
	mov r6, #10
	mov r7, #12
.LBB27_153:	@ bb177
	ldr r8, .LCPI27_72
	ldr r8, [r8]
	ldr r9, .LCPI27_78
	ldr r9, [r9]
	add r3, r9, r8
	sub r3, r3, #3
	cmp r3, r4
	bhi .LBB27_155	@ bb179
.LBB27_154:	@ bb178
	add r3, r6, r9, lsl #1
	ldr r2, .LCPI27_78
	@comment
str r3, [r2]
	add r1, r7, r9, lsl #1
	mov r0, r8
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r9, .LCPI27_72
	@comment
str r0, [r9]
	sub r4, r4, r8
	add r4, r0, r4
.LBB27_155:	@ bb179
	strb r5, [r4], #+1
	ldr r5, .LCPI27_71
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	mov r5, r0
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	bne .LBB27_153	@ bb177
.LBB27_156:	@ bb179.bb181_crit_edge
	mov r8, r4
.LBB27_157:	@ bb181
	mov r4, #0
	strb r4, [r8]
	emit_nops_till_bundle_end
	bl __errno_location
	mov r6, r0
	@comment
str r6, [r11, #-244]
	@comment
str r4, [r6]
	sub r0, r11, #192
	emit_nops_till_bundle_end
	bl _setjmp
	cmp r0, #0
	bne .LBB27_494	@ bb183
.LBB27_158:	@ bb184
	ldr r4, .LCPI27_72
	ldr r1, [r4]
	add r4, r8, #1
	sub r2, r4, r1
	add r4, r2, #3
	bic r4, r4, #3
	sub r4, sp, r4
	@comment
str r4, [r11, #-236]
	mov sp, r4
	mov r0, r4
	emit_nops_till_bundle_end
	bl memcpy
	sub r0, r11, #192
	emit_nops_till_bundle_end
	bl set_float_handler
	mov r6, #0
	mov r4, #12
	mov r7, r6
	mov r9, r6
.LBB27_159:	@ bb186
	cmp r5, #101
	bgt .LBB27_165	@ bb186
.LBB27_160:	@ bb186
	cmp r5, #70
	beq .LBB27_168	@ bb187
.LBB27_161:	@ bb186
	cmp r5, #73
	beq .LBB27_175	@ bb193
.LBB27_162:	@ bb186
	cmp r5, #76
	bne .LBB27_182	@ bb203
.LBB27_163:	@ bb190
	cmp r9, #0
	bne .LBB27_171	@ bb191
.LBB27_164:	@ bb190.bb200_crit_edge
	mov r9, #1
	b .LBB27_178	@ bb200
.LBB27_165:	@ bb186
	cmp r5, #108
	beq .LBB27_163	@ bb190
.LBB27_166:	@ bb186
	cmp r5, #105
	beq .LBB27_175	@ bb193
.LBB27_167:	@ bb186
	cmp r5, #102
	bne .LBB27_182	@ bb203
.LBB27_168:	@ bb187
	cmp r7, #0
	bne .LBB27_170	@ bb188
.LBB27_169:	@ bb187.bb200_crit_edge
	mov r7, #1
	b .LBB27_178	@ bb200
.LBB27_170:	@ bb188
	ldr r0, .LCPI27_94
	emit_nops_till_bundle_end
	bl error
	b .LBB27_169	@ bb187.bb200_crit_edge
.LBB27_171:	@ bb191
	ldr r0, .LCPI27_95
	emit_nops_till_bundle_end
	bl error
	b .LBB27_164	@ bb190.bb200_crit_edge
	.align	4
.LBB27_172:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_79:
 	.long	yylval

.LBB27_173:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_80:
 	.long	.str97398

.LBB27_174:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_81:
 	.long	ridpointers

	.align	4
.LBB27_175:	@ bb193
	cmp r6, #0
	bne .LBB27_495	@ bb194
.LBB27_176:	@ bb195
	ldr r6, .LCPI27_83
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB27_496	@ bb196
.LBB27_177:	@ bb195.bb200_crit_edge
	mov r6, #1
.LBB27_178:	@ bb200
	ldr r3, .LCPI27_72
	ldr r10, [r3]
	ldr r3, .LCPI27_78
	ldr r3, [r3]
	add r2, r3, r10
	sub r2, r2, #3
	cmp r2, r8
	bhi .LBB27_180	@ bb202
.LBB27_179:	@ bb201
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r1, .LCPI27_78
	@comment
str r2, [r1]
	add r1, r4, r3, lsl #1
	mov r0, r10
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_72
	@comment
str r0, [r3]
	sub r8, r8, r10
	add r8, r0, r8
.LBB27_180:	@ bb202
	strb r5, [r8]
	mov r5, #0
	strb r5, [r8, #+1]!
	ldr r5, .LCPI27_71
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	mov r5, r0
	b .LBB27_159	@ bb186
	.align	4
.LBB27_181:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_82:
 	.long	lastiddecl

	.align	4
.LBB27_182:	@ bb203
	cmp r7, #0
	beq .LBB27_191	@ bb209
.LBB27_183:	@ bb204
	cmp r9, #0
	ldrne r0, .LCPI27_96
	emit_nops_till_bundle_end
	blne error
.LBB27_184:	@ bb205
.LBB27_185:	@ bb206
	ldr r4, .LCPI27_97
	ldr r4, [r4]
	@comment
str r4, [r11, #-240]
	ldrsb r1, [r4, #+29]
	ldr r0, [r11, #-236]
	emit_nops_till_bundle_end
	bl ereal_atof
	mov r4, r0
	@comment
str r1, [r11, #-236]
	emit_nops_till_bundle_end
	bl target_isinf
	cmp r0, #0
	ldrne r9, .LCPI27_83
	ldrne r9, [r9]
	cmpne r9, #0
	bne .LBB27_189	@ bb208
	b .LBB27_199	@ bb216
	.align	4
.LBB27_186:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_83:
 	.long	pedantic

.LBB27_187:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_84:
 	.long	4294967014			@ 0xFFFFFEE6

.LBB27_188:	@ bb207
	.align	4
.LBB27_189:	@ bb208
	ldr r0, .LCPI27_98
	emit_nops_till_bundle_end
	bl warning
	b .LBB27_199	@ bb216
	.align	4
.LBB27_190:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_85:
 	.long	.str98401

	.align	4
.LBB27_191:	@ bb209
	cmp r9, #0
	beq .LBB27_196	@ bb213
.LBB27_192:	@ bb210
	ldr r4, .LCPI27_99
	ldr r4, [r4]
	@comment
str r4, [r11, #-240]
	ldrsb r1, [r4, #+29]
	ldr r0, [r11, #-236]
	emit_nops_till_bundle_end
	bl ereal_atof
	mov r4, r0
	@comment
str r1, [r11, #-236]
	emit_nops_till_bundle_end
	bl target_isinf
	cmp r0, #0
	ldrne r7, .LCPI27_83
	ldrne r7, [r7]
	cmpne r7, #0
	bne .LBB27_195	@ bb212
	b .LBB27_199	@ bb216
	.align	4
.LBB27_193:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_86:
 	.long	.str99402

.LBB27_194:	@ bb211
	.align	4
.LBB27_195:	@ bb212
	ldr r0, .LCPI27_100
	emit_nops_till_bundle_end
	bl warning
	b .LBB27_199	@ bb216
.LBB27_196:	@ bb213
	ldr r4, [r11, #-240]
	ldrsb r1, [r4, #+29]
	ldr r0, [r11, #-236]
	emit_nops_till_bundle_end
	bl ereal_atof
	mov r4, r0
	@comment
str r1, [r11, #-236]
	emit_nops_till_bundle_end
	bl target_isinf
	cmp r0, #0
	beq .LBB27_199	@ bb216
.LBB27_197:	@ bb214
	ldr r7, .LCPI27_83
	ldr r7, [r7]
	cmp r7, #0
	ldrne r0, .LCPI27_101
	emit_nops_till_bundle_end
	blne warning
.LBB27_198:	@ bb215
.LBB27_199:	@ bb216
	mov r0, #0
	emit_nops_till_bundle_end
	bl set_float_handler
.LBB27_200:	@ bb217
	ldr r7, [r11, #-244]
	ldr r7, [r7]
	cmp r7, #34
	ldreq r7, .LCPI27_102
	ldreq r7, [r7]
	cmpeq r7, #0
	beq .LBB27_202	@ bb219
	b .LBB27_206	@ bb217.bb227_crit_edge
.LBB27_201:	@ bb218
.LBB27_202:	@ bb219
	ldr r7, .LCPI27_83
	ldr r7, [r7]
	cmp r7, #0
	beq .LBB27_206	@ bb217.bb227_crit_edge
.LBB27_203:	@ bb220
	ldr r7, .LCPI27_103
	ldmia r7, {r0, r1}
	mov r2, r4
	ldr r3, [r11, #-236]
	emit_nops_till_bundle_end
	bl __ltdf2
	cmp r0, #0
	blt .LBB27_205	@ bb222
.LBB27_204:	@ bb221
	ldr r7, .LCPI27_104
	ldr r9, [r7]
	ldr r7, [r7, #+4]
	mov r0, r4
	ldr r1, [r11, #-236]
	mov r2, r9
	mov r3, r7
	emit_nops_till_bundle_end
	bl __unorddf2
	mov r10, r0
	mov r0, r4
	ldr r1, [r11, #-236]
	mov r2, r9
	mov r3, r7
	emit_nops_till_bundle_end
	bl __gedf2
	mov r7, #1
	mov r9, #0
	cmp r10, #0
	mov r3, #0
	movne r3, r7
	cmp r0, #0
	movge r9, r7
	orr r7, r3, r9
	cmp r7, #0
	ldreq r0, .LCPI27_101
	emit_nops_till_bundle_end
	bleq warning
	b .LBB27_206	@ bb217.bb227_crit_edge
.LBB27_205:	@ bb222
	ldr r0, .LCPI27_101
	emit_nops_till_bundle_end
	bl warning
.LBB27_206:	@ bb217.bb227_crit_edge
	mov r7, #0
	mov r0, r5
	b .LBB27_211	@ bb227
	.align	4
.LBB27_207:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_87:
 	.long	.str100403

	.align	4
.LBB27_208:	@ bb224
	ldr r9, .LCPI27_72
	ldr r9, [r9]
	ldr r3, .LCPI27_78
	ldr r3, [r3]
	add r2, r3, r9
	sub r2, r2, #3
	cmp r2, r8
	bhi .LBB27_210	@ bb226
.LBB27_209:	@ bb225
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r1, .LCPI27_78
	@comment
str r2, [r1]
	mov r2, #12
	add r1, r2, r3, lsl #1
	mov r0, r9
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_72
	@comment
str r0, [r3]
	sub r8, r8, r9
	add r8, r0, r8
.LBB27_210:	@ bb226
	strb r5, [r8], #+1
	ldr r5, .LCPI27_71
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	add r7, r7, #1
.LBB27_211:	@ bb227
	mov r5, r0
	emit_nops_till_bundle_end
	bl isalnum
	cmp r0, #0
	bne .LBB27_208	@ bb224
.LBB27_212:	@ bb228
	cmp r5, #46
	cmpne r5, #95
	bne .LBB27_214	@ bb232
	b .LBB27_208	@ bb224
.LBB27_213:	@ bb228
.LBB27_214:	@ bb232
	ldr r9, .LCPI27_102
	ldr r9, [r9]
	cmp r9, #0
	bne .LBB27_220	@ bb244
.LBB27_215:	@ bb233
	cmp r5, #43
	cmpne r5, #45
	bne .LBB27_220	@ bb244
.LBB27_216:	@ bb233
.LBB27_217:	@ bb240
	ldrb r9, [r8, #-1]
	cmp r9, #69
	andne r9, r9, #255
	cmpne r9, #101
	bne .LBB27_220	@ bb244
	b .LBB27_208	@ bb224
	.align	4
.LBB27_218:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_88:
 	.long	.str102405

.LBB27_219:	@ bb240
	.align	4
.LBB27_220:	@ bb244
	cmp r7, #1
	ldrge r0, .LCPI27_105
	emit_nops_till_bundle_end
	blge error
.LBB27_221:	@ bb245
.LBB27_222:	@ bb246
	mov r0, r4
	ldr r7, [r11, #-236]
	mov r1, r7
	emit_nops_till_bundle_end
	bl target_isnan
	ldr r9, .LCPI27_106
	ldmia r9, {r1, r2}
	cmp r0, #0
	moveq r1, r4
	cmp r0, #0
	moveq r2, r7
	ldr r0, [r11, #-240]
	emit_nops_till_bundle_end
	bl build_real
	mov r4, r0
	cmp r6, #0
	beq .LBB27_224	@ bb251
.LBB27_223:	@ bb249
	ldr r6, .LCPI27_107
	ldr r1, [r6]
	ldr r0, [r11, #-240]
	emit_nops_till_bundle_end
	bl convert
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_complex
	mov r4, r0
.LBB27_224:	@ bb251
	ldr r6, .LCPI27_79
	@comment
str r4, [r6]
	ldr r4, .LCPI27_108
	ldr r1, [r4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl ungetc
	b .LBB27_328	@ bb443
	.align	4
.LBB27_225:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_89:
 	.long	.str104407

.LBB27_226:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_90:
 	.long	.str105408

	.align	4
.LBB27_227:	@ bb253
	cmp r5, #85
	beq .LBB27_230	@ bb257
.LBB27_228:	@ bb253
	cmp r5, #108
	beq .LBB27_109	@ bb264
.LBB27_229:	@ bb253
	cmp r5, #117
	bne .LBB27_241	@ bb271
.LBB27_230:	@ bb257
	ldr r4, [r11, #-240]
	cmp r4, #0
	bne .LBB27_235	@ bb258
.LBB27_231:	@ bb257.bb319_crit_edge
	mov r4, #1
	@comment
str r4, [r11, #-240]
.LBB27_232:	@ bb319
	ldr r4, .LCPI27_72
	ldr r4, [r4]
	ldr r3, .LCPI27_78
	ldr r3, [r3]
	add r2, r3, r4
	sub r2, r2, #3
	cmp r2, r8
	bhi .LBB27_234	@ bb321
.LBB27_233:	@ bb320
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r1, .LCPI27_78
	@comment
str r2, [r1]
	mov r2, #12
	add r1, r2, r3, lsl #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_72
	@comment
str r0, [r3]
	sub r4, r8, r4
	add r8, r0, r4
.LBB27_234:	@ bb321
	strb r5, [r8], #+1
	ldr r4, .LCPI27_108
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	mov r5, r0
	b .LBB27_107	@ bb253
.LBB27_235:	@ bb258
	ldr r0, .LCPI27_109
	emit_nops_till_bundle_end
	bl error
	b .LBB27_231	@ bb257.bb319_crit_edge
	.align	4
.LBB27_236:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_91:
 	.long	.str103406

	.align	4
.LBB27_237:	@ bb265
	cmp r9, #0
	bne .LBB27_497	@ bb266
.LBB27_238:	@ bb267
	ldr r4, .LCPI27_83
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB27_240	@ bb268
.LBB27_239:	@ bb267.bb319_crit_edge
	mov r7, #1
	mov r9, r7
	b .LBB27_232	@ bb319
.LBB27_240:	@ bb268
	ldr r0, .LCPI27_110
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB27_239	@ bb267.bb319_crit_edge
.LBB27_241:	@ bb271
	sub r4, r5, #73
	sub r3, r5, #105
	cmp r4, #2
	cmphs r3, #1
	bhi .LBB27_247	@ bb281
.LBB27_242:	@ bb271
.LBB27_243:	@ bb276
	ldr r4, [r11, #-244]
	cmp r4, #0
	bne .LBB27_498	@ bb277
.LBB27_244:	@ bb278
	ldr r4, .LCPI27_83
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB27_246	@ bb279
.LBB27_245:	@ bb278.bb319_crit_edge
	mov r4, #1
	@comment
str r4, [r11, #-244]
	b .LBB27_232	@ bb319
.LBB27_246:	@ bb279
	ldr r0, .LCPI27_111
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB27_245	@ bb278.bb319_crit_edge
.LBB27_247:	@ bb281
	mov r0, r5
	emit_nops_till_bundle_end
	bl isalnum
	cmp r0, #0
	bne .LBB27_255	@ bb298
.LBB27_248:	@ bb282
	cmp r5, #46
	cmpne r5, #95
	bne .LBB27_250	@ bb286
	b .LBB27_255	@ bb298
.LBB27_249:	@ bb282
.LBB27_250:	@ bb286
	ldr r4, .LCPI27_102
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB27_269	@ bb322
.LBB27_251:	@ bb287
	cmp r5, #43
	cmpne r5, #45
	bne .LBB27_269	@ bb322
.LBB27_252:	@ bb287
.LBB27_253:	@ bb294
	ldrb r4, [r8, #-1]
	cmp r4, #69
	andne r4, r4, #255
	cmpne r4, #101
	bne .LBB27_269	@ bb322
.LBB27_254:	@ bb294
.LBB27_255:	@ bb298
	ldr r0, .LCPI27_105
	emit_nops_till_bundle_end
	bl error
	mov r4, #12
	mov r0, r5
	b .LBB27_259	@ bb302
.LBB27_256:	@ bb299
	ldr r3, .LCPI27_112
	ldr r10, [r3]
	ldr r3, .LCPI27_78
	ldr r3, [r3]
	add r2, r3, r10
	sub r2, r2, #3
	cmp r2, r8
	bhi .LBB27_258	@ bb301
.LBB27_257:	@ bb300
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r1, .LCPI27_78
	@comment
str r2, [r1]
	add r1, r4, r3, lsl #1
	mov r0, r10
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_112
	@comment
str r0, [r3]
	sub r8, r8, r10
	add r8, r0, r8
.LBB27_258:	@ bb301
	strb r5, [r8], #+1
	ldr r5, .LCPI27_108
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
.LBB27_259:	@ bb302
	mov r5, r0
	emit_nops_till_bundle_end
	bl isalnum
	cmp r0, #0
	bne .LBB27_256	@ bb299
.LBB27_260:	@ bb303
	cmp r5, #46
	cmpne r5, #95
	bne .LBB27_263	@ bb307
	b .LBB27_256	@ bb299
	.align	4
.LBB27_261:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_92:
 	.long	double_type_node

.LBB27_262:	@ bb303
	.align	4
.LBB27_263:	@ bb307
	ldr r3, .LCPI27_102
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB27_269	@ bb322
.LBB27_264:	@ bb308
	cmp r5, #43
	cmpne r5, #45
	bne .LBB27_269	@ bb322
.LBB27_265:	@ bb308
.LBB27_266:	@ bb315
	ldrb r3, [r8, #-1]
	cmp r3, #69
	andne r3, r3, #255
	cmpne r3, #101
	bne .LBB27_269	@ bb322
	b .LBB27_256	@ bb299
	.align	4
.LBB27_267:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_93:
 	.long	.str106409

.LBB27_268:	@ bb315
	.align	4
.LBB27_269:	@ bb322
	mov r0, r5
	ldr r4, .LCPI27_108
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl ungetc
	ldr r4, .LCPI27_113
	ldr r3, .LCPI27_114
	cmp r9, #0
	moveq r3, r4
	ldr r4, [r3]
	ldrb r4, [r4, #+28]
	mov r3, r4, lsr #3
	cmp r3, #10
	bge .LBB27_273	@ bb330
.LBB27_270:	@ bb326.preheader
	and r4, r4, #248
	mov r4, r4, lsr #1
.LBB27_271:	@ bb326
	sub r3, r11, #232
	ldr r3, [r3, +r4]
	cmp r3, #0
	mov r3, #1
	ldr r2, [r11, #-236]
	moveq r3, r2
	add r4, r4, #4
	cmp r4, #37
	@comment
str r3, [r11, #-236]
	blt .LBB27_271	@ bb326
.LBB27_272:	@ bb326.bb330_crit_edge
	@comment
str r3, [r11, #-236]
.LBB27_273:	@ bb330
	ldr r4, [r11, #-236]
	cmp r4, #0
	ldrne r0, .LCPI27_115
	emit_nops_till_bundle_end
	blne pedwarn
.LBB27_274:	@ bb331
.LBB27_275:	@ bb334.preheader
	ldr r3, [r11, #-204]
	ldr r1, [r11, #-208]
	ldr lr, [r11, #-232]
	sub r12, r11, #228
	ldmia r12, {r0, r2, r4, r5, r12}
	orr r0, lr, r0, lsl #8
	orr r2, r0, r2, lsl #16
	orr r0, r2, r4, lsl #24
	orr r4, r5, r12, lsl #8
	orr r4, r4, r1, lsl #16
	orr r1, r4, r3, lsl #24
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r4, .LCPI27_79
	@comment
str r0, [r4]
	ldr r4, .LCPI27_116
	ldr r4, [r4]
	@comment
str r4, [r0, #+4]
	ldr r4, .LCPI27_117
	ldr r4, [r4]
	cmp r4, #0
	ldreq r4, .LCPI27_102
	ldreq r4, [r4]
	cmpeq r4, #0
	beq .LBB27_286	@ bb370
.LBB27_276:	@ bb336
.LBB27_277:	@ bb337
	cmp r7, #0
	beq .LBB27_499	@ bb337
.LBB27_278:	@ bb349
	cmp r7, #0
	cmpeq r6, #10
	beq .LBB27_280	@ bb356
	b .LBB27_281	@ bb361
.LBB27_279:	@ bb349
.LBB27_280:	@ bb356
	ldr r4, .LCPI27_79
	ldr r0, [r4]
	ldr r4, .LCPI27_118
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB27_501	@ bb345
.LBB27_281:	@ bb361
	cmp r9, #0
	ldrne r4, .LCPI27_116
	ldrne r3, .LCPI27_114
	ldreq r4, .LCPI27_119
	ldreq r3, .LCPI27_113
	b .LBB27_285	@ bb366
	.align	4
.LBB27_282:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_94:
 	.long	.str108411

.LBB27_283:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_95:
 	.long	.str109412

.LBB27_284:	@ bb366
	.align	4
.LBB27_285:	@ bb366
	ldr r2, [r11, #-240]
	cmp r2, #0
	movne r3, r4
	ldr r4, [r3]
.LBB27_286:	@ bb370
	ldr r3, .LCPI27_117
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB27_288	@ bb372
.LBB27_287:	@ bb371
	ldr r3, .LCPI27_102
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB27_301	@ bb395
.LBB27_288:	@ bb372
	ldr r3, [r11, #-240]
	orr r3, r7, r3
	cmp r3, #0
	bne .LBB27_290	@ bb375
.LBB27_289:	@ bb373
	ldr r3, .LCPI27_79
	ldr r0, [r3]
	ldr r3, .LCPI27_118
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB27_503	@ bb374
.LBB27_290:	@ bb375
	cmp r7, #0
	bne .LBB27_294	@ bb385
.LBB27_291:	@ bb376
	ldr r7, [r11, #-240]
	cmp r7, #0
	cmpeq r6, #10
	beq .LBB27_294	@ bb385
.LBB27_292:	@ bb376
.LBB27_293:	@ bb383
	ldr r7, .LCPI27_79
	ldr r0, [r7]
	ldr r7, .LCPI27_120
	ldr r1, [r7]
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB27_505	@ bb384
.LBB27_294:	@ bb385
	ldr r7, [r11, #-240]
	orr r7, r9, r7
	cmp r7, #0
	bne .LBB27_296	@ bb388
.LBB27_295:	@ bb386
	ldr r7, .LCPI27_79
	ldr r0, [r7]
	ldr r7, .LCPI27_113
	ldr r1, [r7]
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB27_506	@ bb387
.LBB27_296:	@ bb388
	cmp r9, #0
	beq .LBB27_507	@ bb389
.LBB27_297:	@ bb390
	ldr r7, [r11, #-240]
	cmp r7, #0
	bne .LBB27_300	@ bb394
.LBB27_298:	@ bb391
	ldr r7, .LCPI27_79
	ldr r0, [r7]
	ldr r7, [r0, #+16]
	cmp r7, #0
	blt .LBB27_300	@ bb394
.LBB27_299:	@ bb392
	ldr r7, .LCPI27_114
	ldr r1, [r7]
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB27_508	@ bb393
.LBB27_300:	@ bb394
	ldr r7, .LCPI27_116
	ldr r7, [r7]
.LBB27_301:	@ bb395
	ldr r3, .LCPI27_102
	ldr r3, [r3]
	cmp r3, #0
	mov r5, r4
	moveq r5, r7
	ldr r3, .LCPI27_117
	ldr r3, [r3]
	cmp r3, #0
	cmpne r4, r7
	bne .LBB27_305	@ bb402
	b .LBB27_308	@ bb415
	.align	4
.LBB27_302:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_96:
 	.long	.str112415

.LBB27_303:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_97:
 	.long	float_type_node

.LBB27_304:	@ bb395
	.align	4
.LBB27_305:	@ bb402
	ldrb r3, [r7, #+28]
	ldrb r2, [r4, #+28]
	cmp r2, r3
	bne .LBB27_509	@ bb403
.LBB27_306:	@ bb404
	ldrb r4, [r4, #+9]
	ldrb r3, [r7, #+9]
	eor r4, r3, r4
	mov r3, #1, 18 @ 16384
	tst r3, r4, lsl #8
	bne .LBB27_510	@ bb413
.LBB27_307:	@ bb414
	ldr r0, .LCPI27_121
	emit_nops_till_bundle_end
	bl warning
.LBB27_308:	@ bb415
	ldr r4, .LCPI27_102
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB27_312	@ bb419
.LBB27_309:	@ bb416
	ldr r4, .LCPI27_122
	ldr r0, [r4]
	mov r1, r5
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB27_312	@ bb419
.LBB27_310:	@ bb416
	ldr r4, [r11, #-236]
	cmp r4, #0
	ldreq r0, .LCPI27_115
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB27_311:	@ bb418
.LBB27_312:	@ bb419
	ldr r4, [r11, #-240]
	cmp r4, #0
	cmpeq r6, #10
	beq .LBB27_316	@ bb423
	b .LBB27_318	@ bb429
	.align	4
.LBB27_313:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_98:
 	.long	.str113416

.LBB27_314:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_99:
 	.long	long_double_type_node

.LBB27_315:	@ bb419
	.align	4
.LBB27_316:	@ bb423
	ldrb r4, [r5, #+9]
	tst r4, #64
	ldrne r0, .LCPI27_123
	emit_nops_till_bundle_end
	blne warning
.LBB27_317:	@ bb428
.LBB27_318:	@ bb429
	ldr r4, [r11, #-244]
	cmp r4, #0
	beq .LBB27_325	@ bb433
.LBB27_319:	@ bb430
	ldr r4, .LCPI27_118
	ldr r0, [r4]
	ldrb r4, [r0, #+28]
	ldrb r5, [r5, #+28]
	cmp r5, r4
	bhi .LBB27_322	@ bb432
.LBB27_320:	@ bb431
	ldr r4, .LCPI27_122
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl convert
	mov r1, r0
	ldr r5, .LCPI27_107
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl build_complex
	@comment
str r0, [r4]
	b .LBB27_328	@ bb443
	.align	4
.LBB27_321:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_100:
 	.long	.str114417

	.align	4
.LBB27_322:	@ bb432
	ldr r0, .LCPI27_124
	emit_nops_till_bundle_end
	bl error
	b .LBB27_328	@ bb443
	.align	4
.LBB27_323:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_101:
 	.long	.str115418

.LBB27_324:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_102:
 	.long	flag_traditional

	.align	4
.LBB27_325:	@ bb433
	ldr r4, .LCPI27_102
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB27_327	@ bb442
.LBB27_326:	@ bb434
	ldr r4, .LCPI27_122
	ldr r0, [r4]
	mov r1, r5
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	beq .LBB27_511	@ bb435
.LBB27_327:	@ bb442
	ldr r4, .LCPI27_122
	ldr r4, [r4]
	@comment
str r5, [r4, #+4]
.LBB27_328:	@ bb443
	mov r4, #0
	strb r4, [r8]
.LBB27_329:	@ bb443
	mov r4, #7
	orr r4, r4, #1, 24 @ 256
	@comment
str r4, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_330:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_103:
 	.long	dconst1

.LBB27_331:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_104:
 	.long	dconstm1

	.align	4
.LBB27_332:	@ bb446
	ldr r4, .LCPI27_118
	ldr r4, [r4]
	ldrb r0, [r4, #+28]
	ldr r4, .LCPI27_125
	ldr r4, [r4]
	ldrb r4, [r4, #+28]
	@comment
str r4, [r11, #-236]
	mov r1, r4
	emit_nops_till_bundle_end
	bl __udivsi3
	mov r4, #0
	@comment
str r4, [r11, #-252]
.LBB27_333:	@ tryagain.preheader
	mov r4, r0
	@comment
str r4, [r11, #-248]
	mov r3, #1
	mvn r2, #0
	ldr r1, [r11, #-236]
	add r3, r2, r3, lsl r1
	@comment
str r3, [r11, #-244]
	add r4, r4, #1
	mov r5, #0
	mov r6, #0
	mov r3, r5
	mov r7, r5
.LBB27_334:	@ tryagain.outer751
	@comment
str r3, [r11, #-240]
	add r8, r7, r5
.LBB27_335:	@ tryagain
	ldr r3, .LCPI27_108
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	mov r9, r0
	cmp r0, #91
	bgt .LBB27_341	@ tryagain
.LBB27_336:	@ tryagain
	cmn r9, #1
	beq .LBB27_339	@ bb465
.LBB27_337:	@ tryagain
	cmp r9, #10
	beq .LBB27_349	@ bb456
.LBB27_338:	@ tryagain
	cmp r9, #39
	bne .LBB27_352	@ bb459
.LBB27_339:	@ bb465
	ldr r4, .LCPI27_112
	ldr r3, [r4]
	add r3, r8, r3
	mov r2, #39
	strb r2, [r3, #+1]
	ldr r4, [r4]
	add r4, r8, r4
	mov r3, #0
	strb r3, [r4, #+2]
	cmp r9, #39
	beq .LBB27_358	@ bb467
.LBB27_340:	@ bb466
	ldr r0, .LCPI27_126
	emit_nops_till_bundle_end
	bl error
	b .LBB27_363	@ bb474
.LBB27_341:	@ tryagain
	cmp r9, #92
	bne .LBB27_352	@ bb459
.LBB27_342:	@ bb451
	@comment
str r6, [r11, #-36]
	sub r0, r11, #36
	emit_nops_till_bundle_end
	bl readescape
	ldr r3, [r11, #-36]
	mov r9, r0
	cmp r3, #0
	bne .LBB27_335	@ tryagain
.LBB27_343:	@ bb452
	ldr r3, [r11, #-236]
	cmp r3, #32
	bhs .LBB27_352	@ bb459
.LBB27_344:	@ bb453
	ldr r3, [r11, #-236]
	mov r3, r9, lsr r3
	cmp r3, #0
	beq .LBB27_352	@ bb459
.LBB27_345:	@ bb454
	ldr r0, .LCPI27_127
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB27_352	@ bb459
	.align	4
.LBB27_346:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_105:
 	.long	.str116419

.LBB27_347:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_106:
 	.long	dconst0

.LBB27_348:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_107:
 	.long	integer_zero_node

	.align	4
.LBB27_349:	@ bb456
	ldr r3, .LCPI27_128
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI27_129
	emit_nops_till_bundle_end
	blne pedwarn
.LBB27_350:	@ bb457
.LBB27_351:	@ bb458
	ldr r3, .LCPI27_130
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB27_352:	@ bb459
	ldr r3, .LCPI27_131
	ldr r3, [r3]
	sub r2, r3, #4
	add r8, r8, #1
	cmp r2, r8
	bge .LBB27_354	@ bb461
.LBB27_353:	@ bb460
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r10, .LCPI27_112
	ldr r0, [r10]
	ldr r1, .LCPI27_131
	@comment
str r2, [r1]
	mov r2, #12
	add r1, r2, r3, lsl #1
	emit_nops_till_bundle_end
	bl xrealloc
	@comment
str r0, [r10]
.LBB27_354:	@ bb461
	ldr r3, .LCPI27_112
	ldr r3, [r3]
	strb r9, [r3, +r8]
	add r3, r7, #1
	cmp r4, r8
	mov r7, #0
	movle r7, r3
	cmp r4, r8
	mov r3, r9
	ldr r2, [r11, #-240]
	movle r3, r2
	cmp r4, r8
	mov r2, r8
	movle r2, r5
	cmp r4, r8
	mov r5, r2
	ble .LBB27_334	@ tryagain.outer751
.LBB27_355:	@ bb461
	ldr r5, [r11, #-236]
	cmp r5, #31
	mov r5, r2
	ldrls r3, [r11, #-244]
	andls r3, r9, r3
	ldrls r7, [r11, #-236]
	ldrls r5, [r11, #-240]
	orrls r3, r3, r5, lsl r7
	movls r7, #0
	movls r5, r8
	b .LBB27_334	@ tryagain.outer751
	.align	4
.LBB27_356:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_108:
 	.long	finput

.LBB27_357:	@ bb463
	.align	4
.LBB27_358:	@ bb467
	cmp r8, #0
	beq .LBB27_512	@ bb468
.LBB27_359:	@ bb469
	ldr r4, [r11, #-248]
	cmp r8, r4
	bgt .LBB27_514	@ bb470
.LBB27_360:	@ bb471
	cmp r8, #1
	beq .LBB27_363	@ bb474
.LBB27_361:	@ bb472
	ldr r4, .LCPI27_102
	ldr r4, [r4]
	cmp r4, #0
	ldreq r0, .LCPI27_132
	emit_nops_till_bundle_end
	bleq warning
.LBB27_362:	@ bb473
.LBB27_363:	@ bb474
	ldr r4, [r11, #-252]
	cmp r4, #0
	bne .LBB27_374	@ bb487
.LBB27_364:	@ bb475
	ldr r4, [r11, #-236]
	mul r4, r8, r4
	cmp r4, #0
	bne .LBB27_368	@ bb477
.LBB27_365:	@ bb476
	mov r0, #0
.LBB27_366:	@ bb476
	mov r1, #0
	b .LBB27_371	@ bb484
	.align	4
.LBB27_367:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_109:
 	.long	.str117420

	.align	4
.LBB27_368:	@ bb477
	ldr r3, .LCPI27_125
	ldr r3, [r3]
	ldrb r3, [r3, #+9]
	tst r3, #64
	bne .LBB27_515	@ bb483
.LBB27_369:	@ bb482
	sub r3, r4, #1
	mov r2, #1
	ldr r1, [r11, #-240]
	tst r1, r2, lsl r3
	beq .LBB27_515	@ bb483
.LBB27_370:	@ bb484
	rsb r4, r4, #32
	mvn r1, #0
	mvn r4, r1, lsr r4
	ldr r3, [r11, #-240]
	orr r0, r3, r4
.LBB27_371:	@ bb484
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r4, .LCPI27_122
	@comment
str r0, [r4]
.LBB27_372:	@ bb486
	ldr r4, .LCPI27_118
	ldr r4, [r4]
	ldr r3, .LCPI27_122
	ldr r3, [r3]
	@comment
str r4, [r3, #+4]
	b .LBB27_329	@ bb443
	.align	4
.LBB27_373:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_110:
 	.long	.str119422

	.align	4
.LBB27_374:	@ bb487
	mov r1, #0
	ldr r0, [r11, #-240]
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r4, .LCPI27_122
	@comment
str r0, [r4]
	ldr r4, .LCPI27_133
	ldr r4, [r4]
	@comment
str r4, [r0, #+4]
	b .LBB27_329	@ bb443
	.align	4
.LBB27_375:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_111:
 	.long	.str111414

.LBB27_376:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_112:
 	.long	token_buffer

	.align	4
.LBB27_377:	@ bb496
	ldr r3, .LCPI27_128
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI27_134
	emit_nops_till_bundle_end
	blne pedwarn
.LBB27_378:	@ bb497
.LBB27_379:	@ bb498
	ldr r3, .LCPI27_130
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB27_380:	@ bb499
	ldr r3, .LCPI27_131
	ldr r3, [r3]
	ldr r2, .LCPI27_112
	ldr r10, [r2]
	add r2, r10, r3
	cmp r2, r5
	bne .LBB27_382	@ bb501
.LBB27_381:	@ bb500
	mov r2, #10
	add r2, r2, r3, lsl #1
	ldr r1, .LCPI27_131
	@comment
str r2, [r1]
	add r1, r6, r3, lsl #1
	mov r0, r10
	emit_nops_till_bundle_end
	bl xrealloc
	ldr r3, .LCPI27_112
	@comment
str r0, [r3]
	sub r5, r5, r10
	add r5, r0, r5
.LBB27_382:	@ bb501
	strb r9, [r5], #+1
.LBB27_383:	@ skipnewline
	ldr r9, .LCPI27_108
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #34
	beq .LBB27_385	@ bb506
.LBB27_384:	@ skipnewline
	cmp r0, #0
	mov r9, r0
	bge .LBB27_16	@ bb489
.LBB27_385:	@ bb506
	mov r3, #0
	strb r3, [r5]
	cmp r0, #0
	ldrlt r0, .LCPI27_135
	emit_nops_till_bundle_end
	bllt error
.LBB27_386:	@ bb507
.LBB27_387:	@ bb508
	cmp r4, #0
	beq .LBB27_392	@ bb516
.LBB27_388:	@ bb509
	ldr r4, .LCPI27_2
	ldr r3, [r4]
	sub r3, r5, r3
	sub r6, sp, r3, lsl #2
	mov sp, r6
	mov r2, r3, lsl #2
	mov r1, #0
	mov r0, r6
	emit_nops_till_bundle_end
	bl memset
	ldr r3, [r4]
	add r2, r3, #1
	cmp r2, r5
	bhs .LBB27_391	@ bb515
.LBB27_389:	@ bb513.preheader
	add r2, r3, #1
	mov r1, r6
.LBB27_390:	@ bb513
	ldrb r0, [r2], #+1
	strb r0, [r1], #+4
	cmp r2, r5
	blo .LBB27_390	@ bb513
.LBB27_391:	@ bb515
	sub r3, r5, r3
	mov r0, r3, lsl #2
	mov r1, r6
	emit_nops_till_bundle_end
	bl build_string
	ldr r3, .LCPI27_7
	@comment
str r0, [r3]
	ldr r3, .LCPI27_67
	b .LBB27_394	@ bb518
.LBB27_392:	@ bb516
	ldr r3, .LCPI27_2
	ldr r3, [r3]
	sub r0, r5, r3
	add r1, r3, #1
	ldr r3, [r11, #-236]
	cmp r3, #0
	bne .LBB27_517	@ bb517
.LBB27_393:	@ bb518
	emit_nops_till_bundle_end
	bl build_string
	ldr r3, .LCPI27_7
	@comment
str r0, [r3]
	ldr r3, .LCPI27_68
.LBB27_394:	@ bb518
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	mov r3, #66, 30 @ 264
	@comment
str r3, [r11, #-240]
.LBB27_395:	@ bb519
	mov r3, #34
	strb r3, [r5]
	mov r3, #0
	strb r3, [r5, #+1]
	b .LBB27_473	@ done
	.align	4
.LBB27_396:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_113:
 	.long	long_integer_type_node

.LBB27_397:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_114:
 	.long	long_long_integer_type_node

	.align	4
.LBB27_398:	@ combine
	mov r3, #38
	orr r3, r3, #1, 24 @ 256
	ldr r2, [r11, #-240]
	cmp r2, r3
	bgt .LBB27_411	@ combine
.LBB27_399:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #123
	bgt .LBB27_415	@ combine
.LBB27_400:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #93
	bgt .LBB27_422	@ combine
.LBB27_401:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #59
	bgt .LBB27_406	@ combine
.LBB27_402:	@ combine
	ldr r3, [r11, #-240]
	sub r3, r3, #37
	cmp r3, #10
	bhi .LBB27_426	@ bb532
.LBB27_403:	@ combine
	.set PCRELV8, (.LJTI27_1_1-(.LPCRELL8+8))
.LPCRELL8:
	add r2, pc, #PCRELV8
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI27_1_1:
	.long	 .LBB27_421
	.long	 .LBB27_414
	.long	 .LBB27_426
	.long	 .LBB27_426
	.long	 .LBB27_426
	.long	 .LBB27_418
	.long	 .LBB27_404
	.long	 .LBB27_426
	.long	 .LBB27_413
	.long	 .LBB27_426
	.long	 .LBB27_420

.text
@ JUMP TABLE END



	.align	2
.LBB27_404:	@ bb520
	ldr r3, .LCPI27_7
	mov r2, #56
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
	.align	4
.LBB27_405:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_115:
 	.long	.str120423

	.align	4
.LBB27_406:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #60
	beq .LBB27_425	@ bb530
.LBB27_407:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #62
	ldreq r3, .LCPI27_7
	moveq r2, #97
	@comment
streq r2, [r3]
	b .LBB27_426	@ bb532
	.align	4
.LBB27_408:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_116:
 	.long	long_long_unsigned_type_node

.LBB27_409:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_117:
 	.long	warn_traditional

.LBB27_410:	@ bb531
	.align	4
.LBB27_411:	@ combine
	mov r3, #39
	orr r3, r3, #1, 24 @ 256
	ldr r2, [r11, #-240]
	cmp r2, r3
	beq .LBB27_450	@ bb528
.LBB27_412:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #74, 30 @ 296
	bne .LBB27_426	@ bb532
	b .LBB27_447	@ bb529
	.align	2
.LBB27_413:	@ bb521
	ldr r3, .LCPI27_7
	mov r2, #57
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
	.align	2
.LBB27_414:	@ bb522
	ldr r3, .LCPI27_7
	mov r2, #86
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
.LBB27_415:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #124
	ldreq r3, .LCPI27_7
	moveq r2, #84
	@comment
streq r2, [r3]
	b .LBB27_426	@ bb532
	.align	4
.LBB27_416:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_118:
 	.long	integer_type_node

.LBB27_417:	@ bb523
	.align	4
.LBB27_418:	@ bb524
	ldr r3, .LCPI27_7
	mov r2, #58
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
	.align	4
.LBB27_419:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_119:
 	.long	long_unsigned_type_node

	.align	4
.LBB27_420:	@ bb525
	ldr r3, .LCPI27_7
	mov r2, #59
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
	.align	2
.LBB27_421:	@ bb526
	ldr r3, .LCPI27_7
	mov r2, #63
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
.LBB27_422:	@ combine
	ldr r3, [r11, #-240]
	cmp r3, #94
	ldreq r3, .LCPI27_7
	moveq r2, #85
	@comment
streq r2, [r3]
	b .LBB27_426	@ bb532
	.align	4
.LBB27_423:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_120:
 	.long	unsigned_type_node

.LBB27_424:	@ bb527
	.align	4
.LBB27_425:	@ bb530
	ldr r3, .LCPI27_7
	mov r2, #95
	@comment
str r2, [r3]
	.align	2
.LBB27_426:	@ bb532
	ldr r3, .LCPI27_1
	ldr r0, [r3]
	ldr r4, .LCPI27_2
	ldr r5, [r4]
	emit_nops_till_bundle_end
	bl getc
	strb r0, [r5, #+1]
	ldr r3, [r4]
	mov r2, #0
	strb r2, [r3, #+2]
	cmp r0, #61
	bne .LBB27_436	@ bb539
.LBB27_427:	@ bb533
	ldr r3, [r11, #-240]
	cmp r3, #59
	ble .LBB27_518	@ bb533
.LBB27_428:	@ bb533
	ldr r3, [r11, #-240]
	cmp r3, #60
	beq .LBB27_432	@ bb534
.LBB27_429:	@ bb533
	ldr r3, [r11, #-240]
	cmp r3, #61
	beq .LBB27_435	@ bb537
.LBB27_430:	@ bb533
	ldr r3, [r11, #-240]
	cmp r3, #62
	beq .LBB27_434	@ bb535
.LBB27_431:	@ bb533.done_crit_edge
	mov r3, #34
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_432:	@ bb534
	ldr r3, .LCPI27_7
	mov r2, #96
.LBB27_433:	@ bb534
	@comment
str r2, [r3]
	b .LBB27_472	@ bb558.done_crit_edge
.LBB27_434:	@ bb535
	ldr r3, .LCPI27_7
	mov r2, #98
	b .LBB27_433	@ bb534
.LBB27_435:	@ bb537
	ldr r3, .LCPI27_7
	mov r2, #99
	b .LBB27_520	@ bb536
.LBB27_436:	@ bb539
	ldr r3, [r11, #-240]
	cmp r3, r0
	bne .LBB27_456	@ bb547
.LBB27_437:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #123
	bgt .LBB27_454	@ bb540
.LBB27_438:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #59
	bgt .LBB27_444	@ bb540
.LBB27_439:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #38
	beq .LBB27_452	@ bb543
.LBB27_440:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #43
	beq .LBB27_451	@ bb540.done_crit_edge
.LBB27_441:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #45
	bne .LBB27_470	@ bb558
.LBB27_442:	@ bb542
	mov r3, #43
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_443:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_121:
 	.long	.str123426

	.align	4
.LBB27_444:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #60
	beq .LBB27_449	@ bb540.bb528_crit_edge
.LBB27_445:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #62
	bne .LBB27_470	@ bb558
.LBB27_446:	@ bb540.bb529_crit_edge
	mov r3, #74, 30 @ 296
	@comment
str r3, [r11, #-240]
.LBB27_447:	@ bb529
	ldr r3, .LCPI27_7
	mov r2, #81
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
	.align	4
.LBB27_448:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_122:
 	.long	yylval

	.align	4
.LBB27_449:	@ bb540.bb528_crit_edge
	mov r3, #39
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
.LBB27_450:	@ bb528
	ldr r3, .LCPI27_7
	mov r2, #80
	@comment
str r2, [r3]
	b .LBB27_426	@ bb532
.LBB27_451:	@ bb540.done_crit_edge
	mov r3, #42
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_452:	@ bb543
	mov r3, #73, 30 @ 292
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_453:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_123:
 	.long	.str124427

	.align	4
.LBB27_454:	@ bb540
	ldr r3, [r11, #-240]
	cmp r3, #124
	bne .LBB27_470	@ bb558
.LBB27_455:	@ bb544
	mov r3, #35
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_456:	@ bb547
	ldr r3, [r11, #-240]
	cmp r3, #44
	ble .LBB27_521	@ bb547
.LBB27_457:	@ bb547
	ldr r3, [r11, #-240]
	cmp r3, #60
	beq .LBB27_465	@ bb552
.LBB27_458:	@ bb547
	ldr r3, [r11, #-240]
	cmp r3, #58
	beq .LBB27_463	@ bb550
.LBB27_459:	@ bb547
	ldr r3, [r11, #-240]
	cmp r3, #45
	cmpeq r0, #62
	beq .LBB27_461	@ bb548.done_crit_edge
	b .LBB27_470	@ bb558
.LBB27_460:	@ bb548
.LBB27_461:	@ bb548.done_crit_edge
	mov r3, #45
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_462:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_124:
 	.long	.str125428

	.align	4
.LBB27_463:	@ bb550
	cmp r0, #62
	bne .LBB27_470	@ bb558
.LBB27_464:	@ bb550.done_crit_edge
	mov r3, #93
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_465:	@ bb552
	cmp r0, #58
	beq .LBB27_468	@ bb555
.LBB27_466:	@ bb552
	cmp r0, #37
	bne .LBB27_470	@ bb558
.LBB27_467:	@ bb552.done_crit_edge
	mov r3, #123
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_468:	@ bb555
	mov r3, #91
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_469:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_125:
 	.long	char_type_node

	.align	4
.LBB27_470:	@ bb558
	ldr r3, .LCPI27_1
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl ungetc
	ldr r3, .LCPI27_2
	ldr r3, [r3]
	mov r2, #0
	strb r2, [r3, #+1]
	ldr r3, [r11, #-240]
	cmp r3, #60
	ldrne r3, [r11, #-240]
	cmpne r3, #62
	bne .LBB27_473	@ done
.LBB27_471:	@ bb558
.LBB27_472:	@ bb558.done_crit_edge
	mov r3, #38
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	.align	2
.LBB27_473:	@ done
	ldr r3, .LCPI27_2
	ldr r4, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI27_69
	ldr r5, [r11, #-240]
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r5
	b .LBB27_476	@ bb566
	.align	2
.LBB27_474:	@ bb11
	ldr r4, .LCPI27_4
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB27_34	@ letter
.LBB27_475:	@ bb566
	mov r0, #36
.LBB27_476:	@ bb566
	sub sp, r11, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB27_477:	@ bb
	ldr r3, .LCPI27_0
	mvn r2, #0
	@comment
str r2, [r3]
	b .LBB27_2	@ bb7
.LBB27_478:	@ bb20.string_constant_crit_edge
	mov r4, #0
	mov r5, #1
	@comment
str r5, [r11, #-236]
	b .LBB27_13	@ string_constant
.LBB27_479:	@ bb35.bb51_crit_edge
	mov r4, #2
	orr r4, r4, #1, 24 @ 256
	@comment
str r4, [r11, #-240]
	b .LBB27_61	@ bb51
	.align	4
.LBB27_480:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_126:
 	.long	.str128431

	.align	4
.LBB27_481:	@ bb54.done_crit_edge
	mov r4, #3
	orr r4, r4, #1, 24 @ 256
	@comment
str r4, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_482:	@ bb69
	ldr r0, [r4, #+16]
	ldr r1, [r4, #+20]
	emit_nops_till_bundle_end
	bl build_string
	ldr r4, .LCPI27_7
	@comment
str r0, [r4]
	mov r4, #66, 30 @ 264
	@comment
str r4, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_483:	@ bb81
	ldr r5, .LCPI27_1
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl getc
	strb r0, [r4, #+2]
	add r5, r4, #3
	mov r4, #0
	mov r6, #16
	@comment
str r4, [r11, #-244]
	b .LBB27_78	@ bb82.bb124.outer_crit_edge
	.align	4
.LBB27_484:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_127:
 	.long	.str126429

	.align	4
.LBB27_485:	@ bb90
	ldr r0, .LCPI27_16
	emit_nops_till_bundle_end
	bl error
	mov r5, #0
	strb r5, [r8, #-1]
	mov r7, #2
	b .LBB27_86	@ bb92
	.align	4
.LBB27_486:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_128:
 	.long	pedantic

.LBB27_487:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_129:
 	.long	.str127430

	.align	4
.LBB27_488:	@ bb96
	ldr r4, [r11, #-240]
	strb r4, [r8, #+1]
	mov r4, #0
	strb r4, [r8, #+2]
	mov r0, #9
	orr r0, r0, #1, 24 @ 256
	b .LBB27_476	@ bb566
.LBB27_489:	@ bb100
	sub r10, r5, #48
	b .LBB27_115	@ bb118.thread
	.align	4
.LBB27_490:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_130:
 	.long	lineno

.LBB27_491:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_131:
 	.long	maxtoken

.LBB27_492:	@ bb109
.LBB27_493:	@ bb115
	.align	4
.LBB27_494:	@ bb183
	ldr r0, .LCPI27_23
	emit_nops_till_bundle_end
	bl error
	ldr r4, .LCPI27_24
	ldr r6, [r4, #+4]
	@comment
str r6, [r11, #-236]
	ldr r4, [r4]
	mov r6, #0
	b .LBB27_200	@ bb217
.LBB27_495:	@ bb194
	ldr r0, .LCPI27_27
	emit_nops_till_bundle_end
	bl error
	b .LBB27_177	@ bb195.bb200_crit_edge
.LBB27_496:	@ bb196
	ldr r0, .LCPI27_28
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB27_177	@ bb195.bb200_crit_edge
.LBB27_497:	@ bb266
	ldr r0, .LCPI27_41
	emit_nops_till_bundle_end
	bl error
	b .LBB27_239	@ bb267.bb319_crit_edge
.LBB27_498:	@ bb277
	ldr r0, .LCPI27_27
	emit_nops_till_bundle_end
	bl error
	b .LBB27_245	@ bb278.bb319_crit_edge
.LBB27_499:	@ bb337
	cmp r6, #10
	beq .LBB27_278	@ bb349
.LBB27_500:	@ bb344
	ldr r4, .LCPI27_7
	ldr r0, [r4]
	ldr r4, .LCPI27_48
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	beq .LBB27_278	@ bb349
.LBB27_501:	@ bb345
	ldr r4, .LCPI27_49
	ldr r3, .LCPI27_48
	ldr r2, [r11, #-240]
	cmp r2, #0
	moveq r3, r4
	ldr r4, [r3]
	b .LBB27_286	@ bb370
.LBB27_502:	@ bb362
.LBB27_503:	@ bb374
	ldr r7, .LCPI27_49
	ldr r7, [r7]
	b .LBB27_301	@ bb395
	.align	4
.LBB27_504:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_132:
 	.long	.str131434

	.align	4
.LBB27_505:	@ bb384
	ldr r7, .LCPI27_48
	ldr r7, [r7]
	b .LBB27_301	@ bb395
.LBB27_506:	@ bb387
	ldr r7, .LCPI27_43
	ldr r7, [r7]
	b .LBB27_301	@ bb395
.LBB27_507:	@ bb389
	ldr r7, .LCPI27_50
	ldr r7, [r7]
	b .LBB27_301	@ bb395
.LBB27_508:	@ bb393
	ldr r7, .LCPI27_44
	ldr r7, [r7]
	b .LBB27_301	@ bb395
.LBB27_509:	@ bb403
	ldr r0, .LCPI27_51
	emit_nops_till_bundle_end
	bl warning
	b .LBB27_308	@ bb415
.LBB27_510:	@ bb413
	ldr r0, .LCPI27_52
	emit_nops_till_bundle_end
	bl warning
	b .LBB27_308	@ bb415
.LBB27_511:	@ bb435
	ldr r4, .LCPI27_7
	ldr r6, [r4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl unsigned_type
	@comment
str r0, [r6, #+4]
	ldr r1, [r4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [r4]
	ldrb r4, [r0, #+9]
	mov r5, r0
	ldrb r3, [r5, #+8]!
	orr r4, r3, r4, lsl #8
	ldrb r3, [r5, #+3]
	ldrb r2, [r5, #+2]
	orr r3, r2, r3, lsl #8
	orr r4, r4, r3, lsl #16
	bic r4, r4, #3, 14 @ 786432
	strb r4, [r5]
	mov r3, r4, lsr #24
	strb r3, [r5, #+3]
	mov r3, r4, lsr #16
	strb r3, [r5, #+2]
	mov r4, r4, lsr #8
	strb r4, [r0, #+9]
	b .LBB27_328	@ bb443
.LBB27_512:	@ bb468
	ldr r0, .LCPI27_61
	emit_nops_till_bundle_end
	bl error
	b .LBB27_363	@ bb474
	.align	4
.LBB27_513:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_133:
 	.long	wchar_type_node

	.align	4
.LBB27_514:	@ bb470
	ldr r0, .LCPI27_62
	emit_nops_till_bundle_end
	bl error
	ldr r8, [r11, #-248]
	b .LBB27_363	@ bb474
.LBB27_515:	@ bb483
	rsb r4, r4, #32
	mvn r3, #0
	ldr r2, [r11, #-240]
	and r0, r2, r3, lsr r4
	b .LBB27_366	@ bb476
	.align	4
.LBB27_516:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_134:
 	.long	.str132435

	.align	4
.LBB27_517:	@ bb517
	emit_nops_till_bundle_end
	bl build_objc_string
	ldr r3, .LCPI27_7
	@comment
str r0, [r3]
	ldr r3, .LCPI27_68
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	mov r3, #79, 30 @ 316
	@comment
str r3, [r11, #-240]
	b .LBB27_395	@ bb519
.LBB27_518:	@ bb533
	ldr r3, [r11, #-240]
	cmp r3, #33
	bne .LBB27_431	@ bb533.done_crit_edge
.LBB27_519:	@ bb536
	ldr r3, .LCPI27_7
	mov r2, #100
.LBB27_520:	@ bb536
	@comment
str r2, [r3]
	mov r3, #37
	orr r3, r3, #1, 24 @ 256
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
.LBB27_521:	@ bb547
	ldr r3, [r11, #-240]
	cmp r3, #37
	cmpeq r0, #62
	beq .LBB27_523	@ bb556.done_crit_edge
	b .LBB27_470	@ bb558
.LBB27_522:	@ bb556
.LBB27_523:	@ bb556.done_crit_edge
	mov r3, #125
	@comment
str r3, [r11, #-240]
	b .LBB27_473	@ done
	.align	4
.LBB27_524:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_135:
 	.long	.str133436

.LBB27_525:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_0:
 	.long	nextchar

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_1:
 	.long	finput

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_2:
 	.long	token_buffer

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_4:
 	.long	dollars_in_ident

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_7:
 	.long	yylval

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_16:
 	.long	.str101404

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_23:
 	.long	.str107410

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_24:
 	.long	dconst0

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_27:
 	.long	.str110413

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_28:
 	.long	.str111414

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_41:
 	.long	.str118421

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_43:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_44:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_48:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_49:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_50:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_51:
 	.long	.str121424

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_52:
 	.long	.str122425

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_61:
 	.long	.str129432

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_62:
 	.long	.str130433

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_67:
 	.long	wchar_array_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_68:
 	.long	char_array_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI27_69:
 	.long	.str134437

	.size yylex, .-yylex


	.globl	handle_sysv_pragma
	.align	4
handle_sysv_pragma:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	mov r4, r0
	mov r5, #0
	mvn r6, #0
	mov r7, #1
	mov r8, #99
	mov r0, r1
	b .LBB28_3	@ bb2
.LBB28_1:	@ bb2
	cmp r9, #32
	bne .LBB28_7	@ bb10
.LBB28_2:	@ bb1
	mov r0, r4
	emit_nops_till_bundle_end
	bl getc
.LBB28_3:	@ bb2
	mov r9, r0
	cmp r9, #31
	bgt .LBB28_1	@ bb2
.LBB28_4:	@ bb2
	cmn r9, #1
	beq .LBB28_12	@ bb9
.LBB28_5:	@ bb2
	cmp r9, #9
	beq .LBB28_2	@ bb1
.LBB28_6:	@ bb2
	cmp r9, #10
	beq .LBB28_12	@ bb9
.LBB28_7:	@ bb10
	mov r0, r9
	mov r1, r4
	emit_nops_till_bundle_end
	bl ungetc
	emit_nops_till_bundle_end
	bl yylex
	ldr r3, .LCPI28_0
	add r3, r0, r3
	cmp r3, #6
	bhi .LBB28_9	@ bb12
.LBB28_8:	@ bb10
	tst r8, r7, lsl r3
	bne .LBB28_13	@ bb11
.LBB28_9:	@ bb12
	ldr r3, .LCPI28_1
	ldr r0, [r3]
	mov r1, r5
	emit_nops_till_bundle_end
	bl handle_pragma_token
.LBB28_10:	@ bb13
	ldr r3, .LCPI28_3
	ldr r0, [r3]
	cmp r0, #0
	blt .LBB28_2	@ bb1
.LBB28_11:	@ bb14
	ldr r3, .LCPI28_3
	@comment
str r6, [r3]
	b .LBB28_3	@ bb2
.LBB28_12:	@ bb9
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl handle_pragma_token
	mov r0, r9
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB28_13:	@ bb11
	ldr r3, .LCPI28_1
	ldr r0, [r3]
	ldr r3, .LCPI28_2
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl handle_pragma_token
	b .LBB28_10	@ bb13
	.align	4
.LBB28_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI28_0:
 	.long	4294967038			@ 0xFFFFFEFE

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI28_1:
 	.long	token_buffer

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI28_2:
 	.long	yylval

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI28_3:
 	.long	nextchar

	.size handle_sysv_pragma, .-handle_sysv_pragma


	.globl	check_newline
	.align	4
check_newline:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI29_19
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB29_1:	@ bb
	ldr r3, .LCPI29_20
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
.LBB29_2:	@ bb2
	cmp r0, #9
	cmpne r0, #32
	bne .LBB29_4	@ bb2
	b .LBB29_1	@ bb
.LBB29_3:	@ bb2
.LBB29_4:	@ bb2
	cmp r0, #35
	bne .LBB29_99	@ bb160
.LBB29_5:	@ bb8
	ldr r3, .LCPI29_20
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
.LBB29_6:	@ bb9
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_8	@ bb13
	b .LBB29_5	@ bb8
.LBB29_7:	@ bb9
.LBB29_8:	@ bb13
	sub r3, r4, #97
	sub r2, r4, #65
	cmp r3, #26
	cmphs r2, #26
	bhs .LBB29_100	@ bb13.bb83_crit_edge
.LBB29_9:	@ bb13
.LBB29_10:	@ bb17
	cmp r4, #104
	ble .LBB29_101	@ bb17
.LBB29_11:	@ bb17
	cmp r4, #116
	bgt .LBB29_23	@ bb17
.LBB29_12:	@ bb17
	cmp r4, #105
	beq .LBB29_40	@ bb63
.LBB29_13:	@ bb17
	cmp r4, #108
	beq .LBB29_33	@ bb57
.LBB29_14:	@ bb17
	cmp r4, #112
	bne .LBB29_39	@ bb81
.LBB29_15:	@ bb18
	ldr r3, .LCPI29_20
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #114
	bne .LBB29_39	@ bb81
.LBB29_16:	@ bb19
	ldr r3, .LCPI29_20
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #97
	bne .LBB29_39	@ bb81
.LBB29_17:	@ bb20
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #103
	bne .LBB29_39	@ bb81
.LBB29_18:	@ bb21
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #109
	bne .LBB29_39	@ bb81
.LBB29_19:	@ bb22
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #97
	bne .LBB29_39	@ bb81
.LBB29_20:	@ bb23
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	mov r4, r0
	cmp r0, #32
	beq .LBB29_22	@ bb28
.LBB29_21:	@ bb24
	sub r3, r4, #9
	cmp r3, #2
	bhs .LBB29_39	@ bb81
.LBB29_22:	@ bb28
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	mov r1, r4
	emit_nops_till_bundle_end
	bl handle_sysv_pragma
	b .LBB29_99	@ bb160
.LBB29_23:	@ bb17
	cmp r4, #117
	bne .LBB29_39	@ bb81
.LBB29_24:	@ bb44
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #110
	bne .LBB29_39	@ bb81
.LBB29_25:	@ bb45
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #100
	bne .LBB29_39	@ bb81
.LBB29_26:	@ bb46
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #101
	bne .LBB29_39	@ bb81
.LBB29_27:	@ bb47
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #102
	bne .LBB29_39	@ bb81
.LBB29_28:	@ bb48
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	mov r4, r0
	cmp r0, #32
	beq .LBB29_30	@ bb53
.LBB29_29:	@ bb49
	sub r3, r4, #9
	cmp r3, #2
	bhs .LBB29_39	@ bb81
.LBB29_30:	@ bb53
	ldr r3, .LCPI29_2
	ldr r3, [r3]
	cmp r3, #3
	ldreq r3, .LCPI29_3
	ldreq r3, [r3]
	cmpeq r3, #3
	beq .LBB29_32	@ bb55
	b .LBB29_96	@ skipline
.LBB29_31:	@ bb54
.LBB29_32:	@ bb55
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl get_directive_line
	mov r1, r0
	ldr r3, .LCPI29_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl dwarfout_undef
	b .LBB29_96	@ skipline
.LBB29_33:	@ bb57
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #105
	bne .LBB29_39	@ bb81
.LBB29_34:	@ bb58
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #110
	bne .LBB29_39	@ bb81
.LBB29_35:	@ bb59
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #101
	bne .LBB29_39	@ bb81
.LBB29_36:	@ bb60
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #9
	cmpne r0, #32
	bne .LBB29_38	@ bb60.bb81_crit_edge
	b .LBB29_55	@ bb83
.LBB29_37:	@ bb60
.LBB29_38:	@ bb60.bb81_crit_edge
	mov r4, r0
.LBB29_39:	@ bb81
	ldr r0, .LCPI29_9
	emit_nops_till_bundle_end
	bl error
	b .LBB29_96	@ skipline
.LBB29_40:	@ bb63
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #100
	bne .LBB29_39	@ bb81
.LBB29_41:	@ bb64
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #101
	bne .LBB29_39	@ bb81
.LBB29_42:	@ bb65
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #110
	bne .LBB29_39	@ bb81
.LBB29_43:	@ bb66
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #116
	bne .LBB29_39	@ bb81
.LBB29_44:	@ bb67
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #9
	beq .LBB29_47	@ bb70
.LBB29_45:	@ bb67
	cmp r0, #32
	bne .LBB29_38	@ bb60.bb81_crit_edge
	b .LBB29_47	@ bb70
.LBB29_46:	@ bb69
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
.LBB29_47:	@ bb70
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_49	@ bb70
	b .LBB29_46	@ bb69
.LBB29_48:	@ bb70
.LBB29_49:	@ bb70
	cmp r4, #10
	beq .LBB29_66	@ bb70.bb160_crit_edge
.LBB29_50:	@ bb76
	ldr r3, .LCPI29_1
	ldr r1, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl ungetc
	emit_nops_till_bundle_end
	bl yylex
	cmp r0, #66, 30 @ 264
	ldreq r3, .LCPI29_4
	ldreq r3, [r3]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #28
	beq .LBB29_52	@ bb79
	b .LBB29_112	@ bb78
.LBB29_51:	@ bb77
.LBB29_52:	@ bb79
	ldr r2, .LCPI29_6
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB29_96	@ skipline
.LBB29_53:	@ bb80
	ldr r0, [r3, #+20]
	emit_nops_till_bundle_end
	bl strlen
	ldr r3, .LCPI29_7
	ldr r12, [r3]
	ldr r3, .LCPI29_4
	ldr r3, [r3]
	ldr r3, [r3, #+20]
	@comment
str r0, [sp]
	ldr r1, .LCPI29_8
	mov r2, #250, 28 @ 4000
	mov r0, r12
	emit_nops_till_bundle_end
	bl output_ascii
	b .LBB29_96	@ skipline
.LBB29_54:	@ bb82
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
.LBB29_55:	@ bb83
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_57	@ bb83
	b .LBB29_54	@ bb82
.LBB29_56:	@ bb83
.LBB29_57:	@ bb83
	cmp r4, #10
	beq .LBB29_66	@ bb70.bb160_crit_edge
.LBB29_58:	@ bb89
	ldr r3, .LCPI29_1
	ldr r1, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl ungetc
	emit_nops_till_bundle_end
	bl yylex
	mov r3, #7
	orr r3, r3, #1, 24 @ 256
	cmp r0, r3
	ldreq r3, .LCPI29_4
	ldreq r3, [r3]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #25
	beq .LBB29_60	@ bb91
	b .LBB29_95	@ bb155
.LBB29_59:	@ bb90
.LBB29_60:	@ bb91
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	ldr r4, [r3, #+12]
	ldr r3, .LCPI29_0
	ldr r5, [r3]
	emit_nops_till_bundle_end
	bl getc
	sub r6, r4, #1
	b .LBB29_62	@ bb93
.LBB29_61:	@ bb92
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
.LBB29_62:	@ bb93
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_64	@ bb93
	b .LBB29_61	@ bb92
.LBB29_63:	@ bb93
.LBB29_64:	@ bb93
	cmp r4, #10
	bne .LBB29_67	@ bb99
.LBB29_65:	@ bb98
	ldr r5, .LCPI29_0
	@comment
str r6, [r5]
.LBB29_66:	@ bb70.bb160_crit_edge
	mov r0, r4
	b .LBB29_99	@ bb160
.LBB29_67:	@ bb99
	ldr r3, .LCPI29_1
	ldr r1, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl ungetc
	emit_nops_till_bundle_end
	bl yylex
	cmp r0, #66, 30 @ 264
	ldreq r3, .LCPI29_4
	ldreq r3, [r3]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #28
	beq .LBB29_69	@ bb102
	b .LBB29_114	@ bb101
.LBB29_68:	@ bb100
.LBB29_69:	@ bb102
	ldr r4, [r3, #+16]
	add r0, r4, #1
	emit_nops_till_bundle_end
	bl permalloc
	ldr r4, .LCPI29_11
	@comment
str r0, [r4]
	ldr r4, .LCPI29_4
	ldr r4, [r4]
	ldr r1, [r4, #+20]
	emit_nops_till_bundle_end
	bl strcpy
	ldr r4, .LCPI29_0
	@comment
str r6, [r4]
	ldr r4, .LCPI29_12
	mov r3, #0
	@comment
str r3, [r4]
	ldr r4, .LCPI29_13
	ldr r4, [r4]
	cmp r4, #0
	ldreq r4, .LCPI29_11
	ldreq r4, [r4]
	ldreq r3, .LCPI29_13
	@comment
streq r4, [r3]
.LBB29_70:	@ bb103
.LBB29_71:	@ bb105
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
.LBB29_72:	@ bb106
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_74	@ bb106
	b .LBB29_71	@ bb105
.LBB29_73:	@ bb106
.LBB29_74:	@ bb106
	cmp r4, #10
	bne .LBB29_77	@ bb114
.LBB29_75:	@ bb111
	ldr r5, .LCPI29_14
	ldr r5, [r5]
	cmp r5, #0
	ldrne r3, .LCPI29_11
	ldrne r3, [r3]
	@comment
strne r3, [r5]
	b .LBB29_66	@ bb70.bb160_crit_edge
.LBB29_76:	@ bb112
.LBB29_77:	@ bb114
	ldr r3, .LCPI29_1
	ldr r1, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl ungetc
	emit_nops_till_bundle_end
	bl yylex
	mov r3, #7
	orr r3, r3, #1, 24 @ 256
	mov r6, r0
	cmp r0, r3
	ldreq r3, .LCPI29_4
	ldreq r3, [r3]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #25
	beq .LBB29_79	@ bb116
	b .LBB29_116	@ bb114.bb128_crit_edge
.LBB29_78:	@ bb115
.LBB29_79:	@ bb116
	ldr r3, [r3, #+12]
	cmp r3, #2
	beq .LBB29_84	@ bb122
.LBB29_80:	@ bb116
	cmp r3, #1
	bne .LBB29_116	@ bb114.bb128_crit_edge
.LBB29_81:	@ bb117
	mov r0, #12
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI29_14
	ldr r2, [r3]
	@comment
str r5, [r2, #+8]
	ldr r5, [r3]
	@comment
str r5, [r0, #+4]
	ldr r5, .LCPI29_11
	ldr r5, [r5]
	@comment
str r5, [r0]
	@comment
str r0, [r3]
	ldr r5, .LCPI29_15
	ldr r3, [r5]
	add r3, r3, #1
	@comment
str r3, [r5]
	ldr r5, .LCPI29_2
	ldr r5, [r5]
	cmp r5, #3
	ldreq r5, .LCPI29_3
	ldreq r5, [r5]
	cmpeq r5, #3
	beq .LBB29_83	@ bb119
	b .LBB29_130	@ bb117.bb128_crit_edge
.LBB29_82:	@ bb118
.LBB29_83:	@ bb119
	ldr r5, .LCPI29_11
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl dwarfout_start_new_source_file
	b .LBB29_130	@ bb117.bb128_crit_edge
.LBB29_84:	@ bb122
	ldr r5, .LCPI29_14
	ldr r0, [r5]
	ldr r5, [r0, #+4]
	cmp r5, #0
	beq .LBB29_129	@ bb126
.LBB29_85:	@ bb123
	ldr r3, .LCPI29_14
	@comment
str r5, [r3]
	emit_nops_till_bundle_end
	bl free
	ldr r3, .LCPI29_15
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI29_2
	ldr r3, [r3]
	cmp r3, #3
	ldreq r3, .LCPI29_3
	ldreq r3, [r3]
	cmpeq r3, #3
	beq .LBB29_87	@ bb125
	b .LBB29_130	@ bb117.bb128_crit_edge
.LBB29_86:	@ bb124
.LBB29_87:	@ bb125
	ldr r0, [r5, #+8]
	emit_nops_till_bundle_end
	bl dwarfout_resume_previous_source_file
	b .LBB29_130	@ bb117.bb128_crit_edge
.LBB29_88:	@ bb144
	cmp r5, #0
	beq .LBB29_94	@ bb154
.LBB29_89:	@ bb146
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
.LBB29_90:	@ bb147
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_92	@ bb147
	b .LBB29_89	@ bb146
.LBB29_91:	@ bb147
.LBB29_92:	@ bb147
	cmp r4, #10
	beq .LBB29_66	@ bb70.bb160_crit_edge
.LBB29_93:	@ bb153
	ldr r3, .LCPI29_1
	ldr r1, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl ungetc
.LBB29_94:	@ bb154
	ldr r0, .LCPI29_17
	emit_nops_till_bundle_end
	bl warning
	b .LBB29_96	@ skipline
.LBB29_95:	@ bb155
	ldr r0, .LCPI29_18
	emit_nops_till_bundle_end
	bl error
.LBB29_96:	@ skipline
	cmp r4, #10
	beq .LBB29_66	@ bb70.bb160_crit_edge
.LBB29_97:	@ bb157
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmn r0, #1
	cmpne r0, #10
	bne .LBB29_97	@ bb157
.LBB29_98:	@ bb157
.LBB29_99:	@ bb160
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB29_100:	@ bb13.bb83_crit_edge
	mov r0, r4
	b .LBB29_55	@ bb83
.LBB29_101:	@ bb17
	cmp r4, #100
	bne .LBB29_39	@ bb81
.LBB29_102:	@ bb30
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #101
	bne .LBB29_39	@ bb81
.LBB29_103:	@ bb31
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #102
	bne .LBB29_39	@ bb81
.LBB29_104:	@ bb32
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #105
	bne .LBB29_39	@ bb81
.LBB29_105:	@ bb33
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #110
	bne .LBB29_39	@ bb81
.LBB29_106:	@ bb34
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #101
	bne .LBB29_39	@ bb81
.LBB29_107:	@ bb35
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
	mov r4, r0
	cmp r0, #32
	beq .LBB29_109	@ bb40
.LBB29_108:	@ bb36
	sub r3, r4, #9
	cmp r3, #2
	bhs .LBB29_39	@ bb81
.LBB29_109:	@ bb40
	ldr r3, .LCPI29_2
	ldr r3, [r3]
	cmp r3, #3
	ldreq r3, .LCPI29_3
	ldreq r3, [r3]
	cmpeq r3, #3
	beq .LBB29_111	@ bb42
	b .LBB29_96	@ skipline
.LBB29_110:	@ bb41
.LBB29_111:	@ bb42
	ldr r3, .LCPI29_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl get_directive_line
	mov r1, r0
	ldr r3, .LCPI29_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl dwarfout_define
	b .LBB29_96	@ skipline
.LBB29_112:	@ bb78
	ldr r0, .LCPI29_5
	emit_nops_till_bundle_end
	bl error
	b .LBB29_96	@ skipline
	.align	4
.LBB29_113:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_19:
 	.long	lineno

	.align	4
.LBB29_114:	@ bb101
	ldr r0, .LCPI29_10
	emit_nops_till_bundle_end
	bl error
	b .LBB29_96	@ skipline
	.align	4
.LBB29_115:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_20:
 	.long	finput

	.align	4
.LBB29_116:	@ bb114.bb128_crit_edge
	mov r5, #0
.LBB29_117:	@ bb128
	ldr r3, .LCPI29_14
	ldr r3, [r3]
	cmp r3, #0
	ldrne r2, .LCPI29_11
	ldrne r2, [r2]
	@comment
strne r2, [r3]
.LBB29_118:	@ bb129
.LBB29_119:	@ bb130
	cmp r5, #0
	beq .LBB29_125	@ bb140
.LBB29_120:	@ bb132
	ldr r4, .LCPI29_1
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl getc
.LBB29_121:	@ bb133
	mov r4, r0
	cmp r4, #9
	cmpne r4, #32
	bne .LBB29_123	@ bb133
	b .LBB29_120	@ bb132
.LBB29_122:	@ bb133
.LBB29_123:	@ bb133
	cmp r4, #10
	beq .LBB29_66	@ bb70.bb160_crit_edge
.LBB29_124:	@ bb139
	ldr r5, .LCPI29_1
	ldr r1, [r5]
	mov r0, r4
	emit_nops_till_bundle_end
	bl ungetc
	emit_nops_till_bundle_end
	bl yylex
	mov r5, #0
	mov r6, r0
.LBB29_125:	@ bb140
	mov r3, #7
	orr r3, r3, #1, 24 @ 256
	cmp r6, r3
	bne .LBB29_88	@ bb144
.LBB29_126:	@ bb141
	ldr r3, .LCPI29_4
	ldr r3, [r3]
	ldrb r2, [r3, #+8]
	cmp r2, #25
	ldreq r3, [r3, #+12]
	cmpeq r3, #3
	beq .LBB29_128	@ bb144.thread
	b .LBB29_88	@ bb144
.LBB29_127:	@ bb142
.LBB29_128:	@ bb144.thread
	ldr r4, .LCPI29_12
	mov r5, #1
	@comment
str r5, [r4]
	b .LBB29_89	@ bb146
.LBB29_129:	@ bb126
	ldr r0, .LCPI29_16
	emit_nops_till_bundle_end
	bl error
.LBB29_130:	@ bb117.bb128_crit_edge
	mov r5, #1
	b .LBB29_117	@ bb128
	.align	4
.LBB29_131:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_0:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_1:
 	.long	finput

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_2:
 	.long	debug_info_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_3:
 	.long	write_symbols

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_4:
 	.long	yylval

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_5:
 	.long	.str135438

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_6:
 	.long	flag_no_ident

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_7:
 	.long	asm_out_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_8:
 	.long	.str136439

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_9:
 	.long	.str137440

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_10:
 	.long	.str138441

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_11:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_12:
 	.long	in_system_header

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_13:
 	.long	main_input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_14:
 	.long	input_file_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_15:
 	.long	input_file_stack_tick

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_16:
 	.long	.str139442

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_17:
 	.long	.str140443

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI29_18:
 	.long	.str141444

	.size check_newline, .-check_newline


	.align	4
skip_white_space:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, #1
	mov r5, #27
	orr r5, r5, #1, 8 @ 16777216
	mov r6, #4
	mov r7, #32
.LBB30_1:	@ bb
	cmp r0, #91
	bgt .LBB30_10	@ bb
.LBB30_2:	@ bb
	sub r3, r0, #8
	cmp r3, #24
	bhi .LBB30_14	@ bb11
.LBB30_3:	@ bb
	tst r5, r4, lsl r3
	bne .LBB30_13	@ bb2
.LBB30_4:	@ bb
	tst r6, r4, lsl r3
	bne .LBB30_9	@ bb1
.LBB30_5:	@ bb
	tst r7, r4, lsl r3
	beq .LBB30_14	@ bb11
.LBB30_6:	@ bb3
	ldr r3, .LCPI30_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB30_13	@ bb2
.LBB30_7:	@ bb4
	ldr r3, .LCPI30_2
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB30_13	@ bb2
.LBB30_8:	@ bb5
	ldr r0, .LCPI30_3
	emit_nops_till_bundle_end
	bl warning
	ldr r0, .LCPI30_4
	emit_nops_till_bundle_end
	bl warning
	ldr r3, .LCPI30_2
	strb r4, [r3]
	b .LBB30_13	@ bb2
.LBB30_9:	@ bb1
	emit_nops_till_bundle_end
	bl check_newline
	b .LBB30_1	@ bb
.LBB30_10:	@ bb
	cmp r0, #92
	bne .LBB30_14	@ bb11
.LBB30_11:	@ bb7
	ldr r3, .LCPI30_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #10
	ldreq r3, .LCPI30_5
	ldreq r2, [r3]
	addeq r2, r2, #1
	@comment
streq r2, [r3]
	ldrne r0, .LCPI30_6
	emit_nops_till_bundle_end
	blne error
	b .LBB30_13	@ bb2
.LBB30_12:	@ bb9
.LBB30_13:	@ bb2
	ldr r3, .LCPI30_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
	b .LBB30_1	@ bb
.LBB30_14:	@ bb11
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB30_15:	@ bb8
	.align	4
.LBB30_16:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_0:
 	.long	finput

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_1:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_2:
 	.long	newline_warning.4246.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_3:
 	.long	.str142445

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_4:
 	.long	.str143446

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_5:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI30_6:
 	.long	.str144447

	.size skip_white_space, .-skip_white_space


	.globl	position_after_white_space
	.align	4
position_after_white_space:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI31_0
	ldr r0, [r3]
	cmn r0, #1
	bne .LBB31_3	@ bb
.LBB31_1:	@ bb1
	ldr r3, .LCPI31_1
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl getc
.LBB31_2:	@ bb2
	ldr r3, .LCPI31_1
	ldr r4, [r3]
	emit_nops_till_bundle_end
	bl skip_white_space
	mov r1, r4
	emit_nops_till_bundle_end
	bl ungetc
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB31_3:	@ bb
	ldr r3, .LCPI31_0
	mvn r2, #0
	@comment
str r2, [r3]
	b .LBB31_2	@ bb2
	.align	4
.LBB31_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI31_0:
 	.long	nextchar

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI31_1:
 	.long	finput

	.size position_after_white_space, .-position_after_white_space


	.globl	init_lex
	.align	4
init_lex:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r0, #44
	emit_nops_till_bundle_end
	bl set_identifier_size
	ldr r3, .LCPI32_0
	mov r4, #0
	@comment
str r4, [r3]
	ldr r3, .LCPI32_1
	mov r2, #40
	@comment
str r2, [r3]
	mov r0, #42
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI32_2
	@comment
str r0, [r3]
	ldr r0, .LCPI32_3
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r5, .LCPI32_4
	@comment
str r0, [r5, #+4]
	ldr r0, .LCPI32_5
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+8]
	ldr r0, .LCPI32_6
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+20]
	ldr r0, .LCPI32_7
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+12]
	ldr r0, .LCPI32_8
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+16]
	ldr r0, .LCPI32_9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+32]
	ldr r0, .LCPI32_10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+36]
	ldr r0, .LCPI32_11
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+28]
	ldr r0, .LCPI32_12
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+60]
	ldr r0, .LCPI32_13
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+72]
	ldr r0, .LCPI32_14
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+64]
	ldr r0, .LCPI32_15
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+68]
	ldr r0, .LCPI32_16
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+40]
	ldr r0, .LCPI32_17
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+44]
	ldr r0, .LCPI32_18
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+48]
	ldr r0, .LCPI32_19
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+56]
	ldr r0, .LCPI32_20
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+52]
	ldr r0, .LCPI32_21
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+80]
	ldr r0, .LCPI32_22
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+84]
	ldr r0, .LCPI32_23
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+108]
	ldr r0, .LCPI32_24
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+88]
	ldr r0, .LCPI32_25
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+92]
	ldr r0, .LCPI32_26
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+96]
	ldr r0, .LCPI32_27
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+100]
	ldr r0, .LCPI32_28
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r5, #+104]
	ldr r3, .LCPI32_29
	mov r2, #179, 30 @ 716
	orr r2, r2, #1, 22 @ 1024
.LBB32_1:	@ bb.i
	add r1, r3, r4
	ldr r1, [r1, #+8]
	sub r1, r1, #22
	cmp r1, #4
	ldrls r1, .LCPI32_30
	@comment
strls r1, [r3, +r4]
.LBB32_2:	@ bb1.i
.LBB32_3:	@ bb3.i
	add r4, r4, #12
	cmp r4, r2
	bne .LBB32_1	@ bb.i
.LBB32_4:	@ forget_protocol_qualifiers.exit
	ldr r3, .LCPI32_31
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB32_8	@ bb14
.LBB32_5:	@ bb1.i146
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+816]
	ldrb r2, [r3]
	cmp r2, #105
	bne .LBB32_47	@ is_reserved_word.exit151.thread
.LBB32_6:	@ bb2.i147
	ldr r2, .LCPI32_23
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_47	@ is_reserved_word.exit151.thread
.LBB32_7:	@ is_reserved_word.exit151
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+816]
.LBB32_8:	@ bb14
	ldr r3, .LCPI32_33
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB32_30	@ bb29
.LBB32_9:	@ bb1.i137
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+600]
	ldrb r2, [r3]
	cmp r2, #99
	bne .LBB32_48	@ is_reserved_word.exit142.thread
.LBB32_10:	@ bb2.i138
	ldr r2, .LCPI32_14
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_48	@ is_reserved_word.exit142.thread
.LBB32_11:	@ is_reserved_word.exit142
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+600]
.LBB32_12:	@ bb1.i128
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+1368]
	ldrb r2, [r3]
	cmp r2, #118
	bne .LBB32_49	@ is_reserved_word.exit133.thread
.LBB32_13:	@ bb2.i129
	ldr r2, .LCPI32_15
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_49	@ is_reserved_word.exit133.thread
.LBB32_14:	@ is_reserved_word.exit133
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+1368]
.LBB32_15:	@ bb1.i119
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+528]
	ldrb r2, [r3]
	cmp r2, #116
	bne .LBB32_50	@ is_reserved_word.exit124.thread
.LBB32_16:	@ bb2.i120
	ldr r2, .LCPI32_34
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_50	@ is_reserved_word.exit124.thread
.LBB32_17:	@ is_reserved_word.exit124
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+528]
.LBB32_18:	@ bb1.i110
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+1404]
	ldrb r2, [r3]
	cmp r2, #115
	bne .LBB32_51	@ is_reserved_word.exit115.thread
.LBB32_19:	@ bb2.i111
	ldr r2, .LCPI32_12
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_51	@ is_reserved_word.exit115.thread
.LBB32_20:	@ is_reserved_word.exit115
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+1404]
.LBB32_21:	@ bb1.i101
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+960]
	ldrb r2, [r3]
	cmp r2, #105
	bne .LBB32_52	@ is_reserved_word.exit106.thread
.LBB32_22:	@ bb2.i102
	ldr r2, .LCPI32_13
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_52	@ is_reserved_word.exit106.thread
.LBB32_23:	@ is_reserved_word.exit106
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+960]
.LBB32_24:	@ bb1.i92
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+384]
	ldrb r2, [r3]
	cmp r2, #105
	bne .LBB32_53	@ is_reserved_word.exit97.thread
.LBB32_25:	@ bb2.i93
	ldr r2, .LCPI32_21
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_53	@ is_reserved_word.exit97.thread
.LBB32_26:	@ is_reserved_word.exit97
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+384]
.LBB32_27:	@ bb1.i83
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+672]
	ldrb r2, [r3]
	cmp r2, #99
	bne .LBB32_54	@ is_reserved_word.exit88.thread
.LBB32_28:	@ bb2.i84
	ldr r2, .LCPI32_22
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_54	@ is_reserved_word.exit88.thread
.LBB32_29:	@ is_reserved_word.exit88
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+672]
.LBB32_30:	@ bb29
	ldr r3, .LCPI32_35
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB32_46	@ return
.LBB32_31:	@ bb1.i74
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+1188]
	ldrb r2, [r3]
	cmp r2, #97
	bne .LBB32_55	@ is_reserved_word.exit79.thread
.LBB32_32:	@ bb2.i75
	ldr r2, .LCPI32_36
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_55	@ is_reserved_word.exit79.thread
.LBB32_33:	@ is_reserved_word.exit79
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+1188]
.LBB32_34:	@ bb1.i65
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+528]
	ldrb r2, [r3]
	cmp r2, #116
	bne .LBB32_56	@ is_reserved_word.exit70.thread
.LBB32_35:	@ bb2.i66
	ldr r2, .LCPI32_34
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_56	@ is_reserved_word.exit70.thread
.LBB32_36:	@ is_reserved_word.exit70
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+528]
.LBB32_37:	@ bb1.i56
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+960]
	ldrb r2, [r3]
	cmp r2, #105
	bne .LBB32_57	@ is_reserved_word.exit61.thread
.LBB32_38:	@ bb2.i57
	ldr r2, .LCPI32_13
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_57	@ is_reserved_word.exit61.thread
.LBB32_39:	@ is_reserved_word.exit61
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+960]
.LBB32_40:	@ bb1.i47
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+384]
	ldrb r2, [r3]
	cmp r2, #105
	bne .LBB32_58	@ is_reserved_word.exit52.thread
.LBB32_41:	@ bb2.i48
	ldr r2, .LCPI32_21
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_58	@ is_reserved_word.exit52.thread
.LBB32_42:	@ is_reserved_word.exit52
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+384]
.LBB32_43:	@ bb1.i42
	ldr r3, .LCPI32_29
	ldr r3, [r3, #+672]
	ldrb r2, [r3]
	cmp r2, #99
	bne .LBB32_59	@ is_reserved_word.exit.thread
.LBB32_44:	@ bb2.i
	ldr r2, .LCPI32_22
	add r0, r2, #1
	add r1, r3, #1
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB32_59	@ is_reserved_word.exit.thread
.LBB32_45:	@ is_reserved_word.exit
	ldr r3, .LCPI32_29
	ldr r2, .LCPI32_30
	@comment
str r2, [r3, #+672]
.LBB32_46:	@ return
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB32_47:	@ is_reserved_word.exit151.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #68
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_8	@ bb14
.LBB32_48:	@ is_reserved_word.exit142.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #50
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_12	@ bb1.i128
.LBB32_49:	@ is_reserved_word.exit133.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #114
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_15	@ bb1.i119
.LBB32_50:	@ is_reserved_word.exit124.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #44
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_18	@ bb1.i110
.LBB32_51:	@ is_reserved_word.exit115.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #117
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_21	@ bb1.i101
.LBB32_52:	@ is_reserved_word.exit106.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #80
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_24	@ bb1.i92
.LBB32_53:	@ is_reserved_word.exit97.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #32
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_27	@ bb1.i83
.LBB32_54:	@ is_reserved_word.exit88.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #56
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_30	@ bb29
.LBB32_55:	@ is_reserved_word.exit79.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #99
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_34	@ bb1.i65
.LBB32_56:	@ is_reserved_word.exit70.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #44
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_37	@ bb1.i56
.LBB32_57:	@ is_reserved_word.exit61.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #80
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_40	@ bb1.i47
.LBB32_58:	@ is_reserved_word.exit52.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #32
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_43	@ bb1.i42
.LBB32_59:	@ is_reserved_word.exit.thread
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI32_32
	mov r2, #56
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB32_46	@ return
	.align	4
.LBB32_60:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_0:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_1:
 	.long	maxtoken

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_2:
 	.long	token_buffer

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_3:
 	.long	.str1302

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_4:
 	.long	ridpointers

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_5:
 	.long	.str50351

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_6:
 	.long	.str66367

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_7:
 	.long	.str71372

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_8:
 	.long	.str75376

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_9:
 	.long	.str55356

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_10:
 	.long	.str79380

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_11:
 	.long	.str73374

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_12:
 	.long	.str70371

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_13:
 	.long	.str51352

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_14:
 	.long	.str31332

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_15:
 	.long	.str69370

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_16:
 	.long	.str76377

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_17:
 	.long	.str45346

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_18:
 	.long	.str24325

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_19:
 	.long	.str27328

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_20:
 	.long	.str53354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_21:
 	.long	.str145448

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_22:
 	.long	.str146449

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_23:
 	.long	.str44345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_24:
 	.long	.str21322

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_25:
 	.long	.str52353

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_26:
 	.long	.str57358

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_27:
 	.long	.str19320

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_28:
 	.long	.str58359

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_29:
 	.long	wordlist

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_30:
 	.long	.str301

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_31:
 	.long	doing_objc_thang

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_32:
 	.long	.str96397

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_33:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_34:
 	.long	.str26327

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_35:
 	.long	flag_no_asm

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI32_36:
 	.long	.str64365

	.size init_lex, .-init_lex


	.globl	handle_pragma_token
	.align	4
handle_pragma_token:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r4, r1
	cmp r0, #0
	bne .LBB33_10	@ bb8
.LBB33_1:	@ bb
	ldr r4, .LCPI33_0
	ldr r4, [r4]
	cmp r4, #3
	beq .LBB33_6	@ bb5
.LBB33_2:	@ bb
	cmp r4, #7
	bne .LBB33_8	@ bb7
.LBB33_3:	@ bb1
	ldr r4, .LCPI33_1
	ldr r4, [r4]
	cmp r4, #10
	bne .LBB33_5	@ bb3
.LBB33_4:	@ bb2
	ldr r4, .LCPI33_2
	ldr r4, [r4]
	mov r4, r4, lsl #3
	ldr r3, .LCPI33_3
	@comment
str r4, [r3]
	b .LBB33_8	@ bb7
.LBB33_5:	@ bb3
	ldr r0, .LCPI33_4
	emit_nops_till_bundle_end
	bl warning
	b .LBB33_8	@ bb7
.LBB33_6:	@ bb5
	ldr r4, .LCPI33_5
	ldrb r4, [r4]
	tst r4, #16
	ldrne r4, .LCPI33_1
	ldrne r0, [r4]
	ldrne r4, .LCPI33_6
	ldrne r1, [r4]
	ldrne r4, .LCPI33_7
	ldrne r2, [r4]
	emit_nops_till_bundle_end
	blne handle_pragma_weak
.LBB33_7:	@ bb6
.LBB33_8:	@ bb7
	mov r4, #0
.LBB33_9:	@ bb7
	ldr r3, .LCPI33_1
	@comment
str r4, [r3]
	ldr r3, .LCPI33_0
	@comment
str r4, [r3]
	b .LBB33_38	@ return
.LBB33_10:	@ bb8
	ldr r3, .LCPI33_1
	ldr r3, [r3]
	cmp r3, #10
	bhi .LBB33_41	@ bb47
.LBB33_11:	@ bb8
	.set PCRELV9, (.LJTI33_0_0-(.LPCRELL9+8))
.LPCRELL9:
	add r2, pc, #PCRELV9
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI33_0_0:
	.long	 .LBB33_12
	.long	 .LBB33_38
	.long	 .LBB33_38
	.long	 .LBB33_18
	.long	 .LBB33_22
	.long	 .LBB33_23
	.long	 .LBB33_20
	.long	 .LBB33_26
	.long	 .LBB33_28
	.long	 .LBB33_39
	.long	 .LBB33_36

.text
@ JUMP TABLE END



	.align	2
.LBB33_12:	@ bb9
	cmp r4, #0
	beq .LBB33_17	@ bb15
.LBB33_13:	@ bb10
	ldrb r3, [r4, #+8]
	cmp r3, #1
	bne .LBB33_17	@ bb15
.LBB33_14:	@ bb11
	ldr r0, [r4, #+16]
	ldr r1, .LCPI33_8
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB33_42	@ bb12
.LBB33_15:	@ bb13
	ldr r0, [r4, #+16]
	ldr r1, .LCPI33_9
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB33_17	@ bb15
.LBB33_16:	@ bb14
	mov r4, #3
	b .LBB33_9	@ bb7
.LBB33_17:	@ bb15
	mov r4, #1
	b .LBB33_9	@ bb7
	.align	2
.LBB33_18:	@ bb17
	cmp r4, #0
	beq .LBB33_20	@ bb20
.LBB33_19:	@ bb18
	ldrb r3, [r4, #+8]
	cmp r3, #1
	beq .LBB33_43	@ bb19
	.align	2
.LBB33_20:	@ bb20
	ldr r4, .LCPI33_1
	mov r3, #2
.LBB33_21:	@ bb20
	@comment
str r3, [r4]
	b .LBB33_38	@ return
	.align	2
.LBB33_22:	@ bb21
	ldr r1, .LCPI33_10
	emit_nops_till_bundle_end
	bl strcmp
	mov r4, #5
	mov r3, #2
	cmp r0, #0
	moveq r3, r4
	ldr r4, .LCPI33_1
	b .LBB33_21	@ bb20
	.align	2
.LBB33_23:	@ bb25
	cmp r4, #0
	beq .LBB33_20	@ bb20
.LBB33_24:	@ bb26
	ldrb r3, [r4, #+8]
	cmp r3, #1
	bne .LBB33_20	@ bb20
.LBB33_25:	@ bb27
	ldr r4, [r4, #+16]
	ldr r3, .LCPI33_7
	@comment
str r4, [r3]
	ldr r4, .LCPI33_1
	mov r3, #6
	b .LBB33_21	@ bb20
	.align	2
.LBB33_26:	@ bb30
	ldr r1, .LCPI33_11
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB33_20	@ bb20
.LBB33_27:	@ bb31
	ldr r4, .LCPI33_1
	mov r3, #8
	b .LBB33_21	@ bb20
	.align	2
.LBB33_28:	@ bb33
	cmp r4, #0
	beq .LBB33_35	@ bb40
.LBB33_29:	@ bb34
	ldrb r3, [r4, #+8]
	cmp r3, #25
	ldreq r3, [r4, #+16]
	cmpeq r3, #0
	beq .LBB33_31	@ bb36
	b .LBB33_34	@ bb39
.LBB33_30:	@ bb35
.LBB33_31:	@ bb36
	ldr r4, [r4, #+12]
	cmp r4, #4
	bhi .LBB33_20	@ bb20
.LBB33_32:	@ bb36
	mov r3, #1
	mov r2, #22
	tst r2, r3, lsl r4
	beq .LBB33_20	@ bb20
.LBB33_33:	@ bb37
	ldr r3, .LCPI33_2
	@comment
str r4, [r3]
	ldr r4, .LCPI33_1
	mov r3, #9
	b .LBB33_21	@ bb20
.LBB33_34:	@ bb39
	cmp r4, #0
	bne .LBB33_36	@ bb42
.LBB33_35:	@ bb40
	ldr r1, .LCPI33_12
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB33_44	@ bb41
	.align	2
.LBB33_36:	@ bb42
	ldr r3, .LCPI33_1
	mov r2, #2
.LBB33_37:	@ bb42
	@comment
str r2, [r3]
	.align	2
.LBB33_38:	@ return
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	2
.LBB33_39:	@ bb43
	ldr r1, .LCPI33_12
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB33_36	@ bb42
.LBB33_40:	@ bb44
	ldr r3, .LCPI33_1
	mov r2, #10
	b .LBB33_37	@ bb42
.LBB33_41:	@ bb47
	emit_nops_till_bundle_end
	bl abort
.LBB33_42:	@ bb12
	mov r4, #7
	b .LBB33_9	@ bb7
.LBB33_43:	@ bb19
	ldr r4, [r4, #+16]
	ldr r3, .LCPI33_6
	@comment
str r4, [r3]
	ldr r4, .LCPI33_1
	mov r3, #4
	b .LBB33_21	@ bb20
.LBB33_44:	@ bb41
	ldr r3, .LCPI33_2
	mov r2, #0
	@comment
str r2, [r3]
	b .LBB33_40	@ bb44
	.align	4
.LBB33_45:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_0:
 	.long	type.2957

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_1:
 	.long	state.2956

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_2:
 	.long	align.2960

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_3:
 	.long	maximum_field_alignment

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_4:
 	.long	.str457

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_5:
 	.long	target_flags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_6:
 	.long	name.2958

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_7:
 	.long	value.2959

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_8:
 	.long	.str1458

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_9:
 	.long	.str2459

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_10:
 	.long	.str3460

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_11:
 	.long	.str4461

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI33_12:
 	.long	.str5462

	.size handle_pragma_token, .-handle_pragma_token


	.globl	print_lang_decl
	.align	4
print_lang_decl:
	sfi_bx lr
	.size print_lang_decl, .-print_lang_decl


	.globl	print_lang_type
	.align	4
print_lang_type:
	sfi_bx lr
	.size print_lang_type, .-print_lang_type


	.globl	global_bindings_p
	.align	4
global_bindings_p:
	ldr r3, .LCPI36_0
	ldr r3, [r3]
	ldr r2, .LCPI36_1
	ldr r2, [r2]
	mov r1, #1
	mov r0, #0
	cmp r2, r3
	moveq r0, r1
	sfi_bx lr
	.align	4
.LBB36_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI36_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI36_1:
 	.long	current_binding_level

	.size global_bindings_p, .-global_bindings_p


	.globl	keep_next_level
	.align	4
keep_next_level:
	ldr r3, .LCPI37_0
	mov r2, #1
	strb r2, [r3]
	sfi_bx lr
	.align	4
.LBB37_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI37_0:
 	.long	keep_next_level_flag.b

	.size keep_next_level, .-keep_next_level


	.globl	kept_level_p
	.align	4
kept_level_p:
	ldr r3, .LCPI38_0
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, #0
	ldrne r2, [r3, #+12]
	cmpne r2, #0
	movne r0, #1
	sfi_bxne lr
.LBB38_1:	@ bb
.LBB38_2:	@ bb1
	ldrb r2, [r3, #+27]
	cmp r2, #0
	ldreq r2, [r3]
	cmpeq r2, #0
	beq .LBB38_4	@ bb3
	b .LBB38_6	@ bb7
.LBB38_3:	@ bb2
.LBB38_4:	@ bb3
	ldr r2, [r3, #+4]
	cmp r2, #0
	moveq r0, #0
	sfi_bxeq lr
	b .LBB38_7	@ bb4
.LBB38_5:	@ bb6
.LBB38_6:	@ bb7
	mov r0, #1
	sfi_bx lr
.LBB38_7:	@ bb4
	ldrb r3, [r3, #+25]
	mov r2, #1
	mov r0, #0
	cmp r3, #0
	moveq r0, r2
	sfi_bx lr
	.align	4
.LBB38_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI38_0:
 	.long	current_binding_level

	.size kept_level_p, .-kept_level_p


	.globl	declare_parm_level
	.align	4
declare_parm_level:
	ldr r3, .LCPI39_0
	ldr r3, [r3]
	mov r2, #1
	strb r2, [r3, #+24]
	sfi_bx lr
	.align	4
.LBB39_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI39_0:
 	.long	current_binding_level

	.size declare_parm_level, .-declare_parm_level


	.globl	in_parm_level_p
	.align	4
in_parm_level_p:
	ldr r3, .LCPI40_0
	ldr r3, [r3]
	ldrsb r0, [r3, #+24]
	sfi_bx lr
	.align	4
.LBB40_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI40_0:
 	.long	current_binding_level

	.size in_parm_level_p, .-in_parm_level_p


	.globl	delete_block
	.align	4
delete_block:
	ldr r3, .LCPI41_0
	ldr r3, [r3]
	ldr r2, [r3, #+12]
	cmp r2, r0
	ldreq r2, [r0]
	@comment
streq r2, [r3, #+12]
.LBB41_1:	@ bb
.LBB41_2:	@ bb1
	ldr r3, .LCPI41_0
	ldr r3, [r3]
	add r3, r3, #12
.LBB41_3:	@ bb5.outer
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB41_6	@ bb6.split
.LBB41_4:	@ bb5
	ldr r2, [r3]
	cmp r2, r0
	bne .LBB41_3	@ bb5.outer
.LBB41_5:	@ bb3
	ldr r2, [r0]
	@comment
str r2, [r3]
	b .LBB41_4	@ bb5
.LBB41_6:	@ bb6.split
	mov r3, #0
	@comment
str r3, [r0]
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r12, [r2, #+2]
	orr r1, r12, r1, lsl #8
	orr r3, r3, r1, lsl #16
	bic r3, r3, #1, 16 @ 65536
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, r3, lsr #16
	strb r1, [r2, #+2]
	mov r3, r3, lsr #8
	strb r3, [r0, #+9]
	sfi_bx lr
	.align	4
.LBB41_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI41_0:
 	.long	current_binding_level

	.size delete_block, .-delete_block


	.globl	set_block
	.align	4
set_block:
	ldr r3, .LCPI42_0
	ldr r3, [r3]
	@comment
str r0, [r3, #+16]
	sfi_bx lr
	.align	4
.LBB42_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI42_0:
 	.long	current_binding_level

	.size set_block, .-set_block


	.globl	getdecls
	.align	4
getdecls:
	ldr r3, .LCPI43_0
	ldr r3, [r3]
	ldr r0, [r3]
	sfi_bx lr
	.align	4
.LBB43_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI43_0:
 	.long	current_binding_level

	.size getdecls, .-getdecls


	.globl	gettags
	.align	4
gettags:
	ldr r3, .LCPI44_0
	ldr r3, [r3]
	ldr r0, [r3, #+4]
	sfi_bx lr
	.align	4
.LBB44_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI44_0:
 	.long	current_binding_level

	.size gettags, .-gettags


	.globl	lookup_name
	.align	4
lookup_name:
	ldr r3, .LCPI45_0
	ldr r3, [r3]
	ldr r2, .LCPI45_1
	ldr r2, [r2]
	cmp r2, r3
	movne r3, r0
	ldrne r2, [r3, #+24]!
	cmpne r2, #0
	ldrne r0, [r3]
	sfi_bxne lr
.LBB45_1:	@ bb
.LBB45_2:	@ bb2
	add r3, r0, #20
.LBB45_3:	@ bb3
	ldr r0, [r3]
	sfi_bx lr
	.align	4
.LBB45_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI45_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI45_1:
 	.long	current_binding_level

	.size lookup_name, .-lookup_name


	.globl	lookup_name_current_level
	.align	4
lookup_name_current_level:
	ldr r3, .LCPI46_0
	ldr r3, [r3]
	ldr r2, .LCPI46_1
	ldr r2, [r2]
	cmp r2, r3
	ldreq r0, [r0, #+20]
	sfi_bxeq lr
.LBB46_1:	@ bb1
	ldr r3, [r0, #+24]
	cmp r3, #0
	bne .LBB46_4	@ bb6
.LBB46_2:	@ bb1.bb8_crit_edge
	mov r2, #0
	b .LBB46_5	@ bb8
.LBB46_3:	@ bb4
.LBB46_4:	@ bb6
	ldr r2, [r2]
	cmp r2, #0
	ldrne r3, [r2, #+32]
	cmpne r3, r0
	bne .LBB46_4	@ bb6
.LBB46_5:	@ bb8
	mov r0, r2
	sfi_bx lr
.LBB46_6:	@ bb
	.align	4
.LBB46_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI46_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI46_1:
 	.long	current_binding_level

	.size lookup_name_current_level, .-lookup_name_current_level


	.globl	lookup_name_current_level_global
	.align	4
lookup_name_current_level_global:
	ldr r3, .LCPI47_0
	ldr r3, [r3]
	ldr r2, .LCPI47_1
	ldr r2, [r2]
	cmp r2, r3
	ldrne r3, [r0, #+24]
	cmpne r3, #0
	bne .LBB47_2	@ bb5
	b .LBB47_5	@ bb
.LBB47_1:	@ bb1
.LBB47_2:	@ bb5
	ldr r2, [r2]
	cmp r2, #0
	ldreq r0, [r0, #+20]
	sfi_bxeq lr
.LBB47_3:	@ bb3
	ldr r3, [r2, #+32]
	cmp r3, r0
	bne .LBB47_2	@ bb5
.LBB47_4:	@ bb6
	cmp r2, #0
	movne r0, r2
	sfi_bxne lr
.LBB47_5:	@ bb
	ldr r0, [r0, #+20]
	sfi_bx lr
.LBB47_6:	@ bb9
	.align	4
.LBB47_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI47_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI47_1:
 	.long	current_binding_level

	.size lookup_name_current_level_global, .-lookup_name_current_level_global


	.globl	maybe_build_cleanup
	.align	4
maybe_build_cleanup:
	mov r0, #0
	sfi_bx lr
	.size maybe_build_cleanup, .-maybe_build_cleanup


	.globl	clear_parm_order
	.align	4
clear_parm_order:
	ldr r3, .LCPI49_0
	ldr r3, [r3]
	mov r2, #0
	@comment
str r2, [r3, #+36]
	sfi_bx lr
	.align	4
.LBB49_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI49_0:
 	.long	current_binding_level

	.size clear_parm_order, .-clear_parm_order


	.align	4
field_decl_cmp:
	ldr r3, [r1]
	ldr r3, [r3, #+32]
	ldr r2, [r0]
	ldr r2, [r2, #+32]
	cmp r2, r3
	beq .LBB50_5	@ entry.bb8_crit_edge
.LBB50_1:	@ bb1
	cmp r2, #0
	beq .LBB50_6	@ bb1.bb8_crit_edge
.LBB50_2:	@ bb3
	cmp r3, #0
	bne .LBB50_7	@ bb5
.LBB50_3:	@ bb3.bb8_crit_edge
	mov r0, #1
.LBB50_4:	@ bb8
	sfi_bx lr
.LBB50_5:	@ entry.bb8_crit_edge
	mov r0, #0
	b .LBB50_4	@ bb8
.LBB50_6:	@ bb1.bb8_crit_edge
	mvn r0, #0
	b .LBB50_4	@ bb8
.LBB50_7:	@ bb5
	mvn r1, #0
	mov r0, #1
	cmp r2, r3
	movlo r0, r1
	sfi_bx lr
	.size field_decl_cmp, .-field_decl_cmp


	.globl	c_mark_varargs
	.align	4
c_mark_varargs:
	ldr r3, .LCPI51_0
	mov r2, #1
	strb r2, [r3]
	sfi_bx lr
	.align	4
.LBB51_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI51_0:
 	.long	c_function_varargs.b

	.size c_mark_varargs, .-c_mark_varargs


	.globl	copy_lang_decl
	.align	4
copy_lang_decl:
	sfi_bx lr
	.size copy_lang_decl, .-copy_lang_decl


	.globl	pop_c_function_context
	.align	4
pop_c_function_context:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI53_0
	ldr r3, [r3]
	ldr r2, .LCPI53_1
	ldr r4, [r2]
.LBB53_1:	@ entry
	cmp r3, #0
	beq .LBB53_5	@ bb4
.LBB53_2:	@ bb
	ldr r2, [r3, #+16]
	ldr r1, [r2, #+32]
	cmp r1, #0
	@comment
strne r2, [r1, #+28]
.LBB53_3:	@ bb1
.LBB53_4:	@ bb2
	ldr r3, [r3]
	b .LBB53_1	@ entry
.LBB53_5:	@ bb4
	ldr r3, .LCPI53_2
	ldr r3, [r3]
	ldr r2, [r3, #+76]
	cmp r2, #0
	ldreq r2, .LCPI53_3
	ldreq r2, [r2]
	@comment
streq r2, [r3, #+48]
	ldreq r3, .LCPI53_2
	ldreq r3, [r3]
	moveq r2, #0
	@comment
streq r2, [r3, #+40]
.LBB53_6:	@ bb5
.LBB53_7:	@ bb6
	emit_nops_till_bundle_end
	bl pop_function_context
	ldr r3, [r4]
	ldr r2, .LCPI53_1
	@comment
str r3, [r2]
	ldr r3, [r4, #+4]
	ldr r2, .LCPI53_4
	@comment
str r3, [r2]
	ldr r3, [r4, #+8]
	ldr r2, .LCPI53_0
	@comment
str r3, [r2]
	ldr r3, [r4, #+12]
	ldr r2, .LCPI53_5
	@comment
str r3, [r2]
	ldr r3, [r4, #+16]
	ldr r2, .LCPI53_6
	@comment
str r3, [r2]
	ldr r3, [r4, #+20]
	ldr r2, .LCPI53_7
	@comment
str r3, [r2]
	ldr r3, [r4, #+24]
	ldr r2, .LCPI53_8
	@comment
str r3, [r2]
	ldr r3, [r4, #+28]
	ldr r2, .LCPI53_9
	@comment
str r3, [r2]
	mov r0, r4
	emit_nops_till_bundle_end
	bl free
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB53_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_0:
 	.long	shadowed_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_1:
 	.long	c_function_chain

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_2:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_3:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_4:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_5:
 	.long	current_function_returns_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_6:
 	.long	current_function_returns_null

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_7:
 	.long	warn_about_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_8:
 	.long	current_extern_inline

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI53_9:
 	.long	current_binding_level

	.size pop_c_function_context, .-pop_c_function_context


	.globl	push_label_level
	.align	4
push_label_level:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI54_0
	ldr r0, [r3]
	cmp r0, #0
	ldrne r3, [r0, #+20]
	ldrne r2, .LCPI54_0
	@comment
strne r3, [r2]
	moveq r0, #40
	emit_nops_till_bundle_end
	bleq xmalloc
	b .LBB54_2	@ bb2
.LBB54_1:	@ bb1
.LBB54_2:	@ bb2
	ldr r3, .LCPI54_1
	ldr r2, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r0, [r3]
	ldr r3, .LCPI54_2
	ldr r2, [r3]
	@comment
str r2, [r0]
	ldr r2, .LCPI54_3
	ldr r1, [r2]
	@comment
str r1, [r0, #+8]
	mov r1, #0
	@comment
str r1, [r3]
	@comment
str r1, [r2]
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB54_3:	@ bb
	.align	4
.LBB54_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI54_0:
 	.long	free_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI54_1:
 	.long	label_level_chain

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI54_2:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI54_3:
 	.long	shadowed_labels

	.size push_label_level, .-push_label_level


	.globl	pushlevel
	.align	4
pushlevel:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r3, .LCPI55_0
	ldr r3, [r3]
	ldr r2, .LCPI55_1
	ldr r2, [r2]
	mov r4, r0
	cmp r2, r3
	ldreq r3, .LCPI55_2
	moveq r2, #0
	@comment
streq r2, [r3]
.LBB55_1:	@ bb
.LBB55_2:	@ bb1
	ldr r3, .LCPI55_3
	ldr r0, [r3]
	cmp r0, #0
	ldrne r3, [r0, #+20]
	ldrne r2, .LCPI55_3
	@comment
strne r3, [r2]
	moveq r0, #40
	emit_nops_till_bundle_end
	bleq xmalloc
	b .LBB55_4	@ bb4
.LBB55_3:	@ bb3
.LBB55_4:	@ bb4
	ldr r3, .LCPI55_4
	ldr r2, [r3, #+20]
	ldr r1, [r3, #+16]
	ldr r12, [r3, #+12]
	ldmib r3, {r5, lr}
	ldr r6, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r1, [r0, #+16]
	@comment
str r12, [r0, #+12]
	stmib r0, {r5, lr}
	@comment
str r6, [r0]
	ldr r2, [r3, #+36]
	ldr r1, [r3, #+32]
	ldr r12, [r3, #+28]
	ldr r3, [r3, #+24]
	@comment
str r2, [r0, #+36]
	@comment
str r1, [r0, #+32]
	@comment
str r12, [r0, #+28]
	@comment
str r3, [r0, #+24]
	cmp r4, #0
	bne .LBB55_10	@ bb4.bb9_crit_edge
.LBB55_5:	@ bb5
	ldr r3, .LCPI55_1
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r3, #+26]
	cmpne r3, #0
	bne .LBB55_10	@ bb4.bb9_crit_edge
.LBB55_6:	@ bb6
.LBB55_7:	@ bb8
	mov r3, #0
.LBB55_8:	@ bb9
	strb r3, [r0, #+25]
	ldr r3, .LCPI55_1
	ldr r2, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r0, [r3]
	ldr r3, .LCPI55_5
	ldrb r2, [r3]
	strb r2, [r0, #+27]
	mov r2, #0
	strb r2, [r3]
	ldr r3, .LCPI55_6
	ldrb r1, [r3]
	strb r1, [r0, #+28]
	strb r2, [r3]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB55_9:	@ bb2
.LBB55_10:	@ bb4.bb9_crit_edge
	mov r3, #1
	b .LBB55_8	@ bb9
	.align	4
.LBB55_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_1:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_2:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_3:
 	.long	free_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_4:
 	.long	clear_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_5:
 	.long	keep_next_level_flag.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI55_6:
 	.long	keep_next_if_subblocks.b

	.size pushlevel, .-pushlevel


	.globl	push_c_function_context
	.align	4
push_c_function_context:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r0, #32
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI56_0
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	ldrne r0, .LCPI56_1
	emit_nops_till_bundle_end
	blne pedwarn
.LBB56_1:	@ bb
.LBB56_2:	@ bb1
	emit_nops_till_bundle_end
	bl push_function_context
	ldr r3, .LCPI56_2
	ldr r2, [r3]
	@comment
str r2, [r4]
	@comment
str r4, [r3]
	ldr r3, .LCPI56_3
	ldr r3, [r3]
	@comment
str r3, [r4, #+4]
	ldr r3, .LCPI56_4
	ldr r3, [r3]
	@comment
str r3, [r4, #+8]
	ldr r3, .LCPI56_5
	ldr r3, [r3]
	@comment
str r3, [r4, #+12]
	ldr r3, .LCPI56_6
	ldr r3, [r3]
	@comment
str r3, [r4, #+16]
	ldr r3, .LCPI56_7
	ldr r3, [r3]
	@comment
str r3, [r4, #+20]
	ldr r3, .LCPI56_8
	ldr r3, [r3]
	@comment
str r3, [r4, #+24]
	ldr r3, .LCPI56_9
	ldr r3, [r3]
	@comment
str r3, [r4, #+28]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB56_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_1:
 	.long	.str3470

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_2:
 	.long	c_function_chain

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_3:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_4:
 	.long	shadowed_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_5:
 	.long	current_function_returns_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_6:
 	.long	current_function_returns_null

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_7:
 	.long	warn_about_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_8:
 	.long	current_extern_inline

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI56_9:
 	.long	current_binding_level

	.size push_c_function_context, .-push_c_function_context


	.globl	parmlist_tags_warning
	.align	4
parmlist_tags_warning:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI57_0
	ldr r3, [r3]
	ldr r4, [r3, #+4]
	cmp r4, #0
	beq .LBB57_20	@ return
.LBB57_1:	@ entry.bb_crit_edge
	mov r5, #1
.LBB57_2:	@ bb
	ldr r3, [r4, #+16]
	ldrb r3, [r3, #+8]
	cmp r3, #21
	ldreq r2, .LCPI57_1
	ldreq r2, [r2]
	cmpeq r2, #0
	beq .LBB57_19	@ bb19
.LBB57_3:	@ bb1
.LBB57_4:	@ bb2
	ldr r2, [r4, #+12]
	cmp r2, #0
	beq .LBB57_11	@ bb10
.LBB57_5:	@ bb3
	and r1, r3, #255
	ldr r2, [r2, #+16]
	cmp r1, #20
	beq .LBB57_9	@ bb8
.LBB57_6:	@ bb3
	and r3, r3, #255
	cmp r3, #21
	ldrne r1, .LCPI57_3
	ldreq r1, .LCPI57_2
	b .LBB57_10	@ bb9
.LBB57_7:	@ bb3.bb9_crit_edge
.LBB57_8:	@ bb6
.LBB57_9:	@ bb8
	ldr r1, .LCPI57_4
.LBB57_10:	@ bb9
	ldr r0, .LCPI57_5
	emit_nops_till_bundle_end
	bl warning
	b .LBB57_17	@ bb17
.LBB57_11:	@ bb10
	and r2, r3, #255
	cmp r2, #20
	beq .LBB57_15	@ bb15
.LBB57_12:	@ bb10
	and r3, r3, #255
	cmp r3, #21
	ldrne r1, .LCPI57_3
	ldreq r1, .LCPI57_2
	b .LBB57_16	@ bb16
.LBB57_13:	@ bb10.bb16_crit_edge
.LBB57_14:	@ bb13
.LBB57_15:	@ bb15
	ldr r1, .LCPI57_4
.LBB57_16:	@ bb16
	ldr r0, .LCPI57_6
	emit_nops_till_bundle_end
	bl warning
.LBB57_17:	@ bb17
	ldr r3, .LCPI57_7
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB57_19	@ bb19
.LBB57_18:	@ bb18
	ldr r0, .LCPI57_8
	emit_nops_till_bundle_end
	bl warning
	ldr r0, .LCPI57_9
	emit_nops_till_bundle_end
	bl warning
	ldr r3, .LCPI57_7
	strb r5, [r3]
.LBB57_19:	@ bb19
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB57_2	@ bb
.LBB57_20:	@ return
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB57_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_1:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_2:
 	.long	.str4471

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_3:
 	.long	.str5472

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_4:
 	.long	.str6473

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_5:
 	.long	.str7474

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_6:
 	.long	.str8475

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_7:
 	.long	already.6215.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_8:
 	.long	.str9476

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI57_9:
 	.long	.str10477

	.size parmlist_tags_warning, .-parmlist_tags_warning


	.globl	insert_block
	.align	4
insert_block:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r1, r0
	ldrb r3, [r1, #+10]
	ldrb r2, [r1, #+11]
	mov r0, r1
	ldrb r12, [r0, #+8]!
	ldrb lr, [r0, #+1]
	strb r12, [r0]
	orr r3, r3, r2, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 16 @ 65536
	mov r3, r3, lsr #16
	strb r3, [r1, #+10]
	ldr r3, .LCPI58_0
	ldr r4, [r3]
	ldr r0, [r4, #+12]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r4, #+12]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB58_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI58_0:
 	.long	current_binding_level

	.size insert_block, .-insert_block


	.globl	get_parm_info
	.align	4
get_parm_info:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr r3, .LCPI59_0
	ldr r3, [r3]
	ldr r5, [r3, #+36]
	ldmia r3, {r4, r6}
	mov r7, r0
	cmp r4, #0
	cmpne r7, #0
	bne .LBB59_2	@ bb
	b .LBB59_35	@ entry.bb15.outer_crit_edge
.LBB59_1:	@ entry
.LBB59_2:	@ bb
	ldr r8, [r4]
	cmp r8, #0
	bne .LBB59_35	@ entry.bb15.outer_crit_edge
.LBB59_3:	@ bb3
	ldr r8, .LCPI59_1
	ldr r8, [r8]
	ldr r2, [r4, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r8
	ldreq r8, [r4, #+32]
	cmpeq r8, #0
	beq .LBB59_5	@ bb5
	b .LBB59_35	@ entry.bb15.outer_crit_edge
.LBB59_4:	@ bb4
.LBB59_5:	@ bb5
	mov r4, #0
	@comment
str r4, [r3]
	ldr r4, .LCPI59_1
	ldr r1, [r4]
	mov r0, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	mov r2, r0
	mov r0, #0
	mov r1, #0
	b .LBB59_34	@ bb43
.LBB59_6:	@ bb7
	ldrb r3, [r8, #+8]
	ldr r4, [r8]
	cmp r3, #34
	bne .LBB59_9	@ bb15.outer.backedge
.LBB59_7:	@ bb9
	ldrb r3, [r8, #+9]
	tst r3, #128
	beq .LBB59_11	@ bb15
.LBB59_8:	@ bb13
	ldr r1, .LCPI59_2
	mov r0, r8
	emit_nops_till_bundle_end
	bl error_with_decl
.LBB59_9:	@ bb15.outer.backedge
	@comment
str r9, [r8]
.LBB59_10:	@ bb15.outer
	mov r9, r8
.LBB59_11:	@ bb15
	mov r8, r4
	cmp r8, #0
	bne .LBB59_6	@ bb7
.LBB59_12:	@ bb21.loopexit
	cmp r5, #0
	beq .LBB59_37	@ bb21.loopexit.bb25_crit_edge
.LBB59_13:	@ bb21.loopexit.bb17_crit_edge
	mov r2, #0
	mov r3, r5
.LBB59_14:	@ bb17
	ldr r1, [r3]
	ldr r0, [r3, #+16]
	cmp r1, #0
	@comment
streq r2, [r0]
	ldrne r1, [r1, #+16]
	@comment
strne r1, [r0]
	b .LBB59_16	@ bb20
.LBB59_15:	@ bb19
.LBB59_16:	@ bb20
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB59_14	@ bb17
.LBB59_17:	@ bb22
	cmp r5, #0
	beq .LBB59_37	@ bb21.loopexit.bb25_crit_edge
.LBB59_18:	@ bb23
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl nreverse
.LBB59_19:	@ bb25
	mov r1, r9
	emit_nops_till_bundle_end
	bl chainon
	ldr r3, .LCPI59_0
	ldr r3, [r3]
	@comment
str r0, [r3]
	mov r4, r0
	cmp r0, #0
	beq .LBB59_38	@ bb25.bb41_crit_edge
.LBB59_20:	@ bb25.bb26_crit_edge
	mov r2, #0
	mov r5, #0
	mov r8, r4
	mov r9, #0
.LBB59_21:	@ bb26
	ldrb r3, [r8, #+8]
	cmp r3, #34
	bne .LBB59_31	@ bb39
.LBB59_22:	@ bb27
	ldr r1, [r8, #+4]
	@comment
str r1, [r8, #+48]
	ldrb r3, [r1, #+8]
	cmp r3, #7
	andne r3, r3, #255
	cmpne r3, #10
	bne .LBB59_26	@ bb33
.LBB59_23:	@ bb27
.LBB59_24:	@ bb31
	ldr r3, .LCPI59_3
	ldr r3, [r3]
	ldrb r0, [r3, #+28]
	ldrb r12, [r1, #+28]
	cmp r12, r0
	@comment
strlo r3, [r8, #+48]
.LBB59_25:	@ bb32
.LBB59_26:	@ bb33
	mov r0, r5
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	ldr r3, [r0, #+16]
	ldr r3, [r3, #+64]
	ldr r2, .LCPI59_1
	ldr r2, [r2]
	mov r10, r0
	cmp r3, r2
	bne .LBB59_30	@ bb33.bb39_crit_edge
.LBB59_27:	@ bb33
	cmp r9, #0
	ldreq r3, [r8, #+32]
	cmpeq r3, #0
	beq .LBB59_29	@ bb38
	b .LBB59_30	@ bb33.bb39_crit_edge
.LBB59_28:	@ bb37
.LBB59_29:	@ bb38
	ldr r0, .LCPI59_4
	emit_nops_till_bundle_end
	bl error
	mov r9, #1
.LBB59_30:	@ bb33.bb39_crit_edge
	mov r2, r10
.LBB59_31:	@ bb39
	ldr r8, [r8]
	cmp r8, #0
	bne .LBB59_21	@ bb26
	b .LBB59_39	@ bb41
.LBB59_32:	@ bb43
	mov r0, r2
.LBB59_33:	@ bb43
	emit_nops_till_bundle_end
	bl nreverse
	mov r2, r0
	mov r0, r4
	mov r1, r6
.LBB59_34:	@ bb43
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB59_35:	@ entry.bb15.outer_crit_edge
	mov r8, #0
	b .LBB59_10	@ bb15.outer
.LBB59_36:	@ bb18
.LBB59_37:	@ bb21.loopexit.bb25_crit_edge
	mov r0, #0
	b .LBB59_19	@ bb25
.LBB59_38:	@ bb25.bb41_crit_edge
	mov r2, #0
.LBB59_39:	@ bb41
	cmp r7, #0
	beq .LBB59_32	@ bb43
.LBB59_40:	@ bb42
	ldr r3, .LCPI59_1
	ldr r1, [r3]
	mov r0, #0
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	b .LBB59_33	@ bb43
	.align	4
.LBB59_41:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI59_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI59_1:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI59_2:
 	.long	.str15483

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI59_3:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI59_4:
 	.long	.str16485

	.size get_parm_info, .-get_parm_info


	.globl	pending_xref_error
	.align	4
pending_xref_error:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI60_0
	ldr r3, [r3]
	cmp r3, #0
	ldrne r2, .LCPI60_1
	ldrne r0, [r2]
	ldrne r2, .LCPI60_2
	ldrne r1, [r2]
	ldrne r3, [r3, #+16]
	ldrne r2, .LCPI60_3
	emit_nops_till_bundle_end
	blne error_with_file_and_line
.LBB60_1:	@ bb
.LBB60_2:	@ bb1
	ldr r3, .LCPI60_0
	mov r2, #0
	@comment
str r2, [r3]
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB60_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI60_0:
 	.long	pending_invalid_xref

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI60_1:
 	.long	pending_invalid_xref_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI60_2:
 	.long	pending_invalid_xref_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI60_3:
 	.long	.str17486

	.size pending_xref_error, .-pending_xref_error


	.globl	c_decode_option
	.align	4
c_decode_option:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r4, r0
	ldr r1, .LCPI61_105
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_82	@ bb1
.LBB61_1:	@ bb
	ldr r1, .LCPI61_106
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_82	@ bb1
.LBB61_2:	@ bb2
	ldr r1, .LCPI61_107
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_83	@ bb3
.LBB61_3:	@ bb4
	ldr r1, .LCPI61_108
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_147	@ bb6
.LBB61_4:	@ bb5
	ldr r1, .LCPI61_109
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_147	@ bb6
.LBB61_5:	@ bb7
	ldr r1, .LCPI61_110
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB61_9	@ bb9
.LBB61_6:	@ bb8
	mov r0, #1
.LBB61_7:	@ bb8
	ldr r4, .LCPI61_111
.LBB61_8:	@ bb8
	@comment
str r0, [r4]
	b .LBB61_81	@ bb133
.LBB61_9:	@ bb9
	ldr r1, .LCPI61_112
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB61_12	@ bb11
.LBB61_10:	@ bb10
	ldr r4, .LCPI61_111
.LBB61_11:	@ bb10
	mov r3, #0
	@comment
str r3, [r4]
	b .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_12:	@ bb11
	ldr r1, .LCPI61_113
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_85	@ bb12
.LBB61_13:	@ bb13
	ldr r1, .LCPI61_114
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_84	@ bb14
.LBB61_14:	@ bb15
	ldr r1, .LCPI61_115
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_84	@ bb14
.LBB61_15:	@ bb17
	ldr r1, .LCPI61_116
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_85	@ bb12
.LBB61_16:	@ bb19
	ldr r1, .LCPI61_117
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_18	@ bb21
.LBB61_17:	@ bb20
	ldr r1, .LCPI61_118
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB61_20	@ bb22
.LBB61_18:	@ bb21
	mov r0, #1
	ldr r4, .LCPI61_119
	@comment
str r0, [r4]
.LBB61_19:	@ bb21
	ldr r4, .LCPI61_120
	b .LBB61_8	@ bb8
.LBB61_20:	@ bb22
	ldr r1, .LCPI61_121
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_86	@ bb24
.LBB61_21:	@ bb23
	ldr r1, .LCPI61_122
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_86	@ bb24
.LBB61_22:	@ bb25
	ldr r1, .LCPI61_123
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_87	@ bb26
.LBB61_23:	@ bb27
	ldr r1, .LCPI61_24
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_88	@ bb28
.LBB61_24:	@ bb29
	ldr r1, .LCPI61_25
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_89	@ bb30
.LBB61_25:	@ bb31
	ldr r1, .LCPI61_27
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_90	@ bb32
.LBB61_26:	@ bb33
	ldr r1, .LCPI61_28
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_91	@ bb34
.LBB61_27:	@ bb35
	ldr r1, .LCPI61_30
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_92	@ bb36
.LBB61_28:	@ bb37
	ldr r1, .LCPI61_31
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_93	@ bb38
.LBB61_29:	@ bb39
	ldr r1, .LCPI61_33
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_94	@ bb40
.LBB61_30:	@ bb41
	ldr r1, .LCPI61_34
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_95	@ bb42
.LBB61_31:	@ bb43
	ldr r1, .LCPI61_36
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_96	@ bb44
.LBB61_32:	@ bb45
	ldr r1, .LCPI61_37
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_97	@ bb46
.LBB61_33:	@ bb47
	ldr r1, .LCPI61_39
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_98	@ bb48
.LBB61_34:	@ bb49
	ldr r1, .LCPI61_40
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_99	@ bb50
.LBB61_35:	@ bb51
	ldr r1, .LCPI61_42
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_100	@ bb52
.LBB61_36:	@ bb53
	ldr r1, .LCPI61_44
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_101	@ bb54
.LBB61_37:	@ bb55
	ldr r1, .LCPI61_45
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_102	@ bb56
.LBB61_38:	@ bb57
	ldr r1, .LCPI61_47
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_103	@ bb58
.LBB61_39:	@ bb59
	ldr r1, .LCPI61_48
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_104	@ bb60
.LBB61_40:	@ bb61
	ldr r1, .LCPI61_50
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_105	@ bb62
.LBB61_41:	@ bb63
	ldr r1, .LCPI61_51
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_106	@ bb64
.LBB61_42:	@ bb65
	ldr r1, .LCPI61_53
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_107	@ bb66
.LBB61_43:	@ bb67
	ldr r1, .LCPI61_54
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_108	@ bb68
.LBB61_44:	@ bb69
	ldr r1, .LCPI61_56
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_109	@ bb70
.LBB61_45:	@ bb71
	ldr r1, .LCPI61_57
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_110	@ bb72
.LBB61_46:	@ bb73
	ldr r1, .LCPI61_59
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_112	@ bb74
.LBB61_47:	@ bb75
	ldr r1, .LCPI61_60
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_113	@ bb76
.LBB61_48:	@ bb77
	ldr r1, .LCPI61_62
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_115	@ bb78
.LBB61_49:	@ bb79
	ldr r1, .LCPI61_63
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_117	@ bb80
.LBB61_50:	@ bb81
	ldr r1, .LCPI61_65
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_119	@ bb82
.LBB61_51:	@ bb83
	ldr r1, .LCPI61_66
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_120	@ bb84
.LBB61_52:	@ bb85
	ldr r1, .LCPI61_68
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_122	@ bb86
.LBB61_53:	@ bb87
	ldr r1, .LCPI61_69
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_124	@ bb88
.LBB61_54:	@ bb89
	ldr r1, .LCPI61_71
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_125	@ bb90
.LBB61_55:	@ bb91
	ldr r1, .LCPI61_72
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_127	@ bb92
.LBB61_56:	@ bb93
	ldr r1, .LCPI61_74
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_128	@ bb94
.LBB61_57:	@ bb95
	ldr r1, .LCPI61_75
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_130	@ bb96
.LBB61_58:	@ bb97
	ldr r1, .LCPI61_77
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_131	@ bb98
.LBB61_59:	@ bb99
	ldr r1, .LCPI61_78
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_132	@ bb100
.LBB61_60:	@ bb101
	ldr r1, .LCPI61_80
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_134	@ bb102
.LBB61_61:	@ bb103
	ldr r1, .LCPI61_81
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_136	@ bb104
.LBB61_62:	@ bb105
	ldr r1, .LCPI61_83
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_137	@ bb106
.LBB61_63:	@ bb107
	ldr r1, .LCPI61_84
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_139	@ bb108
.LBB61_64:	@ bb109
	ldr r1, .LCPI61_86
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_141	@ bb110
.LBB61_65:	@ bb111
	ldr r1, .LCPI61_87
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_142	@ bb112
.LBB61_66:	@ bb113
	ldr r1, .LCPI61_89
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_144	@ bb114
.LBB61_67:	@ bb115
	ldr r1, .LCPI61_90
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_68:	@ bb116
	ldr r1, .LCPI61_91
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_69:	@ bb117
	ldr r1, .LCPI61_92
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_70:	@ bb118
	ldr r1, .LCPI61_93
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_71:	@ bb119
	ldr r1, .LCPI61_94
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_72:	@ bb120
	ldr r1, .LCPI61_95
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_73:	@ bb121
	ldr r1, .LCPI61_96
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_74:	@ bb122
	ldr r1, .LCPI61_97
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_148	@ bb115.bb133_crit_edge
.LBB61_75:	@ bb123
	ldr r1, .LCPI61_98
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_151	@ bb124
.LBB61_76:	@ bb125
	ldr r1, .LCPI61_100
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB61_152	@ bb126
.LBB61_77:	@ bb127
	ldr r1, .LCPI61_101
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB61_154	@ bb127.bb133_crit_edge
.LBB61_78:	@ bb128
	ldr r3, .LCPI61_102
	ldr r3, [r3]
	cmp r3, #1
	ldrne r3, .LCPI61_102
	movne r2, #2
	@comment
strne r2, [r3]
.LBB61_79:	@ bb129
.LBB61_80:	@ bb130
	mov r0, #1
	ldr r3, .LCPI61_43
	@comment
str r0, [r3]
	ldr r3, .LCPI61_88
	@comment
str r0, [r3]
	ldr r3, .LCPI61_103
	@comment
str r0, [r3]
	ldr r3, .LCPI61_104
	@comment
str r0, [r3]
	ldr r3, .LCPI61_76
	@comment
str r0, [r3]
	ldr r3, .LCPI61_79
	@comment
str r0, [r3]
	ldr r3, .LCPI61_85
	@comment
str r0, [r3]
	ldr r3, .LCPI61_99
	@comment
str r0, [r3]
.LBB61_81:	@ bb133
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB61_82:	@ bb1
	mov r0, #1
	ldr r4, .LCPI61_2
	@comment
str r0, [r4]
	ldr r4, .LCPI61_3
	@comment
str r0, [r4]
	b .LBB61_7	@ bb8
.LBB61_83:	@ bb3
	mov r0, #1
	ldr r4, .LCPI61_6
	b .LBB61_8	@ bb8
.LBB61_84:	@ bb14
	ldr r4, .LCPI61_12
	b .LBB61_11	@ bb10
.LBB61_85:	@ bb12
	mov r0, #1
	ldr r4, .LCPI61_12
	b .LBB61_8	@ bb8
.LBB61_86:	@ bb24
	ldr r4, .LCPI61_18
	mov r3, #0
	@comment
str r3, [r4]
	mov r0, #1
	b .LBB61_19	@ bb21
.LBB61_87:	@ bb26
	mov r0, #1
	ldr r4, .LCPI61_23
	b .LBB61_8	@ bb8
.LBB61_88:	@ bb28
	ldr r4, .LCPI61_23
	b .LBB61_11	@ bb10
.LBB61_89:	@ bb30
	mov r0, #1
	ldr r4, .LCPI61_26
	b .LBB61_8	@ bb8
.LBB61_90:	@ bb32
	ldr r4, .LCPI61_26
	b .LBB61_11	@ bb10
.LBB61_91:	@ bb34
	mov r0, #1
	ldr r4, .LCPI61_29
	b .LBB61_8	@ bb8
.LBB61_92:	@ bb36
	ldr r4, .LCPI61_29
	b .LBB61_11	@ bb10
.LBB61_93:	@ bb38
	ldr r4, .LCPI61_32
	b .LBB61_11	@ bb10
.LBB61_94:	@ bb40
	mov r0, #1
	ldr r4, .LCPI61_32
	b .LBB61_8	@ bb8
.LBB61_95:	@ bb42
	ldr r4, .LCPI61_35
	b .LBB61_11	@ bb10
.LBB61_96:	@ bb44
	mov r0, #1
	ldr r4, .LCPI61_35
	b .LBB61_8	@ bb8
.LBB61_97:	@ bb46
	mov r0, #1
	ldr r4, .LCPI61_38
	b .LBB61_8	@ bb8
.LBB61_98:	@ bb48
	ldr r4, .LCPI61_38
	b .LBB61_11	@ bb10
.LBB61_99:	@ bb50
	mov r0, #1
	ldr r4, .LCPI61_32
	@comment
str r0, [r4]
	ldr r4, .LCPI61_41
	@comment
str r0, [r4]
	ldr r4, .LCPI61_4
	mov r3, #0
	@comment
str r3, [r4]
	b .LBB61_81	@ bb133
.LBB61_100:	@ bb52
	mov r0, #1
	ldr r4, .LCPI61_43
	b .LBB61_8	@ bb8
.LBB61_101:	@ bb54
	ldr r4, .LCPI61_43
	b .LBB61_11	@ bb10
.LBB61_102:	@ bb56
	mov r0, #1
	ldr r4, .LCPI61_46
	b .LBB61_8	@ bb8
.LBB61_103:	@ bb58
	ldr r4, .LCPI61_46
	b .LBB61_11	@ bb10
.LBB61_104:	@ bb60
	mov r0, #1
	ldr r4, .LCPI61_49
	b .LBB61_8	@ bb8
.LBB61_105:	@ bb62
	ldr r4, .LCPI61_49
	b .LBB61_11	@ bb10
.LBB61_106:	@ bb64
	mov r0, #1
	ldr r4, .LCPI61_52
	b .LBB61_8	@ bb8
.LBB61_107:	@ bb66
	ldr r4, .LCPI61_52
	b .LBB61_11	@ bb10
.LBB61_108:	@ bb68
	mov r0, #1
	ldr r4, .LCPI61_55
	b .LBB61_8	@ bb8
.LBB61_109:	@ bb70
	ldr r4, .LCPI61_55
	b .LBB61_11	@ bb10
.LBB61_110:	@ bb72
	mov r0, #1
	ldr r4, .LCPI61_58
	b .LBB61_8	@ bb8
	.align	4
.LBB61_111:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_105:
 	.long	.str18487

	.align	4
.LBB61_112:	@ bb74
	ldr r4, .LCPI61_58
	b .LBB61_11	@ bb10
.LBB61_113:	@ bb76
	mov r0, #1
	ldr r4, .LCPI61_61
	b .LBB61_8	@ bb8
	.align	4
.LBB61_114:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_106:
 	.long	.str19488

	.align	4
.LBB61_115:	@ bb78
	ldr r4, .LCPI61_61
	b .LBB61_11	@ bb10
	.align	4
.LBB61_116:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_107:
 	.long	.str20490

	.align	4
.LBB61_117:	@ bb80
	mov r0, #1
	ldr r4, .LCPI61_64
	b .LBB61_8	@ bb8
	.align	4
.LBB61_118:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_108:
 	.long	.str21491

	.align	4
.LBB61_119:	@ bb82
	ldr r4, .LCPI61_64
	b .LBB61_11	@ bb10
.LBB61_120:	@ bb84
	mov r0, #1
	ldr r4, .LCPI61_67
	b .LBB61_8	@ bb8
	.align	4
.LBB61_121:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_109:
 	.long	.str22492

	.align	4
.LBB61_122:	@ bb86
	ldr r4, .LCPI61_67
	b .LBB61_11	@ bb10
	.align	4
.LBB61_123:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_110:
 	.long	.str23493

	.align	4
.LBB61_124:	@ bb88
	mov r0, #1
	ldr r4, .LCPI61_70
	b .LBB61_8	@ bb8
.LBB61_125:	@ bb90
	ldr r4, .LCPI61_70
	b .LBB61_11	@ bb10
	.align	4
.LBB61_126:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_111:
 	.long	dollars_in_ident

	.align	4
.LBB61_127:	@ bb92
	mov r0, #1
	ldr r4, .LCPI61_73
	b .LBB61_8	@ bb8
.LBB61_128:	@ bb94
	ldr r4, .LCPI61_73
	b .LBB61_11	@ bb10
	.align	4
.LBB61_129:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_112:
 	.long	.str24494

	.align	4
.LBB61_130:	@ bb96
	mov r0, #1
	ldr r4, .LCPI61_76
	b .LBB61_8	@ bb8
.LBB61_131:	@ bb98
	ldr r4, .LCPI61_76
	b .LBB61_11	@ bb10
.LBB61_132:	@ bb100
	mov r0, #1
	ldr r4, .LCPI61_79
	b .LBB61_8	@ bb8
	.align	4
.LBB61_133:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_113:
 	.long	.str25495

	.align	4
.LBB61_134:	@ bb102
	ldr r4, .LCPI61_79
	b .LBB61_11	@ bb10
	.align	4
.LBB61_135:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_114:
 	.long	.str26496

	.align	4
.LBB61_136:	@ bb104
	mov r0, #1
	ldr r4, .LCPI61_82
	b .LBB61_8	@ bb8
.LBB61_137:	@ bb106
	ldr r4, .LCPI61_82
	b .LBB61_11	@ bb10
	.align	4
.LBB61_138:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_115:
 	.long	.str27497

	.align	4
.LBB61_139:	@ bb108
	mov r0, #1
	ldr r4, .LCPI61_85
	b .LBB61_8	@ bb8
	.align	4
.LBB61_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_116:
 	.long	.str28498

	.align	4
.LBB61_141:	@ bb110
	ldr r4, .LCPI61_85
	b .LBB61_11	@ bb10
.LBB61_142:	@ bb112
	mov r0, #1
	ldr r4, .LCPI61_88
	b .LBB61_8	@ bb8
	.align	4
.LBB61_143:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_117:
 	.long	.str29499

	.align	4
.LBB61_144:	@ bb114
	ldr r4, .LCPI61_88
	b .LBB61_11	@ bb10
	.align	4
.LBB61_145:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_118:
 	.long	.str30500

.LBB61_146:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_119:
 	.long	flag_signed_bitfields

	.align	4
.LBB61_147:	@ bb6
	mov r4, #0
	ldr r3, .LCPI61_2
	@comment
str r4, [r3]
	ldr r3, .LCPI61_3
	@comment
str r4, [r3]
	ldr r3, .LCPI61_4
	@comment
str r4, [r3]
.LBB61_148:	@ bb115.bb133_crit_edge
	mov r0, #1
	b .LBB61_81	@ bb133
	.align	4
.LBB61_149:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_120:
 	.long	explicit_flag_signed_bitfields

.LBB61_150:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_121:
 	.long	.str31501

	.align	4
.LBB61_151:	@ bb124
	mov r0, #1
	ldr r4, .LCPI61_99
	b .LBB61_8	@ bb8
.LBB61_152:	@ bb126
	ldr r4, .LCPI61_99
	b .LBB61_11	@ bb10
	.align	4
.LBB61_153:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_122:
 	.long	.str32502

	.align	4
.LBB61_154:	@ bb127.bb133_crit_edge
	mov r0, #0
	b .LBB61_81	@ bb133
	.align	4
.LBB61_155:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_123:
 	.long	.str33503

.LBB61_156:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_2:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_3:
 	.long	flag_writable_strings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_4:
 	.long	dollars_in_ident

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_6:
 	.long	flag_allow_single_precision

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_12:
 	.long	flag_signed_char

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_18:
 	.long	flag_signed_bitfields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_23:
 	.long	flag_short_enums

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_24:
 	.long	.str34504

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_25:
 	.long	.str35505

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_26:
 	.long	flag_cond_mismatch

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_27:
 	.long	.str36506

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_28:
 	.long	.str37507

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_29:
 	.long	flag_short_double

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_30:
 	.long	.str38508

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_31:
 	.long	.str39509

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_32:
 	.long	flag_no_asm

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_33:
 	.long	.str40511

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_34:
 	.long	.str41512

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_35:
 	.long	flag_no_builtin

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_36:
 	.long	.str42513

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_37:
 	.long	.str43514

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_38:
 	.long	flag_no_ident

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_39:
 	.long	.str44516

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_40:
 	.long	.str45517

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_41:
 	.long	flag_no_nonansi_builtin

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_42:
 	.long	.str46518

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_43:
 	.long	warn_implicit

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_44:
 	.long	.str47519

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_45:
 	.long	.str48520

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_46:
 	.long	warn_write_strings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_47:
 	.long	.str49521

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_48:
 	.long	.str50522

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_49:
 	.long	warn_cast_qual

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_50:
 	.long	.str51523

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_51:
 	.long	.str52524

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_52:
 	.long	warn_bad_function_cast

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_53:
 	.long	.str53525

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_54:
 	.long	.str54526

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_55:
 	.long	warn_pointer_arith

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_56:
 	.long	.str55527

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_57:
 	.long	.str56528

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_58:
 	.long	warn_strict_prototypes

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_59:
 	.long	.str57529

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_60:
 	.long	.str58530

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_61:
 	.long	warn_missing_prototypes

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_62:
 	.long	.str59531

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_63:
 	.long	.str60532

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_64:
 	.long	warn_missing_declarations

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_65:
 	.long	.str61533

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_66:
 	.long	.str62534

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_67:
 	.long	warn_redundant_decls

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_68:
 	.long	.str63535

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_69:
 	.long	.str64536

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_70:
 	.long	warn_nested_externs

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_71:
 	.long	.str65537

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_72:
 	.long	.str66538

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_73:
 	.long	warn_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_74:
 	.long	.str67540

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_75:
 	.long	.str68541

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_76:
 	.long	warn_format

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_77:
 	.long	.str69542

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_78:
 	.long	.str70543

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_79:
 	.long	warn_char_subscripts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_80:
 	.long	.str71544

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_81:
 	.long	.str72545

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_82:
 	.long	warn_conversion

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_83:
 	.long	.str73546

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_84:
 	.long	.str74547

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_85:
 	.long	warn_parentheses

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_86:
 	.long	.str75548

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_87:
 	.long	.str76549

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_88:
 	.long	warn_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_89:
 	.long	.str77550

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_90:
 	.long	.str78551

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_91:
 	.long	.str79552

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_92:
 	.long	.str80553

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_93:
 	.long	.str81554

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_94:
 	.long	.str82555

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_95:
 	.long	.str83556

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_96:
 	.long	.str84557

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_97:
 	.long	.str85558

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_98:
 	.long	.str86559

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_99:
 	.long	warn_missing_braces

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_100:
 	.long	.str87560

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_101:
 	.long	.str88561

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_102:
 	.long	warn_uninitialized

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_103:
 	.long	warn_unused

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI61_104:
 	.long	warn_switch

	.size c_decode_option, .-c_decode_option


	.align	4
grokdeclarator:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #52
	@comment
str r3, [sp, #+44]
	mov r4, r2
	@comment
str r4, [sp, #+36]
	mov r5, r1
	mov r6, r0
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	mov r3, #3
	cmp r4, #4
	mov r2, r4
	moveq r2, r3
	@comment
str r2, [sp, #+12]
	mov r3, #0
	cmp r2, #1
	moveq r2, r3
	@comment
str r2, [sp, #+4]
	ldr r3, .LCPI62_94
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_3	@ entry.bb16_crit_edge
.LBB62_1:	@ bb9
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB62_2:	@ bb10
.LBB62_3:	@ entry.bb16_crit_edge
	mov r3, #0
	mov r2, r6
	b .LBB62_8	@ bb16
.LBB62_4:	@ bb12
	ldrb r3, [r2, #+8]
	cmp r3, #38
	ble .LBB62_461	@ bb12
.LBB62_5:	@ bb12
	sub r1, r3, #39
	cmp r1, #11
	bhi .LBB62_513	@ bb15
.LBB62_6:	@ bb12
	mov r0, #1
	mov r12, #9
	orr r12, r12, #2, 22 @ 2048
	tst r12, r0, lsl r1
	beq .LBB62_513	@ bb15
.LBB62_7:	@ bb13
	ldr r2, [r2, #+16]
.LBB62_8:	@ bb16
	mov r1, r3
	cmp r2, #0
	bne .LBB62_4	@ bb12
.LBB62_9:	@ bb16.bb17_crit_edge
	mov r4, #0
.LBB62_10:	@ bb17
	ldr r3, .LCPI62_95
	cmp r4, #0
	moveq r4, r3
	cmp r1, #50
	beq .LBB62_12	@ bb23
.LBB62_11:	@ bb17
	ldr r3, [sp, #+12]
	cmp r3, #1
	beq .LBB62_463	@ bb17.bb555_crit_edge
.LBB62_12:	@ bb23
	mov r3, #1
	ldr r2, [sp, #+12]
	cmp r2, #1
	mov r2, #0
	movne r2, r3
	@comment
str r2, [sp, #+28]
	ldr r3, [sp, #+4]
	cmp r3, #0
	bne .LBB62_16	@ bb67.preheader
.LBB62_13:	@ bb23
	ldr r3, [sp, #+28]
	cmp r3, #0
	beq .LBB62_16	@ bb67.preheader
.LBB62_14:	@ bb27
	ldr r3, .LCPI62_96
	ldr r3, [r3]
	ldrb r3, [r3, #+24]
	cmp r3, #0
	movne r3, #2
	@comment
strne r3, [sp, #+4]
.LBB62_15:	@ bb28
.LBB62_16:	@ bb67.preheader
	cmp r5, #0
	beq .LBB62_464	@ bb67.preheader.bb68_crit_edge
.LBB62_17:	@ bb67.preheader.bb30_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+24]
	mov r7, #1
	@comment
str r3, [sp, #+20]
	mov r8, r3
	@comment
str r3, [sp, #+8]
	@comment
str r3, [sp, #+16]
	@comment
str r3, [sp, #+48]
	@comment
str r3, [sp, #+40]
.LBB62_18:	@ bb30
	ldr r3, [r5, #+16]
	ldr r2, .LCPI62_97
	ldr r1, [r2, #+8]
	cmp r1, r3
	ldr r1, [sp, #+48]
	moveq r1, r7
	@comment
str r1, [sp, #+48]
	ldr r2, [r2, #+4]
	cmp r2, r3
	ldr r2, [sp, #+40]
	moveq r2, r7
	@comment
str r2, [sp, #+40]
	ldrb r2, [r3, #+8]
	cmp r2, #1
	bne .LBB62_32	@ bb55
.LBB62_19:	@ bb30.bb36_crit_edge
	ldr r1, .LCPI62_97
	add r1, r1, #28
	mov r9, #7
.LBB62_20:	@ bb36
	ldr r0, [r1]
	cmp r0, r3
	bne .LBB62_31	@ bb54
.LBB62_21:	@ bb37
	cmp r9, #9
	bne .LBB62_28	@ bb49
.LBB62_22:	@ bb38
	ldr r2, [sp, #+24]
	tst r2, r7, lsl r9
	beq .LBB62_28	@ bb49
.LBB62_23:	@ bb43
	cmp r8, #0
	bne .LBB62_465	@ bb44
.LBB62_24:	@ bb45
	ldr r3, .LCPI62_98
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_27	@ bb45.bb52_crit_edge
.LBB62_25:	@ bb46
	ldr r3, .LCPI62_99
	ldr r3, [r3]
	cmp r3, #0
	ldreq r0, .LCPI62_100
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB62_26:	@ bb47
.LBB62_27:	@ bb45.bb52_crit_edge
	mov r8, #1
	b .LBB62_30	@ bb52
.LBB62_28:	@ bb49
	ldr r2, [sp, #+24]
	tst r2, r7, lsl r9
	ldrne r1, [r3, #+16]
	ldrne r0, .LCPI62_101
	emit_nops_till_bundle_end
	blne pedwarn
.LBB62_29:	@ bb51
.LBB62_30:	@ bb52
	ldr r3, [sp, #+24]
	orr r3, r3, r7, lsl r9
	@comment
str r3, [sp, #+24]
	b .LBB62_45	@ found
.LBB62_31:	@ bb54
	add r9, r9, #1
	add r1, r1, #4
	cmp r9, #28
	blt .LBB62_20	@ bb36
.LBB62_32:	@ bb55
	ldr r1, [sp, #+20]
	cmp r1, #0
	bne .LBB62_468	@ bb56
.LBB62_33:	@ bb57
	and r1, r2, #255
	cmp r1, #32
	beq .LBB62_470	@ bb58
.LBB62_34:	@ bb59
	and r1, r2, #255
	cmp r1, #1
	bne .LBB62_43	@ bb65
.LBB62_35:	@ bb60
	ldr r2, .LCPI62_102
	ldr r2, [r2]
	ldr r1, .LCPI62_96
	ldr r1, [r1]
	cmp r1, r2
	movne r2, r3
	ldrne r1, [r2, #+24]!
	cmpne r1, #0
	bne .LBB62_38	@ lookup_name.exit
.LBB62_36:	@ bb.i
.LBB62_37:	@ bb2.i
	add r2, r3, #20
.LBB62_38:	@ lookup_name.exit
	ldr r1, .LCPI62_103
	ldr r1, [r1]
	ldr r2, [r2]
	ldr r0, [r2, #+4]
	cmp r0, r1
	beq .LBB62_45	@ found
.LBB62_39:	@ bb61
	cmp r2, #0
	beq .LBB62_42	@ bb63
.LBB62_40:	@ bb62
	ldrb r1, [r2, #+8]
	cmp r1, #32
	bne .LBB62_42	@ bb63
.LBB62_41:	@ bb62.found_crit_edge
	@comment
str r2, [sp, #+16]
	@comment
str r0, [sp, #+20]
	b .LBB62_45	@ found
.LBB62_42:	@ bb63
	ldr r1, [r3, #+16]
	ldr r0, .LCPI62_104
	emit_nops_till_bundle_end
	bl error
	b .LBB62_45	@ found
.LBB62_43:	@ bb65
	tst r2, #255
	@comment
strne r3, [sp, #+20]
.LBB62_44:	@ bb66
.LBB62_45:	@ found
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB62_18	@ bb30
.LBB62_46:	@ bb68
	ldr r3, [sp, #+20]
	cmp r3, #0
	moveq r3, #0
	ldrne r3, [sp, #+20]
	ldrneb r2, [r3, #+28]!
	ldrneb r3, [r3, #+2]
	movne r2, #1
	andne r3, r2, r3, lsr #6
	@comment
str r3, [sp, #+32]
	b .LBB62_48	@ bb74
.LBB62_47:	@ bb69
.LBB62_48:	@ bb74
	ldr r3, [sp, #+20]
	cmp r3, #0
	bne .LBB62_473	@ bb74.bb80_crit_edge
.LBB62_49:	@ bb75
	ldr r5, [sp, #+12]
	cmp r5, #1
	bne .LBB62_53	@ bb79
.LBB62_50:	@ bb76
	ldr r5, .LCPI62_105
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB62_53	@ bb79
.LBB62_51:	@ bb77
	mov r5, #14, 26 @ 896
	orr r5, r5, #2, 18 @ 32768
	ldr r7, [sp, #+24]
	tst r7, r5
	ldreq r5, .LCPI62_106
	moveq r7, #1
	@comment
streq r7, [r5]
.LBB62_52:	@ bb78
.LBB62_53:	@ bb79
	ldr r5, .LCPI62_107
	ldr r7, [r5]
	mov r5, #1
.LBB62_54:	@ bb80
	ldr r3, [sp, #+24]
	tst r3, #2, 24 @ 512
	beq .LBB62_57	@ bb83
.LBB62_55:	@ bb81
	ldr r3, .LCPI62_108
	ldr r3, [r3]
	ldr r2, [r7, #+64]
	cmp r2, r3
	ldreq r7, .LCPI62_109
	ldreq r7, [r7]
	ldreq r3, [sp, #+24]
	biceq r3, r3, #2, 24 @ 512
	@comment
streq r3, [sp, #+24]
.LBB62_56:	@ bb82
.LBB62_57:	@ bb83
	mov r3, #14, 26 @ 896
	orr r3, r3, #2, 18 @ 32768
	ldr r2, [sp, #+24]
	tst r2, r3
	beq .LBB62_75	@ bb106
.LBB62_58:	@ bb84
	ldrb r3, [r7, #+8]
	cmp r3, #7
	beq .LBB62_61	@ bb86
.LBB62_59:	@ bb85
	ldr r0, .LCPI62_110
.LBB62_60:	@ bb85
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	b .LBB62_74	@ bb105
.LBB62_61:	@ bb86
	ldr r2, [sp, #+24]
	and r1, r2, #2, 24 @ 512
	tst r2, #2, 24 @ 512
	beq .LBB62_64	@ bb90
.LBB62_62:	@ bb87
	ldr r2, [sp, #+24]
	tst r2, #1, 24 @ 256
	bne .LBB62_474	@ bb88
.LBB62_63:	@ bb89
	cmp r1, #0
	bne .LBB62_65	@ bb91
.LBB62_64:	@ bb90
	ldr r2, [sp, #+24]
	tst r2, #1, 24 @ 256
	beq .LBB62_66	@ bb93
.LBB62_65:	@ bb91
	ldr r2, [sp, #+48]
	cmp r2, #0
	bne .LBB62_475	@ bb92
.LBB62_66:	@ bb93
	cmp r1, #0
	ldreq r2, [sp, #+24]
	tsteq r2, #1, 24 @ 256
	beq .LBB62_69	@ bb97
.LBB62_67:	@ bb94
.LBB62_68:	@ bb95
	and r3, r3, #255
	cmp r3, #8
	beq .LBB62_476	@ bb96
.LBB62_69:	@ bb97
	ldr r3, [sp, #+24]
	tst r3, #2, 18 @ 32768
	ldrne r3, [sp, #+24]
	tstne r3, #128
	bne .LBB62_477	@ bb99
.LBB62_70:	@ bb98
.LBB62_71:	@ bb100
	ldr r2, [sp, #+48]
	ldr r3, [sp, #+40]
	orr r3, r2, r3
	orr r3, r3, r5
	cmp r3, #0
	bne .LBB62_75	@ bb106
.LBB62_72:	@ bb101
	ldr r3, .LCPI62_98
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_75	@ bb106
.LBB62_73:	@ bb102
	ldr r0, .LCPI62_111
	mov r1, r4
	emit_nops_till_bundle_end
	bl pedwarn
	ldr r3, .LCPI62_112
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_75	@ bb106
.LBB62_74:	@ bb105
	ldr r8, .LCPI62_113
	ldr r3, [sp, #+24]
	and r3, r3, r8
	@comment
str r3, [sp, #+24]
	mov r8, #0
.LBB62_75:	@ bb106
	ldr r3, [sp, #+24]
	tst r3, #2, 12 @ 2097152
	beq .LBB62_78	@ bb110
.LBB62_76:	@ bb107
	ldrb r3, [r7, #+8]
	sub r3, r3, #7
	and r3, r3, #255
	cmp r3, #2
	blo .LBB62_78	@ bb110
.LBB62_77:	@ bb109
	ldr r0, .LCPI62_114
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r3, [sp, #+24]
	bic r3, r3, #2, 12 @ 2097152
	@comment
str r3, [sp, #+24]
.LBB62_78:	@ bb110
	ldr r3, [sp, #+24]
	tst r3, #128
	bne .LBB62_90	@ bb126
.LBB62_79:	@ bb111
	ldr r3, [sp, #+36]
	cmp r3, #4
	bne .LBB62_97	@ bb137
.LBB62_80:	@ bb112
	ldr r3, .LCPI62_94
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_83	@ bb115
.LBB62_81:	@ bb113
	ldr r3, .LCPI62_115
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI62_116
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB62_83	@ bb115
	b .LBB62_90	@ bb126
.LBB62_82:	@ bb114
.LBB62_83:	@ bb115
	ldr r3, [sp, #+36]
	cmp r3, #4
	ldreq r3, .LCPI62_116
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB62_85	@ bb117
	b .LBB62_97	@ bb137
.LBB62_84:	@ bb116
.LBB62_85:	@ bb117
	ldr r3, [sp, #+48]
	ldr r2, [sp, #+40]
	orr r3, r3, r2
	orr r3, r3, r5
	cmp r3, #0
	bne .LBB62_88	@ bb124
.LBB62_86:	@ bb117
	ldr r3, [sp, #+16]
	cmp r3, #0
	ldrne r3, [sp, #+16]
	ldrneb r3, [r3, #+31]
	tstne r3, #2
	bne .LBB62_97	@ bb137
.LBB62_87:	@ bb119
.LBB62_88:	@ bb124
	ldrb r3, [r7, #+8]
	cmp r3, #10
	beq .LBB62_97	@ bb137
.LBB62_89:	@ bb125
	ldr r3, [sp, #+24]
	tst r3, #2, 18 @ 32768
	bne .LBB62_97	@ bb137
.LBB62_90:	@ bb126
	cmp r8, #0
	bne .LBB62_478	@ bb127
.LBB62_91:	@ bb128
	ldr r3, [sp, #+24]
	tst r3, #2, 24 @ 512
	bne .LBB62_479	@ bb129
.LBB62_92:	@ bb130
	ldr r3, [sp, #+24]
	tst r3, #1, 24 @ 256
	bne .LBB62_480	@ bb131
.LBB62_93:	@ bb132
	ldr r3, .LCPI62_117
	ldr r3, [r3]
	cmp r7, r3
	beq .LBB62_481	@ bb133
.LBB62_94:	@ bb134
	ldr r3, [sp, #+16]
	cmp r3, #0
	beq .LBB62_96	@ bb136
.LBB62_95:	@ bb135
	mov r0, r7
	emit_nops_till_bundle_end
	bl unsigned_type
	b .LBB62_103	@ bb146
.LBB62_96:	@ bb136
	ldr r7, .LCPI62_118
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_97:	@ bb137
	ldr r3, [sp, #+24]
	tst r3, #2, 18 @ 32768
	beq .LBB62_99	@ bb140
.LBB62_98:	@ bb138
	ldr r3, .LCPI62_117
	ldr r3, [r3]
	cmp r7, r3
	beq .LBB62_482	@ bb139
.LBB62_99:	@ bb140
	cmp r8, #0
	bne .LBB62_483	@ bb141
.LBB62_100:	@ bb142
	ldr r3, [sp, #+24]
	tst r3, #2, 24 @ 512
	bne .LBB62_484	@ bb143
.LBB62_101:	@ bb144
	ldr r3, [sp, #+24]
	tst r3, #1, 24 @ 256
	moveq r0, r7
	ldrne r3, .LCPI62_119
	ldrne r0, [r3]
	b .LBB62_103	@ bb146
.LBB62_102:	@ bb145
.LBB62_103:	@ bb146
	ldr r3, [sp, #+24]
	tst r3, #2, 12 @ 2097152
	beq .LBB62_112	@ bb165
.LBB62_104:	@ bb147
	cmp r8, #0
	bne .LBB62_107	@ bb156
.LBB62_105:	@ bb147
	cmp r5, #0
	beq .LBB62_107	@ bb156
.LBB62_106:	@ bb154
	mov r3, #14, 26 @ 896
	orr r3, r3, #2, 18 @ 32768
	ldr r2, [sp, #+24]
	tst r2, r3
	beq .LBB62_488	@ bb155
.LBB62_107:	@ bb156
	ldr r3, .LCPI62_107
	ldr r3, [r3]
	cmp r0, r3
	beq .LBB62_486	@ bb157
.LBB62_108:	@ bb158
	ldr r3, .LCPI62_120
	ldr r3, [r3]
	cmp r0, r3
	beq .LBB62_487	@ bb159
.LBB62_109:	@ bb160
	ldr r3, .LCPI62_108
	ldr r3, [r3]
	cmp r0, r3
	beq .LBB62_488	@ bb155
.LBB62_110:	@ bb162
	ldr r3, .LCPI62_109
	ldr r3, [r3]
	cmp r0, r3
	ldreq r3, .LCPI62_121
	ldreq r0, [r3]
	emit_nops_till_bundle_end
	blne build_complex_type
	b .LBB62_112	@ bb165
.LBB62_111:	@ bb164
.LBB62_112:	@ bb165
	mov r5, r0
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	mov r2, #1
	and r1, r2, r3, lsr #13
	ldr r0, [sp, #+24]
	and r12, r2, r0, lsr #16
	add r1, r1, r12
	@comment
str r1, [sp, #+40]
	and r3, r2, r3, lsr #12
	and r2, r2, r0, lsr #17
	add r3, r3, r2
	@comment
str r3, [sp, #+36]
	and r3, r0, #1, 14 @ 262144
	@comment
str r3, [sp]
	cmp r1, #2
	ldrge r0, .LCPI62_122
	emit_nops_till_bundle_end
	blge pedwarn
.LBB62_113:	@ bb178
.LBB62_114:	@ bb179
	ldr r3, [sp, #+36]
	cmp r3, #2
	ldrge r0, .LCPI62_123
	emit_nops_till_bundle_end
	blge pedwarn
.LBB62_115:	@ bb180
.LBB62_116:	@ bb181
	ldr r3, .LCPI62_124
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB62_120	@ bb193
.LBB62_117:	@ bb182
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 20 @ 8192
	tsteq r3, #1, 20 @ 4096
	beq .LBB62_120	@ bb193
.LBB62_118:	@ bb187
.LBB62_119:	@ bb192
	ldr r5, [r5, #+64]
.LBB62_120:	@ bb193
	mov r3, #1
	ldr r2, [sp, #+24]
	and r1, r3, r2, lsr #20
	and r0, r3, r2, lsr #10
	add r1, r0, r1
	and r0, r3, r2, lsr #11
	add r1, r1, r0
	and r0, r3, r2, lsr #12
	add r1, r1, r0
	and r0, r3, r2, lsr #14
	add r1, r1, r0
	and r3, r3, r2, lsr #13
	add r3, r1, r3
	cmp r3, #2
	blt .LBB62_123	@ bb207
.LBB62_121:	@ bb206
	ldr r0, .LCPI62_125
.LBB62_122:	@ bb206
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	b .LBB62_168	@ bb352.preheader
.LBB62_123:	@ bb207
	ldr r2, [sp, #+12]
	cmp r2, #1
	bne .LBB62_136	@ bb218
.LBB62_124:	@ bb208
	ldr r2, [sp, #+24]
	tst r2, #25, 22 @ 25600
	beq .LBB62_136	@ bb218
.LBB62_125:	@ bb209
	ldr r3, [sp, #+24]
	tst r3, #1, 22 @ 1024
	beq .LBB62_130	@ bb213
.LBB62_126:	@ bb210
	ldr r3, .LCPI62_98
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB62_129	@ bb212
.LBB62_127:	@ bb211
	ldr r3, .LCPI62_102
	ldr r3, [r3]
	ldr r2, .LCPI62_96
	ldr r2, [r2]
	cmp r2, r3
	ldreq r0, .LCPI62_126
	emit_nops_till_bundle_end
	bleq pedwarn
	b .LBB62_130	@ bb213
	.align	4
.LBB62_128:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_94:
 	.long	flag_traditional

	.align	4
.LBB62_129:	@ bb212
	ldr r0, .LCPI62_126
	emit_nops_till_bundle_end
	bl pedwarn
.LBB62_130:	@ bb213
	ldr r3, [sp, #+24]
	tst r3, #2, 20 @ 8192
	ldrne r0, .LCPI62_127
	emit_nops_till_bundle_end
	blne error
.LBB62_131:	@ bb214
.LBB62_132:	@ bb215
	ldr r3, [sp, #+24]
	tst r3, #1, 18 @ 16384
	ldrne r0, .LCPI62_128
	emit_nops_till_bundle_end
	blne error
.LBB62_133:	@ bb216
.LBB62_134:	@ bb217
	ldr r3, [sp, #+24]
	bic r3, r3, #25, 22 @ 25600
	@comment
str r3, [sp, #+24]
	b .LBB62_168	@ bb352.preheader
	.align	4
.LBB62_135:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_95:
 	.long	.str89562

	.align	4
.LBB62_136:	@ bb218
	cmp r3, #1
	blt .LBB62_149	@ bb231
.LBB62_137:	@ bb218
	ldr r3, [sp, #+4]
	cmp r3, #0
	beq .LBB62_149	@ bb231
.LBB62_138:	@ bb222
	ldr r3, [sp, #+4]
	cmp r3, #3
	beq .LBB62_146	@ bb229
.LBB62_139:	@ bb222
	ldr r3, [sp, #+4]
	cmp r3, #2
	bne .LBB62_144	@ bb227
.LBB62_140:	@ bb223
	ldr r3, [sp, #+24]
	tst r3, #2, 20 @ 8192
	bne .LBB62_168	@ bb352.preheader
.LBB62_141:	@ bb224
	ldr r3, [sp, #+4]
	cmp r3, #3
	beq .LBB62_146	@ bb229
.LBB62_142:	@ bb224
	ldr r3, [sp, #+4]
	cmp r3, #2
	bne .LBB62_144	@ bb227
.LBB62_143:	@ bb224.bb230_crit_edge
	ldr r0, .LCPI62_129
	b .LBB62_147	@ bb230
.LBB62_144:	@ bb227
	ldr r0, .LCPI62_130
	b .LBB62_147	@ bb230
	.align	4
.LBB62_145:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_96:
 	.long	current_binding_level

	.align	4
.LBB62_146:	@ bb229
	ldr r0, .LCPI62_131
.LBB62_147:	@ bb230
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r3, [sp, #+24]
	bic r3, r3, #31, 22 @ 31744
	@comment
str r3, [sp, #+24]
	b .LBB62_168	@ bb352.preheader
	.align	4
.LBB62_148:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_97:
 	.long	ridpointers

	.align	4
.LBB62_149:	@ bb231
	mov r3, #1
	mov r2, #0
	ldr r1, [sp, #+44]
	cmp r1, #0
	moveq r2, r3
	ldr r3, [sp, #+28]
	eor r3, r3, #1
	orr r3, r2, r3
	ldr r2, [sp, #+24]
	and r2, r2, #1, 20 @ 4096
	cmp r3, #0
	bne .LBB62_158	@ bb242
.LBB62_150:	@ bb231
	cmp r2, #0
	beq .LBB62_158	@ bb242
.LBB62_151:	@ bb239
	ldr r2, .LCPI62_102
	ldr r2, [r2]
	ldr r3, .LCPI62_96
	ldr r3, [r3]
	cmp r3, r2
	bne .LBB62_153	@ bb241
.LBB62_152:	@ bb240
	ldr r0, .LCPI62_132
	mov r1, r4
	emit_nops_till_bundle_end
	bl warning
	b .LBB62_168	@ bb352.preheader
.LBB62_153:	@ bb241
	ldr r0, .LCPI62_133
	b .LBB62_122	@ bb206
	.align	4
.LBB62_154:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_98:
 	.long	pedantic

.LBB62_155:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_99:
 	.long	in_system_header

.LBB62_156:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_100:
 	.long	.str91564

.LBB62_157:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_101:
 	.long	.str92565

	.align	4
.LBB62_158:	@ bb242
	cmp r2, #0
	beq .LBB62_161	@ bb251
.LBB62_159:	@ bb242
	ldr r3, [sp, #+12]
	cmp r3, #1
	bne .LBB62_161	@ bb251
.LBB62_160:	@ bb249
	ldr r3, .LCPI62_102
	ldr r3, [r3]
	ldr r2, .LCPI62_96
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB62_490	@ bb250
.LBB62_161:	@ bb251
	ldr r3, .LCPI62_102
	ldr r3, [r3]
	ldr r2, .LCPI62_96
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB62_163	@ bb254
.LBB62_162:	@ bb252
	ldr r3, [sp, #+24]
	tst r3, #1, 22 @ 1024
	bne .LBB62_491	@ bb253
.LBB62_163:	@ bb254
	ldr r3, [sp, #+24]
	and r2, r3, #1, 12 @ 1048576
	tst r3, #1, 12 @ 1048576
	beq .LBB62_168	@ bb352.preheader
.LBB62_164:	@ bb255
	ldrb r3, [r6, #+8]
	cmp r3, #1
	bne .LBB62_492	@ bb256
.LBB62_165:	@ bb257
	cmp r2, #0
	ldrneb r3, [r5, #+8]
	cmpne r3, #7
	bne .LBB62_167	@ bb259
	b .LBB62_168	@ bb352.preheader
.LBB62_166:	@ bb258
.LBB62_167:	@ bb259
	ldr r0, .LCPI62_134
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r5, .LCPI62_103
	ldr r5, [r5]
.LBB62_168:	@ bb352.preheader
	mov r0, r5
	ldr r3, [sp, #+24]
	and r2, r3, #1, 20 @ 4096
	@comment
str r2, [sp, #+48]
	and r5, r3, #1, 22 @ 1024
	mov r7, #1
	b .LBB62_286	@ bb352.outer.outer
	.align	4
.LBB62_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_102:
 	.long	global_binding_level

.LBB62_170:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_103:
 	.long	error_mark_node

.LBB62_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_104:
 	.long	.str94567

.LBB62_172:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_105:
 	.long	warn_return_type

	.align	4
.LBB62_173:	@ bb263.split
	ldr r3, .LCPI62_135
	ldr r0, [r3]
	ldr r9, [r6, #+20]
	emit_nops_till_bundle_end
	bl signed_type
	ldr r3, [sp, #+48]
	cmp r3, #0
	mov r3, #0
	movne r3, r7
	ldr r2, [sp, #+44]
	cmp r2, #0
	mov r2, #0
	moveq r2, r7
	and r10, r2, r3
	ldr r3, .LCPI62_136
	ldr r3, [r3]
	ldr r2, [r8, #+64]
	ldr r6, [r6, #+16]
	mov r11, r0
	cmp r2, r3
	bne .LBB62_175	@ bb269
.LBB62_174:	@ bb268
	ldr r0, .LCPI62_137
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r8, .LCPI62_103
	ldr r8, [r8]
.LBB62_175:	@ bb269
	ldrb r3, [r8, #+8]
	cmp r3, #23
	bne .LBB62_177	@ bb271
.LBB62_176:	@ bb270
	ldr r0, .LCPI62_138
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r8, .LCPI62_103
	ldr r8, [r8]
.LBB62_177:	@ bb271
	ldr r3, .LCPI62_103
	ldr r3, [r3]
	cmp r9, r3
	moveq r8, r3
	cmp r8, r3
	beq .LBB62_288	@ bb352.outer611
.LBB62_178:	@ bb274
	cmp r10, #0
	beq .LBB62_181	@ bb277
.LBB62_179:	@ bb275
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB62_180:	@ bb276
.LBB62_181:	@ bb277
	cmp r9, #0
	beq .LBB62_495	@ bb277.bb303_crit_edge
.LBB62_182:	@ bb279
	mov r10, r9
	ldrb r9, [r10, #+8]
	sub r9, r9, #105
	and r9, r9, #255
	cmp r9, #2
	bhi .LBB62_184	@ bb281
.LBB62_183:	@ bb280
	ldr r9, [r10, #+16]
	ldr r3, [r9, #+4]
	ldr r2, [r10, #+4]
	cmp r2, r3
	beq .LBB62_182	@ bb279
.LBB62_184:	@ bb281
	ldr r3, [r10, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #7
	andne r3, r3, #255
	cmpne r3, #10
	bne .LBB62_191	@ bb285
	b .LBB62_192	@ bb286
	.align	4
.LBB62_185:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_106:
 	.long	warn_about_return_type

.LBB62_186:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_107:
 	.long	integer_type_node

.LBB62_187:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_108:
 	.long	double_type_node

.LBB62_188:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_109:
 	.long	long_double_type_node

.LBB62_189:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_110:
 	.long	.str95570

.LBB62_190:	@ bb281
	.align	4
.LBB62_191:	@ bb285
	ldr r0, .LCPI62_139
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r10, .LCPI62_140
	ldr r10, [r10]
.LBB62_192:	@ bb286
	ldr r3, .LCPI62_98
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_195	@ bb289
.LBB62_193:	@ bb287
	mov r0, r10
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	ldrne r0, .LCPI62_141
	movne r1, r4
	emit_nops_till_bundle_end
	blne pedwarn
.LBB62_194:	@ bb288
.LBB62_195:	@ bb289
	ldrb r3, [r10, #+8]
	cmp r3, #25
	bne .LBB62_201	@ bb292
.LBB62_196:	@ bb290
	mov r0, r10
	emit_nops_till_bundle_end
	bl constant_expression_warning
	mov r0, r10
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	bge .LBB62_198	@ bb300
.LBB62_197:	@ bb291
	ldr r0, .LCPI62_142
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r10, .LCPI62_140
	ldr r10, [r10]
.LBB62_198:	@ bb300
	ldr r3, .LCPI62_143
	ldr r1, [r3]
	mov r0, r11
	emit_nops_till_bundle_end
	bl convert
	mov r9, r0
	mov r0, r11
	mov r1, r10
	emit_nops_till_bundle_end
	bl convert
	mov r2, r0
	mov r3, #57
	mov r0, r3
	mov r1, r11
	mov r3, r9
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
	ldr r3, [sp, #+32]
	cmp r3, #0
	emit_nops_till_bundle_end
	blne variable_size
.LBB62_199:	@ bb301
.LBB62_200:	@ bb302
	emit_nops_till_bundle_end
	bl build_index_type
	b .LBB62_496	@ bb303
.LBB62_201:	@ bb292
	ldr r3, .LCPI62_98
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB62_205	@ bb292.bb300_crit_edge
.LBB62_202:	@ bb293
	ldrb r3, [r10, #+9]
	tst r3, #2
	ldreq r0, .LCPI62_144
	ldrne r0, .LCPI62_145
	b .LBB62_204	@ bb299
.LBB62_203:	@ bb299
.LBB62_204:	@ bb299
	mov r1, r4
	emit_nops_till_bundle_end
	bl pedwarn
.LBB62_205:	@ bb292.bb300_crit_edge
	mov r3, #1
	@comment
str r3, [sp, #+32]
	b .LBB62_198	@ bb300
	.align	4
.LBB62_206:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_111:
 	.long	.str100575

.LBB62_207:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_112:
 	.long	flag_pedantic_errors

.LBB62_208:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_113:
 	.long	4294933631			@ 0xFFFF7C7F

.LBB62_209:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_114:
 	.long	.str101576

.LBB62_210:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_115:
 	.long	explicit_flag_signed_bitfields

.LBB62_211:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_116:
 	.long	flag_signed_bitfields

	.align	4
.LBB62_212:	@ bb313.split
	ldrb r3, [r8, #+8]
	cmp r3, #23
	bne .LBB62_214	@ bb315
.LBB62_213:	@ bb314
	ldr r0, .LCPI62_146
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r8, .LCPI62_107
	ldr r8, [r8]
.LBB62_214:	@ bb315
	ldrb r3, [r8, #+8]
	cmp r3, #18
	bne .LBB62_216	@ bb317
.LBB62_215:	@ bb316
	ldr r0, .LCPI62_147
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r8, .LCPI62_107
	ldr r8, [r8]
.LBB62_216:	@ bb317
	cmp r9, #0
	beq .LBB62_219	@ bb320
.LBB62_217:	@ bb318
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB62_218:	@ bb319
.LBB62_219:	@ bb320
	ldr r9, [sp, #+12]
	cmp r9, #1
	ldreq r9, [r6, #+16]
	ldreqb r9, [r9, #+8]
	cmpeq r9, #1
	beq .LBB62_502	@ bb321.bb324_crit_edge
.LBB62_220:	@ bb321
.LBB62_221:	@ bb323
	mov r9, #1
.LBB62_222:	@ bb324
	ldr r3, [r6, #+20]
	ldr r2, [r3, #+12]
	ldr r10, [r3]
	ldr r1, .LCPI62_148
	@comment
str r2, [r1]
	ldr r3, [r3, #+16]
	ldr r2, .LCPI62_149
	@comment
str r3, [r2]
	ldr r3, .LCPI62_150
	ldr r3, [r3]
	cmp r10, #0
	teqeq r9, #1
	beq .LBB62_225	@ bb324
	b .LBB62_228	@ bb5.i
	.align	4
.LBB62_223:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_117:
 	.long	char_type_node

.LBB62_224:	@ bb324
	.align	4
.LBB62_225:	@ bb324
	cmp r3, #0
	beq .LBB62_228	@ bb5.i
.LBB62_226:	@ bb3.i
	ldr r3, .LCPI62_99
	ldr r3, [r3]
	cmp r3, #0
	ldreq r0, .LCPI62_151
	emit_nops_till_bundle_end
	bleq warning
.LBB62_227:	@ bb4.i
.LBB62_228:	@ bb5.i
	cmp r10, #0
	beq .LBB62_230	@ bb21.preheader.i
.LBB62_229:	@ bb6.i
	ldr r3, [r10, #+16]
	ldrb r3, [r3, #+8]
	cmp r3, #1
	beq .LBB62_239	@ bb7.i
.LBB62_230:	@ bb21.preheader.i
	ldr r3, .LCPI62_148
	ldr r11, [r3]
	cmp r11, #0
	beq .LBB62_249	@ bb22.i
.LBB62_231:	@ bb11.i.preheader
	cmp r9, #0
	beq .LBB62_504	@ bb11.i.preheader.bb11.i_crit_edge
.LBB62_232:	@ bb11.i.preheader.bb11.i.us_crit_edge
	mov r9, r10
.LBB62_233:	@ bb11.i.us
	ldrb r3, [r11, #+8]
	cmp r3, #34
	bne .LBB62_237	@ bb20.i.us
.LBB62_234:	@ bb12.i.us
	ldr r3, [r9, #+16]
	ldr r3, [r3, #+16]
	cmp r3, #0
	ldreq r0, .LCPI62_152
	emit_nops_till_bundle_end
	bleq warning
.LBB62_235:	@ bb16.i.us
.LBB62_236:	@ bb19.i.us
	ldr r9, [r9]
.LBB62_237:	@ bb20.i.us
	ldr r11, [r11]
	cmp r11, #0
	bne .LBB62_233	@ bb11.i.us
	b .LBB62_249	@ bb22.i
	.align	4
.LBB62_238:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_118:
 	.long	unsigned_type_node

	.align	4
.LBB62_239:	@ bb7.i
	teq r9, #1
	ldreq r0, .LCPI62_153
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB62_240:	@ bb8.i
.LBB62_241:	@ bb9.i
	ldr r9, .LCPI62_148
	@comment
str r10, [r9]
	mov r10, #0
	b .LBB62_255	@ grokparms.exit
	.align	4
.LBB62_242:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_119:
 	.long	short_integer_type_node

.LBB62_243:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_120:
 	.long	float_type_node

.LBB62_244:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_121:
 	.long	complex_long_double_type_node

	.align	4
.LBB62_245:	@ bb16.i
	ldr r0, .LCPI62_152
	emit_nops_till_bundle_end
	bl warning
.LBB62_246:	@ bb17.i
	ldr r3, .LCPI62_103
	ldr r2, [r3]
	@comment
str r2, [r9, #+16]
	ldr r3, [r3]
	@comment
str r3, [r11, #+4]
.LBB62_247:	@ bb19.i
	ldr r9, [r9]
.LBB62_248:	@ bb20.i
	ldr r11, [r11]
	cmp r11, #0
	bne .LBB62_505	@ bb11.i
.LBB62_249:	@ bb22.i
	cmp r10, #0
	beq .LBB62_255	@ grokparms.exit
.LBB62_250:	@ bb23.i
	ldrb r9, [r10, #+9]
	tst r9, #4
	bne .LBB62_255	@ grokparms.exit
.LBB62_251:	@ bb29.preheader.i
	cmp r10, #0
	beq .LBB62_509	@ bb29.preheader.i.bb30.i_crit_edge
.LBB62_252:	@ bb29.preheader.i.bb28.i_crit_edge
	mov r2, #0
.LBB62_253:	@ bb28.i
	ldr r1, [r10, #+16]
	mov r9, #0
	mov r0, r9
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	ldr r10, [r10]
	cmp r10, #0
	mov r2, r0
	bne .LBB62_253	@ bb28.i
.LBB62_254:	@ bb30.i
	emit_nops_till_bundle_end
	bl nreverse
	mov r10, r0
.LBB62_255:	@ grokparms.exit
	ldr r9, [sp, #+28]
	cmp r9, #0
	beq .LBB62_257	@ bb326
.LBB62_256:	@ bb325
	mov r0, r8
	ldr r1, [sp, #+40]
	ldr r2, [sp, #+36]
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r8, r0
.LBB62_257:	@ bb326
	mov r0, r8
	mov r1, r10
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r8, .LCPI62_154
	ldr r8, [r8]
	ldr r6, [r6, #+16]
	b .LBB62_259	@ bb327
.LBB62_258:	@ bb327
	ldr r9, [r8, #+16]
	@comment
str r0, [r9, #+76]
	ldr r8, [r8]
.LBB62_259:	@ bb327
	mov r9, #0
	@comment
str r9, [sp, #+32]
	cmp r8, #0
	@comment
str r9, [sp, #+36]
	@comment
str r9, [sp, #+40]
	bne .LBB62_258	@ bb327
	b .LBB62_286	@ bb352.outer.outer
	.align	4
.LBB62_260:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_122:
 	.long	.str102584

.LBB62_261:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_123:
 	.long	.str103585

.LBB62_262:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_124:
 	.long	flag_gen_aux_info

.LBB62_263:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_125:
 	.long	.str104586

.LBB62_264:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_126:
 	.long	.str105587

.LBB62_265:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_127:
 	.long	.str106588

.LBB62_266:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_128:
 	.long	.str107589

	.align	4
.LBB62_267:	@ bb329.split
	ldrb r9, [r6, #+8]
	cmp r9, #39
	bne .LBB62_513	@ bb15
.LBB62_268:	@ bb330
	ldr r9, .LCPI62_98
	ldr r9, [r9]
	cmp r9, #0
	beq .LBB62_272	@ bb334
.LBB62_269:	@ bb331
	ldrb r9, [r8, #+8]
	cmp r9, #23
	bne .LBB62_272	@ bb334
.LBB62_270:	@ bb332
	ldr r9, [sp, #+28]
	cmp r9, #0
	beq .LBB62_274	@ bb336
.LBB62_271:	@ bb333
	ldr r0, .LCPI62_155
	emit_nops_till_bundle_end
	bl pedwarn
.LBB62_272:	@ bb334
	ldr r9, [sp, #+28]
	cmp r9, #0
	beq .LBB62_274	@ bb336
.LBB62_273:	@ bb335
	mov r0, r8
	ldr r1, [sp, #+40]
	ldr r2, [sp, #+36]
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r8, r0
.LBB62_274:	@ bb336
	mov r0, r8
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldr r8, [r6, #+4]
	mov r9, r0
	cmp r8, #0
	beq .LBB62_510	@ bb336.bb350_crit_edge
.LBB62_275:	@ bb336.bb338_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+40]
	@comment
str r3, [sp, #+36]
.LBB62_276:	@ bb338
	ldr r2, .LCPI62_97
	ldr r2, [r2, #+64]
	ldr r1, [r8, #+16]
	cmp r1, r2
	beq .LBB62_511	@ bb339
.LBB62_277:	@ bb340
	ldr r2, .LCPI62_97
	ldr r2, [r2, #+68]
	cmp r1, r2
	beq .LBB62_512	@ bb341
.LBB62_278:	@ bb342
	cmp r3, #0
	bne .LBB62_280	@ bb344
.LBB62_279:	@ bb343
	ldr r0, .LCPI62_156
	emit_nops_till_bundle_end
	bl error
	mov r3, #1
.LBB62_280:	@ bb344
	ldr r8, [r8]
	cmp r8, #0
	bne .LBB62_276	@ bb338
.LBB62_281:	@ bb346
	ldr r8, [sp, #+40]
	cmp r8, #2
	ldrge r0, .LCPI62_122
	emit_nops_till_bundle_end
	blge pedwarn
.LBB62_282:	@ bb347
.LBB62_283:	@ bb348
	ldr r8, [sp, #+36]
	cmp r8, #1
	ldrgt r0, .LCPI62_123
	emit_nops_till_bundle_end
	blgt pedwarn
.LBB62_284:	@ bb349
.LBB62_285:	@ bb350
	ldr r6, [r6, #+16]
	mov r8, #0
	@comment
str r8, [sp, #+32]
	mov r0, r9
.LBB62_286:	@ bb352.outer.outer
	ldr r8, [sp, #+36]
	ldr r9, [sp, #+40]
	orr r8, r9, r8
	@comment
str r8, [sp, #+28]
.LBB62_287:	@ bb352.outer611.outer
	mov r8, r0
.LBB62_288:	@ bb352.outer611
	ldr r9, .LCPI62_102
	ldr r9, [r9]
	ldr r3, .LCPI62_96
	ldr r3, [r3]
	ldr r2, .LCPI62_103
	ldr r2, [r2]
.LBB62_289:	@ bb352.outer614
	cmp r6, #0
	beq .LBB62_306	@ bb354.split
.LBB62_290:	@ bb352.outer614.split
	ldrb r1, [r6, #+8]
	cmp r8, r2
	bne .LBB62_294	@ bb352.outer614.split.split.split
.LBB62_291:	@ bb352.outer614.split.split.us.split.us
	and r1, r1, #255
	cmp r1, #1
	beq .LBB62_306	@ bb354.split
.LBB62_292:	@ bb261.us.split
	ldr r6, [r6, #+16]
	b .LBB62_289	@ bb352.outer614
	.align	4
.LBB62_293:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_129:
 	.long	.str108590

	.align	4
.LBB62_294:	@ bb352.outer614.split.split.split
	cmp r3, r9
	bne .LBB62_301	@ bb352.outer614.split.split.split.split
.LBB62_295:	@ bb352.outer614.split.split.split.split.us
	and r9, r1, #255
	cmp r9, #1
	beq .LBB62_306	@ bb354.split
.LBB62_296:	@ bb352.outer614.split.split.split.split.us
	and r9, r1, #255
	cmp r9, #42
	beq .LBB62_173	@ bb263.split
.LBB62_297:	@ bb352.outer614.split.split.split.split.us
	and r1, r1, #255
	cmp r1, #50
	bne .LBB62_267	@ bb329.split
.LBB62_298:	@ bb352.outer614.split.split.split.split.us.bb313.split_crit_edge
	mov r9, #1
	b .LBB62_212	@ bb313.split
	.align	4
.LBB62_299:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_130:
 	.long	.str109591

.LBB62_300:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_131:
 	.long	.str110592

	.align	4
.LBB62_301:	@ bb352.outer614.split.split.split.split
	cmp r5, #0
	mov r9, #0
	moveq r9, r7
	and r3, r1, #255
	cmp r3, #1
	beq .LBB62_306	@ bb354.split
.LBB62_302:	@ bb352.outer614.split.split.split.split
	and r3, r1, #255
	cmp r3, #42
	beq .LBB62_173	@ bb263.split
.LBB62_303:	@ bb352.outer614.split.split.split.split
	and r3, r1, #255
	cmp r3, #50
	beq .LBB62_212	@ bb313.split
	b .LBB62_267	@ bb329.split
	.align	4
.LBB62_304:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_132:
 	.long	.str111593

.LBB62_305:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_133:
 	.long	.str112594

	.align	4
.LBB62_306:	@ bb354.split
	ldr r3, [sp, #+24]
	tst r3, #1, 18 @ 16384
	beq .LBB62_317	@ bb370
.LBB62_307:	@ bb355
	ldr r4, .LCPI62_98
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB62_311	@ bb359
.LBB62_308:	@ bb356
	ldrb r4, [r8, #+8]
	cmp r4, #23
	bne .LBB62_311	@ bb359
.LBB62_309:	@ bb357
	ldr r4, [sp, #+36]
	ldr r5, [sp, #+40]
	orr r4, r5, r4
	cmp r4, #0
	ldrne r0, .LCPI62_155
	emit_nops_till_bundle_end
	blne pedwarn
.LBB62_310:	@ bb358
.LBB62_311:	@ bb359
	ldr r4, [sp, #+36]
	ldr r5, [sp, #+40]
	orr r4, r5, r4
	cmp r4, #0
	beq .LBB62_313	@ bb361
.LBB62_312:	@ bb360
	mov r0, r8
	ldr r1, [sp, #+40]
	ldr r2, [sp, #+36]
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r8, r0
.LBB62_313:	@ bb361
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, #32
	mov r1, r6
	mov r2, r8
	emit_nops_till_bundle_end
	bl build_decl
	ldr r4, [sp, #+24]
	tst r4, #2, 18 @ 32768
	bne .LBB62_316	@ bb368
.LBB62_314:	@ bb362
	ldr r4, [sp, #+16]
	cmp r4, #0
	ldrne r4, [sp, #+16]
	ldrneb r4, [r4, #+31]
	tstne r4, #2
	bne .LBB62_316	@ bb368
	b .LBB62_460	@ bb555
.LBB62_315:	@ bb363
.LBB62_316:	@ bb368
	mov r4, r0
	ldrb r5, [r4, #+30]!
	ldrb r6, [r4, #+1]
	orr r6, r6, #2
	mov r8, r0
	ldrb r3, [r8, #+28]!
	strb r6, [r4, #+1]
	strb r5, [r4]
	strb r3, [r8]
	b .LBB62_460	@ bb555
.LBB62_317:	@ bb370
	cmp r8, #0
	ldrne r3, [sp, #+20]
	cmpne r3, #0
	bne .LBB62_320	@ bb374
	b .LBB62_329	@ bb379
	.align	4
.LBB62_318:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_134:
 	.long	.str116598

.LBB62_319:	@ bb370
	.align	4
.LBB62_320:	@ bb374
	ldr r3, [sp, #+20]
	ldr r3, [r3, #+64]
	ldr r2, [r8, #+64]
	cmp r2, r3
	bne .LBB62_329	@ bb379
.LBB62_321:	@ bb375
	ldrb r3, [r8, #+8]
	cmp r3, #18
	ldreq r3, [r8, #+12]
	cmpeq r3, #0
	beq .LBB62_327	@ bb377
	b .LBB62_329	@ bb379
	.align	4
.LBB62_322:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_135:
 	.long	sizetype

.LBB62_323:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_136:
 	.long	void_type_node

.LBB62_324:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_137:
 	.long	.str117599

.LBB62_325:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_138:
 	.long	.str118600

.LBB62_326:	@ bb376
	.align	4
.LBB62_327:	@ bb377
	ldr r0, [r8, #+4]
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_array_type
	ldr r8, [sp, #+32]
	cmp r8, #0
	bne .LBB62_515	@ bb378
.LBB62_328:	@ bb377.bb379_crit_edge
	mov r8, r0
.LBB62_329:	@ bb379
	ldr r3, [sp, #+4]
	cmp r3, #5
	bne .LBB62_337	@ bb387
.LBB62_330:	@ bb380
	ldr r4, .LCPI62_157
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB62_334	@ bb384
.LBB62_331:	@ bb381
	ldrb r4, [r8, #+8]
	cmp r4, #23
	bne .LBB62_334	@ bb384
.LBB62_332:	@ bb382
	ldr r4, [sp, #+36]
	ldr r5, [sp, #+40]
	orr r4, r5, r4
	cmp r4, #0
	ldrne r0, .LCPI62_155
	emit_nops_till_bundle_end
	blne pedwarn
.LBB62_333:	@ bb383
.LBB62_334:	@ bb384
	ldr r4, [sp, #+36]
	ldr r5, [sp, #+40]
	orr r4, r5, r4
	cmp r4, #0
	beq .LBB62_336	@ bb386
.LBB62_335:	@ bb385
	mov r0, r8
	ldr r1, [sp, #+40]
	ldr r2, [sp, #+36]
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r8, r0
.LBB62_336:	@ bb386
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r8
	b .LBB62_460	@ bb555
.LBB62_337:	@ bb387
	ldr r3, .LCPI62_136
	ldr r3, [r3]
	ldr r2, [r8, #+64]
	cmp r2, r3
	bne .LBB62_348	@ bb397
.LBB62_338:	@ bb387
	ldr r3, [sp, #+4]
	cmp r3, #2
	beq .LBB62_348	@ bb397
.LBB62_339:	@ bb391
	ldr r3, [sp, #+4]
	cmp r3, #3
	ldrneb r3, [r8, #+8]
	cmpne r3, #23
	bne .LBB62_344	@ bb393
	b .LBB62_347	@ bb396
	.align	4
.LBB62_340:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_139:
 	.long	.str119601

.LBB62_341:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_140:
 	.long	integer_one_node

.LBB62_342:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_141:
 	.long	.str120602

.LBB62_343:	@ bb392
	.align	4
.LBB62_344:	@ bb393
	ldr r3, [sp, #+48]
	cmp r3, #0
	bne .LBB62_348	@ bb397
.LBB62_345:	@ bb394
	ldr r3, .LCPI62_158
	ldr r3, [r3]
	ldr r2, .LCPI62_159
	ldr r2, [r2]
	cmp r2, r3
	ldreq r3, [sp, #+24]
	tsteq r3, #10, 22 @ 10240
	beq .LBB62_348	@ bb397
.LBB62_346:	@ bb395
.LBB62_347:	@ bb396
	ldr r0, .LCPI62_160
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r8, .LCPI62_161
	ldr r8, [r8]
.LBB62_348:	@ bb397
	ldr r3, [sp, #+4]
	cmp r3, #2
	bne .LBB62_389	@ bb432
.LBB62_349:	@ bb398
	ldrb r4, [r8, #+8]
	cmp r4, #18
	beq .LBB62_354	@ bb399
.LBB62_350:	@ bb398
	and r4, r4, #255
	cmp r4, #23
	beq .LBB62_359	@ bb403
.LBB62_351:	@ bb398.bb409_crit_edge
	mov r0, r8
	b .LBB62_367	@ bb409
	.align	4
.LBB62_352:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_142:
 	.long	.str121603

.LBB62_353:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_143:
 	.long	size_one_node

	.align	4
.LBB62_354:	@ bb399
	ldr r5, [sp, #+36]
	ldr r4, [sp, #+40]
	orr r4, r4, r5
	ldr r0, [r8, #+4]
	cmp r4, #0
	ldrne r1, [sp, #+40]
	ldrne r2, [sp, #+36]
	emit_nops_till_bundle_end
	blne c_build_type_variant
.LBB62_355:	@ bb400
.LBB62_356:	@ bb409.thread
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r4, r0
	mov r0, #34
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r5, #0
	@comment
str r5, [sp, #+36]
	@comment
str r5, [sp, #+40]
	b .LBB62_369	@ bb411
	.align	4
.LBB62_357:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_144:
 	.long	.str123605

.LBB62_358:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_145:
 	.long	.str122604

	.align	4
.LBB62_359:	@ bb403
	ldr r4, .LCPI62_157
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB62_362	@ bb406
.LBB62_360:	@ bb404
	ldr r4, [sp, #+36]
	ldr r5, [sp, #+40]
	orr r4, r5, r4
	cmp r4, #0
	ldrne r0, .LCPI62_155
	emit_nops_till_bundle_end
	blne pedwarn
.LBB62_361:	@ bb405
.LBB62_362:	@ bb406
	ldr r4, [sp, #+36]
	ldr r5, [sp, #+40]
	orr r4, r5, r4
	cmp r4, #0
	mov r0, r8
	ldrne r1, [sp, #+40]
	ldrne r2, [sp, #+36]
	emit_nops_till_bundle_end
	blne c_build_type_variant
	b .LBB62_366	@ bb408
	.align	4
.LBB62_363:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_146:
 	.long	.str124606

.LBB62_364:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_147:
 	.long	.str125607

.LBB62_365:	@ bb407
	.align	4
.LBB62_366:	@ bb408
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r4, #0
	@comment
str r4, [sp, #+36]
	@comment
str r4, [sp, #+40]
.LBB62_367:	@ bb409
	mov r4, r0
	mov r0, #34
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldr r5, [sp, #+32]
	cmp r5, #0
	movne r5, r0
	ldrneb r6, [r5, #+30]!
	ldrneb r3, [r5, #+1]
	orrne r3, r3, #1
	movne r2, r0
	ldrneb r1, [r2, #+28]!
	strneb r3, [r5, #+1]
	strneb r6, [r5]
	strneb r1, [r2]
.LBB62_368:	@ bb410
.LBB62_369:	@ bb411
	@comment
str r4, [r0, #+48]
	ldr r5, .LCPI62_162
	ldr r5, [r5]
	cmp r4, r5
	beq .LBB62_517	@ bb411.bb414_crit_edge
.LBB62_370:	@ bb412
	add r5, r4, #64
.LBB62_371:	@ bb414
	ldr r6, .LCPI62_120
	ldr r6, [r6]
	ldr r5, [r5]
	cmp r5, r6
	beq .LBB62_518	@ bb415
.LBB62_372:	@ bb416
	ldrb r6, [r5, #+8]
	cmp r6, #7
	bne .LBB62_386	@ bb431
.LBB62_373:	@ bb418
	ldr r6, .LCPI62_117
	ldr r6, [r6]
	ldr r5, [r5, #+64]
	cmp r5, r6
	ldrne r6, .LCPI62_163
	ldrne r6, [r6]
	cmpne r5, r6
	bne .LBB62_375	@ bb420
	b .LBB62_382	@ bb423
.LBB62_374:	@ bb419
.LBB62_375:	@ bb420
	ldr r6, .LCPI62_164
	ldr r6, [r6]
	cmp r5, r6
	ldrne r6, .LCPI62_119
	ldrne r6, [r6]
	cmpne r5, r6
	bne .LBB62_381	@ bb422
	b .LBB62_382	@ bb423
	.align	4
.LBB62_376:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_148:
 	.long	last_function_parms

.LBB62_377:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_149:
 	.long	last_function_parm_tags

.LBB62_378:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_150:
 	.long	warn_strict_prototypes

.LBB62_379:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_151:
 	.long	.str11478

.LBB62_380:	@ bb421
	.align	4
.LBB62_381:	@ bb422
	ldr r6, .LCPI62_165
	ldr r6, [r6]
	cmp r5, r6
	bne .LBB62_386	@ bb431
.LBB62_382:	@ bb423
	ldr r5, .LCPI62_161
	ldr r5, [r5]
	ldrb r6, [r5, #+28]
	ldrb r3, [r4, #+28]
	cmp r3, r6
	bne .LBB62_385	@ bb430
.LBB62_383:	@ bb424
	ldrb r4, [r4, #+9]
	tst r4, #64
	ldrne r5, .LCPI62_118
	ldrne r5, [r5]
.LBB62_384:	@ bb429
.LBB62_385:	@ bb430
	@comment
str r5, [r0, #+48]
.LBB62_386:	@ bb431
	@comment
str r8, [r0, #+44]
	b .LBB62_451	@ bb542
	.align	4
.LBB62_387:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_152:
 	.long	.str14481

.LBB62_388:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_153:
 	.long	.str12479

	.align	4
.LBB62_389:	@ bb432
	ldrb r3, [r8, #+8]
	ldr r2, [sp, #+4]
	cmp r2, #3
	bne .LBB62_399	@ bb443
.LBB62_390:	@ bb433
	and r5, r3, #255
	cmp r5, #23
	beq .LBB62_519	@ bb434
.LBB62_391:	@ bb435
	tst r3, #255
	beq .LBB62_520	@ bb435.bb438_crit_edge
.LBB62_392:	@ bb436
	ldr r3, [r8, #+16]
	cmp r3, #0
	bne .LBB62_520	@ bb435.bb438_crit_edge
.LBB62_393:	@ bb437
	ldr r0, .LCPI62_166
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI62_162
	ldr r0, [r3]
.LBB62_394:	@ bb438
	ldrb r3, [r0, #+8]
	cmp r3, #18
	bne .LBB62_397	@ bb441
.LBB62_395:	@ bb439
	ldr r3, [sp, #+36]
	ldr r4, [sp, #+40]
	orr r3, r4, r3
	cmp r3, #0
	beq .LBB62_397	@ bb441
.LBB62_396:	@ bb440
	ldr r3, [r0, #+4]
	ldr r4, [r0, #+12]
	mov r0, r3
	ldr r1, [sp, #+40]
	ldr r2, [sp, #+36]
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_array_type
.LBB62_397:	@ bb441
	mov r2, r0
	mov r0, #36
	mov r1, r6
	emit_nops_till_bundle_end
	bl build_decl
	ldr r3, [sp, #+32]
	cmp r3, #0
	movne r3, r0
	ldrneb r4, [r3, #+30]!
	ldrneb r5, [r3, #+1]
	orrne r5, r5, #1
	movne r6, r0
	ldrneb r8, [r6, #+28]!
	strneb r5, [r3, #+1]
	strneb r4, [r3]
	strneb r8, [r6]
	b .LBB62_451	@ bb542
.LBB62_398:	@ bb442
.LBB62_399:	@ bb443
	and r2, r3, #255
	cmp r2, #23
	bne .LBB62_437	@ bb489
.LBB62_400:	@ bb444
	cmp r5, #0
	ldrne r3, .LCPI62_158
	ldrne r3, [r3]
	ldrne r7, .LCPI62_159
	ldrne r7, [r7]
	cmpne r7, r3
	bne .LBB62_403	@ bb447
	b .LBB62_521	@ bb444.bb448_crit_edge
	.align	4
.LBB62_401:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_154:
 	.long	current_function_parm_tags

.LBB62_402:	@ bb445
	.align	4
.LBB62_403:	@ bb447
	mov r7, #0
.LBB62_404:	@ bb448
	cmp r5, #0
	beq .LBB62_408	@ bb452
.LBB62_405:	@ bb449
	ldr r3, .LCPI62_157
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB62_407	@ bb451
.LBB62_406:	@ bb450
	ldr r3, .LCPI62_10
	ldr r3, [r3]
	ldr r2, .LCPI62_2
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB62_408	@ bb452
.LBB62_407:	@ bb451
	ldr r0, .LCPI62_167
	mov r1, r4
	emit_nops_till_bundle_end
	bl pedwarn
.LBB62_408:	@ bb452
	ldr r3, [sp, #+24]
	tst r3, #2, 20 @ 8192
	ldrne r0, .LCPI62_167
	movne r1, r4
	emit_nops_till_bundle_end
	blne error
.LBB62_409:	@ bb453
.LBB62_410:	@ bb454
	ldr r3, .LCPI62_10
	ldr r3, [r3]
	ldr r2, .LCPI62_2
	ldr r2, [r2]
	cmp r2, r3
	movne r3, #2, 22 @ 2048
	orrne r3, r3, #1, 14 @ 262144
	ldrne r2, [sp, #+24]
	tstne r2, r3
	bne .LBB62_413	@ bb456
	b .LBB62_415	@ bb458
	.align	4
.LBB62_411:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_155:
 	.long	.str126608

.LBB62_412:	@ bb455
	.align	4
.LBB62_413:	@ bb456
	ldr r3, .LCPI62_5
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI62_86
	movne r1, r4
	emit_nops_till_bundle_end
	blne pedwarn
.LBB62_414:	@ bb457
.LBB62_415:	@ bb458
	cmp r7, #0
	beq .LBB62_418	@ bb461
.LBB62_416:	@ bb459
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB62_417:	@ bb460
.LBB62_418:	@ bb461
	mov r0, #29
	mov r1, r6
	mov r2, r8
	emit_nops_till_bundle_end
	bl build_decl
	ldr r1, [sp, #+8]
	emit_nops_till_bundle_end
	bl build_decl_attribute_variant
	ldr r3, .LCPI62_5
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	ldrne r3, [sp, #+36]
	ldrne r2, [sp, #+40]
	orrne r3, r2, r3
	cmpne r3, #0
	bne .LBB62_421	@ bb463
	b .LBB62_423	@ bb469
	.align	4
.LBB62_419:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_156:
 	.long	.str127609

.LBB62_420:	@ bb462
	.align	4
.LBB62_421:	@ bb463
	ldrb r3, [r4, #+30]
	tst r3, #1
	ldreq r0, .LCPI62_87
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB62_422:	@ bb468
.LBB62_423:	@ bb469
	ldr r3, [sp, #+36]
	cmp r3, #0
	beq .LBB62_426	@ bb472
.LBB62_424:	@ bb470
	ldr r3, .LCPI62_61
	ldr r3, [r3]
	ldr r2, [r4, #+4]
	ldr r2, [r2, #+4]
	cmp r2, r3
	ldrne r0, .LCPI62_88
	emit_nops_till_bundle_end
	blne warning
.LBB62_425:	@ bb471
.LBB62_426:	@ bb472
	cmp r7, #0
	beq .LBB62_428	@ bb474
.LBB62_427:	@ bb473
	ldrb r3, [r4, #+30]
	mov r2, r4
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB62_428:	@ bb474
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 14 @ 524288
	strb r3, [r2]
	mov r1, r3, lsr #8
	strb r1, [r2, #+1]
	mov r2, r3, lsr #24
	strb r2, [r4, #+11]
	mov r2, #1
	mov r1, #0
	ldr r0, [sp, #+24]
	tst r0, #3, 22 @ 3072
	moveq r1, r2
	orr r3, r3, r1, lsl #19
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	ldr r3, [sp]
	cmp r3, #0
	beq .LBB62_435	@ bb474.bb542_crit_edge
.LBB62_429:	@ bb481
	ldr r0, [r8, #+12]
	emit_nops_till_bundle_end
	bl tree_last
	mov r8, r0
	ldr r0, [r6, #+16]
	ldr r1, .LCPI62_89
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB62_522	@ bb482
.LBB62_430:	@ bb483
	cmp r8, #0
	ldrne r3, .LCPI62_61
	ldrne r3, [r3]
	ldrne r6, [r8, #+16]
	ldrne r6, [r6, #+64]
	cmpne r6, r3
	bne .LBB62_523	@ bb485
.LBB62_431:	@ bb484
.LBB62_432:	@ bb486
	ldrb r3, [r4, #+30]
	mov r6, r4
	ldrb r8, [r6, #+28]!
	ldrb r2, [r6, #+3]
	orr r3, r3, r2, lsl #8
	ldrb r2, [r6, #+1]
	orr r2, r8, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 22 @ 2048
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	strb r8, [r6]
.LBB62_433:	@ bb487
	ldr r3, [sp, #+48]
	cmp r3, #0
	ldrne r3, .LCPI62_92
	movne r6, #1
	@comment
strne r6, [r3]
.LBB62_434:	@ bb488
.LBB62_435:	@ bb474.bb542_crit_edge
	mov r0, r4
	b .LBB62_451	@ bb542
	.align	4
.LBB62_436:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_157:
 	.long	pedantic

	.align	4
.LBB62_437:	@ bb489
	mov r2, #1
	mov r1, #0
	ldr r0, [sp, #+48]
	cmp r0, #0
	mov r0, #0
	movne r0, r2
	ldr r12, [sp, #+44]
	cmp r12, #0
	moveq r1, r2
	and r4, r1, r0
	and r3, r3, #255
	cmp r3, #18
	bne .LBB62_440	@ bb496
.LBB62_438:	@ bb494
	ldr r2, [sp, #+36]
	ldr r3, [sp, #+40]
	orr r3, r3, r2
	cmp r3, #0
	beq .LBB62_440	@ bb496
.LBB62_439:	@ bb495
	ldr r0, [r8, #+4]
	ldr r8, [r8, #+12]
	ldr r1, [sp, #+40]
	ldr r2, [sp, #+36]
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r1, r8
	emit_nops_till_bundle_end
	bl build_array_type
	mov r8, r0
.LBB62_440:	@ bb496
	cmp r4, #0
	beq .LBB62_443	@ bb499
.LBB62_441:	@ bb497
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB62_442:	@ bb498
.LBB62_443:	@ bb499
	mov r0, #33
	mov r1, r6
	mov r2, r8
	emit_nops_till_bundle_end
	bl build_decl
	mov r5, r0
	ldr r3, [sp, #+32]
	cmp r3, #0
	movne r3, r5
	ldrneb r2, [r3, #+30]!
	ldrneb r1, [r3, #+1]
	orrne r1, r1, #1
	movne r0, r5
	ldrneb r12, [r0, #+28]!
	strneb r1, [r3, #+1]
	strneb r2, [r3]
	strneb r12, [r0]
.LBB62_444:	@ bb500
.LBB62_445:	@ bb501
	ldr r3, [sp]
	cmp r3, #0
	ldrne r1, .LCPI62_93
	movne r0, r5
	emit_nops_till_bundle_end
	blne pedwarn_with_decl
.LBB62_446:	@ bb502
.LBB62_447:	@ bb503
	ldrb r3, [r5, #+30]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #1, 24 @ 256
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, #1, 24 @ 256
	and r1, r1, r4, lsl #8
	orr r1, r3, r1
	mov r0, r1, lsr #8
	strb r0, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	ldr r3, .LCPI62_10
	ldr r3, [r3]
	ldr r2, .LCPI62_2
	ldr r2, [r2]
	cmp r2, r3
	beq .LBB62_524	@ bb510
.LBB62_448:	@ bb527
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r0, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r0, r0, r12, lsl #8
	orr r3, r0, r3, lsl #16
	bic r3, r3, #3, 14 @ 786432
	strb r3, [r2]
	mov r0, r3, lsr #8
	strb r0, [r2, #+1]
	mov r2, r3, lsr #24
	strb r2, [r5, #+11]
	mov r2, #1, 14 @ 262144
	ldr r0, [sp, #+24]
	and r2, r2, r0, lsl #7
	orr r3, r3, r2
	mov r2, #2, 14 @ 524288
	and r2, r2, r4, lsl #19
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
.LBB62_449:	@ bb540
	ldr r3, [sp, #+24]
	tst r3, #1, 12 @ 1048576
	movne r3, r1, lsr #16
	strneb r3, [r5, #+30]
	movne r3, r1, lsr #8
	strneb r3, [r5, #+29]
	orrne r3, r1, #1, 4 @ 268435456
	movne r3, r3, lsr #24
	strneb r3, [r5, #+31]
	strneb r1, [r5, #+28]
.LBB62_450:	@ bb540.bb542_crit_edge
	mov r0, r5
.LBB62_451:	@ bb542
	mov r4, r0
	ldr r3, [sp, #+24]
	tst r3, #2, 20 @ 8192
	beq .LBB62_453	@ bb544
.LBB62_452:	@ bb543
	ldrb r3, [r4, #+30]
	mov r2, r4
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 22 @ 1024
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB62_453:	@ bb544
	ldr r3, [sp, #+40]
	cmp r3, #0
	beq .LBB62_455	@ bb546
.LBB62_454:	@ bb545
	ldrb r3, [r4, #+10]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 20 @ 8192
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB62_455:	@ bb546
	ldr r3, [sp, #+36]
	cmp r3, #0
	beq .LBB62_457	@ bb548
.LBB62_456:	@ bb547
	ldrb r3, [r4, #+10]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #17, 24 @ 4352
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB62_457:	@ bb548
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+11]
	tst r3, #1
	movne r0, r4
	emit_nops_till_bundle_end
	blne mark_addressable
.LBB62_458:	@ bb553
.LBB62_459:	@ bb554
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r4
.LBB62_460:	@ bb555
	sfi_add sp, sp, #52
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB62_461:	@ bb12
	cmp r3, #1
	bne .LBB62_513	@ bb15
.LBB62_462:	@ bb16.thread
	ldr r4, [r2, #+16]
	b .LBB62_10	@ bb17
.LBB62_463:	@ bb17.bb555_crit_edge
	mov r0, #0
	b .LBB62_460	@ bb555
.LBB62_464:	@ bb67.preheader.bb68_crit_edge
	mov r5, #0
	@comment
str r5, [sp, #+24]
	@comment
str r5, [sp, #+20]
	mov r8, r5
	@comment
str r5, [sp, #+8]
	@comment
str r5, [sp, #+16]
	@comment
str r5, [sp, #+48]
	@comment
str r5, [sp, #+40]
	b .LBB62_46	@ bb68
.LBB62_465:	@ bb44
	ldr r0, .LCPI62_4
	emit_nops_till_bundle_end
	bl error
	b .LBB62_30	@ bb52
	.align	4
.LBB62_466:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_158:
 	.long	global_binding_level

.LBB62_467:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_159:
 	.long	current_binding_level

	.align	4
.LBB62_468:	@ bb56
	ldr r0, .LCPI62_9
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	b .LBB62_45	@ found
	.align	4
.LBB62_469:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_160:
 	.long	.str128610

	.align	4
.LBB62_470:	@ bb58
	ldr r2, [r3, #+64]
	@comment
str r2, [sp, #+8]
	ldr r2, [r3, #+4]
	@comment
str r2, [sp, #+20]
	@comment
str r3, [sp, #+16]
	b .LBB62_45	@ found
	.align	4
.LBB62_471:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_161:
 	.long	integer_type_node

.LBB62_472:	@ bb68.bb74_crit_edge
	.align	4
.LBB62_473:	@ bb74.bb80_crit_edge
	mov r5, #0
	ldr r7, [sp, #+20]
	b .LBB62_54	@ bb80
.LBB62_474:	@ bb88
	ldr r0, .LCPI62_19
	b .LBB62_60	@ bb85
.LBB62_475:	@ bb92
	ldr r0, .LCPI62_20
	b .LBB62_60	@ bb85
.LBB62_476:	@ bb96
	ldr r0, .LCPI62_21
	b .LBB62_60	@ bb85
.LBB62_477:	@ bb99
	ldr r0, .LCPI62_22
	b .LBB62_60	@ bb85
.LBB62_478:	@ bb127
	ldr r7, .LCPI62_29
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_479:	@ bb129
	ldr r7, .LCPI62_30
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_480:	@ bb131
	ldr r7, .LCPI62_31
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_481:	@ bb133
	ldr r7, .LCPI62_33
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_482:	@ bb139
	ldr r7, .LCPI62_35
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_483:	@ bb141
	ldr r7, .LCPI62_36
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_484:	@ bb143
	ldr r7, .LCPI62_37
	ldr r0, [r7]
	b .LBB62_103	@ bb146
.LBB62_485:	@ bb144.bb146_crit_edge
.LBB62_486:	@ bb157
	ldr r3, .LCPI62_40
	ldr r0, [r3]
	b .LBB62_112	@ bb165
.LBB62_487:	@ bb159
	ldr r3, .LCPI62_42
	ldr r0, [r3]
	b .LBB62_112	@ bb165
.LBB62_488:	@ bb155
	ldr r3, .LCPI62_39
	ldr r0, [r3]
	b .LBB62_112	@ bb165
.LBB62_489:	@ bb163
.LBB62_490:	@ bb250
	ldr r0, .LCPI62_56
	b .LBB62_122	@ bb206
.LBB62_491:	@ bb253
	ldr r0, .LCPI62_57
	b .LBB62_122	@ bb206
.LBB62_492:	@ bb256
	ldr r0, .LCPI62_58
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	ldr r2, .LCPI62_11
	ldr r5, [r2]
	b .LBB62_168	@ bb352.preheader
	.align	4
.LBB62_493:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_162:
 	.long	error_mark_node

.LBB62_494:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_163:
 	.long	signed_char_type_node

	.align	4
.LBB62_495:	@ bb277.bb303_crit_edge
	mov r0, #0
.LBB62_496:	@ bb303
	mov r1, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl build_array_type
	ldr r8, [sp, #+28]
	cmp r8, #0
	ldrne r1, [sp, #+40]
	ldrne r2, [sp, #+36]
	emit_nops_till_bundle_end
	blne c_build_type_variant
.LBB62_497:	@ bb304
.LBB62_498:	@ bb305
	ldr r8, [sp, #+32]
	cmp r8, #0
	beq .LBB62_287	@ bb352.outer611.outer
.LBB62_499:	@ bb306
	ldrb r8, [r0, #+30]
	ldrb r3, [r0, #+31]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+1]
	strb r1, [r2]
	orr r8, r8, r3, lsl #8
	orr r3, r1, r12, lsl #8
	orr r8, r3, r8, lsl #16
	orr r8, r8, #1, 10 @ 4194304
	mov r8, r8, lsr #16
	strb r8, [r0, #+30]
	b .LBB62_287	@ bb352.outer611.outer
	.align	4
.LBB62_500:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_164:
 	.long	unsigned_char_type_node

.LBB62_501:	@ bb298
	.align	4
.LBB62_502:	@ bb321.bb324_crit_edge
	mov r9, #0
	b .LBB62_222	@ bb324
	.align	4
.LBB62_503:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_165:
 	.long	short_unsigned_type_node

	.align	4
.LBB62_504:	@ bb11.i.preheader.bb11.i_crit_edge
	mov r9, r10
.LBB62_505:	@ bb11.i
	ldrb r3, [r11, #+8]
	cmp r3, #34
	bne .LBB62_248	@ bb20.i
.LBB62_506:	@ bb12.i
	ldr r3, [r9, #+16]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB62_247	@ bb19.i
.LBB62_507:	@ bb13.i
	ldr r3, [r11, #+32]
	cmp r3, #0
	beq .LBB62_245	@ bb16.i
.LBB62_508:	@ bb15.i
	ldr r1, [r3, #+16]
	ldr r0, .LCPI62_79
	emit_nops_till_bundle_end
	bl error
	b .LBB62_246	@ bb17.i
.LBB62_509:	@ bb29.preheader.i.bb30.i_crit_edge
	mov r0, #0
	b .LBB62_254	@ bb30.i
.LBB62_510:	@ bb336.bb350_crit_edge
	mov r8, #0
	@comment
str r8, [sp, #+36]
	@comment
str r8, [sp, #+40]
	b .LBB62_285	@ bb350
.LBB62_511:	@ bb339
	ldr r1, [sp, #+40]
	add r1, r1, #1
	@comment
str r1, [sp, #+40]
	b .LBB62_280	@ bb344
.LBB62_512:	@ bb341
	ldr r2, [sp, #+36]
	add r2, r2, #1
	@comment
str r2, [sp, #+36]
	b .LBB62_280	@ bb344
.LBB62_513:	@ bb15
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB62_514:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_166:
 	.long	.str130612

	.align	4
.LBB62_515:	@ bb378
	ldrb r8, [r0, #+30]
	ldrb r3, [r0, #+31]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+1]
	strb r1, [r2]
	orr r8, r8, r3, lsl #8
	orr r3, r1, r12, lsl #8
	orr r8, r3, r8, lsl #16
	orr r8, r8, #1, 10 @ 4194304
	mov r8, r8, lsr #16
	strb r8, [r0, #+30]
	b .LBB62_328	@ bb377.bb379_crit_edge
.LBB62_516:	@ bb406.bb408_crit_edge
.LBB62_517:	@ bb411.bb414_crit_edge
	ldr r5, .LCPI62_11
	b .LBB62_371	@ bb414
.LBB62_518:	@ bb415
	ldr r4, .LCPI62_16
	ldr r4, [r4]
	@comment
str r4, [r0, #+48]
	b .LBB62_386	@ bb431
.LBB62_519:	@ bb434
	ldr r0, .LCPI62_84
	mov r1, r4
	emit_nops_till_bundle_end
	bl error
	mov r0, r8
	emit_nops_till_bundle_end
	bl build_pointer_type
	b .LBB62_394	@ bb438
.LBB62_520:	@ bb435.bb438_crit_edge
	mov r0, r8
	b .LBB62_394	@ bb438
.LBB62_521:	@ bb444.bb448_crit_edge
	mov r7, #1
	b .LBB62_404	@ bb448
.LBB62_522:	@ bb482
	ldr r0, .LCPI62_90
	emit_nops_till_bundle_end
	bl warning
	b .LBB62_433	@ bb487
.LBB62_523:	@ bb485
	ldr r0, .LCPI62_91
	emit_nops_till_bundle_end
	bl warning
	b .LBB62_433	@ bb487
.LBB62_524:	@ bb510
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r0, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r0, r0, r12, lsl #8
	orr r3, r0, r3, lsl #16
	bic r3, r3, #3, 14 @ 786432
	strb r3, [r2]
	mov r0, r3, lsr #8
	strb r0, [r2, #+1]
	mov r2, r3, lsr #24
	strb r2, [r5, #+11]
	mov r2, #1
	mov r0, #0
	ldr r12, [sp, #+24]
	tst r12, #10, 22 @ 10240
	moveq r0, r2
	orr r3, r3, r0, lsl #19
	mov r2, #1, 14 @ 262144
	and r4, r2, r4, lsl #18
	orr r4, r4, r3
	eor r4, r4, #1, 14 @ 262144
	mov r4, r4, lsr #16
	strb r4, [r5, #+10]
	b .LBB62_449	@ bb540
.LBB62_525:	@ bb541
	.align	4
.LBB62_526:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_167:
 	.long	.str131613

.LBB62_527:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_2:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_4:
 	.long	.str90563

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_5:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_9:
 	.long	.str93566

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_10:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_11:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_16:
 	.long	double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_19:
 	.long	.str96571

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_20:
 	.long	.str97572

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_21:
 	.long	.str98573

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_22:
 	.long	.str99574

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_29:
 	.long	long_long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_30:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_31:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_33:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_35:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_36:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_37:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_39:
 	.long	complex_double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_40:
 	.long	complex_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_42:
 	.long	complex_float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_56:
 	.long	.str113595

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_57:
 	.long	.str114596

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_58:
 	.long	.str115597

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_61:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_79:
 	.long	.str13480

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_84:
 	.long	.str129611

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_86:
 	.long	.str131613

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_87:
 	.long	.str132614

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_88:
 	.long	.str133615

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_89:
 	.long	.str134616

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_90:
 	.long	.str135617

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_91:
 	.long	.str136618

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_92:
 	.long	current_extern_inline

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI62_93:
 	.long	.str137619

	.size grokdeclarator, .-grokdeclarator


	.globl	groktypename_in_parm_context
	.align	4
groktypename_in_parm_context:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #3
	ldreq r12, [r0, #+16]
	ldreq r1, [r0, #+12]
	moveq r2, #2
	moveq r3, #0
	moveq r0, r12
	emit_nops_till_bundle_end
	bleq grokdeclarator
.LBB63_1:	@ bb1
.LBB63_2:	@ bb2
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size groktypename_in_parm_context, .-groktypename_in_parm_context


	.globl	groktypename
	.align	4
groktypename:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #3
	ldreq r12, [r0, #+16]
	ldreq r1, [r0, #+12]
	moveq r2, #5
	moveq r3, #0
	moveq r0, r12
	emit_nops_till_bundle_end
	bleq grokdeclarator
.LBB64_1:	@ bb1
.LBB64_2:	@ bb2
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size groktypename, .-groktypename


	.align	4
layout_array_type:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, [r0, #+4]
	ldrb r3, [r4, #+8]
	mov r5, r0
	cmp r3, #18
	bne .LBB65_4	@ bb1
.LBB65_1:	@ bb
	ldr r0, [r4, #+4]
	ldrb r3, [r0, #+8]
	cmp r3, #18
	emit_nops_till_bundle_end
	bleq layout_array_type
.LBB65_2:	@ bb.i
.LBB65_3:	@ layout_array_type.exit
	mov r0, r4
	emit_nops_till_bundle_end
	bl layout_type
.LBB65_4:	@ bb1
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_type
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.size layout_array_type, .-layout_array_type


	.globl	finish_enum
	.align	4
finish_enum:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	ldr r3, .LCPI66_0
	ldr r3, [r3]
	ldr r12, .LCPI66_1
	ldr r12, [r12]
	mov lr, #1
	mov r4, #0
	cmp r12, r3
	moveq r4, lr
	ldrb r3, [r3, #+24]
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r3, #0
	ldrne r0, .LCPI66_2
	emit_nops_till_bundle_end
	blne warning
.LBB66_1:	@ bb
.LBB66_2:	@ bb1
	mov r2, #0
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl decl_attributes
	ldr r3, .LCPI66_3
	ldr r3, [r3]
	cmp r3, r6
	beq .LBB66_8	@ bb2
.LBB66_3:	@ bb11.preheader
	cmp r6, #0
	beq .LBB66_7	@ bb11.preheader.bb12_crit_edge
.LBB66_4:	@ bb11.preheader.bb4_crit_edge
	mov r5, #0
	mov r8, r6
	mov r9, r5
.LBB66_5:	@ bb4
	ldr r11, [r8, #+16]
	cmp r8, r6
	bne .LBB66_9	@ bb6
.LBB66_6:	@ bb4.bb10_crit_edge
	mov r10, r11
	b .LBB66_11	@ bb10
.LBB66_7:	@ bb11.preheader.bb12_crit_edge
	mov r10, #0
	mov r11, r10
	b .LBB66_12	@ bb12
.LBB66_8:	@ bb2
	ldr r5, .LCPI66_4
	ldr r10, [r5]
	mov r11, r10
	b .LBB66_12	@ bb12
.LBB66_9:	@ bb6
	mov r0, r9
	mov r1, r11
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	mov r10, r0
	mov r0, r11
	mov r1, r5
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r10, #0
	mov r10, r11
	moveq r10, r9
	cmp r0, #0
	moveq r11, r5
.LBB66_10:	@ bb6.bb10_crit_edge
.LBB66_11:	@ bb10
	ldr r8, [r8]
	cmp r8, #0
	mov r5, r11
	mov r9, r10
	bne .LBB66_5	@ bb4
.LBB66_12:	@ bb12
	@comment
str r11, [r7, #+52]
	@comment
str r10, [r7, #+56]
	mov r0, r11
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	ldrb r3, [r7, #+10]
	mov r5, r7
	ldrb r2, [r5, #+8]!
	ldrb r1, [r5, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r5, #+1]
	orr r2, r2, r1, lsl #8
	orr r3, r2, r3, lsl #16
	bic r3, r3, #1, 18 @ 16384
	strb r3, [r5]
	mov r2, r3, lsr #24
	strb r2, [r5, #+3]
	mov r2, #1, 18 @ 16384
	and r2, r2, r0, lsr #17
	orr r2, r2, r3
	eor r2, r2, #1, 18 @ 16384
	mov r1, r2, lsr #8
	strb r1, [r5, #+1]
	mov r3, r3, lsr #16
	strb r3, [r7, #+10]
	mov r8, #1
	and r1, r8, r2, lsr #14
	mov r0, r11
	emit_nops_till_bundle_end
	bl min_precision
	mov r9, r0
	ldrb r3, [r5, #+1]
	and r1, r8, r3, lsr #6
	mov r0, r10
	emit_nops_till_bundle_end
	bl min_precision
	cmp r0, r9
	movge r9, r0
	ldr r3, .LCPI66_5
	ldr r3, [r3]
	cmp r3, #0
	ldreqb r3, [r7, #+30]
	tsteq r3, #16
	beq .LBB66_14	@ bb35
	b .LBB66_15	@ bb36
.LBB66_13:	@ bb30
.LBB66_14:	@ bb35
	ldr r3, .LCPI66_6
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	cmp r3, r9
	bge .LBB66_16	@ bb37
.LBB66_15:	@ bb36
	mov r1, #1
	mov r0, r9
	emit_nops_till_bundle_end
	bl type_for_size
	ldrb r3, [r0, #+28]
.LBB66_16:	@ bb37
	strb r3, [r7, #+28]
.LBB66_17:	@ bb38
	mov r3, #0
	@comment
str r3, [r7, #+16]
	mov r0, r7
	emit_nops_till_bundle_end
	bl layout_type
	ldr r3, .LCPI66_3
	ldr r3, [r3]
	cmp r3, r6
	beq .LBB66_27	@ bb48
.LBB66_18:	@ bb43.preheader
	cmp r6, #0
	beq .LBB66_26	@ bb47
.LBB66_19:	@ bb.nph70
	mov r3, r6
.LBB66_20:	@ bb40
	ldr r2, [r3, #+12]
	@comment
str r7, [r2, #+4]
	ldr r2, [r7, #+16]
	ldr r1, [r3, #+12]
	@comment
str r2, [r1, #+20]
	ldr r2, [r3, #+12]
	ldrb r1, [r2, #+8]
	cmp r1, #29
	ldrne r1, [r7, #+32]
	@comment
strne r1, [r2, #+72]
.LBB66_21:	@ bb41
.LBB66_22:	@ bb42
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB66_20	@ bb40
.LBB66_23:	@ bb46.loopexit
	cmp r6, #0
	beq .LBB66_26	@ bb47
.LBB66_24:	@ bb46.loopexit.bb45_crit_edge
	mov r3, r6
.LBB66_25:	@ bb45
	ldr r2, [r3, #+12]
	ldr r2, [r2, #+32]
	@comment
str r2, [r3, #+12]
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB66_25	@ bb45
.LBB66_26:	@ bb47
	@comment
str r6, [r7, #+12]
.LBB66_27:	@ bb48
	ldr r3, [r7, #+64]
	cmp r3, #0
	beq .LBB66_30	@ bb57
.LBB66_28:	@ bb.nph74
	mov r2, #1, 18 @ 16384
.LBB66_29:	@ bb49
	ldr r1, [r7, #+12]
	@comment
str r1, [r3, #+12]
	ldr r1, [r7, #+52]
	@comment
str r1, [r3, #+52]
	ldr r1, [r7, #+56]
	@comment
str r1, [r3, #+56]
	ldr r1, [r7, #+16]
	@comment
str r1, [r3, #+16]
	mov r1, r3
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	mov r12, r7
	ldrb lr, [r12, #+28]!
	mov lr, r12
	ldrb r5, [lr, #+2]!
	ldrb lr, [lr, #+1]
	orr lr, r5, lr, lsl #8
	mov lr, lr, lsl #16
	ldrb r5, [r12, #+1]
	orr lr, lr, r5, lsl #8
	mov lr, lr, lsr #8
	mov r5, r1
	ldrb r6, [r5, #+2]!
	strb lr, [r1, #+1]
	strb r0, [r1]
	strb r6, [r5]
	ldrb r0, [r12]
	strb r0, [r1]
	ldr r1, [r7, #+32]
	@comment
str r1, [r3, #+32]
	ldrb r1, [r3, #+10]
	mov r0, r3
	ldrb r12, [r0, #+8]!
	ldrb lr, [r0, #+3]
	orr r1, r1, lr, lsl #8
	ldrb lr, [r0, #+1]
	orr r12, r12, lr, lsl #8
	orr r1, r12, r1, lsl #16
	bic r1, r1, #1, 18 @ 16384
	mov r12, r7
	ldrb lr, [r12, #+8]!
	ldrb r12, [r12, #+1]
	strb r1, [r0]
	mov lr, r1, lsr #24
	strb lr, [r0, #+3]
	and r12, r2, r12, lsl #8
	orr r12, r1, r12
	mov r12, r12, lsr #8
	strb r12, [r0, #+1]
	mov r1, r1, lsr #16
	strb r1, [r3, #+10]
	ldr r3, [r3, #+60]
	cmp r3, #0
	bne .LBB66_29	@ bb49
.LBB66_30:	@ bb57
	mov r0, r7
	mov r1, r4
	emit_nops_till_bundle_end
	bl rest_of_type_compilation
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r7
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
	.align	4
.LBB66_31:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_1:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_2:
 	.long	.str138620

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_3:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_4:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_5:
 	.long	flag_short_enums

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI66_6:
 	.long	integer_type_node

	.size finish_enum, .-finish_enum


	.globl	finish_struct
	.align	4
finish_struct:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #8
	mov r4, r1
	mov r5, r0
	ldr r3, .LCPI67_26
	ldr r6, [r3]
	@comment
str r6, [sp, #+4]
	ldr r3, .LCPI67_27
	ldr r7, [r3]
	mov r8, #0
	@comment
str r8, [r5, #+16]
	mov r1, r2
	mov r2, #0
	emit_nops_till_bundle_end
	bl decl_attributes
	mov r3, #1
	cmp r7, r6
	moveq r8, r3
	ldrb r3, [r5, #+8]
	cmp r3, #21
	ldreq r2, [r5, #+48]
	cmpeq r2, #0
	beq .LBB67_7	@ bb14
.LBB67_1:	@ bb
.LBB67_2:	@ bb2
	ldr r2, .LCPI67_28
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB67_7	@ bb14
.LBB67_3:	@ bb3
	ldr r1, .LCPI67_26
	ldr r1, [r1]
	ldrb r1, [r1, #+24]
	cmp r1, #0
	beq .LBB67_7	@ bb14
.LBB67_4:	@ bb4
	cmp r2, #0
	bne .LBB67_144	@ bb5
.LBB67_5:	@ bb9
	ldr r2, .LCPI67_29
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB67_7	@ bb14
.LBB67_6:	@ bb10
	and r3, r3, #255
	ldr r2, .LCPI67_30
	ldr r0, .LCPI67_31
	cmp r3, #21
	moveq r0, r2
	emit_nops_till_bundle_end
	bl warning
.LBB67_7:	@ bb14
	emit_nops_till_bundle_end
	bl suspend_momentary
	@comment
str r0, [sp]
	cmp r4, #0
	bne .LBB67_11	@ bb.nph230
.LBB67_8:	@ bb15
	ldr r3, .LCPI67_28
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB67_10	@ bb110.preheader
.LBB67_9:	@ bb16
	ldrb r3, [r5, #+8]
	ldr r2, .LCPI67_32
	ldr r0, .LCPI67_33
	cmp r3, #21
	moveq r0, r2
	emit_nops_till_bundle_end
	bl pedwarn
.LBB67_10:	@ bb110.preheader
	cmp r4, #0
	beq .LBB67_59	@ bb121.loopexit
.LBB67_11:	@ bb.nph230
	mov r6, #1, 22 @ 1024
	mov r9, #0
	mov r10, r4
.LBB67_12:	@ bb21
	@comment
str r5, [r10, #+36]
	mov r3, r5
	ldrb r2, [r3, #+28]!
	ldrb r2, [r3, #+1]
	ldrb r2, [r3, #+2]!
	ldrb r3, [r3, #+1]
	ldrb r3, [r10, #+30]
	mov r1, r10
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r1, #+1]
	orr r12, r0, r12, lsl #8
	orr r3, r12, r3, lsl #16
	and r2, r6, r2, lsl #6
	orr r3, r2, r3
	mov r3, r3, lsr #8
	strb r3, [r1, #+1]
	strb r0, [r1]
	@comment
str r9, [r10, #+76]
	ldrb r3, [r10, #+9]
	tst r3, #32
	bne .LBB67_17	@ bb51
.LBB67_13:	@ bb21.bb44_crit_edge
	mov r3, r10
.LBB67_14:	@ bb44
	ldr r3, [r3, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #18
	beq .LBB67_14	@ bb44
.LBB67_15:	@ bb45
	sub r2, r2, #20
	and r2, r2, #255
	cmp r2, #1
	bhi .LBB67_18	@ bb52
.LBB67_16:	@ bb46
	ldrb r3, [r3, #+10]
	tst r3, #128
	beq .LBB67_18	@ bb52
.LBB67_17:	@ bb51
	ldrb r3, [r5, #+10]
	ldrb r2, [r5, #+11]
	mov r1, r5
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 10 @ 8388608
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
.LBB67_18:	@ bb52
	ldrb r3, [r10, #+9]
	tst r3, #16
	movne r3, r5
	ldrneb r2, [r3, #+10]!
	ldrneb r1, [r3, #+1]
	orrne r1, r1, #1
	movne r0, r5
	ldrneb r12, [r0, #+8]!
	strneb r1, [r3, #+1]
	strneb r2, [r3]
	strneb r12, [r0]
.LBB67_19:	@ bb57
.LBB67_20:	@ bb58
	ldrb r3, [r10, #+31]
	tst r3, #1
	beq .LBB67_22	@ bb64
.LBB67_21:	@ bb63
	ldrb r3, [r5, #+30]
	ldrb r2, [r5, #+31]
	mov r1, r5
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 10 @ 4194304
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
.LBB67_22:	@ bb64
	ldr r3, [r10, #+4]
	cmp r3, r5
	ldreq r3, [r5, #+48]
	ldreq r1, [r3, #+16]
	ldreq r0, .LCPI67_34
	emit_nops_till_bundle_end
	bleq error
.LBB67_23:	@ bb65
.LBB67_24:	@ bb66
	ldr r0, [r10, #+48]
	cmp r0, #0
	bne .LBB67_27	@ bb68
	b .LBB67_29	@ bb70
.LBB67_25:	@ bb69
	ldr r2, [r3, #+4]
	ldrb r2, [r2, #+29]
	ldr r0, [r3, #+16]
	ldr r1, [r0, #+4]
	ldrb r1, [r1, #+29]
	cmp r2, r1
	bne .LBB67_28	@ bb68.bb70_crit_edge
.LBB67_26:	@ bb67
	@comment
str r0, [r10, #+48]
.LBB67_27:	@ bb68
	mov r3, r0
	ldrb r2, [r3, #+8]
	sub r2, r2, #105
	and r2, r2, #255
	cmp r2, #3
	blo .LBB67_25	@ bb69
.LBB67_28:	@ bb68.bb70_crit_edge
	mov r0, r3
.LBB67_29:	@ bb70
	cmp r0, #0
	beq .LBB67_32	@ bb74
.LBB67_30:	@ bb71
	ldrb r3, [r0, #+8]
	cmp r3, #25
	beq .LBB67_145	@ bb72
.LBB67_31:	@ bb73
	ldr r1, .LCPI67_9
	mov r0, r10
	emit_nops_till_bundle_end
	bl error_with_decl
	@comment
str r9, [r10, #+48]
.LBB67_32:	@ bb74
	ldr r3, [r10, #+48]
	cmp r3, #0
	beq .LBB67_36	@ bb78
.LBB67_33:	@ bb75
	ldr r2, [r10, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #7
	andne r2, r2, #255
	cmpne r2, #10
	bne .LBB67_35	@ bb77
	b .LBB67_36	@ bb78
.LBB67_34:	@ bb75
.LBB67_35:	@ bb77
	ldr r1, .LCPI67_10
	mov r0, r10
	emit_nops_till_bundle_end
	bl error_with_decl
	mov r3, #0
	@comment
str r3, [r10, #+48]
.LBB67_36:	@ bb78
	cmp r3, #0
	ldrne r3, .LCPI67_2
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB67_38	@ bb80
	b .LBB67_43	@ bb85
.LBB67_37:	@ bb79
.LBB67_38:	@ bb80
	ldr r3, .LCPI67_11
	ldr r3, [r3]
	ldr r2, [r10, #+4]
	ldr r1, [r2, #+64]
	cmp r1, r3
	ldrne r0, .LCPI67_12
	ldrne r0, [r0]
	cmpne r1, r0
	bne .LBB67_40	@ bb82
	b .LBB67_43	@ bb85
.LBB67_39:	@ bb81
.LBB67_40:	@ bb82
	ldrb r1, [r2, #+8]
	cmp r1, #10
	ldreqb r3, [r3, #+28]
	ldreqb r2, [r2, #+28]
	cmpeq r2, r3
	beq .LBB67_43	@ bb85
.LBB67_41:	@ bb83
.LBB67_42:	@ bb84
	ldr r1, .LCPI67_13
	mov r0, r10
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
.LBB67_43:	@ bb85
	ldr r0, [r10, #+48]
	cmp r0, #0
	beq .LBB67_50	@ bb94
.LBB67_44:	@ bb86
	ldr r11, [r0, #+12]
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	blt .LBB67_146	@ bb87
.LBB67_45:	@ bb88
	ldr r3, [r10, #+48]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB67_147	@ bb90
.LBB67_46:	@ bb89
	ldr r3, [r10, #+4]
	ldrb r3, [r3, #+28]
	cmp r3, r11
	blo .LBB67_147	@ bb90
.LBB67_47:	@ bb91
	cmp r11, #0
	bne .LBB67_50	@ bb94
.LBB67_48:	@ bb92
	ldr r3, [r10, #+32]
	cmp r3, #0
	beq .LBB67_50	@ bb94
.LBB67_49:	@ bb93
	ldr r1, .LCPI67_16
	mov r0, r10
	emit_nops_till_bundle_end
	bl error_with_decl
	@comment
str r9, [r10, #+48]
.LBB67_50:	@ bb94
	ldr r3, [r10, #+48]
	cmp r3, #0
	beq .LBB67_53	@ bb98
.LBB67_51:	@ bb95
	ldr r3, [r3, #+12]
	@comment
str r3, [r10, #+76]
	ldrb r2, [r10, #+30]
	mov r1, r10
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+3]
	orr r2, r2, r12, lsl #8
	ldrb r12, [r1, #+1]
	orr r12, r0, r12, lsl #8
	orr r2, r12, r2, lsl #16
	orr r2, r2, #1, 20 @ 4096
	mov r2, r2, lsr #8
	strb r2, [r1, #+1]
	strb r0, [r1]
	@comment
str r9, [r10, #+48]
	cmp r3, #0
	bne .LBB67_58	@ bb109
.LBB67_52:	@ bb96
	ldr r3, [r10, #+4]
	ldr r3, [r3, #+32]
	ldr r2, [r10, #+72]
	b .LBB67_57	@ bb106
.LBB67_53:	@ bb98
	ldr r3, .LCPI67_17
	ldr r3, [r3]
	ldr r2, [r10, #+4]
	cmp r2, r3
	beq .LBB67_58	@ bb109
.LBB67_54:	@ bb99
	ldrb r3, [r10, #+29]
	tst r3, #4
	ldreq r2, [r2, #+32]
	movne r2, #8
	b .LBB67_56	@ bb106
.LBB67_55:	@ bb104
.LBB67_56:	@ bb106
	ldr r3, [r10, #+72]
.LBB67_57:	@ bb106
	cmp r3, r2
	movhs r2, r3
	@comment
str r2, [r10, #+72]
.LBB67_58:	@ bb109
	ldr r10, [r10]
	cmp r10, #0
	bne .LBB67_12	@ bb21
.LBB67_59:	@ bb121.loopexit
	mov r0, r4
.LBB67_60:	@ bb121.outer
	mov r6, r0
	cmp r6, #0
	beq .LBB67_74	@ bb123.split
.LBB67_61:	@ bb121.outer.split
	cmp r6, r4
	bne .LBB67_73	@ bb121
.LBB67_62:	@ bb121.us
	ldr r0, [r6]
	cmp r0, #0
	beq .LBB67_74	@ bb123.split
.LBB67_63:	@ bb112.us
	ldr r3, [r0, #+32]
	cmp r3, #0
	beq .LBB67_60	@ bb121.outer
.LBB67_64:	@ bb115.preheader.us
	ldr r2, [r4, #+32]
	cmp r2, r3
	bne .LBB67_60	@ bb121.outer
.LBB67_65:	@ bb119.us
	ldr r1, .LCPI67_18
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, [r6]
	ldr r3, [r3]
	@comment
str r3, [r6]
	b .LBB67_62	@ bb121.us
.LBB67_66:	@ bb112
	ldr r3, [r0, #+32]
	cmp r3, #0
	beq .LBB67_60	@ bb121.outer
.LBB67_67:	@ bb115.preheader
	ldr r2, [r4, #+32]
	cmp r2, r3
	beq .LBB67_149	@ bb115.preheader.bb118_crit_edge
.LBB67_68:	@ bb115.preheader.bb117_crit_edge
	mov r2, r4
.LBB67_69:	@ bb117
	ldr r2, [r2]
	ldr r1, [r2, #+32]
	cmp r1, r3
	beq .LBB67_71	@ bb118
.LBB67_70:	@ bb117
	cmp r2, r6
	bne .LBB67_69	@ bb117
.LBB67_71:	@ bb118
	ldr r2, [r2, #+32]
	cmp r2, r3
	bne .LBB67_60	@ bb121.outer
.LBB67_72:	@ bb119
	ldr r1, .LCPI67_18
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, [r6]
	ldr r3, [r3]
	@comment
str r3, [r6]
.LBB67_73:	@ bb121
	ldr r0, [r6]
	cmp r0, #0
	bne .LBB67_66	@ bb112
.LBB67_74:	@ bb123.split
	@comment
str r4, [r5, #+12]
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_type
	b .LBB67_77	@ bb125
.LBB67_75:	@ bb126
.LBB67_76:	@ bb124
	ldr r4, [r4]
.LBB67_77:	@ bb125
	cmp r4, #0
	ldrne r3, [r4, #+48]
	cmpne r3, #0
	bne .LBB67_76	@ bb124
.LBB67_78:	@ bb125.bb132.outer_crit_edge
	mov r3, r4
	b .LBB67_80	@ bb132.outer
.LBB67_79:	@ bb129
.LBB67_80:	@ bb132.outer
	mov r2, r3
	cmp r2, #0
	bne .LBB67_151	@ bb132
.LBB67_81:	@ bb133.split
	@comment
str r4, [r5, #+12]
	cmp r4, #0
	beq .LBB67_152	@ bb133.split.bb137_crit_edge
.LBB67_82:	@ bb133.split.bb135_crit_edge
	mov r3, #1
	mov r0, r4
.LBB67_83:	@ bb135
	ldr r0, [r0]
	add r6, r3, #1
	cmp r0, #0
	beq .LBB67_85	@ bb137.loopexit
.LBB67_84:	@ bb135
	cmp r3, #16
	mov r3, r6
	blt .LBB67_83	@ bb135
.LBB67_85:	@ bb137.loopexit
	sub r6, r6, #1
.LBB67_86:	@ bb137
	cmp r6, #16
	blt .LBB67_93	@ bb145
.LBB67_87:	@ bb138
	emit_nops_till_bundle_end
	bl list_length
	mov r9, r0
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	add r6, r9, r6
	mov r3, #8
	add r3, r3, r6, lsl #2
	cmp r0, #0
	bne .LBB67_153	@ bb139
.LBB67_88:	@ bb140
	mov r0, r3
	emit_nops_till_bundle_end
	bl oballoc
.LBB67_89:	@ bb141
	@comment
str r0, [r5, #+84]
	@comment
str r6, [r0]
	ldr r3, [r5, #+84]
	add r0, r3, #4
	cmp r4, #0
	beq .LBB67_154	@ bb141.bb144_crit_edge
.LBB67_90:	@ bb142.preheader
	add r3, r3, #4
	mov r1, #0
	mov r2, r4
.LBB67_91:	@ bb142
	str r2, [r3], #+4
	ldr r2, [r2]
	add r1, r1, #1
	cmp r2, #0
	bne .LBB67_91	@ bb142
.LBB67_92:	@ bb144
	mov r2, #4
	ldr r3, .LCPI67_19
	emit_nops_till_bundle_end
	bl qsort
.LBB67_93:	@ bb145
	ldr r3, [r5, #+64]
	b .LBB67_95	@ bb146
.LBB67_94:	@ bb146
	ldr r2, [r5, #+12]
	@comment
str r2, [r3, #+12]
	ldr r2, [r5, #+84]
	@comment
str r2, [r3, #+84]
	ldr r2, [r5, #+32]
	@comment
str r2, [r3, #+32]
	ldr r3, [r3, #+60]
.LBB67_95:	@ bb146
	cmp r3, #0
	bne .LBB67_94	@ bb146
.LBB67_96:	@ bb172.loopexit
	cmp r4, #0
	beq .LBB67_112	@ bb173
.LBB67_97:	@ bb149
	ldrb r3, [r4, #+29]
	tst r3, #16
	beq .LBB67_111	@ bb171
.LBB67_98:	@ bb154
	ldr r3, [r4, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #7
	bne .LBB67_104	@ bb160
.LBB67_99:	@ bb155
	ldr r2, .LCPI67_20
	ldr r2, [r2]
	ldr r1, [r3, #+64]
	cmp r1, r2
	beq .LBB67_105	@ bb161
.LBB67_100:	@ bb156
	ldr r2, .LCPI67_21
	ldr r2, [r2]
	cmp r1, r2
	ldrne r2, .LCPI67_22
	ldrne r2, [r2]
	cmpne r1, r2
	bne .LBB67_102	@ bb158
	b .LBB67_105	@ bb161
.LBB67_101:	@ bb157
.LBB67_102:	@ bb158
	ldr r2, .LCPI67_23
	ldr r2, [r2]
	cmp r1, r2
	ldrne r2, .LCPI67_24
	ldrne r2, [r2]
	cmpne r1, r2
	bne .LBB67_104	@ bb160
	b .LBB67_105	@ bb161
.LBB67_103:	@ bb159
.LBB67_104:	@ bb160
	ldr r2, .LCPI67_11
	ldr r2, [r2]
	ldrb r2, [r2, #+28]
	ldr r1, [r4, #+76]
	cmp r1, r2
	bge .LBB67_111	@ bb171
.LBB67_105:	@ bb161
	ldrb r2, [r3, #+9]
	tst r2, #64
	beq .LBB67_109	@ bb170
.LBB67_106:	@ bb166
	ldr r2, .LCPI67_5
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB67_155	@ bb169
.LBB67_107:	@ bb167
	ldrb r3, [r3, #+28]
	ldr r2, .LCPI67_11
	ldr r2, [r2]
	ldrb r2, [r2, #+28]
	cmp r3, r2
	andeq r3, r2, #255
	ldreq r2, [r4, #+76]
	cmpeq r2, r3
	beq .LBB67_155	@ bb169
.LBB67_108:	@ bb168
.LBB67_109:	@ bb170
	ldr r3, .LCPI67_11
.LBB67_110:	@ bb170
	ldr r3, [r3]
	@comment
str r3, [r4, #+4]
.LBB67_111:	@ bb171
	ldr r4, [r4]
	b .LBB67_96	@ bb172.loopexit
.LBB67_112:	@ bb173
	ldrb r3, [r5, #+8]
	cmp r3, #21
	bne .LBB67_116	@ bb181
.LBB67_113:	@ bb174
	ldrb r3, [r5, #+29]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 14 @ 524288
	beq .LBB67_116	@ bb181
.LBB67_114:	@ bb179
	mov r2, #255
	and r2, r2, r3, lsr #8
	ldr r1, [r5, #+12]
	ldrb r1, [r1, #+28]
	cmp r2, r1
	bicne r3, r3, #2, 14 @ 524288
	strneb r3, [r5, #+28]
	movne r2, r3, lsr #24
	strneb r2, [r5, #+31]
	movne r2, r3, lsr #16
	strneb r2, [r5, #+30]
	movne r3, r3, lsr #8
	strneb r3, [r5, #+29]
	ldrne r0, .LCPI67_25
	emit_nops_till_bundle_end
	blne warning
.LBB67_115:	@ bb180
.LBB67_116:	@ bb181
	ldr r3, .LCPI67_0
	ldr r3, [r3]
	ldr r2, [r3, #+32]
	cmp r2, #0
	ldrne r4, [r3]
	cmpne r4, #0
	bne .LBB67_120	@ bb182.bb183_crit_edge
	b .LBB67_143	@ bb197
	.align	4
.LBB67_117:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_26:
 	.long	current_binding_level

.LBB67_118:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_27:
 	.long	global_binding_level

.LBB67_119:	@ bb182
	.align	4
.LBB67_120:	@ bb182.bb183_crit_edge
	mov r6, #0
.LBB67_121:	@ bb183
	ldr r9, [r4, #+4]
	cmp r9, r5
	bne .LBB67_127	@ bb188
.LBB67_122:	@ bb184
	ldrb r3, [r4, #+8]
	cmp r3, #32
	beq .LBB67_127	@ bb188
.LBB67_123:	@ bb185
	mov r0, r4
	mov r1, #0
	emit_nops_till_bundle_end
	bl layout_decl
	mov r0, r4
	emit_nops_till_bundle_end
	bl maybe_objc_check_decl
	mov r0, r4
	mov r1, r6
	mov r2, r8
	mov r3, r6
	emit_nops_till_bundle_end
	bl rest_of_decl_compilation
	ldr r9, [sp, #+4]
	cmp r7, r9
	movne r0, r4
	emit_nops_till_bundle_end
	blne expand_decl
.LBB67_124:	@ bb186
.LBB67_125:	@ bb187
	ldr r9, .LCPI67_0
	ldr r9, [r9]
	ldr r3, [r9, #+32]
	sub r3, r3, #1
	@comment
str r3, [r9, #+32]
	b .LBB67_142	@ bb195
	.align	4
.LBB67_126:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_28:
 	.long	pedantic

	.align	4
.LBB67_127:	@ bb188
	ldr r3, [r9, #+16]
	cmp r3, #0
	ldreqb r3, [r9, #+8]
	cmpeq r3, #18
	beq .LBB67_134	@ bb189.bb192_crit_edge
	b .LBB67_142	@ bb195
	.align	4
.LBB67_128:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_29:
 	.long	flag_traditional

.LBB67_129:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_30:
 	.long	.str139622

.LBB67_130:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_31:
 	.long	.str140623

.LBB67_131:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_32:
 	.long	.str141624

.LBB67_132:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_33:
 	.long	.str142625

.LBB67_133:	@ bb189
	.align	4
.LBB67_134:	@ bb189.bb192_crit_edge
	mov r3, r4
.LBB67_135:	@ bb192
	ldr r3, [r3, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #18
	beq .LBB67_135	@ bb192
.LBB67_136:	@ bb193
	cmp r3, r5
	bne .LBB67_142	@ bb195
.LBB67_137:	@ bb194
	ldr r10, [r9, #+4]
	ldrb r3, [r10, #+8]
	cmp r3, #18
	bne .LBB67_141	@ layout_array_type.exit
.LBB67_138:	@ bb.i
	ldr r0, [r10, #+4]
	ldrb r3, [r0, #+8]
	cmp r3, #18
	emit_nops_till_bundle_end
	bleq layout_array_type
.LBB67_139:	@ bb.i.i
.LBB67_140:	@ layout_array_type.exit.i
	mov r0, r10
	emit_nops_till_bundle_end
	bl layout_type
.LBB67_141:	@ layout_array_type.exit
	mov r0, r9
	emit_nops_till_bundle_end
	bl layout_type
.LBB67_142:	@ bb195
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB67_121	@ bb183
.LBB67_143:	@ bb197
	ldr r0, [sp]
	emit_nops_till_bundle_end
	bl resume_momentary
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl rest_of_type_compilation
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r5
	sfi_add sp, sp, #8
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB67_144:	@ bb5
	and r3, r3, #255
	ldr r2, .LCPI67_3
	ldr r0, .LCPI67_4
	cmp r3, #21
	moveq r0, r2
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB67_7	@ bb14
.LBB67_145:	@ bb72
	emit_nops_till_bundle_end
	bl constant_expression_warning
	b .LBB67_32	@ bb74
.LBB67_146:	@ bb87
	@comment
str r9, [r10, #+48]
	ldr r1, .LCPI67_14
	mov r0, r10
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB67_50	@ bb94
.LBB67_147:	@ bb90
	@comment
str r9, [r10, #+48]
	ldr r1, .LCPI67_15
	mov r0, r10
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
	b .LBB67_50	@ bb94
.LBB67_148:	@ bb99.bb106_crit_edge
.LBB67_149:	@ bb115.preheader.bb118_crit_edge
	mov r2, r4
	b .LBB67_71	@ bb118
.LBB67_150:	@ bb130
	ldr r3, [r3]
	@comment
str r3, [r2]
.LBB67_151:	@ bb132
	ldr r3, [r2]
	cmp r3, #0
	ldrne r1, [r3, #+48]
	cmpne r1, #0
	bne .LBB67_150	@ bb130
	b .LBB67_80	@ bb132.outer
.LBB67_152:	@ bb133.split.bb137_crit_edge
	mov r6, #0
	mov r0, r4
	b .LBB67_86	@ bb137
.LBB67_153:	@ bb139
	mov r0, r3
	emit_nops_till_bundle_end
	bl savealloc
	b .LBB67_89	@ bb141
.LBB67_154:	@ bb141.bb144_crit_edge
	mov r1, #0
	b .LBB67_92	@ bb144
.LBB67_155:	@ bb169
	ldr r3, .LCPI67_12
	b .LBB67_110	@ bb170
	.align	4
.LBB67_156:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_34:
 	.long	.str143626

.LBB67_157:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_2:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_3:
 	.long	.str139622

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_4:
 	.long	.str140623

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_5:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_9:
 	.long	.str144627

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_10:
 	.long	.str145628

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_11:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_12:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_13:
 	.long	.str146629

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_14:
 	.long	.str147630

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_15:
 	.long	.str148631

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_16:
 	.long	.str149632

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_17:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_18:
 	.long	.str150633

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_19:
 	.long	field_decl_cmp

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_20:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_21:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_22:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_23:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_24:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI67_25:
 	.long	.str151634

	.size finish_struct, .-finish_struct


	.globl	complete_array_type
	.align	4
complete_array_type:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r1, #0
	beq .LBB68_18	@ entry.bb14_crit_edge
.LBB68_1:	@ bb
	ldrb r3, [r5, #+8]
	cmp r3, #43
	beq .LBB68_4	@ bb3
.LBB68_2:	@ bb
	and r3, r3, #255
	cmp r3, #28
	bne .LBB68_10	@ bb10
.LBB68_3:	@ bb1
	ldr r3, [r5, #+4]
	ldr r0, [r3, #+4]
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r1, r0
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl __divsi3
	sub r0, r0, #1
	mov r7, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	b .LBB68_11	@ bb13
.LBB68_4:	@ bb3
	ldr r7, .LCPI68_0
	ldr r1, [r7]
	ldr r7, .LCPI68_1
	ldr r2, [r7]
	ldr r5, [r5, #+20]
	mov r0, #57
	emit_nops_till_bundle_end
	bl size_binop
	cmp r5, #0
	beq .LBB68_9	@ bb9
.LBB68_5:	@ bb3.bb4_crit_edge
	mov r7, #56
	mov r1, r0
.LBB68_6:	@ bb4
	ldr r0, [r5, #+12]
	cmp r0, #0
	ldreq r3, .LCPI68_1
	ldreq r2, [r3]
	moveq r0, r7
	emit_nops_till_bundle_end
	bleq size_binop
.LBB68_7:	@ bb6
.LBB68_8:	@ bb7
	ldr r5, [r5]
	cmp r5, #0
	mov r1, r0
	bne .LBB68_6	@ bb4
.LBB68_9:	@ bb9
	emit_nops_till_bundle_end
	bl copy_node
	mov r7, #0
	b .LBB68_11	@ bb13
.LBB68_10:	@ bb10
	ldr r7, .LCPI68_2
	ldr r8, [r7]
	mov r7, #0
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r3, #1
	cmp r8, r5
	movne r7, r3
.LBB68_11:	@ bb13
	cmp r0, #0
	bne .LBB68_14	@ bb17
.LBB68_12:	@ bb14
	cmp r4, #0
	bne .LBB68_19	@ bb15
.LBB68_13:	@ bb14.bb17_crit_edge
	mov r7, #2
.LBB68_14:	@ bb17
	mov r4, r0
	cmp r4, #0
	beq .LBB68_17	@ bb20
.LBB68_15:	@ bb18
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_index_type
	@comment
str r0, [r6, #+12]
	ldr r3, [r4, #+4]
	cmp r3, #0
	@comment
streq r0, [r4, #+4]
.LBB68_16:	@ bb19
.LBB68_17:	@ bb20
	mov r0, r6
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r7
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB68_18:	@ entry.bb14_crit_edge
	mov r0, #0
	b .LBB68_12	@ bb14
.LBB68_19:	@ bb15
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	b .LBB68_13	@ bb14.bb17_crit_edge
	.align	4
.LBB68_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI68_0:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI68_1:
 	.long	size_one_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI68_2:
 	.long	error_mark_node

	.size complete_array_type, .-complete_array_type


	.globl	finish_incomplete_decl
	.align	4
finish_incomplete_decl:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #33
	bne .LBB69_9	@ return
.LBB69_1:	@ bb
	ldr r2, .LCPI69_0
	ldr r2, [r2]
	ldr r5, [r4, #+4]
	cmp r5, r2
	beq .LBB69_9	@ return
.LBB69_2:	@ bb1
	ldrb r2, [r5, #+8]
	cmp r2, #18
	ldreq r2, [r5, #+12]
	cmpeq r2, #0
	beq .LBB69_4	@ bb2
	b .LBB69_9	@ return
.LBB69_3:	@ bb2
.LBB69_4:	@ bb2
	and r3, r3, #255
	cmp r3, #32
	beq .LBB69_9	@ return
.LBB69_5:	@ bb17.i
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r6, r0
	cmp r0, #0
	beq .LBB69_8	@ complete_array_type.exit
.LBB69_6:	@ bb18.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl build_index_type
	@comment
str r0, [r5, #+12]
	ldr r3, [r6, #+4]
	cmp r3, #0
	@comment
streq r0, [r6, #+4]
.LBB69_7:	@ bb19.i
.LBB69_8:	@ complete_array_type.exit
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_type
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl layout_decl
.LBB69_9:	@ return
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB69_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI69_0:
 	.long	error_mark_node

	.size finish_incomplete_decl, .-finish_incomplete_decl


	.globl	finish_decl
	.align	4
finish_decl:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	ldr r7, [r6, #+20]
	ldr r8, [r6, #+4]
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	mov r9, r0
	cmp r4, #0
	ldrne r4, [r4, #+20]
	moveq r4, #0
	b .LBB70_2	@ bb1
.LBB70_1:	@ bb
.LBB70_2:	@ bb1
	cmp r5, #0
	beq .LBB70_5	@ bb4
.LBB70_3:	@ bb2
	ldr r3, [r6, #+48]
	cmp r3, #0
	moveq r5, #0
.LBB70_4:	@ bb3
.LBB70_5:	@ bb4
	ldrb r3, [r6, #+8]
	mov r2, #0
	cmp r3, #34
	moveq r5, r2
	ldrb r3, [r6, #+31]
	tst r3, #16
	beq .LBB70_8	@ bb13
.LBB70_6:	@ bb10
	cmp r5, #0
	beq .LBB70_93	@ bb11
.LBB70_7:	@ bb12
	mov r0, r5
	emit_nops_till_bundle_end
	bl save_expr
	mov r5, r0
.LBB70_8:	@ bb13
	cmp r5, #0
	beq .LBB70_11	@ bb17
.LBB70_9:	@ bb14
	ldrb r3, [r6, #+8]
	cmp r3, #32
	bne .LBB70_94	@ bb15
.LBB70_10:	@ bb16
	ldr r3, [r5, #+4]
	@comment
str r3, [r6, #+4]
	mov r3, #0
	@comment
str r3, [r6, #+48]
.LBB70_11:	@ bb17
	emit_nops_till_bundle_end
	bl pop_obstacks
	ldrb r3, [r8, #+8]
	cmp r3, #18
	ldreq r3, [r8, #+12]
	cmpeq r3, #0
	beq .LBB70_13	@ bb19
	b .LBB70_35	@ bb61
.LBB70_12:	@ bb18
.LBB70_13:	@ bb19
	ldrb r3, [r6, #+8]
	cmp r3, #32
	beq .LBB70_35	@ bb61
.LBB70_14:	@ bb20
	ldrb r3, [r6, #+9]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 14 @ 262144
	beq .LBB70_19	@ bb34
.LBB70_15:	@ bb25
	ldr r2, .LCPI70_1
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB70_18	@ bb32
.LBB70_16:	@ bb26
	tst r3, #2, 14 @ 524288
	bne .LBB70_18	@ bb32
.LBB70_17:	@ bb26.bb39_crit_edge
	mov r5, #1
	b .LBB70_20	@ bb39
.LBB70_18:	@ bb32
	mov r5, #0
	b .LBB70_20	@ bb39
.LBB70_19:	@ bb34
	ldrb r5, [r6, #+29]
	and r5, r5, #1
	eor r5, r5, #1
.LBB70_20:	@ bb39
	ldr r1, [r6, #+48]
	mov r0, r8
	mov r2, r5
	emit_nops_till_bundle_end
	bl complete_array_type
	ldr r8, [r6, #+4]
	cmp r0, #2
	beq .LBB70_24	@ bb42
.LBB70_21:	@ bb39
	cmp r0, #1
	bne .LBB70_29	@ bb56thread-split
.LBB70_22:	@ bb40
	ldr r1, .LCPI70_2
.LBB70_23:	@ bb40
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB70_29	@ bb56thread-split
.LBB70_24:	@ bb42
	cmp r5, #0
	bne .LBB70_95	@ bb43
.LBB70_25:	@ bb44
	ldr r3, .LCPI70_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB70_30	@ bb56
.LBB70_26:	@ bb45
	ldrb r3, [r6, #+9]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 14 @ 262144
	beq .LBB70_29	@ bb56thread-split
.LBB70_27:	@ bb50
	tst r3, #2, 14 @ 524288
	bne .LBB70_29	@ bb56thread-split
.LBB70_28:	@ bb55
	ldrb r3, [r6, #+30]
	mov r2, r6
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB70_29:	@ bb56thread-split
	ldr r3, .LCPI70_1
	ldr r3, [r3]
.LBB70_30:	@ bb56
	cmp r3, #0
	ldrne r3, [r8, #+12]
	cmpne r3, #0
	bne .LBB70_32	@ bb58
	b .LBB70_34	@ bb60
.LBB70_31:	@ bb57
.LBB70_32:	@ bb58
	ldr r0, [r3, #+56]
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	ldrlt r1, .LCPI70_4
	movlt r0, r6
	emit_nops_till_bundle_end
	bllt error_with_decl
.LBB70_33:	@ bb59
.LBB70_34:	@ bb60
	mov r1, #0
	mov r0, r6
	emit_nops_till_bundle_end
	bl layout_decl
.LBB70_35:	@ bb61
	ldrb r3, [r6, #+8]
	cmp r3, #33
	bne .LBB70_50	@ bb97
.LBB70_36:	@ bb62
	ldr r3, [r6, #+20]
	cmp r3, #0
	bne .LBB70_39	@ bb65
.LBB70_37:	@ bb63
	ldr r3, [r6, #+4]
	ldr r3, [r3, #+16]
	cmp r3, #0
	movne r1, #0
	movne r0, r6
	emit_nops_till_bundle_end
	blne layout_decl
.LBB70_38:	@ bb64
.LBB70_39:	@ bb65
	ldr r3, [r6, #+20]
	cmp r3, #0
	bne .LBB70_45	@ bb83
.LBB70_40:	@ bb66
	ldrb r3, [r6, #+10]
	tst r3, #4
	beq .LBB70_43	@ bb76
.LBB70_41:	@ bb71
	ldr r3, [r6, #+48]
	cmp r3, #0
	bne .LBB70_44	@ bb82
.LBB70_42:	@ bb72
	ldr r3, [r6, #+36]
	cmp r3, #0
	bne .LBB70_44	@ bb82
	b .LBB70_45	@ bb83
.LBB70_43:	@ bb76
	ldrb r3, [r6, #+29]
	tst r3, #1
	bne .LBB70_45	@ bb83
.LBB70_44:	@ bb82
	ldr r1, .LCPI70_5
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI70_6
	ldr r3, [r3]
	@comment
str r3, [r6, #+4]
.LBB70_45:	@ bb83
	ldrb r3, [r6, #+29]
	tst r3, #1
	ldreqb r3, [r6, #+10]
	tsteq r3, #4
	beq .LBB70_50	@ bb97
.LBB70_46:	@ bb88
.LBB70_47:	@ bb93
	ldr r0, [r6, #+20]
	cmp r0, #0
	beq .LBB70_50	@ bb97
.LBB70_48:	@ bb94
	ldrb r3, [r0, #+8]
	cmp r3, #25
	beq .LBB70_96	@ bb95
.LBB70_49:	@ bb96
	ldr r1, .LCPI70_7
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
.LBB70_50:	@ bb97
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB70_53	@ bb102
.LBB70_51:	@ bb97
	cmp r4, #0
	beq .LBB70_53	@ bb102
.LBB70_52:	@ bb101
	ldrb r2, [r6, #+29]
	mov r1, r6
	ldrb r0, [r1, #+28]!
	orr r2, r0, r2, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r12, [r1, #+2]
	orr r0, r12, r0, lsl #8
	orr r2, r2, r0, lsl #16
	bic r2, r2, #1, 20 @ 4096
	strb r2, [r1]
	mov r0, r2, lsr #24
	strb r0, [r1, #+3]
	mov r0, r2, lsr #16
	strb r0, [r1, #+2]
	mov r2, r2, lsr #8
	strb r2, [r6, #+29]
	mov r2, #0
	@comment
str r2, [r6, #+68]
.LBB70_53:	@ bb102
	and r2, r3, #255
	cmp r2, #29
	andne r3, r3, #255
	cmpne r3, #33
	bne .LBB70_68	@ bb138
.LBB70_54:	@ bb102
.LBB70_55:	@ bb106
	ldr r3, .LCPI70_8
	ldr r3, [r3]
	cmp r3, #0
	ldreqb r3, [r6, #+9]
	tsteq r3, #4
	beq .LBB70_58	@ bb114
.LBB70_56:	@ bb107
.LBB70_57:	@ bb112
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	bne .LBB70_97	@ bb113
.LBB70_58:	@ bb114
	mov r0, r6
	emit_nops_till_bundle_end
	bl maybe_objc_check_decl
	ldr r2, [r6, #+36]
	mov r3, #0
	mov r1, #1
	cmp r2, #0
	mov r2, #0
	moveq r2, r1
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl rest_of_decl_compilation
.LBB70_59:	@ bb115
	ldr r3, [r6, #+36]
	cmp r3, #0
	beq .LBB70_68	@ bb138
.LBB70_60:	@ bb116
	cmp r7, #0
	bne .LBB70_66	@ bb136
.LBB70_61:	@ bb117
	ldrb r3, [r6, #+9]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 14 @ 262144
	ldreqb r2, [r6, #+29]
	tsteq r2, #1
	beq .LBB70_63	@ bb127
	b .LBB70_66	@ bb136
.LBB70_62:	@ bb122
.LBB70_63:	@ bb127
	bic r2, r3, #2, 22 @ 2048
	strb r2, [r6, #+8]
	mov r1, r2, lsr #24
	strb r1, [r6, #+11]
	mov r1, r2, lsr #16
	strb r1, [r6, #+10]
	mov r1, #2, 22 @ 2048
	and r3, r1, r3, lsr #5
	orr r3, r2, r3
	mov r3, r3, lsr #8
	strb r3, [r6, #+9]
	ldr r3, [r6, #+20]
	cmp r3, #0
	moveq r3, #0
	@comment
streq r3, [r6, #+48]
.LBB70_64:	@ bb134
.LBB70_65:	@ bb135
	mov r0, r6
	emit_nops_till_bundle_end
	bl expand_decl
.LBB70_66:	@ bb136
	ldrb r3, [r6, #+8]
	cmp r3, #29
	movne r0, r6
	emit_nops_till_bundle_end
	blne expand_decl_init
.LBB70_67:	@ bb137
.LBB70_68:	@ bb138
	ldrb r3, [r6, #+8]
	cmp r3, #32
	bne .LBB70_70	@ bb140
.LBB70_69:	@ bb139
	mov r0, r6
	emit_nops_till_bundle_end
	bl maybe_objc_check_decl
	ldr r3, [r6, #+36]
	mov r1, #0
	mov r0, #1
	cmp r3, #0
	mov r2, #0
	moveq r2, r0
	mov r0, r6
	mov r3, #0
	emit_nops_till_bundle_end
	bl rest_of_decl_compilation
.LBB70_70:	@ bb140
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB70_72	@ bb146
.LBB70_71:	@ bb141
	ldrb r2, [r6, #+29]
	tst r2, #8
	bne .LBB70_79	@ bb162
.LBB70_72:	@ bb146
	cmp r9, #0
	andne r3, r3, #255
	cmpne r3, #34
	bne .LBB70_74	@ bb148
	b .LBB70_79	@ bb162
.LBB70_73:	@ bb146
.LBB70_74:	@ bb148
	ldr r3, [r6, #+48]
	cmp r3, #0
	ldrne r2, .LCPI70_6
	ldrne r2, [r2]
	cmpne r3, r2
	bne .LBB70_76	@ bb150
	b .LBB70_79	@ bb162
.LBB70_75:	@ bb149
.LBB70_76:	@ bb150
	ldrb r3, [r6, #+9]
	tst r3, #32
	ldreqb r3, [r6, #+31]
	tsteq r3, #16
	beq .LBB70_78	@ bb161
	b .LBB70_98	@ bb160
.LBB70_77:	@ bb155
.LBB70_78:	@ bb161
	@comment
str r2, [r6, #+48]
.LBB70_79:	@ bb162
	ldr r3, .LCPI70_9
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB70_86	@ bb173
.LBB70_80:	@ bb163
	ldrb r3, [r6, #+8]
	sub r3, r3, #33
	and r3, r3, #255
	cmp r3, #1
	bhi .LBB70_86	@ bb173
.LBB70_81:	@ bb164
	ldrb r3, [r6, #+29]
	tst r3, #1
	bne .LBB70_86	@ bb173
.LBB70_82:	@ bb169
	ldr r3, [r6, #+20]
	cmp r3, #0
	beq .LBB70_86	@ bb173
.LBB70_83:	@ bb170
	ldrb r2, [r3, #+8]
	cmp r2, #25
	bne .LBB70_86	@ bb173
.LBB70_84:	@ bb171
	ldr r3, [r3, #+12]
	mov r2, r3, asr #31
	add r3, r3, r2, lsr #29
	mov r2, r3, asr #3
	ldr r3, .LCPI70_10
	ldr r3, [r3]
	cmp r2, r3
	ldrhi r1, .LCPI70_11
	movhi r0, r6
	emit_nops_till_bundle_end
	blhi warning_with_decl
.LBB70_85:	@ bb172
.LBB70_86:	@ bb173
	cmp r9, #0
	beq .LBB70_89	@ bb176
.LBB70_87:	@ bb174
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	cmp r0, #0
	moveq r0, #0
	emit_nops_till_bundle_end
	bleq permanent_allocation
.LBB70_88:	@ bb175
.LBB70_89:	@ bb176
	ldr r3, .LCPI70_12
	ldr r3, [r3]
	ldr r2, .LCPI70_13
	ldr r2, [r2]
	cmp r2, r3
	emit_nops_till_bundle_end
	bleq get_pending_sizes
.LBB70_90:	@ bb177
.LBB70_91:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB70_92:	@ entry.bb1_crit_edge
.LBB70_93:	@ bb11
	ldr r1, .LCPI70_0
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB70_8	@ bb13
.LBB70_94:	@ bb15
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl store_init_value
	b .LBB70_11	@ bb17
.LBB70_95:	@ bb43
	ldr r1, .LCPI70_3
	b .LBB70_23	@ bb40
.LBB70_96:	@ bb95
	emit_nops_till_bundle_end
	bl constant_expression_warning
	b .LBB70_50	@ bb97
.LBB70_97:	@ bb113
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	emit_nops_till_bundle_end
	bl end_temporary_allocation
	mov r0, r6
	emit_nops_till_bundle_end
	bl maybe_objc_check_decl
	ldr r2, [r6, #+36]
	mov r3, #0
	mov r1, #1
	cmp r2, #0
	mov r2, #0
	moveq r2, r1
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl rest_of_decl_compilation
	emit_nops_till_bundle_end
	bl pop_obstacks
	b .LBB70_59	@ bb115
.LBB70_98:	@ bb160
	emit_nops_till_bundle_end
	bl preserve_initializer
	ldr r2, [r6, #+48]
	ldrb r3, [r2, #+10]
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 22 @ 1024
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldr r2, [r6, #+48]
	@comment
str r8, [r2, #+4]
	b .LBB70_79	@ bb162
	.align	4
.LBB70_99:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_0:
 	.long	.str152635

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_1:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_2:
 	.long	.str153636

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_3:
 	.long	.str154637

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_4:
 	.long	.str155638

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_5:
 	.long	.str156639

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_6:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_7:
 	.long	.str157640

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_8:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_9:
 	.long	warn_larger_than

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_10:
 	.long	larger_than_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_11:
 	.long	.str158641

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_12:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI70_13:
 	.long	current_binding_level

	.size finish_decl, .-finish_decl


	.globl	grokfield
	.align	4
grokfield:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r3
	mov r5, r2
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r6, [sp, #+16]
	mov r3, #3
	mov r2, #4
	cmp r6, #0
	moveq r2, r3
	mov r0, r5
	mov r1, r4
	mov r3, #0
	emit_nops_till_bundle_end
	bl grokdeclarator
	mov r4, r0
	mov r1, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl finish_decl
	@comment
str r6, [r4, #+48]
	mov r0, r4
	emit_nops_till_bundle_end
	bl maybe_objc_check_decl
	mov r0, r4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.size grokfield, .-grokfield


	.globl	lookup_label
	.align	4
lookup_label:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI72_0
	ldr r3, [r3]
	ldr r2, [r0, #+28]
	mov r4, r0
	cmp r3, #0
	beq .LBB72_8	@ bb
.LBB72_1:	@ bb1
	cmp r2, #0
	beq .LBB72_5	@ bb9
.LBB72_2:	@ bb2
	ldr r1, [r2, #+36]
	cmp r1, r3
	beq .LBB72_6	@ bb10
.LBB72_3:	@ bb3
	ldrb r3, [r2, #+10]
	tst r3, #128
	bne .LBB72_6	@ bb10
.LBB72_4:	@ bb7
	mov r0, r4
	emit_nops_till_bundle_end
	bl shadow_label
	b .LBB72_7	@ bb10
.LBB72_5:	@ bb9
	ldr r2, .LCPI72_2
	ldr r2, [r2]
	mov r0, #30
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r5, r0
	emit_nops_till_bundle_end
	bl label_rtx
	ldr r2, .LCPI72_0
	ldr r2, [r2]
	@comment
str r2, [r5, #+36]
	mov r0, #0
	strb r0, [r5, #+28]
	ldr r2, .LCPI72_3
	ldr r2, [r2]
	@comment
str r2, [r5, #+16]
	ldr r2, .LCPI72_4
	ldr r2, [r2]
	@comment
str r2, [r5, #+12]
	@comment
str r5, [r4, #+28]
	ldr r4, .LCPI72_5
	ldr r2, [r4]
	mov r1, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r4]
	mov r0, r5
	b .LBB72_7	@ bb10
.LBB72_6:	@ bb10
	mov r0, r2
.LBB72_7:	@ bb10
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB72_8:	@ bb
	ldr r1, [r4, #+16]
	ldr r0, .LCPI72_1
	emit_nops_till_bundle_end
	bl error
	mov r0, #0
	b .LBB72_7	@ bb10
	.align	4
.LBB72_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI72_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI72_1:
 	.long	.str159642

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI72_2:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI72_3:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI72_4:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI72_5:
 	.long	named_labels

	.size lookup_label, .-lookup_label


	.globl	shadow_label
	.align	4
shadow_label:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r1, [r0, #+28]
	mov r4, r0
	cmp r1, #0
	beq .LBB73_6	@ bb6
.LBB73_1:	@ entry.bb4_crit_edge
	ldr r5, .LCPI73_0
.LBB73_2:	@ bb4
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB73_5	@ bb5
.LBB73_3:	@ bb1
	ldr r3, [r5, #+16]
	cmp r3, r1
	bne .LBB73_2	@ bb4
.LBB73_4:	@ bb2
	ldr r1, [r4, #+16]
	ldr r0, .LCPI73_1
	emit_nops_till_bundle_end
	bl error
	ldr r0, [r5, #+16]
	ldr r1, .LCPI73_2
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB73_6	@ bb6
.LBB73_5:	@ bb5
	ldr r5, .LCPI73_3
	ldr r2, [r5]
	mov r6, #0
	mov r0, #0
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r5]
	@comment
str r6, [r4, #+28]
.LBB73_6:	@ bb6
	mov r0, r4
	emit_nops_till_bundle_end
	bl lookup_label
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB73_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI73_0:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI73_1:
 	.long	.str163646

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI73_2:
 	.long	.str164647

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI73_3:
 	.long	shadowed_labels

	.size shadow_label, .-shadow_label


	.globl	define_label
	.align	4
define_label:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl lookup_label
	mov r1, r0
	cmp r0, #0
	ldrne r3, .LCPI74_0
	ldrne r3, [r3]
	ldrne r2, [r1, #+36]
	cmpne r2, r3
	bne .LBB74_2	@ bb1
	b .LBB74_3	@ bb2
.LBB74_1:	@ bb
.LBB74_2:	@ bb1
	ldr r7, .LCPI74_1
	ldr r2, [r7]
	mov r8, #0
	mov r0, #0
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r7]
	@comment
str r8, [r4, #+28]
	mov r0, r4
	emit_nops_till_bundle_end
	bl lookup_label
	mov r1, r0
.LBB74_3:	@ bb2
	ldr r3, [r1, #+48]
	cmp r3, #0
	bne .LBB74_6	@ bb3
.LBB74_4:	@ bb4
	ldr r3, .LCPI74_3
	ldr r3, [r3]
	@comment
str r3, [r1, #+48]
	@comment
str r6, [r1, #+12]
	@comment
str r5, [r1, #+16]
	mov r0, r1
.LBB74_5:	@ bb4
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB74_6:	@ bb3
	ldr r1, [r4, #+16]
	ldr r0, .LCPI74_2
	emit_nops_till_bundle_end
	bl error
	mov r0, #0
	b .LBB74_5	@ bb4
	.align	4
.LBB74_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI74_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI74_1:
 	.long	shadowed_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI74_2:
 	.long	.str160643

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI74_3:
 	.long	error_mark_node

	.size define_label, .-define_label


	.globl	pop_label_level
	.align	4
pop_label_level:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	ldr r3, .LCPI75_0
	ldr r4, [r3]
	mov r5, #0
	ldr r6, .LCPI75_1
	mov r7, #0
	b .LBB75_16	@ bb17.outer
.LBB75_1:	@ bb
	ldr r0, [r6, #+16]
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 10 @ 8388608
	beq .LBB75_15	@ bb16
.LBB75_2:	@ bb4
	ldr r2, [r0, #+16]
	cmp r2, #0
	bne .LBB75_9	@ bb6
.LBB75_3:	@ bb5
	ldr r1, .LCPI75_2
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, [r6, #+16]
	ldr r8, [r3, #+32]
	ldr r3, .LCPI75_3
	ldr r9, [r3]
	ldr r3, .LCPI75_4
	ldr r10, [r3]
	mov r0, r8
	emit_nops_till_bundle_end
	bl lookup_label
	mov r1, r0
	cmp r0, #0
	ldrne r3, .LCPI75_5
	ldrne r3, [r3]
	ldrne r2, [r1, #+36]
	cmpne r2, r3
	bne .LBB75_5	@ bb1.i
	b .LBB75_6	@ bb2.i
.LBB75_4:	@ bb.i
.LBB75_5:	@ bb1.i
	ldr r11, .LCPI75_6
	ldr r2, [r11]
	mov r0, r7
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11]
	@comment
str r7, [r8, #+28]
	mov r0, r8
	emit_nops_till_bundle_end
	bl lookup_label
	mov r1, r0
.LBB75_6:	@ bb2.i
	ldr r3, [r1, #+48]
	cmp r3, #0
	beq .LBB75_8	@ bb4.i
.LBB75_7:	@ bb3.i
	ldr r1, [r8, #+16]
	ldr r0, .LCPI75_7
	emit_nops_till_bundle_end
	bl error
	b .LBB75_12	@ bb13
.LBB75_8:	@ bb4.i
	ldr r3, .LCPI75_8
	ldr r3, [r3]
	@comment
str r3, [r1, #+48]
	@comment
str r9, [r1, #+12]
	@comment
str r10, [r1, #+16]
	b .LBB75_12	@ bb13
.LBB75_9:	@ bb6
	ldr r2, .LCPI75_9
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB75_12	@ bb13
.LBB75_10:	@ bb7
	tst r3, #1, 16 @ 65536
	ldreq r1, .LCPI75_10
	emit_nops_till_bundle_end
	bleq warning_with_decl
.LBB75_11:	@ bb12
.LBB75_12:	@ bb13
	ldr r3, [r6, #+16]
	ldr r3, [r3, #+32]
	@comment
str r7, [r3, #+28]
	ldr r6, [r6]
	cmp r5, #0
	@comment
strne r6, [r5]
	ldreq r3, .LCPI75_1
	@comment
streq r6, [r3]
	b .LBB75_17	@ bb17
.LBB75_13:	@ bb14
.LBB75_14:	@ bb15
.LBB75_15:	@ bb16
	mov r5, r6
.LBB75_16:	@ bb17.outer
	ldr r6, [r6]
.LBB75_17:	@ bb17
	cmp r6, #0
	bne .LBB75_1	@ bb
.LBB75_18:	@ bb22.loopexit
	ldr r3, .LCPI75_6
	b .LBB75_21	@ bb21
.LBB75_19:	@ bb19
	ldr r2, [r3, #+16]
	ldr r1, [r2, #+32]
	cmp r1, #0
	@comment
strne r2, [r1, #+28]
.LBB75_20:	@ bb20
.LBB75_21:	@ bb21
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB75_19	@ bb19
.LBB75_22:	@ bb23
	ldr r5, .LCPI75_1
	ldr r0, [r5]
	ldr r1, [r4]
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r5]
	ldr r3, [r4, #+8]
	ldr r2, .LCPI75_6
	@comment
str r3, [r2]
	ldr r3, .LCPI75_0
	ldr r2, [r3]
	ldr r2, [r2, #+20]
	@comment
str r2, [r3]
	ldr r3, .LCPI75_11
	ldr r2, [r3]
	@comment
str r2, [r4, #+20]
	@comment
str r4, [r3]
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
	.align	4
.LBB75_23:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_0:
 	.long	label_level_chain

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_1:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_2:
 	.long	.str161644

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_3:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_4:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_5:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_6:
 	.long	shadowed_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_7:
 	.long	.str160643

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_8:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_9:
 	.long	warn_unused

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_10:
 	.long	.str162645

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI75_11:
 	.long	free_binding_level

	.size pop_label_level, .-pop_label_level


	.globl	pushdecl
	.align	4
pushdecl:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #28
	ldr r3, .LCPI76_62
	ldr r3, [r3]
	ldr r2, .LCPI76_63
	ldr r2, [r2]
	@comment
str r2, [sp, #+16]
	ldr r4, [r0, #+32]
	@comment
str r3, [r0, #+36]
	ldrb r3, [r0, #+8]
	mov r5, r0
	cmp r3, #29
	ldreq r3, [r5, #+48]
	cmpeq r3, #0
	beq .LBB76_2	@ bb1
	b .LBB76_4	@ bb6
.LBB76_1:	@ bb
.LBB76_2:	@ bb1
	ldrb r3, [r5, #+29]
	tst r3, #1
	movne r3, #0
	@comment
strne r3, [r5, #+36]
.LBB76_3:	@ bb5
.LBB76_4:	@ bb6
	ldr r3, .LCPI76_64
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r5, #+29]
	movne r2, r5
	ldrneb r1, [r2, #+28]!
	orrne r3, r1, r3, lsl #8
	ldrneb r1, [r2, #+3]
	ldrneb r2, [r2, #+2]
	orrne r2, r2, r1, lsl #8
	orrne r3, r3, r2, lsl #16
	tstne r3, #1, 24 @ 256
	bne .LBB76_6	@ bb12
	b .LBB76_10	@ bb20
.LBB76_5:	@ bb7
.LBB76_6:	@ bb12
	ldr r2, .LCPI76_65
	ldr r2, [r2]
	ldr r1, [sp, #+16]
	cmp r1, r2
	ldrne r2, [r4, #+32]
	cmpne r2, r5
	bne .LBB76_8	@ bb14
	b .LBB76_10	@ bb20
.LBB76_7:	@ bb13
.LBB76_8:	@ bb14
	tst r3, #1, 16 @ 65536
	ldreq r1, [r4, #+16]
	ldreq r0, .LCPI76_66
	emit_nops_till_bundle_end
	bleq warning
.LBB76_9:	@ bb19
.LBB76_10:	@ bb20
	cmp r4, #0
	beq .LBB76_440	@ bb308
.LBB76_11:	@ bb21
	ldrb r3, [r5, #+29]
	tst r3, #1
	ldrneb r3, [r5, #+10]
	tstne r3, #8
	bne .LBB76_13	@ bb31
	b .LBB76_20	@ bb33
.LBB76_12:	@ bb26
.LBB76_13:	@ bb31
	ldr r3, .LCPI76_67
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB76_20	@ bb33
.LBB76_14:	@ bb32
	ldr r3, .LCPI76_65
	ldr r3, [r3]
	ldr r2, .LCPI76_63
	ldr r6, [r2]
	cmp r6, r3
	ldrne r3, [r4, #+24]
	cmpne r3, #0
	bne .LBB76_16	@ bb5.i
	b .LBB76_19	@ bb.i
.LBB76_15:	@ bb1.i
.LBB76_16:	@ bb5.i
	ldr r6, [r6]
	cmp r6, #0
	beq .LBB76_19	@ bb.i
.LBB76_17:	@ bb3.i
	ldr r3, [r6, #+32]
	cmp r3, r4
	bne .LBB76_16	@ bb5.i
.LBB76_18:	@ bb6.i
	cmp r6, #0
	ldreq r6, [r4, #+20]
	b .LBB76_25	@ bb34
.LBB76_19:	@ bb.i
	ldr r6, [r4, #+20]
	b .LBB76_25	@ bb34
.LBB76_20:	@ bb33
	ldr r6, .LCPI76_65
	ldr r3, [r6]
	ldr r6, .LCPI76_63
	ldr r6, [r6]
	cmp r6, r3
	beq .LBB76_19	@ bb.i
.LBB76_21:	@ bb1.i326
	ldr r3, [r4, #+24]
	cmp r3, #0
	bne .LBB76_24	@ bb6.i331
.LBB76_22:	@ bb1.i326.bb34_crit_edge
	mov r6, #0
	b .LBB76_25	@ bb34
.LBB76_23:	@ bb4.i328
.LBB76_24:	@ bb6.i331
	ldr r6, [r6]
	cmp r6, #0
	ldrne r3, [r6, #+32]
	cmpne r3, r4
	bne .LBB76_24	@ bb6.i331
.LBB76_25:	@ bb34
	cmp r6, #0
	beq .LBB76_29	@ bb39
.LBB76_26:	@ bb35
	ldr r3, .LCPI76_68
	ldr r3, [r3]
	cmp r6, r3
	beq .LBB76_444	@ bb37.thread
.LBB76_27:	@ bb37
	cmp r6, #0
	ldrne r3, [r6, #+16]
	@comment
strne r3, [sp, #+12]
	ldrne r3, [r6, #+12]
	@comment
strne r3, [sp, #+8]
.LBB76_28:	@ bb38
.LBB76_29:	@ bb39
	ldrb r3, [r5, #+10]
	tst r3, #8
	ldreqb r3, [r5, #+29]
	tsteq r3, #1
	beq .LBB76_31	@ bb50
	b .LBB76_445	@ bb39.bb51_crit_edge
.LBB76_30:	@ bb44
.LBB76_31:	@ bb50
	mov r3, #0
	@comment
str r3, [sp]
.LBB76_32:	@ bb51
	cmp r6, #0
	beq .LBB76_330	@ bb82
.LBB76_33:	@ bb52
	ldr r0, [r5, #+4]
	ldr r1, [r6, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	ldrb r3, [r5, #+8]
	@comment
str r0, [sp, #+20]
	cmp r3, #29
	bne .LBB76_35	@ bb5.i321
.LBB76_34:	@ bb.i320
	ldr r2, [r5, #+48]
	cmp r2, #0
	bne .LBB76_447	@ bb.i320.bb6.i322_crit_edge
.LBB76_35:	@ bb5.i321
	mov r2, #0
	@comment
str r2, [sp, #+4]
.LBB76_36:	@ bb6.i322
	ldr r2, .LCPI76_69
	ldr r2, [r2]
	ldrb r1, [r6, #+8]
	ldr r2, [r2, +r1, lsl #2]
	ldrb r2, [r2]
	ldr r1, [r5, #+4]
	@comment
str r1, [sp, #+24]
	ldr r7, [r6, #+4]
	cmp r2, #100
	ldreq r2, [r6, #+64]
	@comment
streq r2, [r5, #+64]
.LBB76_37:	@ bb7.i323
.LBB76_38:	@ bb8.i
	ldr r2, [sp, #+24]
	ldrb r2, [r2, #+8]
	cmp r2, #0
	ldrneb r2, [r7, #+8]
	cmpne r2, #0
	bne .LBB76_41	@ bb11.i
.LBB76_39:	@ bb9.i324
.LBB76_40:	@ bb10.i
	mov r2, #0
	@comment
str r2, [sp, #+20]
.LBB76_41:	@ bb11.i
	and r2, r3, #255
	ldrb r1, [r6, #+8]
	cmp r1, r2
	beq .LBB76_55	@ bb50.i
.LBB76_42:	@ bb12.i
	and r3, r1, #255
	cmp r3, #29
	bne .LBB76_54	@ bb48.i
.LBB76_43:	@ bb13.i
	ldrb r3, [r6, #+29]
	mov r7, #1, 20 @ 4096
	and r7, r7, r3, lsl #8
	tst r3, #16
	ldreqb r3, [r6, #+9]
	tsteq r3, #64
	beq .LBB76_54	@ bb48.i
.LBB76_44:	@ bb17.i
.LBB76_45:	@ bb22.i
	ldrb r3, [r5, #+10]
	tst r3, #8
	bne .LBB76_51	@ bb35.i
.LBB76_46:	@ bb27.i
	ldr r3, .LCPI76_70
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB76_330	@ bb82
.LBB76_47:	@ bb28.i
	cmp r7, #0
	beq .LBB76_50	@ bb34.i
.LBB76_48:	@ bb33.i
	ldr r1, .LCPI76_71
.LBB76_49:	@ bb33.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	b .LBB76_330	@ bb82
.LBB76_50:	@ bb34.i
	ldr r1, .LCPI76_72
	b .LBB76_49	@ bb33.i
.LBB76_51:	@ bb35.i
	cmp r7, #0
	ldrne r1, .LCPI76_73
	ldreq r1, .LCPI76_74
	b .LBB76_49	@ bb33.i
.LBB76_52:	@ bb40.i
.LBB76_53:	@ bb41.i
.LBB76_54:	@ bb48.i
	ldr r1, .LCPI76_75
	mov r0, r5
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r1, .LCPI76_76
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB76_330	@ bb82
.LBB76_55:	@ bb50.i
	mov r2, #1
	mov r1, #0
	ldr r0, [sp, #+20]
	cmp r0, #0
	movne r1, r2
	and r3, r3, #255
	cmp r3, #34
	teqeq r1, #1
	beq .LBB76_57	@ bb52.i
	b .LBB76_59	@ bb63.i
.LBB76_56:	@ bb50.i
.LBB76_57:	@ bb52.i
	ldrb r3, [r6, #+9]
	tst r3, #128
	beq .LBB76_59	@ bb63.i
.LBB76_58:	@ bb57.i
	ldrb r3, [r5, #+9]
	tst r3, #128
	beq .LBB76_314	@ bb53
.LBB76_59:	@ bb63.i
	ldr r3, .LCPI76_67
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB76_63	@ bb67.i
.LBB76_60:	@ bb64.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	ldreq r3, [r5, #+32]
	ldreq r3, [r3, #+32]
	cmpeq r3, r6
	beq .LBB76_62	@ bb66.i
	b .LBB76_63	@ bb67.i
.LBB76_61:	@ bb65.i
.LBB76_62:	@ bb66.i
	ldr r3, [r6, #+48]
	cmp r3, #0
	beq .LBB76_87	@ bb298.i
.LBB76_63:	@ bb67.i
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB76_95	@ bb124.i
.LBB76_64:	@ bb68.i
	ldrb r2, [r6, #+29]
	tst r2, #16
	beq .LBB76_82	@ bb98.i
.LBB76_65:	@ bb73.i
	ldrb r3, [r5, #+10]
	tst r3, #8
	beq .LBB76_479	@ bb78.i
.LBB76_66:	@ bb81.i
	ldr r3, [sp, #+20]
	cmp r3, #0
	bne .LBB76_80	@ bb96.i
.LBB76_67:	@ bb82.i
	ldr r3, [sp, #+24]
	ldr r2, [r3, #+80]
	ldr r0, [r7, #+80]
	ldr r1, [r6, #+4]
	ldr r8, [r1, #+4]
	ldr r9, [r3, #+4]
	cmp r0, r2
	beq .LBB76_449	@ bb83.i
.LBB76_68:	@ bb84.i
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	emit_nops_till_bundle_end
	bl end_temporary_allocation
.LBB76_69:	@ bb85.i
	ldrb r3, [r9, #+29]
	ldrb r2, [r8, #+29]
	cmp r2, r3
	bne .LBB76_72	@ bb88.i
.LBB76_70:	@ bb86.i
	ldr r3, [r6, #+4]
	ldr r1, [r3, #+12]
	mov r0, r9
	emit_nops_till_bundle_end
	bl build_function_type
	mov r8, r0
	ldr r0, [r5, #+4]
	mov r1, r8
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	@comment
strne r8, [r6, #+4]
.LBB76_71:	@ bb86.i.bb88.i_crit_edge
	@comment
str r0, [sp, #+20]
.LBB76_72:	@ bb88.i
	ldr r3, [r5, #+4]
	ldr r3, [r3, #+12]
	cmp r3, #0
	ldrne r2, [r6, #+4]
	ldrne r2, [r2, #+12]
	cmpne r2, #0
	bne .LBB76_74	@ bb90.i
	b .LBB76_79	@ bb95.i
.LBB76_73:	@ bb89.i
.LBB76_74:	@ bb90.i
	ldr r1, [r3, #+16]
	cmp r1, #0
	ldrne r3, [r2, #+16]
	cmpne r3, #0
	bne .LBB76_76	@ bb92.i
	b .LBB76_79	@ bb95.i
.LBB76_75:	@ bb91.i
.LBB76_76:	@ bb92.i
	ldrb r3, [r3, #+29]
	ldrb r0, [r1, #+29]
	cmp r0, r3
	bne .LBB76_79	@ bb95.i
.LBB76_77:	@ bb93.i
	ldr r2, [r2]
	mov r0, #0
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r3, [r6, #+4]
	ldr r0, [r3, #+4]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r8, r0
	ldr r0, [r5, #+4]
	mov r1, r8
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	@comment
strne r8, [r6, #+4]
.LBB76_78:	@ bb93.i.bb95.i_crit_edge
	@comment
str r0, [sp, #+20]
.LBB76_79:	@ bb95.i
	emit_nops_till_bundle_end
	bl pop_obstacks
.LBB76_80:	@ bb96.i
	ldr r3, [sp, #+20]
	cmp r3, #0
	bne .LBB76_87	@ bb298.i
.LBB76_81:	@ bb97.i
	ldr r1, .LCPI76_77
	b .LBB76_49	@ bb33.i
.LBB76_82:	@ bb98.i
	and r2, r3, #255
	cmp r2, #29
	ldreq r2, [r6, #+16]
	cmpeq r2, #0
	beq .LBB76_84	@ bb100.i
	b .LBB76_95	@ bb124.i
.LBB76_83:	@ bb99.i
.LBB76_84:	@ bb100.i
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 14 @ 524288
	beq .LBB76_330	@ bb82
.LBB76_85:	@ bb106.i
	ldr r2, [sp, #+20]
	cmp r2, #0
	bne .LBB76_87	@ bb298.i
.LBB76_86:	@ bb107.i
	mov r2, r3, lsr #24
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r1, [r1, #+1]
	strb r2, [r5, #+11]
	mov r2, r3, lsr #16
	strb r2, [r5, #+10]
	mov r2, #1, 20 @ 4096
	and r2, r2, r1, lsl #8
	orr r2, r2, r3
	mov r2, r2, lsr #8
	strb r2, [r5, #+9]
	strb r3, [r5, #+8]
.LBB76_87:	@ bb298.i
	ldr r3, .LCPI76_78
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, [r6, #+16]
	cmpne r3, #0
	bne .LBB76_89	@ bb300.i
	b .LBB76_237	@ bb297.i.bb314.i_crit_edge
.LBB76_88:	@ bb299.i
.LBB76_89:	@ bb300.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	bne .LBB76_92	@ bb303.i
.LBB76_90:	@ bb301.i
	ldr r3, [r5, #+48]
	cmp r3, #0
	beq .LBB76_92	@ bb303.i
.LBB76_91:	@ bb302.i
	ldr r3, [r6, #+48]
	cmp r3, #0
	beq .LBB76_237	@ bb297.i.bb314.i_crit_edge
.LBB76_92:	@ bb303.i
	ldrb r3, [r6, #+29]
	tst r3, #1
	beq .LBB76_94	@ bb313.i
.LBB76_93:	@ bb308.i
	ldrb r3, [r5, #+29]
	tst r3, #1
	beq .LBB76_237	@ bb297.i.bb314.i_crit_edge
.LBB76_94:	@ bb313.i
	ldr r1, .LCPI76_79
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	ldr r1, .LCPI76_76
	mov r0, r6
	emit_nops_till_bundle_end
	bl warning_with_decl
	b .LBB76_237	@ bb297.i.bb314.i_crit_edge
.LBB76_95:	@ bb124.i
	ldr r2, [sp, #+20]
	cmp r2, #0
	bne .LBB76_146	@ bb179.i
.LBB76_96:	@ bb125.i
	and r3, r3, #255
	cmp r3, #29
	ldreqb r3, [r5, #+8]
	cmpeq r3, #29
	beq .LBB76_98	@ bb127.i
	b .LBB76_115	@ bb152.i
.LBB76_97:	@ bb126.i
.LBB76_98:	@ bb127.i
	ldr r3, [r7, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #13
	ldreq r3, [sp, #+24]
	ldreq r3, [r3, #+4]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #13
	beq .LBB76_100	@ bb129.i
	b .LBB76_115	@ bb152.i
.LBB76_99:	@ bb128.i
.LBB76_100:	@ bb129.i
	ldrb r2, [r6, #+30]
	tst r2, #1
	ldreqb r2, [r5, #+30]
	tsteq r2, #1
	beq .LBB76_115	@ bb152.i
.LBB76_101:	@ bb134.i
.LBB76_102:	@ bb139.i
	ldr r2, .LCPI76_80
	ldr r2, [r2]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+64]
	cmp r3, r2
	ldreq r3, [r7, #+12]
	cmpeq r3, #0
	beq .LBB76_104	@ bb141.i
	b .LBB76_106	@ bb143.i
.LBB76_103:	@ bb140.i
.LBB76_104:	@ bb141.i
	ldr r3, [sp, #+24]
	ldr r0, [r3, #+12]
	emit_nops_till_bundle_end
	bl self_promoting_args_p
	cmp r0, #0
	beq .LBB76_106	@ bb143.i
.LBB76_105:	@ bb142.i
	ldr r3, .LCPI76_81
	ldr r3, [r3]
	ldr r2, [r7, #+4]
	ldr r2, [r2, #+4]
	cmp r2, r3
	beq .LBB76_110	@ bb147.i
.LBB76_106:	@ bb143.i
	ldr r3, .LCPI76_81
	ldr r3, [r3]
	ldr r2, [sp, #+24]
	ldr r2, [r2, #+4]
	ldr r2, [r2, #+4]
	cmp r2, r3
	ldreq r3, [sp, #+24]
	ldreq r3, [r3, #+12]
	cmpeq r3, #0
	beq .LBB76_108	@ bb145.i
	b .LBB76_115	@ bb152.i
.LBB76_107:	@ bb144.i
.LBB76_108:	@ bb145.i
	ldr r0, [r7, #+12]
	emit_nops_till_bundle_end
	bl self_promoting_args_p
	cmp r0, #0
	beq .LBB76_115	@ bb152.i
.LBB76_109:	@ bb146.i
	ldr r3, .LCPI76_80
	ldr r3, [r3]
	ldr r2, [r7, #+4]
	ldr r2, [r2, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	bne .LBB76_115	@ bb152.i
.LBB76_110:	@ bb147.i
	ldr r3, .LCPI76_82
	ldr r3, [r3]
	cmp r3, #0
	ldrne r1, .LCPI76_83
	movne r0, r5
	emit_nops_till_bundle_end
	blne pedwarn_with_decl
.LBB76_111:	@ bb148.i
.LBB76_112:	@ bb149.i
	ldr r3, .LCPI76_80
	ldr r3, [r3]
	ldr r2, [r7, #+4]
	ldr r2, [r2, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	@comment
streq r7, [r5, #+4]
	@comment
streq r7, [sp, #+24]
.LBB76_113:	@ bb150.i
.LBB76_114:	@ bb151.i
	ldrb r3, [r5, #+30]
	ldrb r2, [r5, #+31]
	mov r1, r5
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 16 @ 65536
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	b .LBB76_87	@ bb298.i
.LBB76_115:	@ bb152.i
	ldr r3, [sp, #+20]
	cmp r3, #0
	bne .LBB76_146	@ bb179.i
.LBB76_116:	@ bb153.i
	ldrb r3, [r6, #+8]
	cmp r3, #29
	ldreq r3, .LCPI76_82
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB76_120	@ bb155.i
	b .LBB76_122	@ bb157.i
	.align	4
.LBB76_117:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_62:
 	.long	current_function_decl

.LBB76_118:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_63:
 	.long	current_binding_level

.LBB76_119:	@ bb154.i
	.align	4
.LBB76_120:	@ bb155.i
	ldr r0, [r7, #+4]
	ldr r3, [sp, #+24]
	ldr r1, [r3, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB76_122	@ bb157.i
.LBB76_121:	@ bb156.i
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+12]
	cmp r3, #0
	beq .LBB76_146	@ bb179.i
.LBB76_122:	@ bb157.i
	ldr r1, .LCPI76_83
	mov r0, r5
	emit_nops_till_bundle_end
	bl error_with_decl
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB76_145	@ bb178.i
.LBB76_123:	@ bb158.i
	ldr r0, [r7, #+4]
	ldr r3, [sp, #+24]
	ldr r1, [r3, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB76_145	@ bb178.i
.LBB76_124:	@ bb159.i
	ldr r3, [r7, #+12]
	cmp r3, #0
	ldreq r2, [r6, #+48]
	cmpeq r2, #0
	beq .LBB76_129	@ bb163.i
.LBB76_125:	@ bb160.i
.LBB76_126:	@ bb161.i
	ldr r2, [sp, #+24]
	ldr r2, [r2, #+12]
	cmp r2, #0
	ldreq r2, [r5, #+48]
	cmpeq r2, #0
	beq .LBB76_129	@ bb163.i
	b .LBB76_145	@ bb178.i
	.align	4
.LBB76_127:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_64:
 	.long	warn_nested_externs

.LBB76_128:	@ bb162.i
	.align	4
.LBB76_129:	@ bb163.i
	cmp r3, #0
	ldreq r3, [sp, #+24]
	ldreq r3, [r3, #+12]
.LBB76_130:	@ bb164.i
.LBB76_131:	@ bb177.preheader.i
	ldr r2, .LCPI76_84
	ldr r2, [r2]
	ldr r1, .LCPI76_85
	ldr r1, [r1]
	ldr r0, .LCPI76_86
	ldr r0, [r0]
	ldr r12, .LCPI76_87
	ldr r12, [r12]
	ldr lr, .LCPI76_81
	ldr lr, [lr]
	ldr r8, .LCPI76_88
	ldr r8, [r8]
	ldr r9, .LCPI76_80
	ldr r9, [r9]
	b .LBB76_144	@ bb177.i
	.align	4
.LBB76_132:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_65:
 	.long	global_binding_level

.LBB76_133:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_66:
 	.long	.str190673

	.align	4
.LBB76_134:	@ bb165.i
	ldr r3, [r10]
	ldr r10, [r10, #+16]
	cmp r3, #0
	bne .LBB76_136	@ bb168.i
.LBB76_135:	@ bb166.i
	ldr r11, [r10, #+64]
	cmp r11, r9
	bne .LBB76_452	@ bb167.i
.LBB76_136:	@ bb168.i
	ldr r11, [r10, #+64]
	cmp r11, r8
	beq .LBB76_453	@ bb175.i
.LBB76_137:	@ bb169.i
	ldrb r10, [r10, #+8]
	cmp r10, #7
	bne .LBB76_144	@ bb177.i
.LBB76_138:	@ bb170.i
	cmp r11, r1
	beq .LBB76_453	@ bb175.i
.LBB76_139:	@ bb170.i
	cmp r11, r2
	cmpne r11, r0
	bne .LBB76_142	@ bb170.i
	b .LBB76_453	@ bb175.i
	.align	4
.LBB76_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_67:
 	.long	flag_traditional

.LBB76_141:	@ bb170.i
	.align	4
.LBB76_142:	@ bb170.i
	cmp r11, r12
	cmpne r11, lr
	bne .LBB76_144	@ bb177.i
	b .LBB76_453	@ bb175.i
.LBB76_143:	@ bb170.i
.LBB76_144:	@ bb177.i
	mov r10, r3
	cmp r10, #0
	bne .LBB76_134	@ bb165.i
.LBB76_145:	@ bb178.i
	ldr r1, .LCPI76_76
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB76_87	@ bb298.i
.LBB76_146:	@ bb179.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	beq .LBB76_154	@ bb18.i.i
.LBB76_147:	@ bb179.i
	and r3, r3, #255
	cmp r3, #32
	bne .LBB76_161	@ bb42.i.i
.LBB76_148:	@ bb.i.i
	ldr r3, .LCPI76_67
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB76_152	@ bb6.i.i
.LBB76_149:	@ bb1.i.i
	ldr r2, [r6, #+4]
	ldr r1, [r5, #+4]
	cmp r1, r2
	beq .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
.LBB76_150:	@ bb3.i.i
	cmp r3, #0
	beq .LBB76_152	@ bb6.i.i
.LBB76_151:	@ bb4.i.i
	ldr r8, [r2, #+64]
	cmp r8, r1
	beq .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
.LBB76_152:	@ bb6.i.i
	ldrb r8, [r6, #+30]
	tst r8, #1
	bne .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
.LBB76_153:	@ bb10.i.i
	ldrb r3, [r5, #+30]
	ldr r2, .LCPI76_89
	mov r8, #0
	tst r3, #1
	moveq r8, r2
	b .LBB76_179	@ redeclaration_error_message.exit.i
.LBB76_154:	@ bb18.i.i
	ldr r8, [r6, #+48]
	cmp r8, #0
	ldrne r8, [r5, #+48]
	cmpne r8, #0
	bne .LBB76_157	@ bb20.i.i
	b .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
	.align	4
.LBB76_155:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_68:
 	.long	error_mark_node

.LBB76_156:	@ bb19.i.i
	.align	4
.LBB76_157:	@ bb20.i.i
	ldrb r8, [r6, #+29]
	mov r3, r6
	ldrb r2, [r3, #+28]!
	orr r8, r2, r8, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r2, lsl #8
	orr r8, r8, r3, lsl #16
	tst r8, #2, 22 @ 2048
	tstne r8, #1, 24 @ 256
	bne .LBB76_159	@ bb30.i.i
	b .LBB76_462	@ bb20.i.i.bb180.i_crit_edge
.LBB76_158:	@ bb25.i.i
.LBB76_159:	@ bb30.i.i
	ldrb r8, [r5, #+29]
	mov r3, r5
	ldrb r2, [r3, #+28]!
	orr r8, r2, r8, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r2, lsl #8
	orr r3, r8, r3, lsl #16
	tst r3, #2, 22 @ 2048
	beq .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
.LBB76_160:	@ bb35.i.i
	mov r2, #0
	ldr r8, .LCPI76_89
	tst r3, #1, 24 @ 256
	moveq r8, r2
	b .LBB76_179	@ redeclaration_error_message.exit.i
.LBB76_161:	@ bb42.i.i
	ldr r8, .LCPI76_65
	ldr r8, [r8]
	ldr r3, .LCPI76_63
	ldr r3, [r3]
	cmp r3, r8
	bne .LBB76_168	@ bb68.i.i
.LBB76_162:	@ bb43.i.i
	ldrb r3, [r5, #+29]
	tst r3, #1
	ldreqb r3, [r6, #+29]
	tsteq r3, #1
	beq .LBB76_165	@ bb54.i.i
	b .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
	.align	4
.LBB76_163:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_69:
 	.long	tree_code_type

.LBB76_164:	@ bb48.i.i
	.align	4
.LBB76_165:	@ bb54.i.i
	ldr r3, [r6, #+48]
	cmp r3, #0
	ldrne r3, [r5, #+48]
	cmpne r3, #0
	bne .LBB76_462	@ bb20.i.i.bb180.i_crit_edge
.LBB76_166:	@ bb55.i.i
.LBB76_167:	@ bb57.i.i
	mov r3, r6
	ldrb r8, [r3, #+8]!
	ldrb r3, [r3, #+2]
	mov r8, r5
	ldrb r2, [r8, #+8]!
	ldrb r8, [r8, #+2]
	eor r3, r8, r3
	mov r2, #2, 14 @ 524288
	mov r1, #0
	ldr r8, .LCPI76_90
	tst r2, r3, lsl #16
	moveq r8, r1
	b .LBB76_179	@ redeclaration_error_message.exit.i
.LBB76_168:	@ bb68.i.i
	ldrb r8, [r3, #+24]
	cmp r8, #0
	ldrneb r8, [r6, #+9]
	tstne r8, #128
	bne .LBB76_175	@ bb74.i.i
	b .LBB76_176	@ bb80.i.i
	.align	4
.LBB76_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_70:
 	.long	warn_shadow

.LBB76_170:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_71:
 	.long	.str165648

.LBB76_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_72:
 	.long	.str166649

.LBB76_172:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_73:
 	.long	.str168651

.LBB76_173:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_74:
 	.long	.str167650

.LBB76_174:	@ bb69.i.i
	.align	4
.LBB76_175:	@ bb74.i.i
	ldrb r8, [r5, #+9]
	tst r8, #128
	beq .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
.LBB76_176:	@ bb80.i.i
	ldrb r8, [r5, #+29]
	tst r8, #1
	ldrneb r8, [r6, #+29]
	tstne r8, #1
	bne .LBB76_455	@ bb1.i.i.bb185.i_crit_edge
.LBB76_177:	@ bb85.i.i
.LBB76_178:	@ bb90.i.i
	ldr r3, [r6, #+36]
	ldr r2, [r5, #+36]
	ldr r1, .LCPI76_91
	mov r8, #0
	cmp r2, r3
	moveq r8, r1
.LBB76_179:	@ redeclaration_error_message.exit.i
	cmp r8, #0
	beq .LBB76_456	@ bb185.i
.LBB76_180:	@ bb180.i
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, [r6, #+48]
	cmp r3, #0
	beq .LBB76_182	@ bb183.i
.LBB76_181:	@ bb181.i
	ldr r3, .LCPI76_65
	ldr r3, [r3]
	ldr r2, .LCPI76_63
	ldr r2, [r2]
	cmp r2, r3
	beq .LBB76_463	@ bb181.i.bb184.i_crit_edge
.LBB76_182:	@ bb183.i
	ldr r1, .LCPI76_92
.LBB76_183:	@ bb184.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB76_236	@ bb297.i
	.align	4
.LBB76_184:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_75:
 	.long	.str169652

.LBB76_185:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_76:
 	.long	.str170653

	.align	4
.LBB76_186:	@ bb199.i
	ldr r1, .LCPI76_92
.LBB76_187:	@ bb200.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl warning_with_decl
	b .LBB76_236	@ bb297.i
.LBB76_188:	@ bb201.i
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB76_212	@ bb238.i
.LBB76_189:	@ bb202.i
	ldr r2, [r6, #+48]
	cmp r2, #0
	beq .LBB76_206	@ bb221.i
.LBB76_190:	@ bb203.i
	ldr r2, [r7, #+12]
	cmp r2, #0
	bne .LBB76_206	@ bb221.i
.LBB76_191:	@ bb204.i
	ldr r9, [sp, #+24]
	ldr r2, [r9, #+12]!
	cmp r2, #0
	movne r10, r7
	ldrne r2, [r10, #+72]!
	cmpne r2, #0
	bne .LBB76_193	@ bb206.i
	b .LBB76_206	@ bb221.i
.LBB76_192:	@ bb205.i
.LBB76_193:	@ bb206.i
	mov r11, #0
	b .LBB76_201	@ bb216.i
.LBB76_194:	@ bb207.i
	cmp r2, r3
	beq .LBB76_464	@ bb207.i.bb219.i_crit_edge
.LBB76_195:	@ bb208.i
	ldr r1, [r9, #+16]
	ldr r2, [r1, #+64]
	cmp r2, r3
	beq .LBB76_464	@ bb207.i.bb219.i_crit_edge
.LBB76_196:	@ bb210.i
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB76_200	@ bb215.i
.LBB76_197:	@ bb211.i
	ldr r3, .LCPI76_67
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB76_465	@ bb211.i.bb219.i_crit_edge
.LBB76_198:	@ bb212.i
	ldr r3, .LCPI76_93
	ldr r3, [r3]
	ldr r2, [r10, #+16]
	ldr r2, [r2, #+64]
	cmp r2, r3
	ldreq r3, .LCPI76_94
	ldreq r3, [r3]
	ldreq r2, [r9, #+16]
	ldreq r2, [r2, #+64]
	cmpeq r2, r3
	beq .LBB76_200	@ bb215.i
	b .LBB76_465	@ bb211.i.bb219.i_crit_edge
.LBB76_199:	@ bb213.i
.LBB76_200:	@ bb215.i
	add r11, r11, #1
.LBB76_201:	@ bb216.i
	ldr r3, .LCPI76_80
	ldr r3, [r3]
	ldr r10, [r10]
	ldr r0, [r10, #+16]
	ldr r2, [r0, #+64]
	ldr r9, [r9]
	cmp r2, r3
	bne .LBB76_195	@ bb208.i
.LBB76_202:	@ bb217.i
	ldr r1, [r9, #+16]
	ldr r1, [r1, #+64]
	cmp r1, r3
	bne .LBB76_194	@ bb207.i
.LBB76_203:	@ bb218.i
	cmp r8, #0
	beq .LBB76_205	@ bb220.i
.LBB76_204:	@ bb219.i
	add r2, r11, #1
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r1, .LCPI76_95
	b .LBB76_183	@ bb184.i
.LBB76_205:	@ bb220.i
	ldr r1, .LCPI76_96
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	ldr r1, .LCPI76_97
	b .LBB76_187	@ bb200.i
.LBB76_206:	@ bb221.i
	and r3, r3, #255
	cmp r3, #29
	ldreqb r3, [r6, #+29]
	tsteq r3, #8
	beq .LBB76_208	@ bb227.i
	b .LBB76_211	@ bb238.ithread-split
.LBB76_207:	@ bb222.i
.LBB76_208:	@ bb227.i
	ldrb r3, [r5, #+29]
	tst r3, #8
	beq .LBB76_211	@ bb238.ithread-split
.LBB76_209:	@ bb232.i
	ldrb r3, [r6, #+10]
	tst r3, #1
	ldrne r1, .LCPI76_98
	movne r0, r5
	emit_nops_till_bundle_end
	blne warning_with_decl
.LBB76_210:	@ bb237.i
.LBB76_211:	@ bb238.ithread-split
	ldrb r3, [r6, #+8]
.LBB76_212:	@ bb238.i
	and r3, r3, #255
	cmp r3, #29
	ldreqb r3, [r6, #+29]
	tsteq r3, #8
	beq .LBB76_216	@ bb244.i
	b .LBB76_219	@ bb251.i
	.align	4
.LBB76_213:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_77:
 	.long	.str171654

.LBB76_214:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_78:
 	.long	warn_redundant_decls

.LBB76_215:	@ bb239.i
	.align	4
.LBB76_216:	@ bb244.i
	ldrb r3, [r5, #+29]
	tst r3, #8
	beq .LBB76_219	@ bb251.i
.LBB76_217:	@ bb249.i
	ldr r3, [r6, #+48]
	cmp r3, #0
	ldrne r1, .LCPI76_99
	movne r0, r5
	emit_nops_till_bundle_end
	blne warning_with_decl
.LBB76_218:	@ bb250.i
.LBB76_219:	@ bb251.i
	ldr r3, .LCPI76_82
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB76_221	@ bb253.i
.LBB76_220:	@ bb252.i
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB76_225	@ bb264.i
.LBB76_221:	@ bb253.i
	ldrb r3, [r6, #+10]
	tst r3, #8
	beq .LBB76_224	@ bb264.ithread-split
.LBB76_222:	@ bb258.i
	ldrb r3, [r5, #+10]
	tst r3, #8
	ldreq r1, .LCPI76_100
	moveq r0, r5
	emit_nops_till_bundle_end
	bleq warning_with_decl
.LBB76_223:	@ bb263.i
.LBB76_224:	@ bb264.ithread-split
	ldrb r3, [r6, #+8]
.LBB76_225:	@ bb264.i
	and r3, r3, #255
	cmp r3, #29
	beq .LBB76_228	@ bb276.i
.LBB76_226:	@ bb265.i
	ldrb r3, [r6, #+9]
	tst r3, #32
	bne .LBB76_228	@ bb276.i
.LBB76_227:	@ bb270.i
	ldrb r3, [r5, #+9]
	tst r3, #32
	bne .LBB76_466	@ bb275.i
.LBB76_228:	@ bb276.i
	ldr r3, .LCPI76_82
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r6, #+8]
	cmpne r3, #29
	bne .LBB76_233	@ bb278.i
	b .LBB76_236	@ bb297.i
	.align	4
.LBB76_229:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_79:
 	.long	.str189672

.LBB76_230:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_80:
 	.long	void_type_node

.LBB76_231:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_81:
 	.long	char_type_node

.LBB76_232:	@ bb277.i
	.align	4
.LBB76_233:	@ bb278.i
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	ldrb r2, [r6, #+9]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	orr r2, r0, r2, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r1, [r1, #+2]
	orr r1, r1, r0, lsl #8
	orr r2, r2, r1, lsl #16
	eor r3, r2, r3
	tst r3, #2, 20 @ 8192
	tsteq r3, #1, 20 @ 4096
	beq .LBB76_236	@ bb297.i
.LBB76_234:	@ bb287.i
.LBB76_235:	@ bb296.i
	ldr r1, .LCPI76_101
	mov r0, r5
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
.LBB76_236:	@ bb297.i
	cmp r8, #0
	beq .LBB76_87	@ bb298.i
.LBB76_237:	@ bb297.i.bb314.i_crit_edge
	ldr r3, [sp, #+20]
.LBB76_238:	@ bb314.i
	cmp r3, #0
	beq .LBB76_290	@ bb423.i
.LBB76_239:	@ bb315.i
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+80]
	ldr r0, [r7, #+80]
	cmp r0, r3
	beq .LBB76_467	@ bb316.i
.LBB76_240:	@ bb317.i
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	emit_nops_till_bundle_end
	bl end_temporary_allocation
.LBB76_241:	@ bb318.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	bne .LBB76_243	@ bb324.i
.LBB76_242:	@ bb319.i
	ldrb r3, [r6, #+29]
	tst r3, #16
	bne .LBB76_244	@ bb325.i
.LBB76_243:	@ bb324.i
	ldr r0, [sp, #+24]
	mov r1, r7
	emit_nops_till_bundle_end
	bl common_type
	@comment
str r0, [r6, #+4]
	@comment
str r0, [r5, #+4]
.LBB76_244:	@ bb325.i
	ldr r0, [r5, #+4]
	cmp r0, r7
	beq .LBB76_252	@ bb333.i
.LBB76_245:	@ bb326.i
	ldr r3, .LCPI76_68
	ldr r3, [r3]
	cmp r0, r3
	emit_nops_till_bundle_end
	blne layout_type
.LBB76_246:	@ bb327.i
.LBB76_247:	@ bb328.i
	ldrb r3, [r5, #+8]
	sub r3, r3, #29
	and r3, r3, #255
	cmp r3, #3
	bhi .LBB76_249	@ bb332.i
.LBB76_248:	@ bb328.i
	mov r2, #1
	mov r1, #13
	tst r1, r2, lsl r3
	bne .LBB76_255	@ bb336.i
.LBB76_249:	@ bb332.i
	mov r1, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_decl
	b .LBB76_255	@ bb336.i
	.align	4
.LBB76_250:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_82:
 	.long	pedantic

.LBB76_251:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_83:
 	.long	.str172655

	.align	4
.LBB76_252:	@ bb333.i
	ldr r3, [r6, #+20]
	@comment
str r3, [r5, #+20]
	ldrb r3, [r6, #+8]
	cmp r3, #29
	beq .LBB76_255	@ bb336.i
.LBB76_253:	@ bb334.i
	ldr r3, [r5, #+72]
	ldr r2, [r6, #+72]
	cmp r2, r3
	@comment
strhi r2, [r5, #+72]
.LBB76_254:	@ bb335.i
.LBB76_255:	@ bb336.i
	ldr r3, [r6, #+68]
	@comment
str r3, [r5, #+68]
	ldrb r3, [r6, #+9]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 18 @ 16384
	tstne r3, #1, 20 @ 4096
	bne .LBB76_262	@ bb346.i
	b .LBB76_264	@ bb352.i
	.align	4
.LBB76_256:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_84:
 	.long	short_unsigned_type_node

.LBB76_257:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_85:
 	.long	short_integer_type_node

.LBB76_258:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_86:
 	.long	unsigned_char_type_node

.LBB76_259:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_87:
 	.long	signed_char_type_node

.LBB76_260:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_88:
 	.long	float_type_node

.LBB76_261:	@ bb341.i
	.align	4
.LBB76_262:	@ bb346.i
	ldrb r2, [r5, #+9]
	tst r2, #16
	biceq r3, r3, #1, 20 @ 4096
	streqb r3, [r6, #+8]
	moveq r2, r3, lsr #24
	streqb r2, [r6, #+11]
	moveq r2, r3, lsr #16
	streqb r2, [r6, #+10]
	moveq r2, r3, lsr #8
	streqb r2, [r6, #+9]
.LBB76_263:	@ bb351.i
.LBB76_264:	@ bb352.i
	ldrb r2, [r5, #+9]
	tst r2, #32
	movne r2, r3, lsr #24
	strneb r2, [r6, #+11]
	movne r2, r3, lsr #16
	strneb r2, [r6, #+10]
	orrne r2, r3, #2, 20 @ 8192
	movne r1, r2, lsr #8
	strneb r1, [r6, #+9]
	strneb r3, [r6, #+8]
	movne r3, r2
.LBB76_265:	@ bb357.i
.LBB76_266:	@ bb358.i
	ldrb r2, [r5, #+9]
	tst r2, #16
	beq .LBB76_269	@ bb365.i
.LBB76_267:	@ bb363.i
	mov r2, r3, lsr #24
	strb r2, [r6, #+11]
	mov r2, r3, lsr #16
	strb r2, [r6, #+10]
	orr r2, r3, #1, 20 @ 4096
	mov r2, r2, lsr #8
	strb r2, [r6, #+9]
	strb r3, [r6, #+8]
	ldrb r3, [r5, #+8]
	cmp r3, #33
	moveq r0, r5
	emit_nops_till_bundle_end
	bleq make_var_volatile
.LBB76_268:	@ bb364.i
.LBB76_269:	@ bb365.i
	ldr r3, [r5, #+48]
	cmp r3, #0
	bne .LBB76_271	@ bb367.i
.LBB76_270:	@ bb366.i
	ldr r3, [r6, #+48]
	cmp r3, #0
	bne .LBB76_273	@ bb369.i
.LBB76_271:	@ bb367.i
	ldr r3, [r5, #+36]
	cmp r3, #0
	beq .LBB76_276	@ bb372.i
.LBB76_272:	@ bb368.i
	ldr r3, [r6, #+36]
	cmp r3, #0
	bne .LBB76_276	@ bb372.i
.LBB76_273:	@ bb369.i
	ldr r3, [r6, #+16]
	@comment
str r3, [r5, #+16]
	ldr r3, [r6, #+12]
	@comment
str r3, [r5, #+12]
	ldr r3, [r6, #+36]
	cmp r3, #0
	bne .LBB76_276	@ bb372.i
.LBB76_274:	@ bb370.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	movne r3, #0
	@comment
strne r3, [r5, #+36]
.LBB76_275:	@ bb371.i
.LBB76_276:	@ bb372.i
	ldrb r3, [r6, #+29]
	mov r2, r6
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	ldrb r2, [r5, #+29]
	mov r1, r5
	ldrb r0, [r1, #+28]!
	orr r2, r0, r2, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r1, [r1, #+2]
	orr r1, r1, r0, lsl #8
	orr r2, r2, r1, lsl #16
	tst r3, #1, 16 @ 65536
	bne .LBB76_468	@ bb377.i
.LBB76_277:	@ bb378.i
	tst r2, #1, 16 @ 65536
	movne r2, r3, lsr #24
	strneb r2, [r6, #+31]
	movne r2, r3, lsr #8
	strneb r2, [r6, #+29]
	orrne r2, r3, #1, 16 @ 65536
	movne r2, r2, lsr #16
	strneb r2, [r6, #+30]
	strneb r3, [r6, #+28]
.LBB76_278:	@ bb383.i
.LBB76_279:	@ bb384.i
	ldr r3, [r5, #+48]
	cmp r3, #0
	ldreq r3, [r6, #+48]
	@comment
streq r3, [r5, #+48]
.LBB76_280:	@ bb385.i
.LBB76_281:	@ bb386.i
	ldr r3, [r5, #+60]
	cmp r3, #0
	ldreq r3, [r6, #+60]
	@comment
streq r3, [r5, #+60]
.LBB76_282:	@ bb387.i
.LBB76_283:	@ bb388.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	bne .LBB76_285	@ bb422.i
.LBB76_284:	@ bb389.i
	mov r3, r6
	ldrb r2, [r3, #+28]!
	ldrb r2, [r3, #+1]
	mov r2, r3
	ldrb r1, [r2, #+2]!
	ldrb r0, [r2, #+1]
	ldrb r0, [r5, #+30]
	ldrb r12, [r5, #+31]
	mov lr, r5
	ldrb r7, [lr, #+28]!
	ldrb r8, [lr, #+1]
	strb r7, [lr]
	orr r0, r0, r12, lsl #8
	orr r12, r7, r8, lsl #8
	orr r0, r12, r0, lsl #16
	mov r12, #1, 12 @ 1048576
	and r1, r12, r1, lsl #16
	orr r1, r1, r0
	mov r12, r1, lsr #16
	strb r12, [r5, #+30]
	ldrb r12, [r2, #+1]
	ldrb r3, [r3, #+1]
	bic r3, r1, #2, 12 @ 2097152
	mov r1, r3, lsr #8
	ldrb r2, [r2]
	strb r1, [lr, #+1]
	strb r3, [lr]
	mov r1, r3, lsr #24
	strb r1, [r5, #+31]
	orr r2, r0, r2, lsl #16
	and r2, r2, #2, 12 @ 2097152
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
.LBB76_285:	@ bb422.i
	emit_nops_till_bundle_end
	bl pop_obstacks
	b .LBB76_291	@ bb442.i
	.align	4
.LBB76_286:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_89:
 	.long	.str465

.LBB76_287:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_90:
 	.long	.str1466

.LBB76_288:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_91:
 	.long	.str2467

.LBB76_289:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_92:
 	.long	.str178661

	.align	4
.LBB76_290:	@ bb423.i
	ldr r3, [r5, #+4]
	@comment
str r3, [r6, #+4]
	mov r3, r5
	ldrb r2, [r3, #+8]!
	ldrb r2, [r3, #+1]
	mov r1, r3
	ldrb r0, [r1, #+2]!
	ldrb r1, [r6, #+11]
	ldrb r0, [r6, #+10]
	orr r1, r0, r1, lsl #8
	mov r0, r6
	ldrb r12, [r0, #+8]!
	ldrb lr, [r0, #+1]
	orr r12, r12, lr, lsl #8
	orr r1, r12, r1, lsl #16
	bic r1, r1, #2, 20 @ 8192
	strb r1, [r0]
	mov r12, #2, 20 @ 8192
	and r2, r12, r2, lsl #8
	orr r2, r1, r2
	mov r12, r2, lsr #8
	strb r12, [r0, #+1]
	mov r12, r1, lsr #24
	strb r12, [r6, #+11]
	mov r1, r1, lsr #16
	strb r1, [r6, #+10]
	bic r2, r2, #1, 20 @ 4096
	ldrb r1, [r3, #+1]
	strb r2, [r0]
	mov r12, #1, 20 @ 4096
	and r1, r12, r1, lsl #8
	orr r1, r2, r1
	mov r12, r1, lsr #8
	strb r12, [r0, #+1]
	mov r12, r2, lsr #24
	strb r12, [r6, #+11]
	mov r2, r2, lsr #16
	strb r2, [r6, #+10]
	bic r2, r1, #1, 24 @ 256
	ldrb r3, [r3, #+1]
	strb r2, [r0]
	mov r1, #1, 24 @ 256
	and r3, r1, r3, lsl #8
	orr r3, r2, r3
	mov r3, r3, lsr #8
	strb r3, [r0, #+1]
	mov r3, r2, lsr #24
	strb r3, [r6, #+11]
	mov r3, r2, lsr #16
	strb r3, [r6, #+10]
.LBB76_291:	@ bb442.i
	mov r3, r6
	ldrb r2, [r3, #+28]!
	ldrb r2, [r3, #+1]
	ldrb r2, [r3, #+2]!
	ldrb r3, [r3, #+1]
	ldrb r3, [r5, #+30]
	ldrb r1, [r5, #+31]
	mov r0, r5
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	strb r12, [r0]
	orr r3, r3, r1, lsl #8
	orr r1, r12, lr, lsl #8
	orr r3, r1, r3, lsl #16
	mov r1, #2, 10 @ 8388608
	and r2, r1, r2, lsl #16
	orr r3, r2, r3
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	ldrb r3, [r5, #+8]
	cmp r3, #29
	bne .LBB76_294	@ bb487.i
.LBB76_292:	@ bb459.i
	ldrb r3, [r6, #+11]
	ldrb r3, [r6, #+9]
	ldrb r3, [r6, #+8]
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r1, r3, #2, 14 @ 524288
	ldrb r0, [r6, #+10]
	strb r1, [r2]
	mov r12, r1, lsr #8
	strb r12, [r2, #+1]
	mov r2, r1, lsr #24
	strb r2, [r5, #+11]
	and r3, r3, r0, lsl #16
	and r2, r3, #2, 14 @ 524288
	orr r1, r2, r1
	mov r1, r1, lsr #16
	strb r1, [r5, #+10]
	ldrb r1, [r6, #+11]
	ldrb r0, [r6, #+10]
	orr r1, r0, r1, lsl #8
	ldrb r0, [r6, #+9]
	ldrb r12, [r6, #+8]
	orr r0, r12, r0, lsl #8
	orr r1, r0, r1, lsl #16
	bic r1, r1, #2, 14 @ 524288
	strb r1, [r6, #+8]
	mov r0, r1, lsr #24
	strb r0, [r6, #+11]
	mov r0, r1, lsr #8
	strb r0, [r6, #+9]
	orr r2, r1, r2
	mov r2, r2, lsr #16
	strb r2, [r6, #+10]
	tst r3, #2, 14 @ 524288
	bne .LBB76_294	@ bb487.i
.LBB76_293:	@ bb486.i
	ldr r3, [r6, #+32]
	ldrb r2, [r3, #+9]
	mov r1, r3
	ldrb r0, [r1, #+8]!
	orr r2, r0, r2, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r12, [r1, #+2]
	orr r0, r12, r0, lsl #8
	orr r2, r2, r0, lsl #16
	bic r2, r2, #2, 14 @ 524288
	strb r2, [r1]
	mov r0, r2, lsr #24
	strb r0, [r1, #+3]
	mov r0, r2, lsr #16
	strb r0, [r1, #+2]
	mov r2, r2, lsr #8
	strb r2, [r3, #+9]
.LBB76_294:	@ bb487.i
	ldrb r3, [r5, #+29]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 24 @ 256
	bne .LBB76_473	@ bb492.i
.LBB76_295:	@ bb511.i
	mov r3, r5
	ldrb r2, [r3, #+8]!
	ldrb r2, [r3, #+1]
	mov r2, r3
	ldrb r1, [r2, #+2]!
	ldrb r0, [r2, #+1]
	ldrb r0, [r6, #+11]
	ldrb r12, [r6, #+10]
	orr r0, r12, r0, lsl #8
	mov r12, r6
	ldrb lr, [r12, #+8]!
	ldrb r7, [r12, #+1]
	orr lr, lr, r7, lsl #8
	orr r0, lr, r0, lsl #16
	bic r0, r0, #1, 14 @ 262144
	strb r0, [r12]
	mov lr, r0, lsr #8
	strb lr, [r12, #+1]
	mov lr, r0, lsr #24
	strb lr, [r6, #+11]
	mov lr, #1, 14 @ 262144
	and r1, lr, r1, lsl #16
	orr r1, r0, r1
	mov r0, r1, lsr #16
	strb r0, [r6, #+10]
	ldrb r0, [r2, #+1]
	ldrb r3, [r3, #+1]
	bic r3, r1, #2, 14 @ 524288
	mov r1, r3, lsr #8
	ldrb r2, [r2]
	strb r1, [r12, #+1]
	strb r3, [r12]
	mov r1, r3, lsr #24
	strb r1, [r6, #+11]
	mov r1, #2, 14 @ 524288
	and r2, r1, r2, lsl #16
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
.LBB76_296:	@ bb524.i
	ldrb r3, [r5, #+29]
	tst r3, #8
	beq .LBB76_299	@ bb531.i
.LBB76_297:	@ bb529.i
	ldr r3, [r6, #+48]
	cmp r3, #0
	bne .LBB76_299	@ bb531.i
.LBB76_298:	@ bb530.i
	ldrb r3, [r6, #+30]
	mov r2, r6
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 22 @ 2048
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB76_299:	@ bb531.i
	ldrb r3, [r5, #+30]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 22 @ 2048
	mov r1, r6
	ldrb r0, [r1, #+28]!
	ldrb r1, [r1, #+1]
	strb r3, [r2]
	mov r0, r3, lsr #24
	strb r0, [r2, #+3]
	mov r0, #2, 22 @ 2048
	and r1, r0, r1, lsl #8
	orr r1, r3, r1
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	ldrb r3, [r5, #+8]
	cmp r3, #29
	bne .LBB76_304	@ bb548.i
.LBB76_300:	@ bb538.i
	ldrb r3, [r6, #+29]
	mov r2, r6
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 20 @ 4096
	beq .LBB76_304	@ bb548.i
.LBB76_301:	@ bb543.i
	ldr r2, [sp, #+20]
	cmp r2, #0
	beq .LBB76_303	@ bb547.i
.LBB76_302:	@ bb543.i
	ldr r2, [sp, #+4]
	cmp r2, #0
	beq .LBB76_304	@ bb548.i
.LBB76_303:	@ bb547.i
	ldr r2, [r5, #+4]
	@comment
str r2, [r6, #+4]
	bic r3, r3, #1, 20 @ 4096
	mov r2, r3, lsr #24
	strb r2, [r6, #+31]
	mov r2, r3, lsr #16
	strb r2, [r6, #+30]
	mov r2, r3, lsr #8
	strb r2, [r6, #+29]
	strb r3, [r6, #+28]
.LBB76_304:	@ bb548.i
	ldrb r3, [r5, #+8]
	cmp r3, #29
	ldreq r3, [sp, #+4]
	cmpeq r3, #0
	beq .LBB76_309	@ bb552.i
	b .LBB76_313	@ duplicate_decls.exit.thread413
	.align	4
.LBB76_305:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_93:
 	.long	integer_type_node

.LBB76_306:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_94:
 	.long	unsigned_type_node

.LBB76_307:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_95:
 	.long	.str181664

.LBB76_308:	@ bb548.i
	.align	4
.LBB76_309:	@ bb552.i
	ldrb r3, [r6, #+29]
	tst r3, #16
	beq .LBB76_311	@ bb558.i
.LBB76_310:	@ bb557.i
	ldrb r3, [r5, #+30]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB76_311:	@ bb558.i
	ldr r3, [r6, #+72]
	@comment
str r3, [r5, #+72]
.LBB76_312:	@ bb559.i
	ldr r3, [r6, #+44]
	@comment
str r3, [r5, #+44]
	ldr r3, [r6, #+48]
	@comment
str r3, [r5, #+48]
	ldr r3, [r6, #+76]
	@comment
str r3, [r5, #+76]
	ldr r3, [r6, #+40]
	@comment
str r3, [r5, #+40]
.LBB76_313:	@ duplicate_decls.exit.thread413
	ldr r7, [r6, #+24]
	add r0, r6, #12
	add r1, r5, #12
	mov r2, #76
	emit_nops_till_bundle_end
	bl memcpy
	@comment
str r7, [r6, #+24]
.LBB76_314:	@ bb53
	ldrb r3, [r6, #+8]
	cmp r3, #34
	beq .LBB76_474	@ bb54
.LBB76_315:	@ bb61
	ldr r3, .LCPI76_102
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB76_325	@ bb79
.LBB76_316:	@ bb62
	ldrb r3, [r4, #+10]
	tst r3, #8
	beq .LBB76_325	@ bb79
.LBB76_317:	@ bb67
	ldrb r3, [r5, #+10]
	tst r3, #8
	ldreqb r3, [r5, #+29]
	tsteq r3, #1
	beq .LBB76_323	@ bb77
	b .LBB76_325	@ bb79
	.align	4
.LBB76_318:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_96:
 	.long	.str182665

.LBB76_319:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_97:
 	.long	.str183666

.LBB76_320:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_98:
 	.long	.str184667

.LBB76_321:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_99:
 	.long	.str185668

.LBB76_322:	@ bb72
	.align	4
.LBB76_323:	@ bb77
	ldr r3, [r4, #+32]
	cmp r3, #0
	beq .LBB76_325	@ bb79
.LBB76_324:	@ bb78
	ldr r1, [r4, #+16]
	ldr r0, .LCPI76_103
	emit_nops_till_bundle_end
	bl pedwarn
	ldr r3, [r4, #+16]
	ldr r2, .LCPI76_104
	ldr r0, [sp, #+8]
	ldr r1, [sp, #+12]
	emit_nops_till_bundle_end
	bl pedwarn_with_file_and_line
.LBB76_325:	@ bb79
	ldr r3, [sp]
	cmp r3, #0
	beq .LBB76_475	@ bb309
.LBB76_326:	@ bb80
	ldr r3, .LCPI76_105
	ldr r3, [r3]
	ldr r2, .LCPI76_106
	ldr r2, [r2]
	cmp r2, r3
	movne r3, r4
	ldrne r2, [r3, #+24]!
	cmpne r2, #0
	bne .LBB76_329	@ lookup_name.exit319
.LBB76_327:	@ bb.i314
.LBB76_328:	@ bb2.i315
	add r3, r4, #20
.LBB76_329:	@ lookup_name.exit319
	ldr r3, [r3]
	cmp r3, r6
	beq .LBB76_475	@ bb309
.LBB76_330:	@ bb82
	ldrb r3, [r5, #+8]
	cmp r3, #32
	bne .LBB76_337	@ bb88
.LBB76_331:	@ bb83
	ldr r3, [r5, #+16]
	ldr r0, [r5, #+4]
	cmp r3, #0
	bne .LBB76_335	@ bb86
.LBB76_332:	@ bb84
	ldr r3, [r0, #+48]
	cmp r3, #0
	@comment
streq r5, [r0, #+48]
	b .LBB76_337	@ bb88
	.align	4
.LBB76_333:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_100:
 	.long	.str186669

.LBB76_334:	@ bb85
	.align	4
.LBB76_335:	@ bb86
	ldr r3, .LCPI76_107
	ldr r3, [r3]
	cmp r0, r3
	beq .LBB76_337	@ bb88
.LBB76_336:	@ bb87
	emit_nops_till_bundle_end
	bl build_type_copy
	@comment
str r5, [r0, #+48]
	@comment
str r0, [r5, #+4]
.LBB76_337:	@ bb88
	ldrb r3, [r5, #+10]
	tst r3, #8
	beq .LBB76_349	@ bb123
.LBB76_338:	@ bb94
	ldrb r3, [r5, #+29]
	tst r3, #8
	bne .LBB76_349	@ bb123
.LBB76_339:	@ bb99
	ldr r3, .LCPI76_102
	ldr r3, [r3]
	cmp r3, #0
	ldrne r7, [r4, #+20]
	cmpne r7, #0
	bne .LBB76_341	@ bb101
	b .LBB76_343	@ bb112
.LBB76_340:	@ bb100
.LBB76_341:	@ bb101
	ldrb r3, [r7, #+29]
	tst r3, #1
	ldreqb r3, [r7, #+10]
	tsteq r3, #8
	beq .LBB76_343	@ bb112
	b .LBB76_344	@ bb115
.LBB76_342:	@ bb106
.LBB76_343:	@ bb112
	ldr r7, [r4, #+40]
	cmp r7, #0
	cmpne r7, #0
	beq .LBB76_349	@ bb123
	bne .LBB76_345	@ bb116
	b .LBB76_349	@ bb123
.LBB76_344:	@ bb115
	cmp r7, #0
	beq .LBB76_349	@ bb123
.LBB76_345:	@ bb116
	ldr r0, [r5, #+4]
	ldr r1, [r7, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	ldreqb r3, [r7, #+29]
	tsteq r3, #16
	beq .LBB76_348	@ bb122
	b .LBB76_349	@ bb123
	.align	4
.LBB76_346:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_101:
 	.long	.str188671

.LBB76_347:	@ bb117
	.align	4
.LBB76_348:	@ bb122
	ldr r1, .LCPI76_108
	mov r0, r5
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
	ldr r1, .LCPI76_109
	mov r0, r7
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
.LBB76_349:	@ bb123
	ldr r3, [r4, #+32]
	cmp r3, #0
	beq .LBB76_354	@ bb128
.LBB76_350:	@ bb124
	ldr r2, [r4, #+20]
	cmp r2, #0
	ldreqb r2, [r5, #+8]
	cmpeq r2, #29
	beq .LBB76_352	@ bb126
	b .LBB76_354	@ bb128
.LBB76_351:	@ bb125
.LBB76_352:	@ bb126
	ldr r0, [r5, #+4]
	ldr r1, [r3, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB76_354	@ bb128
.LBB76_353:	@ bb127
	ldr r1, .LCPI76_110
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	ldr r0, [r4, #+32]
	ldr r1, .LCPI76_111
	emit_nops_till_bundle_end
	bl warning_with_decl
.LBB76_354:	@ bb128
	ldr r3, .LCPI76_102
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r5, #+29]
	tstne r3, #1
	bne .LBB76_356	@ bb134
	b .LBB76_368	@ bb149
.LBB76_355:	@ bb129
.LBB76_356:	@ bb134
	ldr r3, .LCPI76_105
	ldr r3, [r3]
	ldr r2, .LCPI76_106
	ldr r2, [r2]
	cmp r2, r3
	movne r3, r4
	ldrne r2, [r3, #+24]!
	cmpne r2, #0
	bne .LBB76_359	@ lookup_name.exit
.LBB76_357:	@ bb.i311
.LBB76_358:	@ bb2.i312
	add r3, r4, #20
.LBB76_359:	@ lookup_name.exit
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB76_368	@ bb149
.LBB76_360:	@ bb146.preheader
	ldr r3, .LCPI76_107
	ldr r3, [r3]
	mov r7, r5
.LBB76_361:	@ bb146
	ldr r7, [r7, #+4]
	cmp r7, #0
	beq .LBB76_367	@ bb148
.LBB76_362:	@ bb136
	cmp r7, r3
	beq .LBB76_366	@ bb147
.LBB76_363:	@ bb137
	ldrb r2, [r7, #+9]
	tst r2, #4
	beq .LBB76_476	@ bb142
.LBB76_364:	@ bb143
	ldrb r2, [r7, #+8]
	cmp r2, #23
	bne .LBB76_361	@ bb146
.LBB76_365:	@ bb144
	ldr r2, [r7, #+12]
	cmp r2, #0
	beq .LBB76_361	@ bb146
.LBB76_366:	@ bb147
	cmp r7, #0
	bne .LBB76_368	@ bb149
.LBB76_367:	@ bb148
	ldr r3, .LCPI76_3
	ldr r3, [r3]
	@comment
str r3, [sp, #+16]
.LBB76_368:	@ bb149
	ldr r3, .LCPI76_3
	ldr r3, [r3]
	ldr r2, [sp, #+16]
	cmp r2, r3
	bne .LBB76_392	@ bb205
.LBB76_369:	@ bb150
	ldr r3, [r4, #+20]
	cmp r3, #0
	bne .LBB76_372	@ bb157
.LBB76_370:	@ bb151
	ldrb r3, [r5, #+10]
	tst r3, #8
	beq .LBB76_372	@ bb157
.LBB76_371:	@ bb156
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+11]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
.LBB76_372:	@ bb157
	@comment
str r5, [r4, #+20]
	mov r3, #0
	@comment
str r3, [r4, #+40]
	ldr r3, [r4, #+32]
	cmp r3, #0
	ldrneb r3, [r3, #+10]
	tstne r3, #1
	bne .LBB76_374	@ bb163
	b .LBB76_375	@ bb164
.LBB76_373:	@ bb158
.LBB76_374:	@ bb163
	ldrb r3, [r5, #+10]
	ldrb r2, [r5, #+11]
	mov r1, r5
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 16 @ 65536
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 16 @ 65536
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
.LBB76_375:	@ bb164
	ldr r3, [r4, #+32]
	cmp r3, #0
	ldrneb r3, [r3, #+9]
	tstne r3, #8
	bne .LBB76_377	@ bb170
	b .LBB76_378	@ bb171
.LBB76_376:	@ bb165
.LBB76_377:	@ bb170
	ldrb r3, [r5, #+10]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 22 @ 2048
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB76_378:	@ bb171
	ldr r3, [r4, #+32]
	cmp r3, #0
	beq .LBB76_382	@ bb175
.LBB76_379:	@ bb172
	ldrb r3, [r5, #+8]
	cmp r3, #29
	ldreq r3, .LCPI76_37
	ldreq r3, [r3]
	ldreq r2, [r5, #+4]
	ldreq r2, [r2, #+4]
	ldreq r2, [r2, #+64]
	cmpeq r2, r3
	beq .LBB76_382	@ bb175
.LBB76_380:	@ bb173
.LBB76_381:	@ bb174
	ldr r1, [r4, #+16]
	ldr r0, .LCPI76_55
	emit_nops_till_bundle_end
	bl pedwarn
.LBB76_382:	@ bb175
	ldrb r3, [r4, #+10]
	tst r3, #8
	beq .LBB76_438	@ bb306
.LBB76_383:	@ bb180
	ldrb r3, [r5, #+10]
	tst r3, #8
	ldreqb r3, [r5, #+29]
	tsteq r3, #1
	beq .LBB76_385	@ bb190
	b .LBB76_438	@ bb306
.LBB76_384:	@ bb185
.LBB76_385:	@ bb190
	cmp r6, #0
	beq .LBB76_389	@ bb202
.LBB76_386:	@ bb191
	ldrb r3, [r6, #+29]
	tst r3, #16
	bne .LBB76_438	@ bb306
.LBB76_387:	@ bb196
	cmp r6, #0
	ldrneb r6, [r6, #+9]
	tstne r6, #64
	bne .LBB76_438	@ bb306
.LBB76_388:	@ bb197
.LBB76_389:	@ bb202
	ldr r6, [r4, #+32]
	ldr r1, [r4, #+16]
	cmp r6, #0
	beq .LBB76_391	@ bb204
.LBB76_390:	@ bb203
	ldr r0, .LCPI76_49
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB76_438	@ bb306
.LBB76_391:	@ bb204
	ldr r0, .LCPI76_56
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB76_438	@ bb306
.LBB76_392:	@ bb205
	ldr r6, [r4, #+24]
	ldr r7, [r4, #+20]
	@comment
str r5, [r4, #+24]
	cmp r6, #0
	bne .LBB76_409	@ bb259
.LBB76_393:	@ bb206
	ldrb r3, [r5, #+29]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 24 @ 256
	beq .LBB76_409	@ bb259
.LBB76_394:	@ bb211
	tst r3, #2, 22 @ 2048
	bne .LBB76_409	@ bb259
.LBB76_395:	@ bb211
	cmp r7, #0
	beq .LBB76_409	@ bb259
.LBB76_396:	@ bb218
	ldrb r3, [r5, #+8]
	cmp r3, #29
	ldreqb r3, [r7, #+8]
	cmpeq r3, #29
	beq .LBB76_398	@ bb220
	b .LBB76_409	@ bb259
.LBB76_397:	@ bb219
.LBB76_398:	@ bb220
	ldr r0, [r5, #+4]
	ldr r1, [r7, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB76_477	@ bb221
.LBB76_399:	@ bb222
	ldrb r3, [r7, #+29]
	mov r2, #2, 22 @ 2048
	and r2, r2, r3, lsl #8
	tst r3, #8
	beq .LBB76_403	@ bb243
.LBB76_400:	@ bb227
	ldrb r3, [r5, #+29]
	mov r1, r5
	ldrb r0, [r1, #+28]!
	orr r3, r0, r3, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r12, [r1, #+2]
	orr r0, r12, r0, lsl #8
	orr r3, r3, r0, lsl #16
	bic r3, r3, #2, 22 @ 2048
	orr r3, r3, r2
	strb r3, [r1]
	mov r2, r3, lsr #24
	strb r2, [r1, #+3]
	mov r2, r3, lsr #16
	strb r2, [r1, #+2]
	mov r3, r3, lsr #8
	strb r3, [r5, #+29]
	ldr r3, .LCPI76_0
	ldr r3, [r3]
	cmp r3, r7
	ldrne r3, [r7, #+48]
	moveq r3, #0
	b .LBB76_402	@ bb236
.LBB76_401:	@ bb234
.LBB76_402:	@ bb236
	@comment
str r3, [r5, #+48]
	ldr r3, [r7, #+76]
	@comment
str r3, [r5, #+76]
	ldr r3, [r7, #+72]
	@comment
str r3, [r5, #+72]
	ldr r3, [r7, #+40]
	@comment
str r3, [r5, #+40]
	ldr r3, [r7, #+44]
	@comment
str r3, [r5, #+44]
	ldrb r3, [r5, #+10]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 18 @ 32768
	mov r1, r7
	ldrb r0, [r1, #+8]!
	ldrb r1, [r1, #+1]
	strb r3, [r2]
	mov r0, r3, lsr #24
	strb r0, [r2, #+3]
	mov r0, #2, 18 @ 32768
	and r1, r0, r1, lsl #8
	orr r1, r3, r1
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	@comment
str r7, [r5, #+52]
.LBB76_403:	@ bb243
	ldrb r3, [r7, #+29]
	mov r2, #1, 20 @ 4096
	and r2, r2, r3, lsl #8
	tst r3, #16
	beq .LBB76_405	@ bb255
.LBB76_404:	@ bb248
	ldrb r3, [r5, #+29]
	mov r1, r5
	ldrb r0, [r1, #+28]!
	orr r3, r0, r3, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r12, [r1, #+2]
	orr r0, r12, r0, lsl #8
	orr r3, r3, r0, lsl #16
	bic r3, r3, #1, 20 @ 4096
	orr r3, r3, r2
	strb r3, [r1]
	mov r2, r3, lsr #24
	strb r2, [r1, #+3]
	mov r2, r3, lsr #16
	strb r2, [r1, #+2]
	mov r3, r3, lsr #8
	strb r3, [r5, #+29]
	ldr r3, [r7, #+72]
	@comment
str r3, [r5, #+72]
.LBB76_405:	@ bb255
	ldr r3, [r7, #+4]
	ldr r2, [r3, #+12]
	cmp r2, #0
	ldrne r2, [r7, #+48]
	cmpne r2, #0
	bne .LBB76_407	@ bb257
	b .LBB76_409	@ bb259
.LBB76_406:	@ bb256
.LBB76_407:	@ bb257
	ldr r2, [r5, #+4]
	ldr r2, [r2, #+12]
	cmp r2, #0
	@comment
streq r3, [r5, #+4]
.LBB76_408:	@ bb258
.LBB76_409:	@ bb259
	orr r3, r7, r6
	cmp r3, #0
	bne .LBB76_414	@ bb272
.LBB76_410:	@ bb260
	ldrb r3, [r5, #+29]
	tst r3, #1
	ldrneb r3, [r5, #+10]
	tstne r3, #8
	bne .LBB76_412	@ bb270
	b .LBB76_414	@ bb272
.LBB76_411:	@ bb265
.LBB76_412:	@ bb270
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+11]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	ldr r3, [r4, #+40]
	cmp r3, #0
	@comment
streq r5, [r4, #+40]
.LBB76_413:	@ bb271
.LBB76_414:	@ bb272
	cmp r6, #0
	beq .LBB76_422	@ bb284
.LBB76_415:	@ bb273
	ldrb r3, [r5, #+29]
	tst r3, #1
	ldreq r3, .LCPI76_1
	ldreq r3, [r3]
	ldreqb r2, [r3, #+24]
	cmpeq r2, #0
	beq .LBB76_417	@ bb279
	b .LBB76_422	@ bb284
.LBB76_416:	@ bb278
.LBB76_417:	@ bb279
	ldr r3, [r3, #+20]
	ldrb r2, [r3, #+24]
	cmp r2, #0
	beq .LBB76_422	@ bb284
.LBB76_418:	@ bb280
	ldr r1, [r3]
	mov r0, r6
	emit_nops_till_bundle_end
	bl chain_member
	cmp r0, #0
	beq .LBB76_422	@ bb284
.LBB76_419:	@ bb281
	ldrb r3, [r6, #+8]
	ldr r1, [r4, #+16]
	cmp r3, #34
	bne .LBB76_421	@ bb283
.LBB76_420:	@ bb282
	ldr r0, .LCPI76_58
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB76_436	@ bb304
.LBB76_421:	@ bb283
	ldr r0, .LCPI76_59
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB76_436	@ bb304
.LBB76_422:	@ bb284
	ldr r3, .LCPI76_9
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB76_436	@ bb304
.LBB76_423:	@ bb285
	ldrb r3, [r5, #+29]
	tst r3, #1
	bne .LBB76_436	@ bb304
.LBB76_424:	@ bb290
	ldr r3, [r5, #+16]
	cmp r3, #0
	beq .LBB76_436	@ bb304
.LBB76_425:	@ bb291
	ldr r3, [r5, #+52]
	cmp r3, #0
	bne .LBB76_436	@ bb304
.LBB76_426:	@ bb292
	ldrb r3, [r5, #+8]
	cmp r3, #34
	bne .LBB76_428	@ bb294
.LBB76_427:	@ bb293
	ldr r3, .LCPI76_1
	ldr r3, [r3]
	ldr r3, [r3, #+20]
	ldrb r3, [r3, #+24]
	cmp r3, #0
	bne .LBB76_436	@ bb304
.LBB76_428:	@ bb294
	cmp r6, #0
	beq .LBB76_431	@ bb299
.LBB76_429:	@ bb295
	ldrb r3, [r6, #+8]
	ldr r2, .LCPI76_58
	ldr r0, .LCPI76_60
	cmp r3, #34
	moveq r0, r2
	mov r2, #1
	mov r1, #0
	cmp r6, #0
	movne r1, r2
	cmp r3, #34
	teqne r1, #1
	bne .LBB76_431	@ bb299
	b .LBB76_435	@ bb303
.LBB76_430:	@ bb295
.LBB76_431:	@ bb299
	ldr r3, [r4, #+20]
	cmp r3, #0
	ldrne r2, .LCPI76_6
	ldrne r2, [r2]
	cmpne r3, r2
	bne .LBB76_434	@ bb300.bb303_crit_edge
	b .LBB76_436	@ bb304
	.align	4
.LBB76_432:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_102:
 	.long	flag_traditional

.LBB76_433:	@ bb300
	.align	4
.LBB76_434:	@ bb300.bb303_crit_edge
	ldr r0, .LCPI76_61
.LBB76_435:	@ bb303
	ldr r1, [r4, #+16]
	emit_nops_till_bundle_end
	bl warning
.LBB76_436:	@ bb304
	cmp r6, #0
	beq .LBB76_438	@ bb306
.LBB76_437:	@ bb305
	ldr r7, [sp, #+16]
	ldr r2, [r7, #+8]
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r7, #+8]
.LBB76_438:	@ bb306
	ldr r6, [r5, #+4]
	ldr r6, [r6, #+16]
	cmp r6, #0
	ldreq r6, [sp, #+16]
	ldreq r3, [r6, #+32]
	addeq r3, r3, #1
	@comment
streq r3, [r6, #+32]
.LBB76_439:	@ bb307
.LBB76_440:	@ bb308
	ldr r6, [sp, #+16]
	ldr r3, [r6]
	@comment
str r3, [r5]
	@comment
str r5, [r6]
	mov r0, r5
.LBB76_441:	@ bb309
	sfi_add sp, sp, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
	.align	4
.LBB76_442:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_103:
 	.long	.str192675

.LBB76_443:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_104:
 	.long	.str170653

	.align	4
.LBB76_444:	@ bb37.thread
	ldr r1, .LCPI76_7
	mov r0, r5
	emit_nops_till_bundle_end
	bl error_with_decl
	mov r6, #0
	b .LBB76_29	@ bb39
.LBB76_445:	@ bb39.bb51_crit_edge
	mov r3, #1
	@comment
str r3, [sp]
	b .LBB76_32	@ bb51
	.align	4
.LBB76_446:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_105:
 	.long	global_binding_level

	.align	4
.LBB76_447:	@ bb.i320.bb6.i322_crit_edge
	mov r2, #1
	@comment
str r2, [sp, #+4]
	b .LBB76_36	@ bb6.i322
	.align	4
.LBB76_448:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_106:
 	.long	current_binding_level

	.align	4
.LBB76_449:	@ bb83.i
	mov r1, r0
	emit_nops_till_bundle_end
	bl push_obstacks
	b .LBB76_69	@ bb85.i
.LBB76_450:	@ bb87.i
.LBB76_451:	@ bb94.i
.LBB76_452:	@ bb167.i
	ldr r0, .LCPI76_26
	emit_nops_till_bundle_end
	bl error
	ldr r0, .LCPI76_27
	emit_nops_till_bundle_end
	bl error
	b .LBB76_145	@ bb178.i
.LBB76_453:	@ bb175.i
	ldr r0, .LCPI76_28
	emit_nops_till_bundle_end
	bl error
	ldr r0, .LCPI76_29
	emit_nops_till_bundle_end
	bl error
	b .LBB76_145	@ bb178.i
	.align	4
.LBB76_454:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_107:
 	.long	error_mark_node

	.align	4
.LBB76_455:	@ bb1.i.i.bb185.i_crit_edge
	mov r8, #0
.LBB76_456:	@ bb185.i
	ldrb r3, [r5, #+8]
	cmp r3, #32
	bne .LBB76_188	@ bb201.i
.LBB76_457:	@ bb186.i
	ldrb r3, [r6, #+30]
	tst r3, #1
	ldreqb r3, [r5, #+30]
	tsteq r3, #1
	beq .LBB76_188	@ bb201.i
.LBB76_458:	@ bb191.i
.LBB76_459:	@ bb196.i
	ldr r1, .LCPI76_30
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	ldr r3, [r6, #+48]
	cmp r3, #0
	beq .LBB76_186	@ bb199.i
.LBB76_460:	@ bb197.i
	ldr r3, .LCPI76_3
	ldr r3, [r3]
	ldr r2, .LCPI76_1
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB76_186	@ bb199.i
.LBB76_461:	@ bb197.i.bb200.i_crit_edge
	ldr r1, .LCPI76_33
	b .LBB76_187	@ bb200.i
.LBB76_462:	@ bb20.i.i.bb180.i_crit_edge
	ldr r8, .LCPI76_30
	b .LBB76_180	@ bb180.i
.LBB76_463:	@ bb181.i.bb184.i_crit_edge
	ldr r1, .LCPI76_33
	b .LBB76_183	@ bb184.i
.LBB76_464:	@ bb207.i.bb219.i_crit_edge
	ldr r8, .LCPI76_35
	b .LBB76_204	@ bb219.i
.LBB76_465:	@ bb211.i.bb219.i_crit_edge
	ldr r8, .LCPI76_36
	b .LBB76_204	@ bb219.i
.LBB76_466:	@ bb275.i
	ldr r1, .LCPI76_45
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	b .LBB76_236	@ bb297.i
.LBB76_467:	@ bb316.i
	mov r1, r0
	emit_nops_till_bundle_end
	bl push_obstacks
	b .LBB76_241	@ bb318.i
.LBB76_468:	@ bb377.i
	mov r3, r2, lsr #24
	strb r3, [r5, #+31]
	mov r3, r2, lsr #8
	strb r3, [r5, #+29]
	orr r3, r2, #1, 16 @ 65536
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	strb r2, [r5, #+28]
	b .LBB76_279	@ bb384.i
	.align	4
.LBB76_469:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_108:
 	.long	.str193676

.LBB76_470:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_109:
 	.long	.str194677

.LBB76_471:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_110:
 	.long	.str195678

.LBB76_472:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_111:
 	.long	.str196679

	.align	4
.LBB76_473:	@ bb492.i
	mov r2, r6
	ldrb r1, [r2, #+8]!
	ldrb r1, [r2, #+1]
	ldrb r1, [r2, #+2]!
	ldrb r0, [r2, #+1]
	ldrb r0, [r5, #+11]
	ldrb r12, [r5, #+10]
	orr r0, r12, r0, lsl #8
	mov r12, r5
	ldrb lr, [r12, #+8]!
	ldrb r7, [r12, #+1]
	orr lr, lr, r7, lsl #8
	orr r0, lr, r0, lsl #16
	bic r0, r0, #1, 14 @ 262144
	strb r0, [r12]
	mov lr, r0, lsr #8
	strb lr, [r12, #+1]
	mov lr, r0, lsr #24
	strb lr, [r5, #+11]
	mov lr, #1, 14 @ 262144
	and r1, lr, r1, lsl #16
	orr r1, r0, r1
	mov r0, r1, lsr #16
	strb r0, [r5, #+10]
	bic r3, r3, #1, 24 @ 256
	mov r0, r3, lsr #24
	mov lr, r6
	ldrb r7, [lr, #+28]!
	ldrb lr, [lr, #+1]
	strb r0, [r5, #+31]
	mov r0, r3, lsr #16
	strb r0, [r5, #+30]
	strb r3, [r5, #+28]
	mov r0, #1, 24 @ 256
	and r0, r0, lr, lsl #8
	orr r3, r0, r3
	mov r3, r3, lsr #8
	strb r3, [r5, #+29]
	bic r3, r1, #2, 14 @ 524288
	mov r1, r3, lsr #8
	ldrb r2, [r2]
	strb r1, [r12, #+1]
	strb r3, [r12]
	mov r1, r3, lsr #24
	strb r1, [r5, #+11]
	mov r1, #2, 14 @ 524288
	and r2, r1, r2, lsl #16
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	b .LBB76_296	@ bb524.i
.LBB76_474:	@ bb54
	ldrb r4, [r6, #+10]
	mov r3, r6
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r4, r4, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r2, r2, r1, lsl #8
	orr r4, r2, r4, lsl #16
	bic r4, r4, #2, 18 @ 32768
	ldrb r2, [r5, #+8]!
	ldrb r5, [r5, #+1]
	strb r4, [r3]
	mov r2, r4, lsr #24
	strb r2, [r3, #+3]
	mov r2, #2, 18 @ 32768
	and r5, r2, r5, lsl #8
	orr r5, r4, r5
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	mov r4, r4, lsr #16
	strb r4, [r6, #+10]
.LBB76_475:	@ bb309
	mov r0, r6
	b .LBB76_441	@ bb309
.LBB76_476:	@ bb142
	ldr r1, .LCPI76_54
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning_with_decl
	b .LBB76_366	@ bb147
.LBB76_477:	@ bb221
	ldr r1, .LCPI76_57
	mov r0, r5
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
	b .LBB76_409	@ bb259
.LBB76_478:	@ bb227.bb236_crit_edge
.LBB76_479:	@ bb78.i
	ldr r3, .LCPI76_9
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB76_48	@ bb33.i
	b .LBB76_330	@ bb82
	.align	4
.LBB76_480:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_1:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_3:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_6:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_7:
 	.long	.str191674

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_9:
 	.long	warn_shadow

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_26:
 	.long	.str173656

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_27:
 	.long	.str174657

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_28:
 	.long	.str175658

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_29:
 	.long	.str176659

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_30:
 	.long	.str465

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_33:
 	.long	.str177660

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_35:
 	.long	.str179662

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_36:
 	.long	.str180663

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_37:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_45:
 	.long	.str187670

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_49:
 	.long	.str192675

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_54:
 	.long	.str197680

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_55:
 	.long	.str198681

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_56:
 	.long	.str199682

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_57:
 	.long	.str200683

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_58:
 	.long	.str201684

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_59:
 	.long	.str202685

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_60:
 	.long	.str203686

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI76_61:
 	.long	.str204687

	.size pushdecl, .-pushdecl


	.globl	combine_parm_decls
	.align	4
combine_parm_decls:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #4
	ldr r4, [r1, #+12]
	ldr r3, .LCPI77_0
	ldr r5, [r3]
	ldr r6, [r1, #+16]
	@comment
str r2, [sp]
	mov r7, r0
	cmp r4, #0
	beq .LBB77_3	@ bb21.loopexit
.LBB77_1:	@ entry.bb_crit_edge
	mov r3, #0
	mov r2, r4
.LBB77_2:	@ bb
	@comment
str r3, [r2, #+44]
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB77_2	@ bb
.LBB77_3:	@ bb21.loopexit
	cmp r7, #0
	beq .LBB77_23	@ bb20.bb28.outer_crit_edge
.LBB77_4:	@ bb.nph71
	mov r10, #0
	mov r8, #34
	mov r9, r7
.LBB77_5:	@ bb7.preheader
	mov r0, r4
	b .LBB77_8	@ bb7
.LBB77_6:	@ bb4
	ldr r3, [r9, #+16]
	ldr r2, [r0, #+32]
	cmp r2, r3
	beq .LBB77_18	@ bb8
.LBB77_7:	@ bb6
	ldr r0, [r0]
.LBB77_8:	@ bb7
	cmp r0, #0
	bne .LBB77_6	@ bb4
.LBB77_9:	@ bb7.bb11_crit_edge
	mov r0, #0
.LBB77_10:	@ bb11
	mov r11, r0
	cmp r11, #0
	beq .LBB77_21	@ bb19
.LBB77_11:	@ bb12
	ldr r3, .LCPI77_2
	ldr r3, [r3]
	ldr r2, [r11, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	bne .LBB77_13	@ bb14
.LBB77_12:	@ bb13
	ldr r1, .LCPI77_3
	mov r0, r11
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI77_4
	ldr r2, [r3]
	@comment
str r2, [r11, #+4]
	ldr r3, [r3]
	@comment
str r3, [r11, #+48]
	mov r0, r11
	mov r1, r10
	emit_nops_till_bundle_end
	bl layout_decl
.LBB77_13:	@ bb14
	cmp r11, #0
	beq .LBB77_21	@ bb19
.LBB77_14:	@ bb15
	ldr r3, .LCPI77_5
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB77_17	@ bb18
.LBB77_15:	@ bb16
	ldr r3, .LCPI77_6
	ldr r3, [r3]
	ldr r2, [r11, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	ldreq r3, .LCPI77_7
	ldreq r2, [r3]
	@comment
streq r2, [r11, #+4]
	ldreq r3, [r3]
	@comment
streq r3, [r11, #+48]
	moveq r0, r11
	moveq r1, r10
	emit_nops_till_bundle_end
	bleq layout_decl
.LBB77_16:	@ bb17
.LBB77_17:	@ bb18
	cmp r11, #0
	beq .LBB77_21	@ bb19
	b .LBB77_22	@ bb20
.LBB77_18:	@ bb8
	cmp r0, #0
	ldrne r3, [r0, #+44]
	cmpne r3, #0
	bne .LBB77_20	@ bb18.thread
	b .LBB77_10	@ bb11
.LBB77_19:	@ bb9
.LBB77_20:	@ bb18.thread
	ldr r1, .LCPI77_1
	emit_nops_till_bundle_end
	bl error_with_decl
.LBB77_21:	@ bb19
	ldr r11, .LCPI77_4
	ldr r2, [r11]
	ldr r1, [r9, #+16]
	mov r0, r8
	emit_nops_till_bundle_end
	bl build_decl
	mov r11, r0
	ldr r3, [r11, #+4]
	@comment
str r3, [r11, #+48]
	ldr r3, [r5, #+16]
	@comment
str r3, [r11, #+16]
	ldr r3, [r5, #+12]
	@comment
str r3, [r11, #+12]
	ldr r1, .LCPI77_8
	emit_nops_till_bundle_end
	bl error_with_decl
	mov r0, r11
	emit_nops_till_bundle_end
	bl pushdecl
.LBB77_22:	@ bb20
	@comment
str r11, [r9, #+12]
	ldr r3, .LCPI77_9
	ldr r3, [r3]
	@comment
str r3, [r11, #+44]
	ldr r9, [r9]
	cmp r9, #0
	bne .LBB77_5	@ bb7.preheader
.LBB77_23:	@ bb20.bb28.outer_crit_edge
	mov r0, r7
	b .LBB77_28	@ bb28.outer
.LBB77_24:	@ bb23
	ldr r4, [r7]
	mov r3, #0
	@comment
str r3, [r7]
	ldr r3, [r7, #+4]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB77_26	@ bb25
.LBB77_25:	@ bb24
	ldr r1, .LCPI77_10
	mov r0, r7
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI77_9
	ldr r3, [r3]
	@comment
str r3, [r7, #+4]
.LBB77_26:	@ bb25
	ldr r3, [r7, #+44]
	cmp r3, #0
	bne .LBB77_29	@ bb28
.LBB77_27:	@ bb26
	ldr r1, .LCPI77_11
	mov r0, r7
	emit_nops_till_bundle_end
	bl error_with_decl
	mov r1, #0
	mov r0, r7
	mov r2, #0
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl chainon
.LBB77_28:	@ bb28.outer
	mov r5, r0
.LBB77_29:	@ bb28
	mov r7, r4
	cmp r7, #0
	bne .LBB77_24	@ bb23
.LBB77_30:	@ bb36.loopexit
	cmp r5, #0
	beq .LBB77_37	@ bb36.loopexit.bb37_crit_edge
.LBB77_31:	@ bb36.loopexit.bb30_crit_edge
	mov r2, #0
	mov r7, #0
	mov r8, #0
	mov r4, #0
.LBB77_32:	@ bb30
	ldr r9, [r5, #+12]
	cmp r9, #0
	beq .LBB77_36	@ bb35
.LBB77_33:	@ bb31
	cmp r4, #0
	@comment
strne r9, [r4]
	movne r9, r8
.LBB77_34:	@ bb33
.LBB77_35:	@ bb34
	ldr r4, [r5, #+12]
	@comment
str r7, [r4]
	ldr r1, [r5, #+4]
	mov r0, #0
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	mov r2, r0
	mov r8, r9
.LBB77_36:	@ bb35
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB77_32	@ bb30
	b .LBB77_38	@ bb37
.LBB77_37:	@ bb36.loopexit.bb37_crit_edge
	mov r2, #0
	mov r8, #0
.LBB77_38:	@ bb37
	ldr r3, [sp]
	cmp r3, #0
	bne .LBB77_41	@ bb38
.LBB77_39:	@ bb39
	mov r0, r2
.LBB77_40:	@ bb39
	emit_nops_till_bundle_end
	bl nreverse
	mov r2, r0
	mov r0, r8
	mov r1, r6
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB77_41:	@ bb38
	ldr r3, .LCPI77_2
	ldr r1, [r3]
	mov r0, #0
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	b .LBB77_40	@ bb39
	.align	4
.LBB77_42:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_1:
 	.long	.str205688

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_2:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_3:
 	.long	.str206689

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_4:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_5:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_6:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_7:
 	.long	double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_8:
 	.long	.str207690

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_9:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_10:
 	.long	.str13480

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI77_11:
 	.long	.str208691

	.size combine_parm_decls, .-combine_parm_decls


	.globl	store_parm_decls
	.align	4
store_parm_decls:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr r3, .LCPI78_0
	ldr r4, [r3]
	ldr r3, .LCPI78_1
	ldr r5, [r3]
	ldr r3, .LCPI78_2
	ldr r6, [r3]
	ldr r3, .LCPI78_3
	ldr r3, [r3]
	ldr r7, [r3]
	cmp r4, #0
	ldrneb r3, [r4, #+8]
	cmpne r3, #3
	bne .LBB78_9	@ bb4
.LBB78_1:	@ bb
.LBB78_2:	@ bb34.preheader
	cmp r7, #0
	beq .LBB78_5	@ bb60.loopexit
.LBB78_3:	@ bb34.preheader.bb33_crit_edge
	mov r5, #0
	mov r3, r7
.LBB78_4:	@ bb33
	@comment
str r5, [r3, #+44]
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB78_4	@ bb33
.LBB78_5:	@ bb60.loopexit
	cmp r4, #0
	beq .LBB78_58	@ bb59.bb69.outer_crit_edge
.LBB78_6:	@ bb.nph174
	mov r5, #0
	mov r8, #34
	mov r9, r4
.LBB78_7:	@ bb36
	ldr r3, [r9, #+16]
	cmp r3, #0
	beq .LBB78_36	@ bb37
.LBB78_8:	@ bb36.bb43_crit_edge
	mov r0, r7
	b .LBB78_40	@ bb43
.LBB78_9:	@ bb4
	cmp r7, #0
	beq .LBB78_19	@ bb14
.LBB78_10:	@ bb5
	ldr r1, .LCPI78_4
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI78_3
	ldr r3, [r3]
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB78_15	@ bb10
.LBB78_11:	@ bb5.bb6_crit_edge
	mov r7, #0
.LBB78_12:	@ bb6
	ldr r2, [r3, #+32]
	cmp r2, #0
	@comment
strne r7, [r2, #+24]
.LBB78_13:	@ bb7
.LBB78_14:	@ bb8
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB78_12	@ bb6
.LBB78_15:	@ bb10
	ldr r3, .LCPI78_3
	ldr r3, [r3]
	ldr r3, [r3, #+8]
	b .LBB78_17	@ bb11
.LBB78_16:	@ bb11
	ldr r7, [r3, #+16]
	ldr r2, [r3, #+12]
	@comment
str r7, [r2, #+24]
	ldr r3, [r3]
.LBB78_17:	@ bb11
	cmp r3, #0
	bne .LBB78_16	@ bb11
.LBB78_18:	@ bb13
	ldr r3, .LCPI78_3
	ldr r7, [r3]
	mov r2, #0
	@comment
str r2, [r7]
	ldr r3, [r3]
	@comment
str r2, [r3, #+8]
.LBB78_19:	@ bb14
	mov r0, r4
	emit_nops_till_bundle_end
	bl nreverse
	mov r4, r0
	mov r7, #0
	mov r0, #0
	b .LBB78_26	@ bb23.outer
.LBB78_20:	@ bb15
	ldrb r3, [r8, #+8]
	ldr r4, [r8]
	cmp r3, #34
	bne .LBB78_25	@ bb21
.LBB78_21:	@ bb16
	ldr r3, [r8, #+32]
	cmp r3, #0
	beq .LBB78_114	@ bb17
.LBB78_22:	@ bb18
	ldr r3, .LCPI78_6
	ldr r3, [r3]
	ldr r2, [r8, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	bne .LBB78_24	@ bb20
.LBB78_23:	@ bb19
	ldr r1, .LCPI78_7
	mov r0, r8
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI78_8
	ldr r3, [r3]
	@comment
str r3, [r8, #+4]
.LBB78_24:	@ bb20
	mov r0, r8
	emit_nops_till_bundle_end
	bl pushdecl
	b .LBB78_27	@ bb23
.LBB78_25:	@ bb21
	@comment
str r7, [r8]
	mov r0, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl chainon
.LBB78_26:	@ bb23.outer
	mov r9, r0
.LBB78_27:	@ bb23
	mov r8, r4
	cmp r8, #0
	bne .LBB78_20	@ bb15
.LBB78_28:	@ bb24
	ldr r3, .LCPI78_3
	ldr r3, [r3]
	ldr r3, [r3]
	@comment
str r3, [r6, #+40]
	cmp r9, #0
	beq .LBB78_35	@ bb31
.LBB78_29:	@ bb24.bb25_crit_edge
	mov r0, r9
.LBB78_30:	@ bb25
	ldr r3, [r0, #+32]
	ldr r4, [r0]
	cmp r3, #0
	ldrne r3, .LCPI78_6
	ldrne r3, [r3]
	ldrne r7, [r0, #+4]
	ldrne r7, [r7, #+64]
	cmpne r7, r3
	bne .LBB78_32	@ bb27
	b .LBB78_34	@ bb30.backedge
.LBB78_31:	@ bb26
.LBB78_32:	@ bb27
	ldrb r3, [r0, #+8]
	cmp r3, #34
	emit_nops_till_bundle_end
	blne pushdecl
.LBB78_33:	@ bb28
.LBB78_34:	@ bb30.backedge
	cmp r4, #0
	mov r0, r4
	bne .LBB78_30	@ bb25
.LBB78_35:	@ bb31
	ldr r4, .LCPI78_3
	ldr r3, [r4]
	ldr r1, [r3, #+4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl chainon
	ldr r3, [r4]
	@comment
str r0, [r3, #+4]
	mov r3, #1
	b .LBB78_107	@ bb115
.LBB78_36:	@ bb37
	ldr r1, .LCPI78_9
	mov r0, r6
	emit_nops_till_bundle_end
	bl error_with_decl
	@comment
str r5, [r9, #+12]
	b .LBB78_57	@ bb59
.LBB78_37:	@ bb39
	ldr r2, [r0, #+32]
	cmp r2, r3
	ldreqb r2, [r0, #+8]
	cmpeq r2, #34
	beq .LBB78_50	@ bb44
.LBB78_38:	@ bb40
.LBB78_39:	@ bb42
	ldr r0, [r0]
.LBB78_40:	@ bb43
	cmp r0, #0
	bne .LBB78_37	@ bb39
.LBB78_41:	@ bb43.bb47_crit_edge
	mov r0, #0
.LBB78_42:	@ bb47
	mov r10, r0
	cmp r10, #0
	beq .LBB78_53	@ bb55
.LBB78_43:	@ bb48
	ldr r3, .LCPI78_6
	ldr r3, [r3]
	ldr r2, [r10, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	bne .LBB78_45	@ bb50
.LBB78_44:	@ bb49
	ldr r1, .LCPI78_7
	mov r0, r10
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI78_11
	ldr r2, [r3]
	@comment
str r2, [r10, #+4]
	ldr r3, [r3]
	@comment
str r3, [r10, #+48]
	mov r0, r10
	mov r1, r5
	emit_nops_till_bundle_end
	bl layout_decl
.LBB78_45:	@ bb50
	cmp r10, #0
	beq .LBB78_53	@ bb55
.LBB78_46:	@ bb51
	ldr r3, .LCPI78_12
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB78_49	@ bb54
.LBB78_47:	@ bb52
	ldr r3, .LCPI78_13
	ldr r3, [r3]
	ldr r2, [r10, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r3
	ldreq r3, .LCPI78_14
	ldreq r2, [r3]
	@comment
streq r2, [r10, #+4]
	ldreq r3, [r3]
	@comment
streq r3, [r10, #+48]
	moveq r0, r10
	moveq r1, r5
	emit_nops_till_bundle_end
	bleq layout_decl
.LBB78_48:	@ bb53
.LBB78_49:	@ bb54
	cmp r10, #0
	beq .LBB78_53	@ bb55
	b .LBB78_56	@ bb58
.LBB78_50:	@ bb44
	cmp r0, #0
	ldrne r3, [r0, #+44]
	cmpne r3, #0
	bne .LBB78_52	@ bb54.thread
	b .LBB78_42	@ bb47
.LBB78_51:	@ bb45
.LBB78_52:	@ bb54.thread
	ldr r1, .LCPI78_10
	emit_nops_till_bundle_end
	bl error_with_decl
.LBB78_53:	@ bb55
	ldr r10, .LCPI78_11
	ldr r2, [r10]
	ldr r1, [r9, #+16]
	mov r0, r8
	emit_nops_till_bundle_end
	bl build_decl
	ldr r10, [r0, #+4]
	@comment
str r10, [r0, #+48]
	ldr r10, [r6, #+16]
	@comment
str r10, [r0, #+16]
	ldr r10, [r6, #+12]
	@comment
str r10, [r0, #+12]
	ldr r10, .LCPI78_15
	ldr r3, [r10]
	mov r10, r0
	cmp r3, #0
	ldrne r1, .LCPI78_16
	movne r0, r10
	emit_nops_till_bundle_end
	blne warning_with_decl
.LBB78_54:	@ bb56
.LBB78_55:	@ bb57
	mov r0, r10
	emit_nops_till_bundle_end
	bl pushdecl
.LBB78_56:	@ bb58
	@comment
str r10, [r9, #+12]
	ldr r3, .LCPI78_8
	ldr r3, [r3]
	@comment
str r3, [r10, #+44]
.LBB78_57:	@ bb59
	ldr r9, [r9]
	cmp r9, #0
	bne .LBB78_7	@ bb36
.LBB78_58:	@ bb59.bb69.outer_crit_edge
	mov r0, #0
	mov r5, #0
	b .LBB78_61	@ bb69.outer
.LBB78_59:	@ bb62
	ldr r7, [r8]
	@comment
str r5, [r8]
	ldrb r3, [r8, #+8]
	cmp r3, #34
	beq .LBB78_62	@ bb64
.LBB78_60:	@ bb63
	mov r0, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl chainon
.LBB78_61:	@ bb69.outer
	mov r9, r0
	mov r0, r4
	b .LBB78_66	@ bb69.outer1
.LBB78_62:	@ bb64
	ldr r3, [r8, #+4]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB78_64	@ bb66
.LBB78_63:	@ bb65
	ldr r1, .LCPI78_17
	mov r0, r8
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r3, .LCPI78_8
	ldr r3, [r3]
	@comment
str r3, [r8, #+4]
.LBB78_64:	@ bb66
	ldr r3, [r8, #+44]
	cmp r3, #0
	bne .LBB78_67	@ bb69
.LBB78_65:	@ bb67
	ldr r1, .LCPI78_18
	mov r0, r8
	emit_nops_till_bundle_end
	bl error_with_decl
	mov r0, r8
	mov r1, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl chainon
.LBB78_66:	@ bb69.outer1
	mov r4, r0
.LBB78_67:	@ bb69
	mov r8, r7
	cmp r8, #0
	bne .LBB78_59	@ bb62
.LBB78_68:	@ bb70
	mov r3, #0
	mov r5, r6
	str r3, [r5, #+40]!
	cmp r4, #0
	beq .LBB78_75	@ bb78
.LBB78_69:	@ bb70.bb71_crit_edge
	mov r3, #0
	mov r2, #0
.LBB78_70:	@ bb71
	ldr r1, [r4, #+12]
	cmp r1, #0
	beq .LBB78_74	@ bb76
.LBB78_71:	@ bb72
	cmp r3, #0
	@comment
strne r1, [r3]
	@comment
streq r1, [r5]
	b .LBB78_73	@ bb75
.LBB78_72:	@ bb74
.LBB78_73:	@ bb75
	ldr r3, [r4, #+12]
	@comment
str r2, [r3]
.LBB78_74:	@ bb76
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB78_70	@ bb71
.LBB78_75:	@ bb78
	ldr r4, [r6, #+4]
	ldr r3, [r4, #+12]!
	cmp r3, #0
	bne .LBB78_81	@ bb79
.LBB78_76:	@ bb109.preheader
	ldr r4, [r5]
	cmp r4, #0
	beq .LBB78_80	@ bb109.preheader.bb110_crit_edge
.LBB78_77:	@ bb109.preheader.bb105_crit_edge
	mov r7, #0
	mov r8, #0
	mov r10, r7
.LBB78_78:	@ bb105
	ldr r1, [r4, #+48]
	mov r0, #0
	mov r2, r8
	emit_nops_till_bundle_end
	bl perm_tree_cons
	cmp r7, #0
	@comment
strne r0, [r7]
	moveq r10, r0
	b .LBB78_102	@ bb108
.LBB78_79:	@ bb105.bb108_crit_edge
.LBB78_80:	@ bb109.preheader.bb110_crit_edge
	mov r0, #0
	mov r10, r0
	b .LBB78_103	@ bb110
.LBB78_81:	@ bb79
	mov r7, r5
	b .LBB78_97	@ bb100
.LBB78_82:	@ bb80
	cmp r4, #0
	beq .LBB78_116	@ bb84
.LBB78_83:	@ bb80
	cmp r7, #0
	ldrne r8, .LCPI78_6
	ldrne r8, [r8]
	ldrne r1, [r4, #+16]
	ldrne r10, [r1, #+64]
	cmpne r10, r8
	bne .LBB78_85	@ bb85
	b .LBB78_116	@ bb84
.LBB78_84:	@ bb83
.LBB78_85:	@ bb85
	ldr r0, [r7, #+48]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB78_97	@ bb100
.LBB78_86:	@ bb86
	ldr r8, [r4, #+16]
	ldr r8, [r8, #+64]
	ldr r10, [r7, #+4]
	ldr r3, [r10, #+64]
	cmp r3, r8
	bne .LBB78_93	@ bb95
.LBB78_87:	@ bb87
	@comment
str r10, [r7, #+48]
	ldrb r8, [r10, #+8]
	cmp r8, #7
	andne r8, r8, #255
	cmpne r8, #10
	bne .LBB78_91	@ bb93
.LBB78_88:	@ bb87
.LBB78_89:	@ bb91
	ldr r8, .LCPI78_11
	ldr r8, [r8]
	ldrb r3, [r8, #+28]
	ldrb r10, [r10, #+28]
	cmp r10, r3
	@comment
strlo r8, [r7, #+48]
.LBB78_90:	@ bb92
.LBB78_91:	@ bb93
	ldr r8, .LCPI78_23
	ldr r8, [r8]
	cmp r8, #0
	beq .LBB78_97	@ bb100
.LBB78_92:	@ bb94
	ldr r8, [r7, #+32]
	ldr r1, [r8, #+16]
	ldr r0, .LCPI78_24
	emit_nops_till_bundle_end
	bl pedwarn
	ldr r8, .LCPI78_20
	ldr r0, [r8]
	ldr r8, .LCPI78_21
	ldr r1, [r8]
	ldr r2, .LCPI78_22
	emit_nops_till_bundle_end
	bl warning_with_file_and_line
	b .LBB78_97	@ bb100
.LBB78_93:	@ bb95
	ldr r10, .LCPI78_12
	ldr r10, [r10]
	cmp r10, #0
	beq .LBB78_96	@ bb98
.LBB78_94:	@ bb96
	ldr r10, .LCPI78_11
	ldr r10, [r10]
	cmp r3, r10
	ldreq r10, .LCPI78_25
	ldreq r10, [r10]
	cmpeq r8, r10
	beq .LBB78_97	@ bb100
.LBB78_95:	@ bb97
.LBB78_96:	@ bb98
	ldr r8, [r7, #+32]
	ldr r1, [r8, #+16]
	ldr r0, .LCPI78_26
	emit_nops_till_bundle_end
	bl error
	ldr r8, .LCPI78_20
	ldr r0, [r8]
	ldr r8, .LCPI78_21
	ldr r1, [r8]
	ldr r2, .LCPI78_22
	emit_nops_till_bundle_end
	bl error_with_file_and_line
.LBB78_97:	@ bb100
	ldr r7, [r7]
	ldr r4, [r4]
	cmp r7, #0
	bne .LBB78_82	@ bb80
.LBB78_98:	@ bb101
	cmp r4, #0
	ldrne r8, .LCPI78_6
	ldrne r8, [r8]
	ldrne r10, [r4, #+16]
	ldrne r10, [r10, #+64]
	cmpne r10, r8
	bne .LBB78_82	@ bb80
.LBB78_99:	@ bb102
.LBB78_100:	@ bb103
	ldr r4, [r6, #+4]
	mov r7, #0
	@comment
str r7, [r4, #+72]
	b .LBB78_106	@ bb114
.LBB78_101:	@ bb106
.LBB78_102:	@ bb108
	ldr r4, [r4]
	cmp r4, #0
	mov r7, r0
	bne .LBB78_78	@ bb105
.LBB78_103:	@ bb110
	mov r4, r0
	ldr r3, .LCPI78_6
	ldr r1, [r3]
	mov r0, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl perm_tree_cons
	cmp r4, #0
	@comment
strne r0, [r4]
	movne r0, r10
.LBB78_104:	@ bb111
.LBB78_105:	@ bb113
	mov r4, r0
	ldr r0, [r6, #+4]
	emit_nops_till_bundle_end
	bl build_type_copy
	@comment
str r0, [r6, #+4]
	@comment
str r4, [r0, #+72]
.LBB78_106:	@ bb114
	ldr r1, [r5]
	mov r0, r9
	emit_nops_till_bundle_end
	bl chainon
	ldr r3, .LCPI78_3
	ldr r3, [r3]
	@comment
str r0, [r3]
	mov r3, #0
.LBB78_107:	@ bb115
	mov r1, #1
	ldr r2, .LCPI78_27
	strb r1, [r2]
	mov r2, #0
	mov r0, r6
	emit_nops_till_bundle_end
	bl gen_aux_info_record
	ldr r3, .LCPI78_28
	ldr r1, [r3]
	ldr r3, .LCPI78_29
	ldr r2, [r3]
	mov r0, r6
	emit_nops_till_bundle_end
	bl init_function_start
	ldr r3, .LCPI78_30
	ldrb r3, [r3]
	teq r3, #1
	emit_nops_till_bundle_end
	bleq mark_varargs
.LBB78_108:	@ bb116
.LBB78_109:	@ bb117
	emit_nops_till_bundle_end
	bl declare_function_name
	mov r1, #0
	mov r0, r6
	emit_nops_till_bundle_end
	bl expand_function_start
	ldr r3, [r6, #+32]
	cmp r3, #0
	beq .LBB78_113	@ return
.LBB78_110:	@ bb118
	ldr r0, [r3, #+16]
	ldr r1, .LCPI78_31
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB78_113	@ return
.LBB78_111:	@ bb119
	ldr r3, [r6, #+36]
	cmp r3, #0
	emit_nops_till_bundle_end
	bleq expand_main_function
.LBB78_112:	@ bb120
.LBB78_113:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB78_114:	@ bb17
	ldr r1, .LCPI78_5
	mov r0, r8
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB78_24	@ bb20
.LBB78_115:	@ bb73
.LBB78_116:	@ bb84
	ldr r0, .LCPI78_19
	emit_nops_till_bundle_end
	bl error
	ldr r4, .LCPI78_20
	ldr r0, [r4]
	ldr r4, .LCPI78_21
	ldr r1, [r4]
	ldr r2, .LCPI78_22
	emit_nops_till_bundle_end
	bl error_with_file_and_line
	b .LBB78_100	@ bb103
	.align	4
.LBB78_117:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_0:
 	.long	current_function_parms

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_1:
 	.long	current_function_parm_tags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_2:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_3:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_4:
 	.long	.str209692

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_5:
 	.long	.str210693

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_6:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_7:
 	.long	.str206689

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_8:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_9:
 	.long	.str211694

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_10:
 	.long	.str205688

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_11:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_12:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_13:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_14:
 	.long	double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_15:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_16:
 	.long	.str212695

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_17:
 	.long	.str13480

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_18:
 	.long	.str208691

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_19:
 	.long	.str213696

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_20:
 	.long	current_function_prototype_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_21:
 	.long	current_function_prototype_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_22:
 	.long	.str214697

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_23:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_24:
 	.long	.str215698

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_25:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_26:
 	.long	.str216699

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_27:
 	.long	keep_next_if_subblocks.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_28:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_29:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_30:
 	.long	c_function_varargs.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI78_31:
 	.long	.str134616

	.size store_parm_decls, .-store_parm_decls


	.globl	start_function
	.align	4
start_function:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r3
	mov r5, r2
	mov r3, r0
	ldr r2, .LCPI79_0
	ldr r6, [r2]
	mov r0, #0
	ldr r12, .LCPI79_1
	@comment
str r0, [r12]
	ldr r12, .LCPI79_2
	@comment
str r0, [r12]
	ldr r12, .LCPI79_3
	@comment
str r0, [r12]
	ldr r12, .LCPI79_4
	@comment
str r0, [r12]
	ldr r12, .LCPI79_5
	strb r0, [r12]
	ldr r12, .LCPI79_6
	@comment
str r0, [r12]
	ldr r12, .LCPI79_7
	@comment
str r0, [r12]
	@comment
str r0, [r2]
	mov r2, #1
	mov r0, r1
	mov r1, r3
	mov r3, #1
	emit_nops_till_bundle_end
	bl grokdeclarator
	ldr r7, [sp, #+24]
	mov r8, r0
	cmp r0, #0
	beq .LBB79_65	@ bb101
.LBB79_1:	@ bb1
	mov r0, r8
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl decl_attributes
	mov r0, r8
	emit_nops_till_bundle_end
	bl announce_function
	ldr r3, [r8, #+4]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB79_3	@ bb3
.LBB79_2:	@ bb2
	ldr r0, .LCPI79_8
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI79_9
	ldr r0, [r3]
	ldr r3, [r8, #+4]
	ldr r1, [r3, #+12]
	emit_nops_till_bundle_end
	bl build_function_type
	@comment
str r0, [r8, #+4]
.LBB79_3:	@ bb3
	ldr r3, .LCPI79_3
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI79_10
	emit_nops_till_bundle_end
	blne warning
.LBB79_4:	@ bb4
.LBB79_5:	@ bb5
	ldr r3, .LCPI79_11
	ldr r3, [r3]
	ldr r2, .LCPI79_12
	@comment
str r3, [r2]
	ldr r3, .LCPI79_13
	ldr r3, [r3]
	ldr r2, .LCPI79_14
	@comment
str r3, [r2]
	ldr r3, .LCPI79_15
	ldr r3, [r3]
	@comment
str r3, [r8, #+48]
	ldr r3, .LCPI79_16
	ldr r3, [r3]
	ldr r2, .LCPI79_17
	ldr r4, [r2]
	ldr r2, [r8, #+32]
	cmp r4, r3
	beq .LBB79_67	@ bb.i
.LBB79_6:	@ bb1.i
	ldr r3, [r2, #+24]
	cmp r3, #0
	bne .LBB79_9	@ bb6.i
.LBB79_7:	@ bb1.i.lookup_name_current_level.exit_crit_edge
	mov r4, #0
	b .LBB79_10	@ lookup_name_current_level.exit
.LBB79_8:	@ bb4.i
.LBB79_9:	@ bb6.i
	ldr r4, [r4]
	cmp r4, #0
	ldrne r3, [r4, #+32]
	cmpne r3, r2
	bne .LBB79_9	@ bb6.i
.LBB79_10:	@ lookup_name_current_level.exit
	cmp r4, #0
	beq .LBB79_17	@ bb15
.LBB79_11:	@ bb6
	ldr r3, [r4, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #23
	bne .LBB79_16	@ bb14
.LBB79_12:	@ bb7
	ldrb r2, [r4, #+29]
	tst r2, #16
	ldreq r2, [r3, #+4]
	ldreq r2, [r2, #+64]
	ldreq r1, [r8, #+4]
	ldreq r0, [r1, #+4]
	ldreq r0, [r0, #+64]
	cmpeq r0, r2
	beq .LBB79_14	@ bb12
	b .LBB79_16	@ bb14
.LBB79_13:	@ bb11
.LBB79_14:	@ bb12
	ldr r2, [r1, #+12]
	cmp r2, #0
	@comment
streq r3, [r8, #+4]
	ldreq r3, [r4, #+12]
	ldreq r2, .LCPI79_18
	@comment
streq r3, [r2]
	ldreq r3, [r4, #+16]
	ldreq r2, .LCPI79_19
	@comment
streq r3, [r2]
.LBB79_15:	@ bb13
.LBB79_16:	@ bb14
	cmp r4, #0
	ldreq r4, [r8, #+32]
	ldreq r4, [r4, #+32]
	b .LBB79_18	@ bb16
.LBB79_17:	@ bb15
	ldr r4, [r8, #+32]
	ldr r4, [r4, #+32]
.LBB79_18:	@ bb16
	ldr r3, .LCPI79_20
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB79_22	@ bb21
.LBB79_19:	@ bb17
	ldr r3, [r8, #+4]
	ldr r3, [r3, #+12]
	cmp r3, #0
	bne .LBB79_22	@ bb21
.LBB79_20:	@ bb18
	cmp r4, #0
	ldrne r3, [r4, #+4]
	ldrne r3, [r3, #+12]
	cmpne r3, #0
	bne .LBB79_22	@ bb21
	b .LBB79_68	@ bb20
.LBB79_21:	@ bb19
.LBB79_22:	@ bb21
	ldr r3, .LCPI79_22
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r8, #+10]
	tstne r3, #8
	bne .LBB79_24	@ bb27
	b .LBB79_27	@ bb31
.LBB79_23:	@ bb22
.LBB79_24:	@ bb27
	cmp r4, #0
	ldrne r3, [r4, #+4]
	ldrne r3, [r3, #+12]
	cmpne r3, #0
	bne .LBB79_27	@ bb31
.LBB79_25:	@ bb28
.LBB79_26:	@ bb29
	ldr r3, [r8, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI79_23
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB79_69	@ bb30
.LBB79_27:	@ bb31
	ldr r3, .LCPI79_22
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB79_31	@ bb44
.LBB79_28:	@ bb31
	cmp r4, #0
	ldrneb r3, [r4, #+10]
	tstne r3, #1
	bne .LBB79_30	@ bb42
	b .LBB79_31	@ bb44
.LBB79_29:	@ bb37
.LBB79_30:	@ bb42
	ldr r3, [r4, #+4]
	ldr r3, [r3, #+12]
	cmp r3, #0
	beq .LBB79_70	@ bb43
.LBB79_31:	@ bb44
	ldr r3, .LCPI79_26
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r8, #+10]
	tstne r3, #8
	bne .LBB79_33	@ bb45
	b .LBB79_35	@ bb58
.LBB79_32:	@ bb45
.LBB79_33:	@ bb45
	cmp r4, #0
	bne .LBB79_35	@ bb58
.LBB79_34:	@ bb56
	ldr r3, [r8, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI79_23
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB79_71	@ bb57
.LBB79_35:	@ bb58
	ldr r3, .LCPI79_26
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB79_41	@ bb69
.LBB79_36:	@ bb58
	cmp r4, #0
	ldrneb r3, [r4, #+10]
	tstne r3, #1
	bne .LBB79_38	@ bb67
	b .LBB79_41	@ bb69
.LBB79_37:	@ bb62
.LBB79_38:	@ bb67
	ldr r3, [r8, #+32]
	ldr r3, [r3, #+32]
	cmp r3, r4
	bne .LBB79_41	@ bb69
.LBB79_39:	@ bb68
	ldr r1, .LCPI79_28
.LBB79_40:	@ bb68
	mov r0, r8
	emit_nops_till_bundle_end
	bl warning_with_decl
.LBB79_41:	@ bb69
	ldrb r3, [r8, #+30]
	mov r2, r8
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #1, 24 @ 256
	ldr r1, .LCPI79_4
	ldr r1, [r1]
	strb r3, [r2]
	mov r0, r3, lsr #24
	strb r0, [r2, #+3]
	mov r0, #1, 24 @ 256
	and r1, r0, r1, lsl #8
	orr r1, r3, r1
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r8, #+30]
	ldrb r3, [r8, #+11]
	ldrb r2, [r8, #+10]
	mov r1, r8
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 14 @ 262144
	mov r2, r3, lsr #16
	strb r2, [r8, #+10]
	ldr r2, .LCPI79_29
	ldr r2, [r2]
	cmp r2, #0
	bicne r3, r3, #2, 14 @ 524288
	strneb r3, [r8, #+8]
	movne r2, r3, lsr #24
	strneb r2, [r8, #+11]
	movne r2, r3, lsr #16
	strneb r2, [r8, #+10]
	movne r3, r3, lsr #8
	strneb r3, [r8, #+9]
.LBB79_42:	@ bb76
.LBB79_43:	@ bb77
	mov r0, r8
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, .LCPI79_29
	@comment
str r0, [r3]
	ldr r3, .LCPI79_16
	ldr r3, [r3]
	ldr r2, .LCPI79_17
	ldr r2, [r2]
	cmp r2, r3
	ldreq r3, .LCPI79_6
	moveq r2, #0
	@comment
streq r2, [r3]
.LBB79_44:	@ bb.i103
.LBB79_45:	@ bb1.i104
	ldr r3, .LCPI79_30
	ldr r0, [r3]
	cmp r0, #0
	ldrne r3, [r0, #+20]
	ldrne r2, .LCPI79_30
	@comment
strne r3, [r2]
	moveq r0, #40
	emit_nops_till_bundle_end
	bleq xmalloc
	b .LBB79_47	@ bb4.i106
.LBB79_46:	@ bb3.i105
.LBB79_47:	@ bb4.i106
	ldr r3, .LCPI79_31
	ldr r2, [r3, #+20]
	ldr r1, [r3, #+16]
	ldr r12, [r3, #+12]
	ldmib r3, {r4, lr}
	ldr r5, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r1, [r0, #+16]
	@comment
str r12, [r0, #+12]
	stmib r0, {r4, lr}
	@comment
str r5, [r0]
	ldr r2, [r3, #+36]
	ldr r1, [r3, #+32]
	ldr r12, [r3, #+28]
	ldr r3, [r3, #+24]
	@comment
str r2, [r0, #+36]
	@comment
str r1, [r0, #+32]
	@comment
str r12, [r0, #+28]
	@comment
str r3, [r0, #+24]
	ldr r3, .LCPI79_17
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r3, #+26]
	cmpne r3, #0
	bne .LBB79_73	@ bb6.i108.pushlevel.exit_crit_edge
.LBB79_48:	@ bb6.i108
.LBB79_49:	@ bb8.i109
	mov r3, #0
.LBB79_50:	@ pushlevel.exit
	strb r3, [r0, #+25]
	ldr r3, .LCPI79_17
	ldr r2, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r0, [r3]
	ldr r2, .LCPI79_32
	ldrb r1, [r2]
	strb r1, [r0, #+27]
	mov r1, #0
	strb r1, [r2]
	ldr r2, .LCPI79_33
	ldrb r12, [r2]
	strb r12, [r0, #+28]
	strb r1, [r2]
	ldr r2, [r3]
	mov r1, #1
	strb r1, [r2, #+24]
	ldr r3, [r3]
	strb r1, [r3, #+26]
	ldr r4, .LCPI79_29
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl make_function_rtl
	ldr r4, [r4]
	ldr r3, [r4, #+4]
	ldr r2, [r3, #+4]
	ldrb r3, [r2, #+8]
	cmp r3, #7
	bne .LBB79_60	@ bb92
.LBB79_51:	@ bb78
	ldr r3, .LCPI79_34
	ldr r3, [r3]
	ldr r1, [r2, #+64]
	cmp r1, r3
	ldrne r3, .LCPI79_35
	ldrne r3, [r3]
	cmpne r1, r3
	bne .LBB79_53	@ bb80
	b .LBB79_56	@ bb83
.LBB79_52:	@ bb79
.LBB79_53:	@ bb80
	ldr r3, .LCPI79_36
	ldr r3, [r3]
	cmp r1, r3
	ldrne r3, .LCPI79_37
	ldrne r3, [r3]
	cmpne r1, r3
	bne .LBB79_55	@ bb82
	b .LBB79_56	@ bb83
.LBB79_54:	@ bb81
.LBB79_55:	@ bb82
	ldr r3, .LCPI79_38
	ldr r3, [r3]
	cmp r1, r3
	bne .LBB79_60	@ bb92
.LBB79_56:	@ bb83
	ldrb r3, [r2, #+9]
	tst r3, #64
	beq .LBB79_59	@ bb91
.LBB79_57:	@ bb88
	ldr r3, .LCPI79_39
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB79_74	@ bb90
.LBB79_58:	@ bb89
	ldr r3, .LCPI79_40
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	ldrb r2, [r2, #+28]
	cmp r2, r3
	beq .LBB79_74	@ bb90
.LBB79_59:	@ bb91
	ldr r3, .LCPI79_40
	ldr r2, [r3]
.LBB79_60:	@ bb92
	mov r0, #35
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_decl
	@comment
str r0, [r4, #+44]
	cmp r7, #0
	emit_nops_till_bundle_end
	bleq temporary_allocation
.LBB79_61:	@ bb93
.LBB79_62:	@ bb94
	ldr r3, .LCPI79_29
	ldr r3, [r3]
	ldr r2, [r3, #+56]
	ldrb r2, [r2, #+9]
	tst r2, #8
	beq .LBB79_64	@ bb100
.LBB79_63:	@ bb99
	ldrb r2, [r3, #+10]
	ldrb r1, [r3, #+8]!
	ldrb r0, [r3, #+3]
	orr r2, r2, r0, lsl #8
	ldrb r0, [r3, #+1]
	orr r0, r1, r0, lsl #8
	orr r2, r0, r2, lsl #16
	orr r2, r2, #2, 22 @ 2048
	mov r2, r2, lsr #8
	strb r2, [r3, #+1]
	strb r1, [r3]
.LBB79_64:	@ bb100
	ldr r3, .LCPI79_0
	@comment
str r6, [r3]
	mov r0, #1
	b .LBB79_66	@ bb101
.LBB79_65:	@ bb101
	mov r0, #0
.LBB79_66:	@ bb101
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB79_67:	@ bb.i
	ldr r4, [r2, #+20]
	b .LBB79_10	@ lookup_name_current_level.exit
.LBB79_68:	@ bb20
	ldr r0, .LCPI79_21
	emit_nops_till_bundle_end
	bl warning
	b .LBB79_41	@ bb69
.LBB79_69:	@ bb30
	ldr r1, .LCPI79_24
	b .LBB79_40	@ bb68
.LBB79_70:	@ bb43
	ldr r1, .LCPI79_25
	b .LBB79_40	@ bb68
.LBB79_71:	@ bb57
	ldr r1, .LCPI79_27
	b .LBB79_40	@ bb68
.LBB79_72:	@ bb2.i
.LBB79_73:	@ bb6.i108.pushlevel.exit_crit_edge
	mov r3, #1
	b .LBB79_50	@ pushlevel.exit
.LBB79_74:	@ bb90
	ldr r3, .LCPI79_41
	ldr r2, [r3]
	b .LBB79_60	@ bb92
	.align	4
.LBB79_75:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_0:
 	.long	immediate_size_expand

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_1:
 	.long	current_function_returns_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_2:
 	.long	current_function_returns_null

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_3:
 	.long	warn_about_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_4:
 	.long	current_extern_inline

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_5:
 	.long	c_function_varargs.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_6:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_7:
 	.long	shadowed_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_8:
 	.long	.str217700

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_9:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_10:
 	.long	.str218701

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_11:
 	.long	last_function_parms

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_12:
 	.long	current_function_parms

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_13:
 	.long	last_function_parm_tags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_14:
 	.long	current_function_parm_tags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_15:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_16:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_17:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_18:
 	.long	current_function_prototype_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_19:
 	.long	current_function_prototype_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_20:
 	.long	warn_strict_prototypes

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_21:
 	.long	.str11478

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_22:
 	.long	warn_missing_prototypes

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_23:
 	.long	.str134616

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_24:
 	.long	.str219702

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_25:
 	.long	.str220703

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_26:
 	.long	warn_missing_declarations

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_27:
 	.long	.str221704

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_28:
 	.long	.str222705

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_29:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_30:
 	.long	free_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_31:
 	.long	clear_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_32:
 	.long	keep_next_level_flag.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_33:
 	.long	keep_next_if_subblocks.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_34:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_35:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_36:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_37:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_38:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_39:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_40:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI79_41:
 	.long	unsigned_type_node

	.size start_function, .-start_function


	.globl	build_enumerator
	.align	4
build_enumerator:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r0
	cmp r1, #0
	beq .LBB80_3	@ bb3
.LBB80_1:	@ bb1
	mov r3, r1
	ldrb r2, [r3, #+8]
	sub r2, r2, #105
	and r2, r2, #255
	cmp r2, #3
	blo .LBB80_18	@ bb2
.LBB80_2:	@ bb1.bb3_crit_edge
	mov r1, r3
.LBB80_3:	@ bb3
	cmp r1, #0
	beq .LBB80_6	@ bb7
.LBB80_4:	@ bb4
	ldrb r3, [r1, #+8]
	cmp r3, #25
	bne .LBB80_7	@ bb7.thread
.LBB80_5:	@ bb5
	mov r0, r1
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, r0
	emit_nops_till_bundle_end
	bl constant_expression_warning
	mov r1, r5
.LBB80_6:	@ bb7
	cmp r1, #0
	beq .LBB80_8	@ bb8
	b .LBB80_10	@ bb10
.LBB80_7:	@ bb7.thread
	ldr r1, [r4, #+16]
	ldr r0, .LCPI80_0
	emit_nops_till_bundle_end
	bl error
.LBB80_8:	@ bb8
	ldr r3, .LCPI80_1
	ldr r3, [r3]
	ldr r2, .LCPI80_2
	ldr r5, [r2]
	cmp r3, #0
	bne .LBB80_19	@ bb9
.LBB80_9:	@ bb8.bb10_crit_edge
	mov r1, r5
.LBB80_10:	@ bb10
	mov r5, r1
	ldr r3, .LCPI80_4
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB80_13	@ bb13
.LBB80_11:	@ bb11
	ldr r3, .LCPI80_5
	ldr r1, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB80_13	@ bb13
.LBB80_12:	@ bb12
	ldr r0, .LCPI80_6
	emit_nops_till_bundle_end
	bl pedwarn
	ldr r5, .LCPI80_7
	ldr r5, [r5]
.LBB80_13:	@ bb13
	ldr r3, .LCPI80_8
	ldr r2, [r3]
	mov r0, #56
	mov r3, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_binary_op
	ldr r3, .LCPI80_2
	@comment
str r0, [r3]
	mov r1, r5
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	ldr r3, .LCPI80_1
	@comment
str r0, [r3]
	ldr r3, .LCPI80_9
	ldr r3, [r3]
	ldr r2, [r5, #+4]
	cmp r3, #0
	bne .LBB80_15	@ bb15
.LBB80_14:	@ bb14
	ldr r3, .LCPI80_5
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	ldrb r1, [r2, #+28]
	cmp r1, r3
	blo .LBB80_16	@ bb20
.LBB80_15:	@ bb15
	ldrb r3, [r2, #+9]
	tst r3, #64
	bne .LBB80_20	@ bb15.bb21_crit_edge
.LBB80_16:	@ bb20
	mov r1, #0
.LBB80_17:	@ bb21
	ldr r3, .LCPI80_5
	ldr r3, [r3]
	ldrb r0, [r3, #+28]
	ldrb r12, [r2, #+28]
	cmp r12, r0
	movhi r3, r2
	ldrb r0, [r3, #+28]
	emit_nops_till_bundle_end
	bl type_for_size
	mov r6, r0
	mov r0, #31
	mov r1, r4
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	@comment
str r5, [r4, #+48]
	@comment
str r6, [r5, #+4]
	emit_nops_till_bundle_end
	bl pushdecl
	mov r2, #0
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl saveable_tree_cons
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB80_18:	@ bb2
	ldr r1, [r3, #+16]
	ldr r2, [r1, #+4]
	ldr r0, [r3, #+4]
	cmp r0, r2
	beq .LBB80_1	@ bb1
	b .LBB80_2	@ bb1.bb3_crit_edge
.LBB80_19:	@ bb9
	ldr r0, .LCPI80_3
	emit_nops_till_bundle_end
	bl error
	b .LBB80_9	@ bb8.bb10_crit_edge
.LBB80_20:	@ bb15.bb21_crit_edge
	mov r1, #1
	b .LBB80_17	@ bb21
	.align	4
.LBB80_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_0:
 	.long	.str223706

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_1:
 	.long	enum_overflow

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_2:
 	.long	enum_next_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_3:
 	.long	.str224707

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_4:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_5:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_6:
 	.long	.str225708

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_7:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_8:
 	.long	integer_one_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI80_9:
 	.long	flag_traditional

	.size build_enumerator, .-build_enumerator


	.globl	push_parm_decl
	.align	4
push_parm_decl:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r0
	ldr r5, .LCPI81_0
	ldr r6, [r5]
	mov r3, #0
	@comment
str r3, [r5]
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r3, [r4, #+12]
	ldr r0, [r3, #+16]
	ldr r1, [r3, #+12]
	mov r2, #2
	mov r3, #0
	emit_nops_till_bundle_end
	bl grokdeclarator
	mov r7, r0
	ldr r3, [r4, #+16]
	ldr r1, [r3, #+16]
	ldr r2, [r3, #+12]
	emit_nops_till_bundle_end
	bl decl_attributes
	mov r0, r7
	emit_nops_till_bundle_end
	bl pushdecl
	mov r4, r0
	@comment
str r6, [r5]
	ldr r3, .LCPI81_1
	ldr r5, [r3]
	ldr r2, [r5, #+36]
	mov r0, #0
	mov r1, r4
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r5, #+36]
	mov r0, r4
	mov r1, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl finish_decl
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB81_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI81_0:
 	.long	immediate_size_expand

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI81_1:
 	.long	current_binding_level

	.size push_parm_decl, .-push_parm_decl


	.globl	start_decl
	.align	4
start_decl:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r2, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl grokdeclarator
	mov r7, r0
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r8, [sp, #+24]
	cmp r5, #0
	beq .LBB82_19	@ bb21
.LBB82_1:	@ bb
	ldrb r3, [r7, #+8]
	cmp r3, #29
	beq .LBB82_7	@ bb4
.LBB82_2:	@ bb
	cmp r3, #34
	beq .LBB82_8	@ bb5
.LBB82_3:	@ bb
	cmp r3, #32
	bne .LBB82_9	@ bb6
.LBB82_4:	@ bb1
	ldr r3, .LCPI82_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB82_6	@ bb3
.LBB82_5:	@ bb2
	mov r0, r6
	emit_nops_till_bundle_end
	bl list_length
	cmp r0, #2
	blt .LBB82_15	@ bb17
.LBB82_6:	@ bb3
	ldr r3, [r7, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI82_1
	emit_nops_till_bundle_end
	bl error
	b .LBB82_19	@ bb21
.LBB82_7:	@ bb4
	ldr r3, [r7, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI82_2
	emit_nops_till_bundle_end
	bl error
	b .LBB82_19	@ bb21
.LBB82_8:	@ bb5
	ldr r3, [r7, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI82_3
	emit_nops_till_bundle_end
	bl error
	b .LBB82_19	@ bb21
.LBB82_9:	@ bb6
	ldr r3, [r7, #+4]
	ldr r2, [r3, #+16]
	cmp r2, #0
	beq .LBB82_13	@ bb13
.LBB82_10:	@ bb7
	ldrb r3, [r2, #+8]
	cmp r3, #25
	ldreqb r3, [r7, #+31]
	tsteq r3, #1
	beq .LBB82_15	@ bb17
.LBB82_11:	@ bb8
.LBB82_12:	@ bb12
	ldr r0, .LCPI82_4
	emit_nops_till_bundle_end
	bl error
	b .LBB82_19	@ bb21
.LBB82_13:	@ bb13
	ldrb r2, [r3, #+8]
	cmp r2, #18
	bne .LBB82_32	@ bb14
.LBB82_14:	@ bb15
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+16]
	cmp r3, #0
	beq .LBB82_33	@ bb16
.LBB82_15:	@ bb17
	cmp r5, #0
	beq .LBB82_19	@ bb21
.LBB82_16:	@ bb18
	ldrb r3, [r7, #+29]
	mov r2, r7
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r0, [r2, #+2]
	orr r1, r0, r1, lsl #8
	orr r3, r3, r1, lsl #16
	bic r3, r3, #1, 24 @ 256
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, r3, lsr #16
	strb r1, [r2, #+2]
	mov r3, r3, lsr #8
	strb r3, [r7, #+29]
	ldr r3, .LCPI82_7
	ldr r3, [r3]
	ldr r2, .LCPI82_8
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB82_18	@ bb20
.LBB82_17:	@ bb19
	ldrb r3, [r7, #+10]
	ldrb r2, [r7, #+11]
	mov r1, r7
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 14 @ 262144
	mov r3, r3, lsr #16
	strb r3, [r7, #+10]
.LBB82_18:	@ bb20
	ldr r3, .LCPI82_9
	ldr r3, [r3]
	@comment
str r3, [r7, #+48]
.LBB82_19:	@ bb21
	ldrb r3, [r7, #+8]
	cmp r3, #29
	bne .LBB82_21	@ bb23
.LBB82_20:	@ bb22
	ldr r3, [r7, #+4]
	ldr r3, [r3, #+12]
	mov r1, #0
	mov r2, #1
	cmp r3, #0
	mov r3, #0
	movne r3, r2
	mov r0, r7
	mov r2, #0
	emit_nops_till_bundle_end
	bl gen_aux_info_record
.LBB82_21:	@ bb23
	ldrb r3, [r7, #+30]
	ldrb r2, [r7, #+31]
	mov r1, r7
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 16 @ 131072
	mov r3, r3, lsr #16
	strb r3, [r7, #+30]
	mov r0, r7
	mov r1, r4
	mov r2, r8
	emit_nops_till_bundle_end
	bl decl_attributes
	mov r0, r7
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, .LCPI82_7
	ldr r3, [r3]
	ldr r2, .LCPI82_8
	ldr r2, [r2]
	mov r4, r0
	cmp r2, r3
	beq .LBB82_27	@ bb30
.LBB82_22:	@ bb24
	ldr r3, [r4, #+68]
	cmp r3, #0
	bne .LBB82_27	@ bb30
.LBB82_23:	@ bb25
	ldr r3, [r4, #+4]
	ldr r2, [r3, #+16]
	cmp r2, #0
	bne .LBB82_26	@ bb29
.LBB82_24:	@ bb27
	ldrb r3, [r3, #+8]
	cmp r3, #18
	bne .LBB82_27	@ bb30
.LBB82_25:	@ bb28
	ldr r3, [r4, #+48]
	cmp r3, #0
	movne r0, r4
	emit_nops_till_bundle_end
	blne expand_decl
	b .LBB82_27	@ bb30
.LBB82_26:	@ bb29
	mov r0, r4
	emit_nops_till_bundle_end
	bl expand_decl
.LBB82_27:	@ bb30
	cmp r5, #0
	beq .LBB82_31	@ bb34
.LBB82_28:	@ bb31
	ldr r3, .LCPI82_7
	ldr r3, [r3]
	ldr r2, .LCPI82_8
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB82_31	@ bb34
.LBB82_29:	@ bb32
	ldr r3, .LCPI82_10
	ldr r3, [r3]
	cmp r3, #0
	emit_nops_till_bundle_end
	blne temporary_allocation
.LBB82_30:	@ bb33
.LBB82_31:	@ bb34
	mov r0, r4
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB82_32:	@ bb14
	ldr r3, [r7, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI82_5
	emit_nops_till_bundle_end
	bl error
	b .LBB82_19	@ bb21
.LBB82_33:	@ bb16
	ldr r3, [r7, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI82_6
	emit_nops_till_bundle_end
	bl error
	b .LBB82_19	@ bb21
	.align	4
.LBB82_34:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_1:
 	.long	.str226709

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_2:
 	.long	.str227710

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_3:
 	.long	.str228711

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_4:
 	.long	.str229712

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_5:
 	.long	.str230713

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_6:
 	.long	.str231714

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_7:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_8:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_9:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI82_10:
 	.long	debug_temp_inits

	.size start_decl, .-start_decl


	.globl	builtin_function
	.align	4
builtin_function:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI83_0
	ldr r2, [r2]
	mov r6, r0
	cmp r2, #0
	beq .LBB83_3	@ bb2
.LBB83_1:	@ bb
	ldrb r2, [r7]
	cmp r2, #95
	movne r2, r3, lsr #24
	strneb r2, [r6, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r6, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r6, #+9]
	strneb r3, [r6, #+8]
.LBB83_2:	@ bb1
.LBB83_3:	@ bb2
	cmp r4, #0
	beq .LBB83_5	@ bb4
.LBB83_4:	@ bb3
	mov r0, r4
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
.LBB83_5:	@ bb4
	mov r1, #0
	mov r2, #1
	mov r0, r6
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	cmp r5, #0
	beq .LBB83_7	@ bb6
.LBB83_6:	@ bb5
	ldrb r3, [r6, #+30]
	mov r2, r6
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	@comment
str r5, [r6, #+72]
.LBB83_7:	@ bb6
	ldrb r3, [r7]
	cmp r3, #95
	ldreqb r3, [r7, #+1]
	cmpeq r3, #95
	beq .LBB83_10	@ bb9
.LBB83_8:	@ bb7
.LBB83_9:	@ bb8
	mov r3, r6
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	orr r1, r1, #8
	mov r0, r6
	ldrb r12, [r0, #+28]!
	strb r1, [r3, #+1]
	strb r2, [r3]
	strb r12, [r0]
.LBB83_10:	@ bb9
	mov r0, r6
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB83_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI83_0:
 	.long	flag_traditional

	.size builtin_function, .-builtin_function


	.globl	init_decl_processing
	.align	4
init_decl_processing:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #32
	mov r3, #0
	ldr r2, .LCPI84_150
	@comment
str r3, [r2]
	ldr r2, .LCPI84_151
	@comment
str r3, [r2]
	ldr r2, .LCPI84_152
	@comment
str r3, [r2]
	ldr r2, .LCPI84_153
	@comment
str r3, [r2]
	ldr r3, .LCPI84_154
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI84_151
	moveq r2, #0
	@comment
streq r2, [r3]
.LBB84_1:	@ bb1.i
.LBB84_2:	@ bb3.i
	mov r0, #40
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI84_155
	ldr r2, [r3, #+20]
	ldr r1, [r3, #+16]
	ldr r12, [r3, #+12]
	ldmib r3, {r4, lr}
	ldr r5, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r1, [r0, #+16]
	@comment
str r12, [r0, #+12]
	stmib r0, {r4, lr}
	@comment
str r5, [r0]
	ldr r2, [r3, #+36]
	ldr r1, [r3, #+32]
	ldr r12, [r3, #+28]
	ldr r3, [r3, #+24]
	@comment
str r2, [r0, #+36]
	@comment
str r1, [r0, #+32]
	@comment
str r12, [r0, #+28]
	@comment
str r3, [r0, #+24]
	ldr r3, .LCPI84_152
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r3, #+26]
	cmpne r3, #0
	bne .LBB84_219	@ bb6.i.pushlevel.exit_crit_edge
.LBB84_3:	@ bb6.i
.LBB84_4:	@ bb8.i
	mov r3, #0
.LBB84_5:	@ pushlevel.exit
	strb r3, [r0, #+25]
	ldr r3, .LCPI84_152
	ldr r2, [r3]
	@comment
str r2, [r0, #+20]
	@comment
str r0, [r3]
	ldr r2, .LCPI84_156
	ldrb r1, [r2]
	strb r1, [r0, #+27]
	mov r1, #0
	strb r1, [r2]
	ldr r2, .LCPI84_157
	ldrb r12, [r2]
	strb r12, [r0, #+28]
	strb r1, [r2]
	ldr r3, [r3]
	ldr r2, .LCPI84_154
	@comment
str r3, [r2]
	mov r0, #32
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r2, r0
	ldr r3, .LCPI84_158
	@comment
str r2, [r3]
	ldr r3, .LCPI84_159
	ldr r1, [r3, #+4]
	mov r0, #32
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, .LCPI84_160
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB84_220	@ bb
.LBB84_6:	@ bb1
	mov r0, #8
	emit_nops_till_bundle_end
	bl make_unsigned_type
.LBB84_7:	@ bb2
	mov r4, r0
	ldr r3, .LCPI84_161
	@comment
str r4, [r3]
	ldr r0, .LCPI84_162
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r5, #32
	mov r0, #32
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, #32
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r4, r0
	ldr r3, .LCPI84_163
	@comment
str r4, [r3]
	ldr r0, .LCPI84_164
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #32
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, #32
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r4, r0
	ldr r3, .LCPI84_165
	@comment
str r4, [r3]
	ldr r6, .LCPI84_166
	mov r0, r6
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #32
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, r5
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r4, r0
	ldr r3, .LCPI84_167
	@comment
str r4, [r3]
	ldr r0, .LCPI84_168
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, #64
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r4, r0
	ldr r3, .LCPI84_169
	@comment
str r4, [r3]
	ldr r0, .LCPI84_170
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, #64
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r4, r0
	ldr r3, .LCPI84_171
	@comment
str r4, [r3]
	ldr r0, .LCPI84_172
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, r6
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, [r0, #+20]
	ldr r0, [r3, #+4]
	ldr r3, .LCPI84_173
	@comment
str r0, [r3]
	ldr r3, .LCPI84_174
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r3, [r0, #+9]
	tstne r3, #64
	bne .LBB84_48	@ bb7
	b .LBB84_49	@ bb8
	.align	4
.LBB84_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_150:
 	.long	current_function_decl

.LBB84_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_151:
 	.long	named_labels

.LBB84_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_152:
 	.long	current_binding_level

.LBB84_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_153:
 	.long	free_binding_level

.LBB84_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_154:
 	.long	global_binding_level

.LBB84_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_155:
 	.long	clear_binding_level

.LBB84_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_156:
 	.long	keep_next_level_flag.b

.LBB84_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_157:
 	.long	keep_next_if_subblocks.b

.LBB84_16:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_158:
 	.long	integer_type_node

.LBB84_17:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_159:
 	.long	ridpointers

.LBB84_18:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_160:
 	.long	flag_signed_char

.LBB84_19:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_161:
 	.long	char_type_node

.LBB84_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_162:
 	.long	.str232715

.LBB84_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_163:
 	.long	long_integer_type_node

.LBB84_22:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_164:
 	.long	.str233716

.LBB84_23:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_165:
 	.long	unsigned_type_node

.LBB84_24:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_166:
 	.long	.str234717

.LBB84_25:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_167:
 	.long	long_unsigned_type_node

.LBB84_26:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_168:
 	.long	.str235718

.LBB84_27:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_169:
 	.long	long_long_integer_type_node

.LBB84_28:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_170:
 	.long	.str236719

.LBB84_29:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_171:
 	.long	long_long_unsigned_type_node

.LBB84_30:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_172:
 	.long	.str237720

.LBB84_31:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_173:
 	.long	sizetype

.LBB84_32:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_174:
 	.long	flag_traditional

.LBB84_33:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_175:
 	.long	ptrdiff_type_node

.LBB84_34:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_176:
 	.long	error_mark_node

.LBB84_35:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_177:
 	.long	short_integer_type_node

.LBB84_36:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_178:
 	.long	.str238721

.LBB84_37:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_179:
 	.long	short_unsigned_type_node

.LBB84_38:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_180:
 	.long	.str239722

.LBB84_39:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_181:
 	.long	signed_char_type_node

.LBB84_40:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_182:
 	.long	.str240723

.LBB84_41:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_183:
 	.long	unsigned_char_type_node

.LBB84_42:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_184:
 	.long	.str241724

.LBB84_43:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_185:
 	.long	mode_size

.LBB84_44:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_186:
 	.long	intQI_type_node

.LBB84_45:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_187:
 	.long	intHI_type_node

.LBB84_46:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_188:
 	.long	intSI_type_node

.LBB84_47:	@ bb3
	.align	4
.LBB84_48:	@ bb7
	emit_nops_till_bundle_end
	bl signed_type
	ldr r3, .LCPI84_173
	@comment
str r0, [r3]
.LBB84_49:	@ bb8
	ldr r0, .LCPI84_164
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, [r0, #+20]
	ldr r3, [r3, #+4]
	ldr r2, .LCPI84_175
	@comment
str r3, [r2]
	ldr r3, .LCPI84_173
	@comment
str r3, [sp, #+28]
	ldr r3, [r3]
	ldr r4, .LCPI84_158
	ldr r2, [r4]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	ldr r2, .LCPI84_161
	@comment
str r2, [sp, #+16]
	ldr r2, [r2]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	ldr r2, .LCPI84_165
	@comment
str r2, [sp, #+12]
	ldr r2, [r2]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	ldr r2, .LCPI84_167
	ldr r2, [r2]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	ldr r2, .LCPI84_163
	@comment
str r2, [sp, #+8]
	ldr r2, [r2]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	ldr r2, .LCPI84_169
	ldr r2, [r2]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	ldr r2, .LCPI84_171
	ldr r2, [r2]
	ldr r2, [r2, #+16]
	@comment
str r3, [r2, #+4]
	mov r5, #0
	mov r0, #0
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, .LCPI84_176
	@comment
str r0, [r3]
	@comment
str r0, [r0, #+4]
	mov r0, #16
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r6, r0
	ldr r3, .LCPI84_177
	@comment
str r6, [r3]
	ldr r0, .LCPI84_178
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r7, #32
	mov r0, #32
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, #16
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r6, r0
	ldr r3, .LCPI84_179
	@comment
str r6, [r3]
	ldr r0, .LCPI84_180
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, #8
	mov r0, r3
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r6, r0
	ldr r3, .LCPI84_181
	@comment
str r6, [r3]
	ldr r0, .LCPI84_182
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, #8
	mov r0, r3
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r6, r0
	ldr r3, .LCPI84_183
	@comment
str r6, [r3]
	ldr r0, .LCPI84_184
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r6, .LCPI84_185
	ldr r3, [r6, #+4]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r2, r0
	ldr r3, .LCPI84_186
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+8]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r2, r0
	ldr r3, .LCPI84_187
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+16]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r2, r0
	ldr r3, .LCPI84_188
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+24]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_signed_type
	mov r2, r0
	ldr r3, .LCPI84_189
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+4]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r2, r0
	ldr r3, .LCPI84_190
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+8]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r2, r0
	ldr r3, .LCPI84_191
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+16]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r2, r0
	ldr r3, .LCPI84_192
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6, #+24]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl make_unsigned_type
	mov r2, r0
	ldr r3, .LCPI84_193
	@comment
str r2, [r3]
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, #8
	mov r0, r3
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, .LCPI84_194
	@comment
str r3, [sp, #+24]
	@comment
str r0, [r3]
	strb r7, [r0, #+28]
	ldr r3, .LCPI84_159
	@comment
str r3, [sp, #+20]
	ldr r1, [r3, #+12]
	ldr r3, [sp, #+24]
	ldr r2, [r3]
	mov r0, r7
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [sp, #+24]
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl layout_type
	mov r3, #8
	mov r0, r3
	emit_nops_till_bundle_end
	bl make_node
	ldr r6, .LCPI84_195
	@comment
str r0, [r6]
	ldr r3, .LCPI84_196
	ldr r3, [r3]
	mov r8, #64
	cmp r3, #0
	mov r3, #32
	moveq r3, r8
	strb r3, [r0, #+28]
	ldr r3, [sp, #+20]
	ldr r1, [r3, #+16]
	ldr r2, [r6]
	mov r0, r7
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r0, [r6]
	emit_nops_till_bundle_end
	bl layout_type
	mov r3, #8
	mov r0, r3
	emit_nops_till_bundle_end
	bl make_node
	ldr r9, .LCPI84_197
	@comment
str r0, [r9]
	strb r8, [r0, #+28]
	ldr r8, [r9]
	ldr r0, .LCPI84_198
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl layout_type
	mov r8, #9
	mov r0, #9
	emit_nops_till_bundle_end
	bl make_node
	mov r10, r0
	ldr r11, .LCPI84_199
	@comment
str r10, [r11]
	ldr r0, .LCPI84_200
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r10
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r4]
	ldr r2, [r11]
	@comment
str r3, [r2, #+4]
	ldr r0, [r11]
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r8
	emit_nops_till_bundle_end
	bl make_node
	mov r10, r0
	ldr r11, .LCPI84_201
	@comment
str r10, [r11]
	ldr r0, .LCPI84_202
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r10
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [sp, #+24]
	ldr r3, [r3]
	ldr r2, [r11]
	@comment
str r3, [r2, #+4]
	ldr r0, [r11]
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r8
	emit_nops_till_bundle_end
	bl make_node
	mov r10, r0
	ldr r11, .LCPI84_203
	@comment
str r10, [r11]
	ldr r0, .LCPI84_204
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r10
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r6]
	ldr r2, [r11]
	@comment
str r3, [r2, #+4]
	ldr r0, [r11]
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r8
	emit_nops_till_bundle_end
	bl make_node
	mov r8, r0
	ldr r10, .LCPI84_205
	@comment
str r8, [r10]
	ldr r0, .LCPI84_206
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r3, [r9]
	ldr r2, [r10]
	@comment
str r3, [r2, #+4]
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl layout_type
	ldr r0, .LCPI84_207
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, [r0, #+20]
	ldr r0, [r3, #+4]
	ldr r8, .LCPI84_208
	@comment
str r0, [r8]
	emit_nops_till_bundle_end
	bl signed_type
	ldr r3, .LCPI84_209
	@comment
str r0, [r3]
	ldr r0, [r8]
	emit_nops_till_bundle_end
	bl unsigned_type
	ldr r3, .LCPI84_210
	@comment
str r0, [r3]
	mov r0, r5
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r10, .LCPI84_211
	@comment
str r0, [r10]
	ldr r3, [r4]
	@comment
str r3, [r0, #+4]
	mov r3, #1
	mov r0, r3
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r3, .LCPI84_212
	@comment
str r0, [r3]
	ldr r2, [r4]
	@comment
str r2, [r0, #+4]
	ldr r2, [r4]
	ldr r1, .LCPI84_213
	@comment
str r2, [r1]
	ldr r3, [r3]
	ldr r2, .LCPI84_214
	@comment
str r3, [r2]
	ldr r3, [r10]
	ldr r2, .LCPI84_215
	@comment
str r3, [r2]
	mov r0, r5
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r3, .LCPI84_216
	@comment
str r0, [r3]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	mov r3, #1
	mov r0, r3
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r3, .LCPI84_217
	@comment
str r0, [r3]
	ldr r3, [sp, #+28]
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	mov r0, #6
	emit_nops_till_bundle_end
	bl make_node
	mov r2, r0
	ldr r10, .LCPI84_218
	@comment
str r2, [r10]
	ldr r3, [sp, #+20]
	ldr r1, [r3, #+20]
	mov r0, r7
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl layout_type
	ldr r3, [r10]
	mov r2, #8
	@comment
str r2, [r3, #+32]
	mov r0, r5
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r7, r0
	ldr r11, .LCPI84_219
	@comment
str r7, [r11]
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl build_pointer_type
	@comment
str r0, [r7, #+4]
	ldr r3, [r11]
	ldr r0, [r3, #+4]
	emit_nops_till_bundle_end
	bl layout_type
	ldr r3, [sp, #+16]
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldr r3, .LCPI84_220
	@comment
str r3, [sp, #+20]
	@comment
str r0, [r3]
	ldr r3, [sp, #+16]
	ldr r0, [r3]
	mov r3, #1
	mov r1, r3
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_type_variant
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldr r7, .LCPI84_221
	@comment
str r0, [r7]
	mov r0, #200
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	emit_nops_till_bundle_end
	bl build_index_type
	mov r11, r0
	ldr r3, [sp, #+16]
	ldr r0, [r3]
	mov r1, r11
	emit_nops_till_bundle_end
	bl build_array_type
	ldr r3, .LCPI84_222
	@comment
str r0, [r3]
	ldr r0, [r4]
	mov r1, r11
	emit_nops_till_bundle_end
	bl build_array_type
	ldr r3, .LCPI84_223
	@comment
str r0, [r3]
	ldr r0, [r8]
	mov r1, r11
	emit_nops_till_bundle_end
	bl build_array_type
	ldr r3, .LCPI84_224
	@comment
str r0, [r3]
	ldr r0, [r4]
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_225
	@comment
str r3, [sp, #+4]
	@comment
str r0, [r3]
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldr r8, .LCPI84_226
	@comment
str r0, [r8]
	ldr r0, [r10]
	mov r3, #1
	mov r1, r3
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_type_variant
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldr r11, .LCPI84_227
	@comment
str r0, [r11]
	ldr r1, [r10]
	mov r0, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [sp]
	ldr r0, [r10]
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_function_type
	@comment
str r0, [sp, #+16]
	ldr r3, [sp, #+24]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r3, [sp, #+24]
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_228
	@comment
str r0, [r3]
	ldr r1, [r6]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r6]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_229
	@comment
str r0, [r3]
	ldr r1, [r9]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_230
	@comment
str r0, [r3]
	ldr r1, [r6]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r6]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r6]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_231
	@comment
str r0, [r3]
	ldr r1, [r4]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r6, .LCPI84_232
	@comment
str r0, [r6]
	ldr r3, [sp, #+8]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r3, [sp, #+8]
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_233
	@comment
str r0, [r3]
	ldr r1, [r4]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_234
	@comment
str r0, [r3]
	ldr r3, [sp, #+28]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r11]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r11]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_235
	@comment
str r0, [r3]
	ldr r1, [r4]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_236
	@comment
str r0, [r3]
	ldr r1, [r7]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r3, [sp, #+20]
	ldr r1, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r3, [sp, #+20]
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_237
	@comment
str r0, [r3]
	ldr r1, [r7]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r7]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl build_function_type
	ldr r3, .LCPI84_238
	@comment
str r0, [r3]
	ldr r1, [r7]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r7, .LCPI84_174
	ldr r3, [r7]
	cmp r3, #0
	ldr r3, [sp, #+28]
	moveq r4, r3
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl build_function_type
	@comment
str r0, [sp, #+8]
	ldr r3, [r7]
	cmp r3, #0
	ldr r3, [sp, #+20]
	moveq r3, r8
	ldr r4, [r3]
	ldr r3, [sp, #+28]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r11]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_function_type
	@comment
str r0, [sp, #+20]
	ldr r3, [sp, #+4]
	ldr r4, [r3]
	ldr r0, .LCPI84_239
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r7, #29
	mov r0, r7
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r4
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r1, r5
	mov r3, #1
	mov r2, r3
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #27
	@comment
str r3, [r4, #+72]
	ldr r3, [sp, #+12]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r8]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r4, r0
	ldr r0, .LCPI84_240
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r4
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r1, r5
	mov r3, #1
	mov r2, r3
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	@comment
str r7, [r4, #+72]
	ldr r3, [sp, #+12]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r8]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r4, r0
	ldr r0, .LCPI84_241
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r4
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r1, r5
	mov r3, #1
	mov r2, r3
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #28
	@comment
str r3, [r4, #+72]
	ldr r3, [sp, #+28]
	ldr r1, [r3]
	mov r0, r5
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r8]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r4, r0
	ldr r0, .LCPI84_242
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r8, r4
	ldrb r2, [r8, #+28]!
	ldrb r1, [r8, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r8, #+1]
	strb r2, [r8]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	ldr r0, .LCPI84_243
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r4, #+56]
	mov r0, r4
	mov r1, r5
	mov r3, #1
	mov r2, r3
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r8, #+1]
	ldrb r1, [r8]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r8, #+1]
	mov r3, #1
	@comment
str r3, [r4, #+72]
	ldr r4, [r6]
	ldr r0, .LCPI84_244
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r7
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r6, r4
	ldrb r2, [r6, #+28]!
	ldrb r1, [r6, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	strb r2, [r6]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r1, r5
	mov r3, #1
	mov r2, r3
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r6, #+1]
	ldrb r1, [r6]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	mov r3, #5
	@comment
str r3, [r4, #+72]
	ldr r3, .LCPI84_245
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI84_246
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB84_127	@ bb19
	b .LBB84_132	@ bb20
	.align	4
.LBB84_50:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_189:
 	.long	intDI_type_node

.LBB84_51:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_190:
 	.long	unsigned_intQI_type_node

.LBB84_52:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_191:
 	.long	unsigned_intHI_type_node

.LBB84_53:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_192:
 	.long	unsigned_intSI_type_node

.LBB84_54:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_193:
 	.long	unsigned_intDI_type_node

.LBB84_55:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_194:
 	.long	float_type_node

.LBB84_56:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_195:
 	.long	double_type_node

.LBB84_57:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_196:
 	.long	flag_short_double

.LBB84_58:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_197:
 	.long	long_double_type_node

.LBB84_59:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_198:
 	.long	.str242725

.LBB84_60:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_199:
 	.long	complex_integer_type_node

.LBB84_61:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_200:
 	.long	.str243726

.LBB84_62:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_201:
 	.long	complex_float_type_node

.LBB84_63:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_202:
 	.long	.str244727

.LBB84_64:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_203:
 	.long	complex_double_type_node

.LBB84_65:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_204:
 	.long	.str245728

.LBB84_66:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_205:
 	.long	complex_long_double_type_node

.LBB84_67:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_206:
 	.long	.str246729

.LBB84_68:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_207:
 	.long	.str247730

.LBB84_69:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_208:
 	.long	wchar_type_node

.LBB84_70:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_209:
 	.long	signed_wchar_type_node

.LBB84_71:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_210:
 	.long	unsigned_wchar_type_node

.LBB84_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_211:
 	.long	integer_zero_node

.LBB84_73:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_212:
 	.long	integer_one_node

.LBB84_74:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_213:
 	.long	boolean_type_node

.LBB84_75:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_214:
 	.long	boolean_true_node

.LBB84_76:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_215:
 	.long	boolean_false_node

.LBB84_77:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_216:
 	.long	size_zero_node

.LBB84_78:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_217:
 	.long	size_one_node

.LBB84_79:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_218:
 	.long	void_type_node

.LBB84_80:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_219:
 	.long	null_pointer_node

.LBB84_81:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_220:
 	.long	string_type_node

.LBB84_82:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_221:
 	.long	const_string_type_node

.LBB84_83:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_222:
 	.long	char_array_type_node

.LBB84_84:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_223:
 	.long	int_array_type_node

.LBB84_85:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_224:
 	.long	wchar_array_type_node

.LBB84_86:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_225:
 	.long	default_function_type

.LBB84_87:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_226:
 	.long	ptr_type_node

.LBB84_88:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_227:
 	.long	const_ptr_type_node

.LBB84_89:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_228:
 	.long	float_ftype_float

.LBB84_90:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_229:
 	.long	double_ftype_double

.LBB84_91:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_230:
 	.long	ldouble_ftype_ldouble

.LBB84_92:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_231:
 	.long	double_ftype_double_double

.LBB84_93:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_232:
 	.long	int_ftype_int

.LBB84_94:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_233:
 	.long	long_ftype_long

.LBB84_95:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_234:
 	.long	void_ftype_ptr_ptr_int

.LBB84_96:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_235:
 	.long	int_ftype_cptr_cptr_sizet

.LBB84_97:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_236:
 	.long	void_ftype_ptr_int_int

.LBB84_98:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_237:
 	.long	string_ftype_ptr_ptr

.LBB84_99:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_238:
 	.long	int_ftype_string_string

.LBB84_100:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_239:
 	.long	.str248736

.LBB84_101:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_240:
 	.long	.str249737

.LBB84_102:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_241:
 	.long	.str250738

.LBB84_103:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_242:
 	.long	.str251739

.LBB84_104:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_243:
 	.long	.str252740

.LBB84_105:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_244:
 	.long	.str253741

.LBB84_106:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_245:
 	.long	flag_no_builtin

.LBB84_107:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_246:
 	.long	flag_no_nonansi_builtin

.LBB84_108:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_247:
 	.long	sizetype

.LBB84_109:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_248:
 	.long	flag_traditional

.LBB84_110:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_249:
 	.long	.str254742

.LBB84_111:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_250:
 	.long	.str255743

.LBB84_112:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_251:
 	.long	.str256744

.LBB84_113:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_252:
 	.long	.str257745

.LBB84_114:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_253:
 	.long	.str258746

.LBB84_115:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_254:
 	.long	.str259747

.LBB84_116:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_255:
 	.long	.str260748

.LBB84_117:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_256:
 	.long	.str261749

.LBB84_118:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_257:
 	.long	.str262750

.LBB84_119:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_258:
 	.long	.str263751

.LBB84_120:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_259:
 	.long	integer_type_node

.LBB84_121:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_260:
 	.long	.str264752

.LBB84_122:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_261:
 	.long	.str265753

.LBB84_123:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_262:
 	.long	.str266754

.LBB84_124:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_263:
 	.long	.str267755

.LBB84_125:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_264:
 	.long	.str268756

.LBB84_126:	@ bb18
	.align	4
.LBB84_127:	@ bb19
	ldr r3, .LCPI84_247
	ldr r1, [r3]
	mov r0, #0
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r3, .LCPI84_226
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r4, r0
	ldr r0, .LCPI84_243
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_248
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_128:	@ bb.i326
.LBB84_129:	@ builtin_function.exit332
	mov r5, #1
	mov r1, #0
	mov r0, r4
	mov r2, #1
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+8]!
	ldrb r1, [r4, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r4, #+1]
	orr r1, r2, r1, lsl #8
	orr r3, r1, r3, lsl #16
	orr r3, r3, #1, 18 @ 16384
	mov r3, r3, lsr #8
	strb r3, [r4, #+1]
	strb r2, [r4]
	ldr r3, .LCPI84_232
	ldr r4, [r3]
	ldr r0, .LCPI84_249
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_248
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_130:	@ bb.i319
.LBB84_131:	@ builtin_function.exit325
	mov r5, #0
	mov r6, #1
	mov r0, r4
	mov r1, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	mov r0, r3
	ldrb r12, [r0, #+2]!
	ldrb lr, [r0, #+1]
	mov r7, #5
	@comment
str r7, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, r1, lr, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r0, #+1]
	mov r1, r1, lsr #8
	strb r1, [r3, #+1]
	strb r12, [r0]
	strb r2, [r3]
	ldrb r3, [r4, #+8]!
	ldrb r2, [r4, #+1]
	orr r2, r2, #64
	mov r1, r4
	ldrb r0, [r1, #+2]!
	strb r2, [r4, #+1]
	strb r3, [r4]
	strb r0, [r1]
	ldr r0, .LCPI84_250
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	ldr r2, [sp, #+16]
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+29]
	orr r3, r3, #1
	strb r3, [r4, #+29]
	ldrb r3, [r4, #+10]
	orr r3, r3, #8
	mov r7, r4
	ldrb r2, [r7, #+8]!
	strb r3, [r4, #+10]
	strb r2, [r7]
	mov r1, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	orr r3, r3, #8
	strb r3, [r4, #+31]
	ldrb r3, [r7, #+1]
	orr r3, r3, #81
	strb r3, [r7, #+1]
.LBB84_132:	@ bb20
	ldr r3, .LCPI84_232
	ldr r4, [r3]
	ldr r0, .LCPI84_251
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r5, #29
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r6, r4
	ldrb r2, [r6, #+28]!
	ldrb r1, [r6, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	strb r2, [r6]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r7, #0
	mov r8, #1
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r6, #+1]
	ldrb r1, [r6]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	mov r3, #2
	@comment
str r3, [r4, #+72]
	ldr r4, .LCPI84_228
	ldr r6, [r4]
	ldr r0, .LCPI84_252
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r9, #3
	@comment
str r9, [r6, #+72]
	ldr r3, .LCPI84_229
	@comment
str r3, [sp, #+24]
	ldr r6, [r3]
	ldr r0, .LCPI84_253
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r6
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	@comment
str r9, [r6, #+72]
	ldr r3, .LCPI84_230
	@comment
str r3, [sp, #+28]
	ldr r6, [r3]
	ldr r0, .LCPI84_254
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r6
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	@comment
str r9, [r6, #+72]
	ldr r3, .LCPI84_233
	ldr r6, [r3]
	ldr r0, .LCPI84_255
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #4
	@comment
str r3, [r6, #+72]
	ldr r6, .LCPI84_226
	ldr r0, [r6]
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_function_type
	mov r9, r0
	ldr r0, .LCPI84_256
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl build_decl
	mov r9, r0
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r9
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r9, #+11]
	ldrb r2, [r9, #+10]
	mov r1, r9
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r9
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	mov r3, #23
	@comment
str r3, [r9, #+72]
	ldr r3, .LCPI84_225
	ldr r9, [r3]
	ldr r0, .LCPI84_257
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl build_decl
	mov r9, r0
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r9
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r9, #+11]
	ldrb r2, [r9, #+10]
	mov r1, r9
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r9
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	mov r3, #24
	@comment
str r3, [r9, #+72]
	ldr r0, [r6]
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_function_type
	mov r9, r0
	ldr r0, .LCPI84_258
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl build_decl
	mov r9, r0
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r9
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r9, #+11]
	ldrb r2, [r9, #+10]
	mov r1, r9
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r9
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	mov r3, #25
	@comment
str r3, [r9, #+72]
	ldr r9, .LCPI84_259
	ldr r1, [r9]
	mov r0, r7
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r9, r0
	ldr r0, .LCPI84_260
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl build_decl
	mov r9, r0
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r9
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r9, #+11]
	ldrb r2, [r9, #+10]
	mov r1, r9
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r9
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	mov r3, #26
	@comment
str r3, [r9, #+72]
	ldr r0, [r6]
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_function_type
	mov r9, r0
	ldr r0, .LCPI84_261
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl build_decl
	mov r9, r0
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r9
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r9, #+11]
	ldrb r2, [r9, #+10]
	mov r1, r9
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r9
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	mov r3, #31
	@comment
str r3, [r9, #+72]
	ldr r3, .LCPI84_247
	ldr r1, [r3]
	mov r0, r7
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r2, r0
	ldr r1, [r6]
	mov r0, r7
	emit_nops_till_bundle_end
	bl tree_cons
	mov r9, r0
	ldr r10, .LCPI84_218
	ldr r0, [r10]
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_function_type
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r1, r0
	mov r0, r7
	mov r2, r9
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r6]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r9, r0
	ldr r0, .LCPI84_262
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl build_decl
	mov r9, r0
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r11, r9
	ldrb r2, [r11, #+28]!
	ldrb r1, [r11, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r11, #+1]
	strb r2, [r11]
	ldrb r3, [r9, #+11]
	ldrb r2, [r9, #+10]
	mov r1, r9
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r9
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r9, #+31]
	ldrb r2, [r9, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r11, #+1]
	ldrb r1, [r11]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r11, #+1]
	mov r3, #32
	@comment
str r3, [r9, #+72]
	ldr r1, [r6]
	mov r0, r7
	ldr r2, [sp]
	emit_nops_till_bundle_end
	bl tree_cons
	mov r1, r0
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl build_function_type
	mov r6, r0
	ldr r0, .LCPI84_263
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #33
	@comment
str r3, [r6, #+72]
	ldr r0, .LCPI84_264
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	ldr r2, [sp, #+20]
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_265
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #12
	@comment
str r3, [r6, #+72]
	ldr r3, .LCPI84_266
	ldr r6, [r3]
	ldr r0, .LCPI84_267
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_268
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #13
	@comment
str r3, [r6, #+72]
	ldr r3, .LCPI84_269
	ldr r6, [r3]
	ldr r0, .LCPI84_270
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_271
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #16
	@comment
str r3, [r6, #+72]
	ldr r3, .LCPI84_272
	ldr r6, [r3]
	ldr r0, .LCPI84_273
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_274
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #15
	@comment
str r3, [r6, #+72]
	ldr r0, .LCPI84_275
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	ldr r2, [sp, #+8]
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_276
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r3, #17
	@comment
str r3, [r6, #+72]
	ldr r6, [r4]
	ldr r0, .LCPI84_277
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_278
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r9, #18
	@comment
str r9, [r6, #+72]
	ldr r3, [sp, #+24]
	ldr r6, [r3]
	ldr r0, .LCPI84_279
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r6
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_280
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	@comment
str r9, [r6, #+72]
	ldr r3, [sp, #+28]
	ldr r6, [r3]
	ldr r0, .LCPI84_281
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r6
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_282
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	@comment
str r9, [r6, #+72]
	ldr r6, [r4]
	ldr r0, .LCPI84_283
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r6
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_284
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	mov r9, #19
	@comment
str r9, [r6, #+72]
	ldr r3, [sp, #+24]
	ldr r6, [r3]
	ldr r0, .LCPI84_285
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r6
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_286
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	@comment
str r9, [r6, #+72]
	ldr r3, [sp, #+28]
	ldr r6, [r3]
	ldr r0, .LCPI84_287
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r6, r0
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r10, r6
	ldrb r2, [r10, #+28]!
	ldrb r1, [r10, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	strb r2, [r10]
	ldrb r3, [r6, #+11]
	ldrb r2, [r6, #+10]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldr r0, .LCPI84_288
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r6, #+56]
	mov r0, r6
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r6
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r6, #+31]
	ldrb r2, [r6, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r10, #+1]
	ldrb r1, [r10]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r10, #+1]
	@comment
str r9, [r6, #+72]
	ldr r4, [r4]
	ldr r0, .LCPI84_289
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r6, r4
	ldrb r2, [r6, #+28]!
	ldrb r1, [r6, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	strb r2, [r6]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	ldr r0, .LCPI84_290
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r4, #+56]
	mov r0, r4
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r6, #+1]
	ldrb r1, [r6]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r6, #+1]
	mov r6, #20
	@comment
str r6, [r4, #+72]
	ldr r3, [sp, #+24]
	ldr r4, [r3]
	ldr r0, .LCPI84_291
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r9, r4
	ldrb r2, [r9, #+28]!
	ldrb r1, [r9, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	strb r2, [r9]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	ldr r0, .LCPI84_292
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r4, #+56]
	mov r0, r4
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r9, #+1]
	ldrb r1, [r9]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r9, #+1]
	@comment
str r6, [r4, #+72]
	ldr r3, [sp, #+28]
	ldr r4, [r3]
	ldr r0, .LCPI84_293
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	mov r4, r0
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	mov r3, r3, lsl #16
	mov r5, r4
	ldrb r2, [r5, #+28]!
	ldrb r1, [r5, #+1]
	orr r3, r3, r1, lsl #8
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r5, #+1]
	strb r2, [r5]
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	ldr r0, .LCPI84_294
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r4, #+56]
	mov r0, r4
	mov r1, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	ldrb r3, [r4, #+31]
	ldrb r2, [r4, #+30]
	orr r3, r2, r3, lsl #8
	ldrb r2, [r5, #+1]
	ldrb r1, [r5]
	orr r2, r1, r2, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 20 @ 4096
	mov r3, r3, lsr #8
	strb r3, [r5, #+1]
	@comment
str r6, [r4, #+72]
	ldr r3, .LCPI84_295
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB84_218	@ bb22
	b .LBB84_175	@ bb21
	.align	4
.LBB84_133:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_265:
 	.long	.str269757

.LBB84_134:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_266:
 	.long	int_ftype_cptr_cptr_sizet

.LBB84_135:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_267:
 	.long	.str270758

.LBB84_136:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_268:
 	.long	.str271759

.LBB84_137:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_269:
 	.long	int_ftype_string_string

.LBB84_138:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_270:
 	.long	.str272760

.LBB84_139:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_271:
 	.long	.str273761

.LBB84_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_272:
 	.long	string_ftype_ptr_ptr

.LBB84_141:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_273:
 	.long	.str274762

.LBB84_142:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_274:
 	.long	.str275763

.LBB84_143:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_275:
 	.long	.str276764

.LBB84_144:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_276:
 	.long	.str277765

.LBB84_145:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_277:
 	.long	.str278766

.LBB84_146:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_278:
 	.long	.str279767

.LBB84_147:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_279:
 	.long	.str280768

.LBB84_148:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_280:
 	.long	.str281769

.LBB84_149:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_281:
 	.long	.str282770

.LBB84_150:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_282:
 	.long	.str283771

.LBB84_151:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_283:
 	.long	.str284772

.LBB84_152:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_284:
 	.long	.str285773

.LBB84_153:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_285:
 	.long	.str286774

.LBB84_154:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_286:
 	.long	.str287775

.LBB84_155:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_287:
 	.long	.str288776

.LBB84_156:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_288:
 	.long	.str289777

.LBB84_157:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_289:
 	.long	.str290778

.LBB84_158:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_290:
 	.long	.str291779

.LBB84_159:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_291:
 	.long	.str292780

.LBB84_160:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_292:
 	.long	.str293781

.LBB84_161:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_293:
 	.long	.str294782

.LBB84_162:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_294:
 	.long	.str295783

.LBB84_163:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_295:
 	.long	flag_no_builtin

.LBB84_164:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_296:
 	.long	int_ftype_int

.LBB84_165:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_297:
 	.long	.str296784

.LBB84_166:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_298:
 	.long	flag_traditional

.LBB84_167:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_299:
 	.long	float_ftype_float

.LBB84_168:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_300:
 	.long	.str297785

.LBB84_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_301:
 	.long	double_ftype_double

.LBB84_170:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_302:
 	.long	.str298786

.LBB84_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_303:
 	.long	ldouble_ftype_ldouble

.LBB84_172:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_304:
 	.long	.str299

.LBB84_173:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_305:
 	.long	long_ftype_long

.LBB84_174:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_306:
 	.long	.str300

	.align	4
.LBB84_175:	@ bb21
	ldr r3, .LCPI84_296
	ldr r4, [r3]
	ldr r0, .LCPI84_297
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_176:	@ bb.i162
.LBB84_177:	@ builtin_function.exit168
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #2
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_299
	ldr r4, [r3]
	ldr r0, .LCPI84_300
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_178:	@ bb.i155
.LBB84_179:	@ builtin_function.exit161
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #3
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_301
	ldr r4, [r3]
	ldr r0, .LCPI84_302
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_180:	@ bb.i148
.LBB84_181:	@ builtin_function.exit154
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #3
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_303
	ldr r4, [r3]
	ldr r0, .LCPI84_304
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_182:	@ bb.i141
.LBB84_183:	@ builtin_function.exit147
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #3
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_305
	ldr r4, [r3]
	ldr r0, .LCPI84_306
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_184:	@ bb.i134
.LBB84_185:	@ builtin_function.exit140
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #4
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r0, .LCPI84_265
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	ldr r2, [sp, #+20]
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_186:	@ bb.i127
.LBB84_187:	@ builtin_function.exit133
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #12
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_266
	ldr r4, [r3]
	ldr r0, .LCPI84_268
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_188:	@ bb.i120
.LBB84_189:	@ builtin_function.exit126
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #13
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_269
	ldr r4, [r3]
	ldr r0, .LCPI84_271
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_190:	@ bb.i113
.LBB84_191:	@ builtin_function.exit119
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #16
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_272
	ldr r4, [r3]
	ldr r0, .LCPI84_274
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_192:	@ bb.i106
.LBB84_193:	@ builtin_function.exit112
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #15
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r0, .LCPI84_276
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	ldr r2, [sp, #+8]
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_298
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_194:	@ bb.i99
.LBB84_195:	@ builtin_function.exit105
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #17
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_78
	ldr r4, [r3]
	ldr r0, .LCPI84_122
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_196:	@ bb.i92
.LBB84_197:	@ builtin_function.exit98
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #18
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_79
	ldr r4, [r3]
	ldr r0, .LCPI84_124
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_198:	@ bb.i85
.LBB84_199:	@ builtin_function.exit91
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #18
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_80
	ldr r4, [r3]
	ldr r0, .LCPI84_126
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_200:	@ bb.i78
.LBB84_201:	@ builtin_function.exit84
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #18
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_78
	ldr r4, [r3]
	ldr r0, .LCPI84_128
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_202:	@ bb.i71
.LBB84_203:	@ builtin_function.exit77
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #19
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_79
	ldr r4, [r3]
	ldr r0, .LCPI84_130
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_204:	@ bb.i64
.LBB84_205:	@ builtin_function.exit70
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #19
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_80
	ldr r4, [r3]
	ldr r0, .LCPI84_132
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_206:	@ bb.i57
.LBB84_207:	@ builtin_function.exit63
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #19
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_78
	ldr r4, [r3]
	ldr r0, .LCPI84_134
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_208:	@ bb.i50
.LBB84_209:	@ builtin_function.exit56
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #20
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_79
	ldr r4, [r3]
	ldr r0, .LCPI84_136
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_210:	@ bb.i43
.LBB84_211:	@ builtin_function.exit49
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #20
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r3, .LCPI84_80
	ldr r4, [r3]
	ldr r0, .LCPI84_138
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_212:	@ bb.i36
.LBB84_213:	@ builtin_function.exit42
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	mov r0, r4
	ldrb r12, [r0, #+28]!
	ldrb lr, [r0, #+1]
	mov r5, #20
	@comment
str r5, [r4, #+72]
	orr r1, r2, r1, lsl #8
	orr lr, r12, lr, lsl #8
	orr r1, lr, r1, lsl #16
	orr r1, r1, #1, 20 @ 4096
	orr r1, r1, #2, 6 @ 134217728
	mov lr, r1, lsr #24
	strb lr, [r3, #+1]
	mov r1, r1, lsr #8
	strb r1, [r0, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldr r0, .LCPI84_144
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	ldr r2, [sp, #+16]
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_214:	@ bb.i29
.LBB84_215:	@ builtin_function.exit35
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	orr r1, r1, #8
	mov r0, r4
	ldrb r12, [r0, #+28]!
	strb r1, [r3, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+8]!
	ldrb r1, [r4, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r4, #+1]
	orr r1, r2, r1, lsl #8
	orr r3, r1, r3, lsl #16
	orr r3, r3, #17, 24 @ 4352
	mov r3, r3, lsr #8
	strb r3, [r4, #+1]
	strb r2, [r4]
	ldr r0, .LCPI84_145
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #29
	ldr r2, [sp, #+16]
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r0, #+30]
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r2, r3, #2, 14 @ 524288
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r2, .LCPI84_24
	ldr r2, [r2]
	mov r4, r0
	cmp r2, #0
	movne r2, r3, lsr #24
	strneb r2, [r4, #+11]
	orrne r2, r3, #33, 18 @ 540672
	movne r1, r2, lsr #16
	strneb r1, [r4, #+10]
	movne r2, r2, lsr #8
	strneb r2, [r4, #+9]
	strneb r3, [r4, #+8]
.LBB84_216:	@ bb.i23
.LBB84_217:	@ builtin_function.exit
	mov r1, #0
	mov r2, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl make_decl_rtl
	mov r0, r4
	emit_nops_till_bundle_end
	bl pushdecl
	mov r3, r4
	ldrb r2, [r3, #+30]!
	ldrb r1, [r3, #+1]
	orr r1, r1, #8
	mov r0, r4
	ldrb r12, [r0, #+28]!
	strb r1, [r3, #+1]
	strb r2, [r3]
	strb r12, [r0]
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+8]!
	ldrb r1, [r4, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r4, #+1]
	orr r1, r2, r1, lsl #8
	orr r3, r1, r3, lsl #16
	orr r3, r3, #17, 24 @ 4352
	mov r3, r3, lsr #8
	strb r3, [r4, #+1]
	strb r2, [r4]
.LBB84_218:	@ bb22
	ldr r3, .LCPI84_146
	ldr r3, [r3]
	ldr r2, .LCPI84_147
	@comment
str r3, [r2]
	emit_nops_till_bundle_end
	bl declare_function_name
	emit_nops_till_bundle_end
	bl start_identifier_warnings
	emit_nops_till_bundle_end
	bl init_function_format_info
	emit_nops_till_bundle_end
	bl init_iterators
	ldr r3, .LCPI84_148
	ldr r2, .LCPI84_149
	@comment
str r2, [r3]
	sfi_add sp, sp, #32
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB84_219:	@ bb6.i.pushlevel.exit_crit_edge
	mov r3, #1
	b .LBB84_5	@ pushlevel.exit
.LBB84_220:	@ bb
	mov r0, #8
	emit_nops_till_bundle_end
	bl make_signed_type
	b .LBB84_7	@ bb2
	.align	4
.LBB84_221:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_24:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_78:
 	.long	float_ftype_float

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_79:
 	.long	double_ftype_double

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_80:
 	.long	ldouble_ftype_ldouble

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_122:
 	.long	.str279767

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_124:
 	.long	.str281769

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_126:
 	.long	.str283771

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_128:
 	.long	.str285773

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_130:
 	.long	.str287775

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_132:
 	.long	.str289777

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_134:
 	.long	.str291779

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_136:
 	.long	.str293781

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_138:
 	.long	.str295783

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_144:
 	.long	.str301787

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_145:
 	.long	.str302

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_146:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_147:
 	.long	pedantic_lvalues

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_148:
 	.long	incomplete_decl_finalize_hook

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI84_149:
 	.long	finish_incomplete_decl

	.size init_decl_processing, .-init_decl_processing


	.globl	implicitly_declare
	.align	4
implicitly_declare:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r0
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	emit_nops_till_bundle_end
	bl end_temporary_allocation
	ldr r3, .LCPI85_0
	ldr r2, [r3]
	mov r0, #29
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_decl
	ldrb r3, [r4, #+10]
	mov r5, r0
	tst r3, #8
	beq .LBB85_9	@ entry.bb5_crit_edge
.LBB85_1:	@ bb
	ldr r6, [r4, #+20]
	cmp r6, #0
	bne .LBB85_9	@ entry.bb5_crit_edge
.LBB85_2:	@ bb4
	mov r6, #1
.LBB85_3:	@ bb5
	ldrb r3, [r5, #+30]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	ldr r7, [r4, #+32]
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	mov r1, r5
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r2, r3, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	@comment
str r5, [r4, #+32]
	mov r0, r5
	emit_nops_till_bundle_end
	bl pushdecl
	mov r0, r5
	emit_nops_till_bundle_end
	bl maybe_objc_check_decl
	mov r1, #0
	mov r0, r5
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl rest_of_decl_compilation
	ldr r3, .LCPI85_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB85_5	@ bb9
.LBB85_4:	@ bb5
	cmp r7, #0
	beq .LBB85_10	@ bb8
.LBB85_5:	@ bb9
	ldr r3, .LCPI85_3
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB85_8	@ bb14
.LBB85_6:	@ bb9
	cmp r6, #0
	ldrne r1, [r4, #+16]
	ldrne r0, .LCPI85_4
	emit_nops_till_bundle_end
	blne warning
.LBB85_7:	@ bb13
.LBB85_8:	@ bb14
	mov r2, #1
	mov r1, #0
	mov r0, r5
	mov r3, #0
	emit_nops_till_bundle_end
	bl gen_aux_info_record
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r5
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB85_9:	@ entry.bb5_crit_edge
	mov r6, #0
	b .LBB85_3	@ bb5
.LBB85_10:	@ bb8
	ldr r1, [r4, #+16]
	ldr r0, .LCPI85_2
	emit_nops_till_bundle_end
	bl warning
	b .LBB85_8	@ bb14
	.align	4
.LBB85_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI85_0:
 	.long	default_function_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI85_1:
 	.long	warn_implicit

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI85_2:
 	.long	.str303

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI85_3:
 	.long	warn_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI85_4:
 	.long	.str304

	.size implicitly_declare, .-implicitly_declare


	.globl	pushdecl_top_level
	.align	4
pushdecl_top_level:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI86_0
	ldr r3, [r3]
	ldr r4, .LCPI86_1
	ldr r5, [r4]
	@comment
str r3, [r4]
	emit_nops_till_bundle_end
	bl pushdecl
	@comment
str r5, [r4]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB86_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI86_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI86_1:
 	.long	current_binding_level

	.size pushdecl_top_level, .-pushdecl_top_level


	.globl	pushtag
	.align	4
pushtag:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI87_0
	ldr r4, [r3]
	ldrb r3, [r4, #+25]
	mov r5, r1
	b .LBB87_2	@ bb
.LBB87_1:	@ bb
	ldr r4, [r4, #+20]
	ldrb r3, [r4, #+25]
.LBB87_2:	@ bb
	cmp r3, #0
	bne .LBB87_1	@ bb
.LBB87_3:	@ bb2
	cmp r0, #0
	beq .LBB87_6	@ bb5
.LBB87_4:	@ bb3
	ldr r3, [r5, #+48]
	cmp r3, #0
	@comment
streq r0, [r5, #+48]
.LBB87_5:	@ bb4
.LBB87_6:	@ bb5
	ldr r3, .LCPI87_1
	ldr r3, [r3]
	ldr r2, [r4, #+4]
	cmp r4, r3
	beq .LBB87_9	@ bb6
.LBB87_7:	@ bb7
	mov r1, r5
	emit_nops_till_bundle_end
	bl saveable_tree_cons
.LBB87_8:	@ bb8
	@comment
str r0, [r4, #+4]
	mov r0, #32
	mov r1, #0
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_decl
	emit_nops_till_bundle_end
	bl pushdecl
	@comment
str r0, [r5]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB87_9:	@ bb6
	mov r1, r5
	emit_nops_till_bundle_end
	bl perm_tree_cons
	b .LBB87_8	@ bb8
	.align	4
.LBB87_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI87_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI87_1:
 	.long	global_binding_level

	.size pushtag, .-pushtag


	.globl	start_enum
	.align	4
start_enum:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	cmp r0, #0
	beq .LBB88_11	@ entry.bb1_crit_edge
.LBB88_1:	@ entry.bb11.i_crit_edge
	ldr r3, .LCPI88_0
	b .LBB88_10	@ bb11.i
.LBB88_2:	@ bb.i
	add r5, r3, #4
.LBB88_3:	@ bb6.i
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB88_8	@ bb7.i
.LBB88_4:	@ bb1.i
	ldr r2, [r5, #+12]
	cmp r2, r4
	bne .LBB88_3	@ bb6.i
.LBB88_5:	@ bb2.split.i
	ldr r3, [r5, #+16]
	ldrb r3, [r3, #+8]
	cmp r3, #10
	ldrne r3, .LCPI88_1
	@comment
strne r4, [r3]
	ldrne r3, .LCPI88_2
	ldrne r3, [r3]
	ldrne r2, .LCPI88_3
	@comment
strne r3, [r2]
	ldrne r3, .LCPI88_4
	ldrne r3, [r3]
	ldrne r2, .LCPI88_5
	@comment
strne r3, [r2]
.LBB88_6:	@ bb3.i
.LBB88_7:	@ bb4.i
	ldr r5, [r5, #+16]
	b .LBB88_12	@ bb1
.LBB88_8:	@ bb7.i
	ldrb r5, [r3, #+25]
	cmp r5, #0
	beq .LBB88_11	@ entry.bb1_crit_edge
.LBB88_9:	@ bb10.i
	add r3, r3, #20
.LBB88_10:	@ bb11.i
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB88_2	@ bb.i
.LBB88_11:	@ entry.bb1_crit_edge
	mov r5, #0
.LBB88_12:	@ bb1
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r3, .LCPI88_6
	ldr r3, [r3]
	ldr r2, .LCPI88_0
	ldr r2, [r2]
	cmp r2, r3
	emit_nops_till_bundle_end
	bleq end_temporary_allocation
.LBB88_13:	@ bb2
.LBB88_14:	@ bb3
	cmp r5, #0
	beq .LBB88_16	@ bb5
.LBB88_15:	@ bb4
	ldrb r3, [r5, #+8]
	cmp r3, #10
	beq .LBB88_17	@ bb6
.LBB88_16:	@ bb5
	mov r0, #10
	emit_nops_till_bundle_end
	bl make_node
	mov r5, r0
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl pushtag
.LBB88_17:	@ bb6
	ldrb r3, [r5, #+30]
	ldrb r2, [r5, #+31]
	mov r1, r5
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 12 @ 2097152
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	ldr r3, [r5, #+12]
	cmp r3, #0
	beq .LBB88_19	@ bb8
.LBB88_18:	@ bb7
	ldr r1, [r4, #+16]
	ldr r0, .LCPI88_7
	emit_nops_till_bundle_end
	bl error
	mov r3, #0
	@comment
str r3, [r5, #+12]
.LBB88_19:	@ bb8
	ldr r3, .LCPI88_8
	ldr r3, [r3]
	ldr r2, .LCPI88_9
	@comment
str r3, [r2]
	ldr r3, .LCPI88_10
	mov r2, #0
	@comment
str r2, [r3]
	mov r0, r5
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB88_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_1:
 	.long	pending_invalid_xref

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_2:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_3:
 	.long	pending_invalid_xref_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_4:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_5:
 	.long	pending_invalid_xref_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_6:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_7:
 	.long	.str305

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_8:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_9:
 	.long	enum_next_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI88_10:
 	.long	enum_overflow

	.size start_enum, .-start_enum


	.globl	start_struct
	.align	4
start_struct:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r3, .LCPI89_0
	ldr r3, [r3]
	ldr r2, .LCPI89_1
	ldr r2, [r2]
	cmp r2, r3
	emit_nops_till_bundle_end
	bleq end_temporary_allocation
.LBB89_1:	@ bb
.LBB89_2:	@ bb1
	cmp r4, #0
	beq .LBB89_5	@ bb11
.LBB89_3:	@ bb1.bb11.i_crit_edge
	ldr r3, .LCPI89_1
.LBB89_4:	@ bb11.i
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB89_14	@ bb.i
.LBB89_5:	@ bb11
	mov r0, r5
	emit_nops_till_bundle_end
	bl make_node
	mov r6, r0
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl pushtag
	ldrb r3, [r6, #+30]
	ldrb r2, [r6, #+31]
	mov r1, r6
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 12 @ 2097152
	mov r3, r3, lsr #16
	strb r3, [r6, #+30]
.LBB89_6:	@ bb12
	mov r0, r6
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB89_7:	@ bb1.i
	ldr r1, [r2, #+12]
	cmp r1, r4
	bne .LBB89_15	@ bb6.i
.LBB89_8:	@ bb2.split.i
	ldr r6, [r2, #+16]
	ldrb r3, [r6, #+8]
	cmp r3, r5
	beq .LBB89_10	@ bb3
.LBB89_9:	@ bb3.i
	ldr r3, .LCPI89_2
	@comment
str r4, [r3]
	ldr r3, .LCPI89_3
	ldr r3, [r3]
	ldr r6, .LCPI89_4
	@comment
str r3, [r6]
	ldr r3, .LCPI89_5
	ldr r3, [r3]
	ldr r6, .LCPI89_6
	@comment
str r3, [r6]
	ldr r6, [r2, #+16]
.LBB89_10:	@ bb3
	cmp r6, #0
	beq .LBB89_5	@ bb11
.LBB89_11:	@ bb4
	ldrb r3, [r6, #+8]
	cmp r3, r5
	bne .LBB89_5	@ bb11
.LBB89_12:	@ bb5
	ldrb r3, [r6, #+30]
	ldrb r2, [r6, #+31]
	mov r1, r6
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 12 @ 2097152
	mov r3, r3, lsr #16
	strb r3, [r6, #+30]
	ldr r3, [r6, #+12]
	cmp r3, #0
	beq .LBB89_6	@ bb12
.LBB89_13:	@ bb6
	ldr r1, [r4, #+16]
	ldr r4, .LCPI89_7
	ldr r0, .LCPI89_8
	cmp r5, #21
	moveq r0, r4
	emit_nops_till_bundle_end
	bl error
	b .LBB89_6	@ bb12
.LBB89_14:	@ bb.i
	add r2, r3, #4
.LBB89_15:	@ bb6.i
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB89_7	@ bb1.i
.LBB89_16:	@ bb7.i
	ldrb r6, [r3, #+25]
	cmp r6, #0
	beq .LBB89_5	@ bb11
.LBB89_17:	@ bb10.i
	add r3, r3, #20
	b .LBB89_4	@ bb11.i
	.align	4
.LBB89_18:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_0:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_1:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_2:
 	.long	pending_invalid_xref

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_3:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_4:
 	.long	pending_invalid_xref_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_5:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_6:
 	.long	pending_invalid_xref_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_7:
 	.long	.str306

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI89_8:
 	.long	.str307

	.size start_struct, .-start_struct


	.globl	xref_tag
	.align	4
xref_tag:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	emit_nops_till_bundle_end
	bl allocation_temporary_p
	ldr r3, .LCPI90_0
	mov r6, r0
.LBB90_1:	@ bb11.us.i
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB90_8	@ bb1
.LBB90_2:	@ bb.us.i
	add r2, r3, #4
.LBB90_3:	@ bb6.us.i
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB90_17	@ bb7.us.i
.LBB90_4:	@ bb1.us.i
	ldr r1, [r2, #+12]
	cmp r1, r4
	bne .LBB90_3	@ bb6.us.i
.LBB90_5:	@ bb2.split.i
	ldr r0, [r2, #+16]
	ldrb r3, [r0, #+8]
	cmp r3, r5
	beq .LBB90_7	@ lookup_tag.exit
.LBB90_6:	@ bb3.i
	ldr r3, .LCPI90_1
	@comment
str r4, [r3]
	ldr r3, .LCPI90_2
	ldr r3, [r3]
	ldr r1, .LCPI90_3
	@comment
str r3, [r1]
	ldr r3, .LCPI90_4
	ldr r3, [r3]
	ldr r1, .LCPI90_5
	@comment
str r3, [r1]
	ldr r0, [r2, #+16]
.LBB90_7:	@ lookup_tag.exit
	cmp r0, #0
	bne .LBB90_16	@ bb10
.LBB90_8:	@ bb1
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r3, .LCPI90_6
	ldr r3, [r3]
	ldr r2, .LCPI90_0
	ldr r2, [r2]
	cmp r2, r3
	bne .LBB90_11	@ bb5
.LBB90_9:	@ bb1
	cmp r6, #0
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB90_10:	@ bb4
.LBB90_11:	@ bb5
	mov r0, r5
	emit_nops_till_bundle_end
	bl make_node
	mov r6, r0
	cmp r5, #10
	bne .LBB90_15	@ bb9
.LBB90_12:	@ bb6
	ldr r3, .LCPI90_7
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI90_8
	emit_nops_till_bundle_end
	blne pedwarn
.LBB90_13:	@ bb7
.LBB90_14:	@ bb8
	mov r3, r6
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	ldr r1, .LCPI90_9
	ldr r0, [r1]
	ldrb r12, [r0, #+28]!
	ldrb r0, [r0, #+1]
	strb r0, [r3, #+1]
	strb r2, [r3]
	ldr r2, [r1]
	ldr r2, [r2, #+32]
	@comment
str r2, [r6, #+32]
	ldrb r2, [r6, #+10]
	mov r0, r6
	ldrb r12, [r0, #+8]!
	ldrb lr, [r0, #+3]
	orr r2, r2, lr, lsl #8
	mov r2, r2, lsl #16
	ldrb lr, [r0, #+1]
	orr r2, r2, lr, lsl #8
	orr r2, r2, #1, 18 @ 16384
	mov r2, r2, lsr #8
	strb r2, [r0, #+1]
	strb r12, [r0]
	ldr r2, [r1]
	ldrb r2, [r2, #+28]
	strb r2, [r3]
	ldr r3, [r1]
	ldr r3, [r3, #+52]
	@comment
str r3, [r6, #+52]
	ldr r3, [r1]
	ldr r3, [r3, #+56]
	@comment
str r3, [r6, #+56]
.LBB90_15:	@ bb9
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl pushtag
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r6
.LBB90_16:	@ bb10
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB90_17:	@ bb7.us.i
	add r3, r3, #20
	b .LBB90_1	@ bb11.us.i
	.align	4
.LBB90_18:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_1:
 	.long	pending_invalid_xref

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_2:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_3:
 	.long	pending_invalid_xref_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_4:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_5:
 	.long	pending_invalid_xref_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_6:
 	.long	global_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_7:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_8:
 	.long	.str308

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI90_9:
 	.long	unsigned_type_node

	.size xref_tag, .-xref_tag


	.globl	shadow_tag_warned
	.align	4
shadow_tag_warned:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI91_0
	mov r2, #0
	@comment
str r2, [r3]
	cmp r0, #0
	beq .LBB91_37	@ entry.bb16_crit_edge
.LBB91_1:	@ entry.bb_crit_edge
	mov r4, #0
	mov r5, r1
	mov r6, r0
.LBB91_2:	@ bb
	ldr r3, [r6, #+16]
	ldrb r0, [r3, #+8]
	sub r2, r0, #20
	cmp r2, #2
	blo .LBB91_4	@ bb.bb6.i_crit_edge
.LBB91_3:	@ bb
	and r2, r0, #255
	cmp r2, #10
	bne .LBB91_26	@ bb11
.LBB91_4:	@ bb.bb6.i_crit_edge
	ldr r2, .LCPI91_1
	b .LBB91_9	@ bb6.i
.LBB91_5:	@ bb.i
	add r1, r2, #4
	b .LBB91_7	@ bb4.i
.LBB91_6:	@ bb1.i
	ldr r12, [r1, #+16]
	cmp r12, r3
	beq .LBB91_14	@ lookup_tag_reverse.exit
.LBB91_7:	@ bb4.i
	ldr r1, [r1]
	cmp r1, #0
	bne .LBB91_6	@ bb1.i
.LBB91_8:	@ bb5.i
	add r2, r2, #20
.LBB91_9:	@ bb6.i
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB91_5	@ bb.i
.LBB91_10:	@ lookup_tag_reverse.exit.thread
	add r4, r4, #1
.LBB91_11:	@ bb4
	and r3, r0, #255
	cmp r3, #10
	cmpne r5, #1
	bne .LBB91_13	@ bb8
	b .LBB91_29	@ bb14
.LBB91_12:	@ bb4
.LBB91_13:	@ bb8
	ldr r0, .LCPI91_2
	emit_nops_till_bundle_end
	bl pedwarn
	mov r5, #1
	b .LBB91_29	@ bb14
.LBB91_14:	@ lookup_tag_reverse.exit
	ldr r7, [r1, #+12]
	add r4, r4, #1
	cmp r7, #0
	beq .LBB91_11	@ bb4
.LBB91_15:	@ lookup_tag_reverse.exit.bb11.i_crit_edge
	ldr r3, .LCPI91_1
.LBB91_16:	@ bb11.i
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB91_22	@ bb.i22
.LBB91_17:	@ bb10
	emit_nops_till_bundle_end
	bl make_node
	mov r1, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl pushtag
	b .LBB91_29	@ bb14
.LBB91_18:	@ bb1.i23
	ldr r1, [r2, #+12]
	cmp r1, r7
	bne .LBB91_23	@ bb6.i29
.LBB91_19:	@ bb2.split.i
	ldr r3, [r2, #+16]
	ldrb r1, [r3, #+8]
	and r12, r0, #255
	cmp r1, r12
	beq .LBB91_21	@ lookup_tag.exit
.LBB91_20:	@ bb3.i24
	ldr r3, .LCPI91_0
	@comment
str r7, [r3]
	ldr r3, .LCPI91_3
	ldr r3, [r3]
	ldr r1, .LCPI91_4
	@comment
str r3, [r1]
	ldr r3, .LCPI91_5
	ldr r3, [r3]
	ldr r1, .LCPI91_6
	@comment
str r3, [r1]
	ldr r3, [r2, #+16]
.LBB91_21:	@ lookup_tag.exit
	cmp r3, #0
	beq .LBB91_17	@ bb10
	b .LBB91_29	@ bb14
.LBB91_22:	@ bb.i22
	add r2, r3, #4
.LBB91_23:	@ bb6.i29
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB91_18	@ bb1.i23
.LBB91_24:	@ bb7.i
	ldrb r2, [r3, #+25]
	cmp r2, #0
	beq .LBB91_17	@ bb10
.LBB91_25:	@ bb10.i
	add r3, r3, #20
	b .LBB91_16	@ bb11.i
.LBB91_26:	@ bb11
	cmp r5, #0
	ldreq r3, .LCPI91_7
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB91_28	@ bb13
	b .LBB91_29	@ bb14
.LBB91_27:	@ bb12
.LBB91_28:	@ bb13
	ldr r0, .LCPI91_8
	emit_nops_till_bundle_end
	bl warning
	mov r5, #2
.LBB91_29:	@ bb14
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB91_2	@ bb
.LBB91_30:	@ bb14.bb16_crit_edge
	mov r1, r5
.LBB91_31:	@ bb16
	mov r5, r1
	cmp r4, #2
	ldrge r0, .LCPI91_9
	emit_nops_till_bundle_end
	blge error
.LBB91_32:	@ bb17
.LBB91_33:	@ bb18
	cmp r4, #0
	bne .LBB91_36	@ return
.LBB91_34:	@ bb18
	cmp r5, #1
	ldrne r0, .LCPI91_10
	emit_nops_till_bundle_end
	blne pedwarn
.LBB91_35:	@ bb20
.LBB91_36:	@ return
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB91_37:	@ entry.bb16_crit_edge
	mov r4, #0
	b .LBB91_31	@ bb16
	.align	4
.LBB91_38:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_0:
 	.long	pending_invalid_xref

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_1:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_2:
 	.long	.str309

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_3:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_4:
 	.long	pending_invalid_xref_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_5:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_6:
 	.long	pending_invalid_xref_line

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_7:
 	.long	in_system_header

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_8:
 	.long	.str310

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_9:
 	.long	.str311

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI91_10:
 	.long	.str312

	.size shadow_tag_warned, .-shadow_tag_warned


	.globl	shadow_tag
	.align	4
shadow_tag:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r1, #0
	emit_nops_till_bundle_end
	bl shadow_tag_warned
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size shadow_tag, .-shadow_tag


	.globl	poplevel
	.align	4
poplevel:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #16
	ldr r3, .LCPI93_0
	ldr r4, [r3]
	ldr r5, [r4]
	ldrsb r6, [r4, #+27]
	ldr r3, [r4, #+12]
	@comment
str r3, [sp, #+8]
	ldr r3, [r4, #+4]
	@comment
str r3, [sp, #+12]
	@comment
str r2, [sp, #+4]
	mov r7, r0
	cmp r1, #0
	beq .LBB93_68	@ entry.bb19.preheader_crit_edge
.LBB93_1:	@ bb
	mov r0, r5
	emit_nops_till_bundle_end
	bl nreverse
	@comment
str r0, [r4]
	mov r5, r0
.LBB93_2:	@ bb19.preheader
	cmp r0, #0
	beq .LBB93_12	@ bb20
.LBB93_3:	@ bb19.preheader.bb3_crit_edge
	mov r4, r0
.LBB93_4:	@ bb3
	ldrb r3, [r4, #+8]
	cmp r3, #29
	ldreqb r3, [r4, #+9]
	moveq r2, r4
	ldreqb r1, [r2, #+8]!
	orreq r3, r1, r3, lsl #8
	ldreqb r1, [r2, #+3]
	ldreqb r2, [r2, #+2]
	orreq r2, r2, r1, lsl #8
	orreq r3, r3, r2, lsl #16
	tsteq r3, #2, 18 @ 32768
	beq .LBB93_6	@ bb8
	b .LBB93_11	@ bb18
.LBB93_5:	@ bb4
.LBB93_6:	@ bb8
	ldr r2, [r4, #+48]
	cmp r2, #0
	tstne r3, #2, 22 @ 2048
	bne .LBB93_8	@ bb14
	b .LBB93_11	@ bb18
.LBB93_7:	@ bb9
.LBB93_8:	@ bb14
	ldr r3, [r4, #+52]
	cmp r3, #0
	cmpne r3, r4
	bne .LBB93_69	@ bb16
.LBB93_9:	@ bb14
.LBB93_10:	@ bb17
	emit_nops_till_bundle_end
	bl push_function_context
	mov r0, r4
	emit_nops_till_bundle_end
	bl output_inline_function
	emit_nops_till_bundle_end
	bl pop_function_context
.LBB93_11:	@ bb18
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB93_4	@ bb3
.LBB93_12:	@ bb20
	ldr r3, .LCPI93_0
	ldr r3, [r3]
	ldr r2, [r3, #+16]
	@comment
str r2, [sp]
	cmp r2, #0
	bne .LBB93_70	@ bb20.bb27_crit_edge
.LBB93_13:	@ bb22
	ldr r2, [sp, #+4]
	orr r2, r2, r7
	orr r2, r2, r6
	cmp r2, #0
	bne .LBB93_16	@ bb26
.LBB93_14:	@ bb23
	ldrb r3, [r3, #+28]
	cmp r3, #0
	ldrne r3, [sp, #+8]
	cmpne r3, #0
	bne .LBB93_16	@ bb26
	b .LBB93_71	@ bb23.bb31.preheader_crit_edge
.LBB93_15:	@ bb23
.LBB93_16:	@ bb26
	mov r0, #5
	emit_nops_till_bundle_end
	bl make_node
.LBB93_17:	@ bb27
	mov r4, r0
	cmp r4, #0
	@comment
strne r5, [r4, #+16]
	ldrne r3, [sp, #+12]
	@comment
strne r3, [r4, #+20]
	ldrne r3, [sp, #+8]
	@comment
strne r3, [r4, #+24]
	movne r0, r4
	emit_nops_till_bundle_end
	blne remember_end_note
.LBB93_18:	@ bb28
.LBB93_19:	@ bb31.preheader
	ldr r3, [sp, #+8]
	cmp r3, #0
	beq .LBB93_22	@ bb53.loopexit
.LBB93_20:	@ bb31.preheader.bb30_crit_edge
	ldr r3, [sp, #+8]
.LBB93_21:	@ bb30
	@comment
str r4, [r3, #+28]
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB93_21	@ bb30
.LBB93_22:	@ bb53.loopexit
	cmp r5, #0
	beq .LBB93_32	@ bb54
.LBB93_23:	@ bb53.loopexit.bb33_crit_edge
	mov r3, #0
.LBB93_24:	@ bb33
	ldr r2, [r5, #+32]
	cmp r2, #0
	beq .LBB93_31	@ bb52
.LBB93_25:	@ bb34
	ldrb r1, [r5, #+29]
	tst r1, #1
	beq .LBB93_30	@ bb51
.LBB93_26:	@ bb39
	ldrb r1, [r5, #+10]
	tst r1, #1
	beq .LBB93_28	@ bb45
.LBB93_27:	@ bb44
	ldrb r1, [r2, #+10]
	ldrb r0, [r2, #+11]
	mov r12, r2
	ldrb lr, [r12, #+8]!
	ldrb r6, [r12, #+1]
	strb lr, [r12]
	orr r1, r1, r0, lsl #8
	orr r0, lr, r6, lsl #8
	orr r1, r0, r1, lsl #16
	orr r1, r1, #1, 16 @ 65536
	mov r1, r1, lsr #16
	strb r1, [r2, #+10]
.LBB93_28:	@ bb45
	ldrb r2, [r5, #+9]
	tst r2, #8
	beq .LBB93_30	@ bb51
.LBB93_29:	@ bb50
	ldr r2, [r5, #+56]
	ldrb r1, [r2, #+10]
	ldrb r0, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r1, r1, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r0, r12, lsl #8
	orr r1, r12, r1, lsl #16
	orr r1, r1, #2, 22 @ 2048
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	strb r0, [r2]
.LBB93_30:	@ bb51
	ldr r2, [r5, #+32]
	@comment
str r3, [r2, #+24]
.LBB93_31:	@ bb52
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB93_24	@ bb33
.LBB93_32:	@ bb54
	ldr r3, .LCPI93_0
	ldr r3, [r3]
	ldr r3, [r3, #+8]
	b .LBB93_34	@ bb55
.LBB93_33:	@ bb55
	ldr r2, [r3, #+16]
	ldr r1, [r3, #+12]
	@comment
str r2, [r1, #+24]
	ldr r3, [r3]
.LBB93_34:	@ bb55
	cmp r3, #0
	bne .LBB93_33	@ bb55
.LBB93_35:	@ bb57
	ldr r3, [sp, #+4]
	cmp r3, #0
	beq .LBB93_51	@ bb72.critedge
.LBB93_36:	@ bb58
	mov r3, #0
	@comment
str r3, [r4, #+16]
	ldr r3, .LCPI93_1
	ldr r5, [r3]
	cmp r5, #0
	beq .LBB93_49	@ bb70
.LBB93_37:	@ bb.nph
	mov r6, #0
.LBB93_38:	@ bb59
	ldr r7, [r5, #+16]
	ldr r3, [r7, #+48]
	cmp r3, #0
	bne .LBB93_45	@ bb61
.LBB93_39:	@ bb60
	ldr r1, .LCPI93_2
	mov r0, r7
	emit_nops_till_bundle_end
	bl error_with_decl
	ldr r8, [r7, #+32]
	ldr r3, .LCPI93_3
	ldr r9, [r3]
	ldr r3, .LCPI93_4
	ldr r10, [r3]
	mov r0, r8
	emit_nops_till_bundle_end
	bl lookup_label
	mov r1, r0
	cmp r0, #0
	ldrne r3, .LCPI93_5
	ldrne r3, [r3]
	ldrne r2, [r1, #+36]
	cmpne r2, r3
	bne .LBB93_41	@ bb1.i
	b .LBB93_42	@ bb2.i
.LBB93_40:	@ bb.i
.LBB93_41:	@ bb1.i
	ldr r11, .LCPI93_6
	ldr r2, [r11]
	mov r0, r6
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r11]
	@comment
str r6, [r8, #+28]
	mov r0, r8
	emit_nops_till_bundle_end
	bl lookup_label
	mov r1, r0
.LBB93_42:	@ bb2.i
	ldr r3, [r1, #+48]
	cmp r3, #0
	beq .LBB93_44	@ bb4.i
.LBB93_43:	@ bb3.i
	ldr r1, [r8, #+16]
	ldr r0, .LCPI93_7
	emit_nops_till_bundle_end
	bl error
	b .LBB93_48	@ bb68
.LBB93_44:	@ bb4.i
	ldr r3, .LCPI93_8
	ldr r3, [r3]
	@comment
str r3, [r1, #+48]
	@comment
str r9, [r1, #+12]
	@comment
str r10, [r1, #+16]
	b .LBB93_48	@ bb68
.LBB93_45:	@ bb61
	ldr r3, .LCPI93_9
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB93_48	@ bb68
.LBB93_46:	@ bb62
	ldrb r3, [r7, #+10]
	tst r3, #1
	ldreq r1, .LCPI93_10
	moveq r0, r7
	emit_nops_till_bundle_end
	bleq warning_with_decl
.LBB93_47:	@ bb67
.LBB93_48:	@ bb68
	ldr r3, [r7, #+32]
	@comment
str r6, [r3, #+28]
	ldr r3, [r4, #+16]
	@comment
str r3, [r7]
	@comment
str r7, [r4, #+16]
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB93_38	@ bb59
.LBB93_49:	@ bb70
	ldr r3, .LCPI93_0
	ldr r2, [r3]
	ldr r1, [r2, #+20]
	@comment
str r1, [r3]
	ldr r3, .LCPI93_11
	ldr r1, [r3]
	@comment
str r1, [r2, #+20]
	@comment
str r2, [r3]
	ldr r3, [sp, #+4]
	cmp r3, #0
	beq .LBB93_52	@ bb72
.LBB93_50:	@ bb71
	ldr r3, .LCPI93_5
	ldr r3, [r3]
	@comment
str r4, [r3, #+48]
	b .LBB93_58	@ bb77
.LBB93_51:	@ bb72.critedge
	ldr r3, .LCPI93_0
	ldr r2, [r3]
	ldr r1, [r2, #+20]
	@comment
str r1, [r3]
	ldr r3, .LCPI93_11
	ldr r1, [r3]
	@comment
str r1, [r2, #+20]
	@comment
str r2, [r3]
.LBB93_52:	@ bb72
	cmp r4, #0
	beq .LBB93_55	@ bb75
.LBB93_53:	@ bb73
	ldr r3, [sp]
	cmp r3, #0
	bne .LBB93_58	@ bb77
.LBB93_54:	@ bb74
	ldr r3, .LCPI93_0
	ldr r5, [r3]
	ldr r0, [r5, #+12]
	mov r1, r4
	b .LBB93_57	@ bb76
.LBB93_55:	@ bb75
	ldr r3, [sp, #+8]
	cmp r3, #0
	beq .LBB93_58	@ bb77
.LBB93_56:	@ bb76
	ldr r3, .LCPI93_0
	ldr r5, [r3]
	ldr r0, [r5, #+12]
	ldr r1, [sp, #+8]
.LBB93_57:	@ bb76
	emit_nops_till_bundle_end
	bl chainon
	@comment
str r0, [r5, #+12]
.LBB93_58:	@ bb77
	ldr r3, [sp, #+4]
	cmp r3, #0
	beq .LBB93_61	@ bb81
.LBB93_59:	@ bb80.preheader
	ldr r3, [sp, #+12]
	cmp r3, #0
	beq .LBB93_65	@ bb85
.LBB93_60:	@ bb79
	ldr r3, .LCPI93_5
	ldr r3, [r3]
	ldr r2, [sp, #+12]
	ldr r1, [r2, #+16]
	@comment
str r3, [r1, #+76]
	ldr r2, [r2]
	@comment
str r2, [sp, #+12]
	cmp r2, #0
	bne .LBB93_60	@ bb79
	b .LBB93_65	@ bb85
.LBB93_61:	@ bb81
	cmp r4, #0
	beq .LBB93_65	@ bb85
.LBB93_62:	@ bb81
	ldr r3, [sp, #+12]
	b .LBB93_64	@ bb83
.LBB93_63:	@ bb83
	ldr r3, [sp, #+12]
	ldr r2, [r3, #+16]
	@comment
str r4, [r2, #+76]
	ldr r3, [r3]
	@comment
str r3, [sp, #+12]
.LBB93_64:	@ bb83
	cmp r3, #0
	bne .LBB93_63	@ bb83
.LBB93_65:	@ bb85
	cmp r4, #0
	beq .LBB93_67	@ bb87
.LBB93_66:	@ bb86
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+11]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 16 @ 65536
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
.LBB93_67:	@ bb87
	mov r0, r4
	sfi_add sp, sp, #16
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB93_68:	@ entry.bb19.preheader_crit_edge
	mov r0, r5
	b .LBB93_2	@ bb19.preheader
.LBB93_69:	@ bb16
	ldrb r2, [r3, #+10]
	ldrb r1, [r3, #+8]!
	ldrb r0, [r3, #+3]
	orr r2, r2, r0, lsl #8
	ldrb r0, [r3, #+1]
	orr r0, r1, r0, lsl #8
	orr r2, r0, r2, lsl #16
	orr r2, r2, #2, 22 @ 2048
	mov r2, r2, lsr #8
	strb r2, [r3, #+1]
	strb r1, [r3]
	b .LBB93_11	@ bb18
.LBB93_70:	@ bb20.bb27_crit_edge
	ldr r0, [sp]
	b .LBB93_17	@ bb27
.LBB93_71:	@ bb23.bb31.preheader_crit_edge
	mov r4, #0
	b .LBB93_19	@ bb31.preheader
	.align	4
.LBB93_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_0:
 	.long	current_binding_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_1:
 	.long	named_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_2:
 	.long	.str161644

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_3:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_4:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_5:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_6:
 	.long	shadowed_labels

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_7:
 	.long	.str160643

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_8:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_9:
 	.long	warn_unused

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_10:
 	.long	.str162645

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI93_11:
 	.long	free_binding_level

	.size poplevel, .-poplevel


	.globl	finish_function
	.align	4
finish_function:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r0
	ldr r3, .LCPI94_0
	ldr r5, [r3]
	mov r1, #0
	mov r0, #1
	mov r2, #1
	emit_nops_till_bundle_end
	bl poplevel
	ldr r3, [r5, #+48]
	@comment
str r5, [r3, #+28]
	ldr r3, [r5, #+44]
	@comment
str r5, [r3, #+36]
	ldr r3, .LCPI94_1
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI94_2
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB94_2	@ bb1
	b .LBB94_3	@ bb2
.LBB94_1:	@ bb
.LBB94_2:	@ bb1
	ldr r0, [r5, #+48]
	emit_nops_till_bundle_end
	bl setjmp_protect
	emit_nops_till_bundle_end
	bl setjmp_protect_args
.LBB94_3:	@ bb2
	ldr r3, .LCPI94_3
	ldr r0, [r3]
	ldr r3, .LCPI94_4
	ldr r1, [r3]
	mov r6, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl expand_function_end
	ldr r7, .LCPI94_5
	@comment
str r6, [r7]
	mov r0, r5
	emit_nops_till_bundle_end
	bl rest_of_compilation
	ldr r3, .LCPI94_6
	ldr r2, [r3]
	ldr r1, [r7]
	orr r2, r1, r2
	@comment
str r2, [r3]
	ldrb r3, [r5, #+9]
	tst r3, #16
	cmpne r2, #0
	bne .LBB94_34	@ bb7
.LBB94_4:	@ bb2
.LBB94_5:	@ bb8
	ldr r3, .LCPI94_8
	ldr r3, [r3]
	cmp r3, #0
	cmpne r1, #0
	bne .LBB94_7	@ bb10
	b .LBB94_8	@ bb12
.LBB94_6:	@ bb8
.LBB94_7:	@ bb10
	ldr r3, .LCPI94_9
	ldr r3, [r3]
	ldr r1, [r5, #+4]
	ldr r1, [r1, #+4]
	ldr r1, [r1, #+64]
	cmp r1, r3
	bne .LBB94_35	@ bb11
.LBB94_8:	@ bb12
	ldr r3, .LCPI94_11
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI94_12
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB94_10	@ bb13
	b .LBB94_12	@ bb16
.LBB94_9:	@ bb13
.LBB94_10:	@ bb13
	cmp r2, #0
	ldrne r0, .LCPI94_13
	emit_nops_till_bundle_end
	blne warning
.LBB94_11:	@ bb15
.LBB94_12:	@ bb16
	ldr r3, .LCPI94_14
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB94_19	@ bb27
.LBB94_13:	@ bb17
	ldrb r3, [r5, #+29]
	tst r3, #1
	bne .LBB94_19	@ bb27
.LBB94_14:	@ bb22
	ldr r3, [r5, #+4]
	cmp r3, #0
	ldrne r3, [r3, #+4]
	cmpne r3, #0
	bne .LBB94_16	@ bb24
	b .LBB94_19	@ bb27
.LBB94_15:	@ bb23
.LBB94_16:	@ bb24
	ldr r3, [r3, #+16]
	ldrb r2, [r3, #+8]
	cmp r2, #25
	bne .LBB94_19	@ bb27
.LBB94_17:	@ bb25
	ldr r3, [r3, #+12]
	mov r2, r3, asr #31
	add r3, r3, r2, lsr #29
	mov r2, r3, asr #3
	ldr r3, .LCPI94_15
	ldr r3, [r3]
	cmp r2, r3
	ldrhi r1, .LCPI94_16
	movhi r0, r5
	emit_nops_till_bundle_end
	blhi warning_with_decl
.LBB94_18:	@ bb26
.LBB94_19:	@ bb27
	cmp r4, #0
	moveq r0, #1
	emit_nops_till_bundle_end
	bleq permanent_allocation
.LBB94_20:	@ bb28
.LBB94_21:	@ bb29
	ldr r3, [r5, #+76]
	cmp r3, #0
	cmpeq r4, #0
	beq .LBB94_23	@ bb32
	b .LBB94_26	@ bb35
.LBB94_22:	@ bb29
.LBB94_23:	@ bb32
	ldr r3, [r5, #+48]
	cmp r3, #0
	ldrne r3, .LCPI94_17
	ldrne r3, [r3]
	@comment
strne r3, [r5, #+48]
.LBB94_24:	@ bb33
.LBB94_25:	@ bb34
	mov r3, #0
	@comment
str r3, [r5, #+40]
.LBB94_26:	@ bb35
	ldrb r3, [r5, #+30]
	tst r3, #16
	beq .LBB94_29	@ bb43
.LBB94_27:	@ bb40
	ldr r3, .LCPI94_18
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB94_36	@ bb41
.LBB94_28:	@ bb42
	ldr r3, [r5, #+32]
	ldr r0, [r3, #+16]
	emit_nops_till_bundle_end
	bl assemble_constructor
.LBB94_29:	@ bb43
	ldrb r3, [r5, #+30]
	tst r3, #32
	ldrne r3, [r5, #+32]
	ldrne r0, [r3, #+16]
	emit_nops_till_bundle_end
	blne assemble_destructor
.LBB94_30:	@ bb48
.LBB94_31:	@ bb49
	cmp r4, #0
	ldreq r3, .LCPI94_0
	moveq r2, #0
	@comment
streq r2, [r3]
.LBB94_32:	@ bb50
.LBB94_33:	@ return
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB94_34:	@ bb7
	ldr r0, .LCPI94_7
	emit_nops_till_bundle_end
	bl warning
	b .LBB94_12	@ bb16
.LBB94_35:	@ bb11
	ldr r0, .LCPI94_10
	emit_nops_till_bundle_end
	bl warning
	b .LBB94_12	@ bb16
.LBB94_36:	@ bb41
	ldr r6, .LCPI94_19
	ldr r2, [r6]
	mov r0, #0
	mov r1, r5
	emit_nops_till_bundle_end
	bl perm_tree_cons
	@comment
str r0, [r6]
	b .LBB94_29	@ bb43
	.align	4
.LBB94_37:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_1:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_2:
 	.long	current_function_calls_setjmp

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_3:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_4:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_5:
 	.long	can_reach_end

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_6:
 	.long	current_function_returns_null

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_7:
 	.long	.str313

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_8:
 	.long	warn_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_9:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_10:
 	.long	.str314

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_11:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_12:
 	.long	current_function_returns_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_13:
 	.long	.str315

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_14:
 	.long	warn_larger_than

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_15:
 	.long	larger_than_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_16:
 	.long	.str316

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_17:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_18:
 	.long	flag_gnu_linker

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI94_19:
 	.long	static_ctors

	.size finish_function, .-finish_function


	.globl	print_lang_identifier
	.align	4
print_lang_identifier:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	ldr r3, [r4, #+20]
	add r6, r2, #4
	ldr r1, .LCPI95_0
	mov r2, r3
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r4, #+24]
	ldr r1, .LCPI95_1
	mov r0, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r4, #+28]
	ldr r1, .LCPI95_2
	mov r0, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r4, #+32]
	ldr r1, .LCPI95_3
	mov r0, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r4, #+36]
	ldr r1, .LCPI95_4
	mov r0, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r4, #+40]
	ldr r1, .LCPI95_5
	mov r0, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB95_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI95_0:
 	.long	.str317

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI95_1:
 	.long	.str318

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI95_2:
 	.long	.str319

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI95_3:
 	.long	.str320

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI95_4:
 	.long	.str321

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI95_5:
 	.long	.str322

	.size print_lang_identifier, .-print_lang_identifier


	.globl	require_complete_type
	.align	4
require_complete_type:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r1, [r0, #+4]
	ldr r3, [r1, #+16]
	cmp r3, #0
	ldrne r3, .LCPI96_0
	ldrne r3, [r3]
	cmpne r1, r3
	bne .LBB96_3	@ bb3
.LBB96_1:	@ bb
.LBB96_2:	@ bb2
	emit_nops_till_bundle_end
	bl incomplete_type_error
	ldr r3, .LCPI96_1
	ldr r0, [r3]
.LBB96_3:	@ bb3
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB96_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI96_0:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI96_1:
 	.long	error_mark_node

	.size require_complete_type, .-require_complete_type


	.globl	self_promoting_args_p
	.align	4
self_promoting_args_p:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI97_0
	ldr r3, [r3]
	ldr r2, .LCPI97_1
	ldr r2, [r2]
	ldr r1, .LCPI97_2
	ldr r1, [r1]
	ldr r12, .LCPI97_3
	ldr r12, [r12]
	ldr lr, .LCPI97_4
	ldr lr, [lr]
	ldr r4, .LCPI97_5
	ldr r4, [r4]
	ldr r5, .LCPI97_6
	ldr r5, [r5]
	b .LBB97_11	@ bb15
.LBB97_1:	@ bb
	ldr r0, [r6]
	ldr r6, [r6, #+16]
	cmp r0, #0
	bne .LBB97_3	@ bb1
.LBB97_2:	@ bb1
	cmp r6, r5
	bne .LBB97_14	@ bb1.bb17_crit_edge
.LBB97_3:	@ bb1
	cmp r6, #0
	ldrne r7, [r6, #+64]
	cmpne r7, r4
	bne .LBB97_5	@ bb7
	b .LBB97_14	@ bb1.bb17_crit_edge
.LBB97_4:	@ bb5
.LBB97_5:	@ bb7
	ldrb r6, [r6, #+8]
	cmp r6, #7
	bne .LBB97_11	@ bb15
.LBB97_6:	@ bb8
	cmp r7, lr
	beq .LBB97_14	@ bb1.bb17_crit_edge
.LBB97_7:	@ bb8
	cmp r7, r12
	cmpne r7, r1
	bne .LBB97_9	@ bb8
	b .LBB97_14	@ bb1.bb17_crit_edge
.LBB97_8:	@ bb8
.LBB97_9:	@ bb8
	cmp r7, r2
	cmpne r7, r3
	bne .LBB97_11	@ bb15
	b .LBB97_14	@ bb1.bb17_crit_edge
.LBB97_10:	@ bb8
.LBB97_11:	@ bb15
	mov r6, r0
	cmp r6, #0
	bne .LBB97_1	@ bb
.LBB97_12:	@ bb15.bb17_crit_edge
	mov r0, #1
.LBB97_13:	@ bb17
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB97_14:	@ bb1.bb17_crit_edge
	mov r0, #0
	b .LBB97_13	@ bb17
	.align	4
.LBB97_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_0:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_1:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_2:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_3:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_4:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_5:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI97_6:
 	.long	void_type_node

	.size self_promoting_args_p, .-self_promoting_args_p


	.globl	unsigned_type
	.align	4
unsigned_type:
	ldr r3, .LCPI98_0
	ldr r3, [r3]
	ldr r2, [r0, #+64]
	cmp r2, r3
	ldrne r3, .LCPI98_1
	ldrne r3, [r3]
	cmpne r2, r3
	bne .LBB98_2	@ bb2
	b .LBB98_11	@ bb1
.LBB98_1:	@ bb
.LBB98_2:	@ bb2
	ldr r3, .LCPI98_3
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI98_4
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB98_3:	@ bb4
	ldr r3, .LCPI98_5
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI98_6
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB98_4:	@ bb6
	ldr r3, .LCPI98_7
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB98_14	@ bb7
.LBB98_5:	@ bb8
	ldr r3, .LCPI98_9
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI98_10
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB98_6:	@ bb10
	ldr r3, .LCPI98_11
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB98_16	@ bb11
.LBB98_7:	@ bb12
	ldr r3, .LCPI98_13
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI98_14
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB98_8:	@ bb14
	ldr r3, .LCPI98_15
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB98_18	@ bb15
.LBB98_9:	@ bb16
	ldr r3, .LCPI98_17
	ldr r3, [r3]
	cmp r2, r3
	sfi_bxne lr
	ldreq r0, .LCPI98_18
	ldreq r0, [r0]
	sfi_bxeq lr
.LBB98_10:	@ bb19
.LBB98_11:	@ bb1
	ldr r2, .LCPI98_2
	ldr r0, [r2]
	sfi_bx lr
.LBB98_12:	@ bb3
.LBB98_13:	@ bb5
.LBB98_14:	@ bb7
	ldr r2, .LCPI98_8
	ldr r0, [r2]
	sfi_bx lr
.LBB98_15:	@ bb9
.LBB98_16:	@ bb11
	ldr r2, .LCPI98_12
	ldr r0, [r2]
	sfi_bx lr
.LBB98_17:	@ bb13
.LBB98_18:	@ bb15
	ldr r2, .LCPI98_16
	ldr r0, [r2]
	sfi_bx lr
.LBB98_19:	@ bb17
	.align	4
.LBB98_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_0:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_1:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_2:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_3:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_4:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_5:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_6:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_7:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_8:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_9:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_10:
 	.long	long_long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_11:
 	.long	intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_12:
 	.long	unsigned_intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_13:
 	.long	intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_14:
 	.long	unsigned_intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_15:
 	.long	intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_16:
 	.long	unsigned_intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_17:
 	.long	intQI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI98_18:
 	.long	unsigned_intQI_type_node

	.size unsigned_type, .-unsigned_type


	.globl	signed_type
	.align	4
signed_type:
	ldr r3, .LCPI99_0
	ldr r3, [r3]
	ldr r2, [r0, #+64]
	cmp r2, r3
	ldrne r3, .LCPI99_1
	ldrne r3, [r3]
	cmpne r2, r3
	bne .LBB99_2	@ bb2
	b .LBB99_11	@ bb1
.LBB99_1:	@ bb
.LBB99_2:	@ bb2
	ldr r3, .LCPI99_3
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI99_4
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB99_3:	@ bb4
	ldr r3, .LCPI99_5
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI99_6
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB99_4:	@ bb6
	ldr r3, .LCPI99_7
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB99_14	@ bb7
.LBB99_5:	@ bb8
	ldr r3, .LCPI99_9
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI99_10
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB99_6:	@ bb10
	ldr r3, .LCPI99_11
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB99_16	@ bb11
.LBB99_7:	@ bb12
	ldr r3, .LCPI99_13
	ldr r3, [r3]
	cmp r2, r3
	ldreq r2, .LCPI99_14
	ldreq r0, [r2]
	sfi_bxeq lr
.LBB99_8:	@ bb14
	ldr r3, .LCPI99_15
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB99_18	@ bb15
.LBB99_9:	@ bb16
	ldr r3, .LCPI99_17
	ldr r3, [r3]
	cmp r2, r3
	sfi_bxne lr
	ldreq r0, .LCPI99_18
	ldreq r0, [r0]
	sfi_bxeq lr
.LBB99_10:	@ bb19
.LBB99_11:	@ bb1
	ldr r2, .LCPI99_2
	ldr r0, [r2]
	sfi_bx lr
.LBB99_12:	@ bb3
.LBB99_13:	@ bb5
.LBB99_14:	@ bb7
	ldr r2, .LCPI99_8
	ldr r0, [r2]
	sfi_bx lr
.LBB99_15:	@ bb9
.LBB99_16:	@ bb11
	ldr r2, .LCPI99_12
	ldr r0, [r2]
	sfi_bx lr
.LBB99_17:	@ bb13
.LBB99_18:	@ bb15
	ldr r2, .LCPI99_16
	ldr r0, [r2]
	sfi_bx lr
.LBB99_19:	@ bb17
	.align	4
.LBB99_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_0:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_1:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_2:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_3:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_4:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_5:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_6:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_7:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_8:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_9:
 	.long	long_long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_10:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_11:
 	.long	unsigned_intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_12:
 	.long	intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_13:
 	.long	unsigned_intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_14:
 	.long	intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_15:
 	.long	unsigned_intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_16:
 	.long	intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_17:
 	.long	unsigned_intQI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI99_18:
 	.long	intQI_type_node

	.size signed_type, .-signed_type


	.globl	signed_or_unsigned_type
	.align	4
signed_or_unsigned_type:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r1, #+8]
	cmp r3, #12
	bhi .LBB100_12	@ bb31
.LBB100_1:	@ entry
	mov r2, #1
	mov r12, #114, 26 @ 7296
	tst r12, r2, lsl r3
	beq .LBB100_12	@ bb31
.LBB100_2:	@ bb5
	ldr r3, .LCPI100_0
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	ldrb r12, [r1, #+28]
	cmp r12, r2
	bne .LBB100_7	@ bb10
.LBB100_3:	@ bb6
	ldr r12, .LCPI100_1
.LBB100_4:	@ bb6
	ldr r12, [r12]
	cmp r0, #0
	mov r0, r12
.LBB100_5:	@ bb6
	moveq r0, r3
.LBB100_6:	@ bb6
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB100_7:	@ bb10
	ldr r3, .LCPI100_2
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	and lr, r12, #255
	cmp lr, r2
	beq .LBB100_13	@ bb11
.LBB100_8:	@ bb15
	ldr r3, .LCPI100_4
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	and lr, r12, #255
	cmp lr, r2
	beq .LBB100_14	@ bb16
.LBB100_9:	@ bb20
	ldr r3, .LCPI100_6
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	and lr, r12, #255
	cmp lr, r2
	beq .LBB100_15	@ bb21
.LBB100_10:	@ bb25
	ldr r3, .LCPI100_8
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	and r12, r12, #255
	cmp r12, r2
	bne .LBB100_12	@ bb31
.LBB100_11:	@ bb26
	ldr r2, .LCPI100_9
	ldr r2, [r2]
	cmp r0, #0
	mov r0, r2
	b .LBB100_5	@ bb6
.LBB100_12:	@ bb31
	mov r0, r1
	b .LBB100_6	@ bb6
.LBB100_13:	@ bb11
	ldr r12, .LCPI100_3
	b .LBB100_4	@ bb6
.LBB100_14:	@ bb16
	ldr r12, .LCPI100_5
	b .LBB100_4	@ bb6
.LBB100_15:	@ bb21
	ldr r12, .LCPI100_7
	b .LBB100_4	@ bb6
	.align	4
.LBB100_16:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_0:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_1:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_2:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_3:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_4:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_5:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_6:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_7:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_8:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI100_9:
 	.long	long_long_unsigned_type_node

	.size signed_or_unsigned_type, .-signed_or_unsigned_type


	.align	4
lookup_field:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #12
	ldr r4, [r0, #+84]
	@comment
str r2, [sp]
	mov r5, r1
	cmp r4, #0
	beq .LBB101_16	@ bb18
.LBB101_1:	@ bb
	ldr r3, [r4]
	ldr r6, [r0, #+12]
	mov r7, #0
	b .LBB101_10	@ bb13.outer
.LBB101_2:	@ bb3
	sub r3, r9, r7
	add r3, r7, r3, asr #1
	add r6, r4, r3, lsl #2
	ldr r6, [r6, #+4]
	ldr r2, [r6, #+32]
	cmp r2, #0
	bne .LBB101_8	@ bb9
.LBB101_3:	@ bb6.preheader
	add r3, r4, r7, lsl #2
	add r10, r3, #4
	mov r11, #0
	b .LBB101_5	@ bb6
.LBB101_4:	@ bb4
	ldr r0, [r6, #+4]
	add r2, sp, #4
	mov r1, r5
	emit_nops_till_bundle_end
	bl lookup_field
	add r10, r10, #4
	add r11, r11, #1
	cmp r0, #0
	bne .LBB101_25	@ bb5
.LBB101_5:	@ bb6
	mov r2, r6
	ldr r6, [r10]
	ldr r3, [r6, #+32]
	cmp r3, #0
	beq .LBB101_4	@ bb4
.LBB101_6:	@ bb7
	add r3, r7, r11
	cmp r3, r8
	bgt .LBB101_23	@ bb26
.LBB101_7:	@ bb7.bb13.backedge_crit_edge
	add r3, r7, r11
	b .LBB101_11	@ bb13
.LBB101_8:	@ bb9
	cmp r2, r5
	beq .LBB101_13	@ bb14
.LBB101_9:	@ bb10
	cmp r2, r5
	mov r2, r6
	blo .LBB101_11	@ bb13
.LBB101_10:	@ bb13.outer
	mov r8, r3
	add r9, r8, #1
	mov r3, r7
	mov r2, r6
.LBB101_11:	@ bb13
	mov r7, r3
	sub r6, r8, r7
	cmp r6, #1
	bgt .LBB101_2	@ bb3
.LBB101_12:	@ bb13.bb14_crit_edge
	mov r6, r2
.LBB101_13:	@ bb14
	add r3, r4, r7, lsl #2
	ldr r4, [r3, #+4]
	ldr r3, [r4, #+32]
	cmp r3, r5
	beq .LBB101_22	@ bb25
.LBB101_14:	@ bb16
	ldr r4, [r6, #+32]
	cmp r4, r5
	movne r4, #0
	moveq r4, r6
	b .LBB101_22	@ bb25
.LBB101_15:	@ bb16.bb25_crit_edge
.LBB101_16:	@ bb18
	add r4, r0, #12
	b .LBB101_20	@ bb24
.LBB101_17:	@ bb19
	ldr r3, [r4, #+32]
	cmp r3, #0
	bne .LBB101_19	@ bb22
.LBB101_18:	@ bb20
	ldr r0, [r4, #+4]
	add r2, sp, #8
	mov r1, r5
	emit_nops_till_bundle_end
	bl lookup_field
	cmp r0, #0
	bne .LBB101_26	@ bb21
.LBB101_19:	@ bb22
	ldr r3, [r4, #+32]
	cmp r3, r5
	beq .LBB101_22	@ bb25
.LBB101_20:	@ bb24
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB101_17	@ bb19
	b .LBB101_22	@ bb25
.LBB101_21:	@ bb17
.LBB101_22:	@ bb25
	mov r0, r4
	mov r3, #0
	ldr r2, [sp]
	@comment
str r3, [r2]
	b .LBB101_24	@ bb26
.LBB101_23:	@ bb26
	mov r0, #0
.LBB101_24:	@ bb26
	sfi_add sp, sp, #12
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB101_25:	@ bb5
	ldr r3, [sp]
	@comment
str r6, [r3]
	b .LBB101_24	@ bb26
.LBB101_26:	@ bb21
	ldr r5, [sp]
	@comment
str r4, [r5]
	b .LBB101_24	@ bb26
	.size lookup_field, .-lookup_field


	.globl	lvalue_p
	.align	4
lvalue_p:
	mov r3, #1
	mov r2, #142, 28 @ 2272
	orr r2, r2, #1, 18 @ 16384
	mov r1, #2, 24 @ 512
.LBB102_1:	@ tailrecurse
	ldrb r12, [r0, #+8]
	cmp r12, #114
	bgt .LBB102_7	@ tailrecurse
.LBB102_2:	@ tailrecurse
	cmp r12, #27
	ble .LBB102_17	@ tailrecurse
.LBB102_3:	@ tailrecurse
	sub r12, r12, #28
	cmp r12, #14
	bhi .LBB102_14	@ lvalue_p.exit
.LBB102_4:	@ tailrecurse
	tst r2, r3, lsl r12
	bne .LBB102_18	@ bb2
.LBB102_5:	@ tailrecurse
	tst r3, r3, lsl r12
	bne .LBB102_20	@ bb7.i
.LBB102_6:	@ tailrecurse
	tst r1, r3, lsl r12
	bne .LBB102_8	@ bb
	b .LBB102_14	@ lvalue_p.exit
.LBB102_7:	@ tailrecurse
	sub r12, r12, #115
	cmp r12, #1
	bhi .LBB102_14	@ lvalue_p.exit
.LBB102_8:	@ bb
	ldr r0, [r0, #+16]
	ldrb r12, [r0, #+8]
	cmp r12, #114
	bgt .LBB102_15	@ bb
.LBB102_9:	@ bb
	cmp r12, #27
	ble .LBB102_17	@ tailrecurse
.LBB102_10:	@ bb
	sub r12, r12, #28
	cmp r12, #14
	bhi .LBB102_14	@ lvalue_p.exit
.LBB102_11:	@ bb
	tst r2, r3, lsl r12
	bne .LBB102_18	@ bb2
.LBB102_12:	@ bb
	tst r3, r3, lsl r12
	movne r0, #1
	sfi_bxne lr
.LBB102_13:	@ bb
	tst r1, r3, lsl r12
	bne .LBB102_16	@ bb.i
.LBB102_14:	@ lvalue_p.exit
	mov r0, #0
	sfi_bx lr
.LBB102_15:	@ bb
	sub r12, r12, #115
	cmp r12, #1
	movhi r0, #0
	sfi_bxhi lr
.LBB102_16:	@ bb.i
	ldr r0, [r0, #+16]
	b .LBB102_1	@ tailrecurse
.LBB102_17:	@ tailrecurse
	cmp r12, #0
	bne .LBB102_14	@ lvalue_p.exit
.LBB102_18:	@ bb2
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #16
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB102_20	@ bb7.i
	b .LBB102_14	@ lvalue_p.exit
.LBB102_19:	@ bb2.i
.LBB102_20:	@ bb7.i
	mov r0, #1
	sfi_bx lr
	.size lvalue_p, .-lvalue_p


	.globl	initializer_constant_valid_p
	.align	4
initializer_constant_valid_p:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
.LBB103_1:	@ tailrecurse
	ldrb r3, [r5, #+8]
	cmp r3, #42
	ble .LBB103_44	@ tailrecurse
.LBB103_2:	@ tailrecurse
	cmp r3, #104
	bgt .LBB103_10	@ tailrecurse
.LBB103_3:	@ tailrecurse
	cmp r3, #43
	beq .LBB103_14	@ bb
.LBB103_4:	@ tailrecurse
	cmp r3, #56
	beq .LBB103_37	@ bb45
.LBB103_5:	@ tailrecurse
	cmp r3, #57
	bne .LBB103_13	@ tailrecurse.bb62_crit_edge
.LBB103_6:	@ bb53
	ldrb r3, [r4, #+8]
	cmp r3, #7
	bne .LBB103_8	@ bb56
.LBB103_7:	@ bb54
	ldrb r3, [r4, #+28]
	cmp r3, #32
	blo .LBB103_13	@ tailrecurse.bb62_crit_edge
.LBB103_8:	@ bb56
	ldr r0, [r5, #+16]
	mov r1, r4
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	mov r6, r0
	ldr r0, [r5, #+20]
	mov r1, r4
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	ldr r3, .LCPI103_0
	ldr r3, [r3]
	cmp r0, r3
	bne .LBB103_41	@ bb58
.LBB103_9:	@ bb56.bb62_crit_edge
	mov r0, r6
	b .LBB103_43	@ bb62
.LBB103_10:	@ tailrecurse
	sub r2, r3, #105
	cmp r2, #2
	blo .LBB103_20	@ bb19
.LBB103_11:	@ tailrecurse
	cmp r3, #110
	beq .LBB103_19	@ bb17
.LBB103_12:	@ tailrecurse
	cmp r3, #107
	beq .LBB103_17	@ tailrecurse.backedge
.LBB103_13:	@ tailrecurse.bb62_crit_edge
	mov r0, #0
	b .LBB103_43	@ bb62
.LBB103_14:	@ bb
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+8]
	sub r3, r3, #20
	and r3, r3, #255
	cmp r3, #1
	bhi .LBB103_18	@ bb8
.LBB103_15:	@ bb3
	ldrb r3, [r5, #+9]
	tst r3, #2
	beq .LBB103_18	@ bb8
.LBB103_16:	@ bb7
	ldr r5, [r5, #+20]
.LBB103_17:	@ tailrecurse.backedge
	ldr r5, [r5, #+16]
	b .LBB103_1	@ tailrecurse
.LBB103_18:	@ bb8
	ldr r4, .LCPI103_0
	ldr r0, [r4]
	ldrb r4, [r5, #+10]
	mov r5, #0
	tst r4, #4
	moveq r0, r5
	b .LBB103_43	@ bb62
.LBB103_19:	@ bb17
	ldr r0, [r5, #+16]
	b .LBB103_43	@ bb62
.LBB103_20:	@ bb19
	ldr r3, [r5, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #13
	ldreq r1, [r5, #+16]
	ldreq r1, [r1, #+4]
	ldreqb r1, [r1, #+8]
	cmpeq r1, #13
	beq .LBB103_17	@ tailrecurse.backedge
.LBB103_21:	@ bb20
.LBB103_22:	@ bb22
	and r1, r2, #255
	cmp r1, #8
	ldreq r1, [r5, #+16]
	ldreq r1, [r1, #+4]
	ldreqb r1, [r1, #+8]
	cmpeq r1, #8
	beq .LBB103_17	@ tailrecurse.backedge
.LBB103_23:	@ bb23
.LBB103_24:	@ bb25
	and r1, r2, #255
	cmp r1, #7
	bne .LBB103_32	@ bb38
.LBB103_25:	@ bb26
	ldr r1, [r5, #+16]
	ldr r1, [r1, #+4]
	ldrb r0, [r1, #+8]
	cmp r0, #7
	ldreqb r1, [r1, #+28]
	ldreqb r0, [r3, #+28]
	cmpeq r0, r1
	beq .LBB103_17	@ tailrecurse.backedge
.LBB103_26:	@ bb27
.LBB103_27:	@ bb29
	and r1, r2, #255
	cmp r1, #7
	bne .LBB103_32	@ bb38
.LBB103_28:	@ bb30
	ldr r0, [r5, #+16]
	ldr r1, [r0, #+4]
	ldrb r1, [r1, #+8]
	cmp r1, #7
	beq .LBB103_46	@ bb31
.LBB103_29:	@ bb34
	and r1, r2, #255
	cmp r1, #7
	ldreq r1, [r5, #+16]
	ldreq r1, [r1, #+4]
	ldreqb r0, [r1, #+8]
	cmpeq r0, #13
	beq .LBB103_31	@ bb36
	b .LBB103_32	@ bb38
.LBB103_30:	@ bb35
.LBB103_31:	@ bb36
	ldrb r1, [r1, #+28]
	ldrb r0, [r3, #+28]
	cmp r0, r1
	bhs .LBB103_17	@ tailrecurse.backedge
.LBB103_32:	@ bb38
	and r1, r2, #255
	cmp r1, #13
	ldreq r1, [r5, #+16]
	ldreq r1, [r1, #+4]
	ldreqb r0, [r1, #+8]
	cmpeq r0, #7
	beq .LBB103_34	@ bb40
	b .LBB103_36	@ bb42
.LBB103_33:	@ bb39
.LBB103_34:	@ bb40
	ldrb r1, [r1, #+28]
	ldrb r3, [r3, #+28]
	cmp r3, r1
	bls .LBB103_17	@ tailrecurse.backedge
.LBB103_35:	@ bb40
	and r2, r2, #255
	cmp r2, #21
	bne .LBB103_13	@ tailrecurse.bb62_crit_edge
	b .LBB103_17	@ tailrecurse.backedge
.LBB103_36:	@ bb42
	and r3, r2, #255
	cmp r3, #21
	bne .LBB103_13	@ tailrecurse.bb62_crit_edge
	b .LBB103_17	@ tailrecurse.backedge
.LBB103_37:	@ bb45
	ldrb r3, [r4, #+8]
	cmp r3, #7
	bne .LBB103_39	@ bb48
.LBB103_38:	@ bb46
	ldrb r3, [r4, #+28]
	cmp r3, #32
	blo .LBB103_13	@ tailrecurse.bb62_crit_edge
.LBB103_39:	@ bb48
	ldr r0, [r5, #+16]
	mov r1, r4
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	mov r6, r0
	ldr r0, [r5, #+20]
	mov r1, r4
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	ldr r4, .LCPI103_0
	ldr r4, [r4]
	cmp r6, r4
	beq .LBB103_43	@ bb62
.LBB103_40:	@ bb50
	cmp r0, r4
	mov r0, #0
	moveq r0, r6
	b .LBB103_43	@ bb62
.LBB103_41:	@ bb58
	cmp r6, r0
.LBB103_42:	@ bb58
	mov r0, #0
	moveq r0, r3
.LBB103_43:	@ bb62
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB103_44:	@ tailrecurse
	sub r3, r3, #25
	cmp r3, #4
	bhs .LBB103_13	@ tailrecurse.bb62_crit_edge
.LBB103_45:	@ bb16
	ldr r4, .LCPI103_0
	ldr r0, [r4]
	b .LBB103_43	@ bb62
.LBB103_46:	@ bb31
	mov r1, r4
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	ldr r3, .LCPI103_0
	ldr r3, [r3]
	cmp r0, r3
	b .LBB103_42	@ bb58
	.align	4
.LBB103_47:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI103_0:
 	.long	null_pointer_node

	.size initializer_constant_valid_p, .-initializer_constant_valid_p


	.align	4
valid_compound_expr_initializer:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r3, .LCPI104_0
	ldr r4, [r3]
	mov r5, r1
	mov r6, r0
.LBB104_1:	@ tailrecurse
	ldrb r3, [r6, #+8]
	cmp r3, #44
	bne .LBB104_8	@ bb3.i
.LBB104_2:	@ bb
	ldr r0, [r6, #+16]
	mov r1, r5
	emit_nops_till_bundle_end
	bl valid_compound_expr_initializer
	cmp r0, r4
	bne .LBB104_5	@ bb2
.LBB104_3:	@ bb1
	mov r0, r4
.LBB104_4:	@ bb1
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB104_5:	@ bb2
	ldr r6, [r6, #+20]
	ldrb r3, [r6, #+8]
	cmp r3, #44
	bne .LBB104_8	@ bb3.i
.LBB104_6:	@ bb.i
	ldr r0, [r6, #+16]
	mov r1, r5
	emit_nops_till_bundle_end
	bl valid_compound_expr_initializer
	cmp r0, r4
	beq .LBB104_3	@ bb1
.LBB104_7:	@ bb2.i
	ldr r6, [r6, #+20]
	b .LBB104_1	@ tailrecurse
.LBB104_8:	@ bb3.i
	ldrb r3, [r6, #+9]
	tst r3, #2
	bne .LBB104_10	@ valid_compound_expr_initializer.exit
.LBB104_9:	@ bb7.i
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	cmp r0, #0
	mov r0, r6
	moveq r0, r4
	b .LBB104_4	@ bb1
.LBB104_10:	@ valid_compound_expr_initializer.exit
	mov r0, r6
	b .LBB104_4	@ bb1
	.align	4
.LBB104_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI104_0:
 	.long	error_mark_node

	.size valid_compound_expr_initializer, .-valid_compound_expr_initializer


	.align	4
check_init_type_bitfields:
	sfi_sub sp, sp, #8
	@comment
str lr, [sp, #+4]
	@comment
str r4, [sp]
.LBB105_1:	@ tailrecurse
	ldrb r3, [r0, #+8]
	cmp r3, #18
	beq .LBB105_8	@ bb10
.LBB105_2:	@ tailrecurse
	and r3, r3, #255
	cmp r3, #20
	bne .LBB105_15	@ check_init_type_bitfields.exit
.LBB105_3:	@ bb
	add r4, r0, #12
	b .LBB105_7	@ bb8
.LBB105_4:	@ bb1
	ldrb r3, [r4, #+29]
	tst r3, #16
	ldreq r0, [r4, #+4]
	ldreqb r3, [r0, #+29]
	ldreqb r2, [r4, #+28]
	cmpeq r2, r3
	beq .LBB105_6	@ bb7
	b .LBB105_16	@ bb6
.LBB105_5:	@ bb5
.LBB105_6:	@ bb7
	emit_nops_till_bundle_end
	bl check_init_type_bitfields
.LBB105_7:	@ bb8
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB105_4	@ bb1
	b .LBB105_15	@ check_init_type_bitfields.exit
.LBB105_8:	@ bb10
	ldr r3, [r0, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #18
	beq .LBB105_18	@ bb10.i
.LBB105_9:	@ bb10
	and r2, r2, #255
	cmp r2, #20
	bne .LBB105_15	@ check_init_type_bitfields.exit
.LBB105_10:	@ bb.i
	add r4, r3, #12
	b .LBB105_14	@ bb8.i
.LBB105_11:	@ bb1.i
	ldrb r3, [r4, #+29]
	tst r3, #16
	ldreq r0, [r4, #+4]
	ldreqb r3, [r0, #+29]
	ldreqb r2, [r4, #+28]
	cmpeq r2, r3
	beq .LBB105_13	@ bb7.i
	b .LBB105_17	@ bb6.i
.LBB105_12:	@ bb5.i
.LBB105_13:	@ bb7.i
	emit_nops_till_bundle_end
	bl check_init_type_bitfields
.LBB105_14:	@ bb8.i
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB105_11	@ bb1.i
.LBB105_15:	@ check_init_type_bitfields.exit
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB105_16:	@ bb6
	ldr r4, .LCPI105_0
	mov r3, #0
	@comment
str r3, [r4]
	b .LBB105_15	@ check_init_type_bitfields.exit
.LBB105_17:	@ bb6.i
	ldr r3, .LCPI105_0
	mov r4, #0
	@comment
str r4, [r3]
	b .LBB105_15	@ check_init_type_bitfields.exit
.LBB105_18:	@ bb10.i
	ldr r0, [r3, #+4]
	b .LBB105_1	@ tailrecurse
	.align	4
.LBB105_19:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI105_0:
 	.long	constructor_incremental

	.size check_init_type_bitfields, .-check_init_type_bitfields


	.globl	lvalue_or_else
	.align	4
lvalue_or_else:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r3, #1
	mov r2, #142, 28 @ 2272
	orr r2, r2, #1, 18 @ 16384
	mov r12, #2, 24 @ 512
.LBB106_1:	@ tailrecurse.i
	ldrb lr, [r0, #+8]
	cmp lr, #114
	bgt .LBB106_8	@ tailrecurse.i
.LBB106_2:	@ tailrecurse.i
	cmp lr, #27
	ble .LBB106_20	@ tailrecurse.i
.LBB106_3:	@ tailrecurse.i
	sub lr, lr, #28
	cmp lr, #14
	bhi .LBB106_7	@ bb
.LBB106_4:	@ tailrecurse.i
	tst r2, r3, lsl lr
	bne .LBB106_21	@ bb2.i.i
.LBB106_5:	@ tailrecurse.i
	tst r3, r3, lsl lr
	bne .LBB106_18	@ lvalue_p.exit
.LBB106_6:	@ tailrecurse.i
	tst r12, r3, lsl lr
	bne .LBB106_9	@ bb.i
.LBB106_7:	@ bb
	ldr r0, .LCPI106_0
	emit_nops_till_bundle_end
	bl error
	mov r0, #0
	b .LBB106_19	@ lvalue_p.exit
.LBB106_8:	@ tailrecurse.i
	sub lr, lr, #115
	cmp lr, #1
	bhi .LBB106_7	@ bb
.LBB106_9:	@ bb.i
	ldr r0, [r0, #+16]
	ldrb lr, [r0, #+8]
	cmp lr, #114
	bgt .LBB106_15	@ bb.i
.LBB106_10:	@ bb.i
	cmp lr, #27
	ble .LBB106_20	@ tailrecurse.i
.LBB106_11:	@ bb.i
	sub lr, lr, #28
	cmp lr, #14
	bhi .LBB106_7	@ bb
.LBB106_12:	@ bb.i
	tst r2, r3, lsl lr
	bne .LBB106_21	@ bb2.i.i
.LBB106_13:	@ bb.i
	tst r3, r3, lsl lr
	bne .LBB106_18	@ lvalue_p.exit
.LBB106_14:	@ bb.i
	tst r12, r3, lsl lr
	beq .LBB106_7	@ bb
	b .LBB106_16	@ bb.i.i
.LBB106_15:	@ bb.i
	sub lr, lr, #115
	cmp lr, #1
	bhi .LBB106_7	@ bb
.LBB106_16:	@ bb.i.i
	ldr r0, [r0, #+16]
	b .LBB106_1	@ tailrecurse.i
.LBB106_17:	@ bb2.i
.LBB106_18:	@ lvalue_p.exit
	mov r0, #1
.LBB106_19:	@ lvalue_p.exit
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB106_20:	@ tailrecurse.i
	cmp lr, #0
	bne .LBB106_7	@ bb
.LBB106_21:	@ bb2.i.i
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #16
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB106_18	@ lvalue_p.exit
	b .LBB106_7	@ bb
	.align	4
.LBB106_22:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI106_0:
 	.long	.str829

	.size lvalue_or_else, .-lvalue_or_else


	.globl	set_init_label
	.align	4
set_init_label:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI107_0
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB107_10	@ return
.LBB107_1:	@ bb
	ldr r2, .LCPI107_1
	ldr r2, [r2]
	add r3, r3, #12
	mov r1, #0
	mov r12, #1
	b .LBB107_3	@ bb5
.LBB107_2:	@ bb1
	cmp r3, r2
	moveq r1, r12
	ldr lr, [r3, #+32]
	cmp lr, r0
	beq .LBB107_4	@ bb6
.LBB107_3:	@ bb5
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB107_2	@ bb1
.LBB107_4:	@ bb6
	cmp r3, #0
	bne .LBB107_7	@ bb8
.LBB107_5:	@ bb7
	ldr r1, [r0, #+16]
	ldr r0, .LCPI107_2
.LBB107_6:	@ bb7
	emit_nops_till_bundle_end
	bl error
	b .LBB107_10	@ return
.LBB107_7:	@ bb8
	cmp r1, #0
	beq .LBB107_11	@ bb9
.LBB107_8:	@ bb10
	ldr r2, .LCPI107_4
	@comment
str r3, [r2]
	ldr r3, .LCPI107_5
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI107_6
	emit_nops_till_bundle_end
	blne pedwarn
.LBB107_9:	@ bb11
.LBB107_10:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB107_11:	@ bb9
	ldr r1, [r0, #+16]
	ldr r0, .LCPI107_3
	b .LBB107_6	@ bb7
	.align	4
.LBB107_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_0:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_1:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_2:
 	.long	.str1830

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_3:
 	.long	.str2831

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_4:
 	.long	constructor_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_5:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI107_6:
 	.long	.str3832

	.size set_init_label, .-set_init_label


	.align	4
warn_for_assignment:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r11, lr}
	add r11, sp, #12
	mov r4, r3
	mov r5, r2
	mov r6, r0
	cmp r1, #0
	bne .LBB108_3	@ bb7
.LBB108_1:	@ bb
	emit_nops_till_bundle_end
	bl maybe_building_objc_message_expr
	mov r3, #0
	mov r2, #1
	cmp r4, #2
	mov r1, #0
	movgt r1, r2
	cmp r0, #0
	mov r12, #0
	movne r12, r2
	tst r12, r1
	movne r5, r0
	mvn r2, #1
	tst r12, r1
	movne r3, r2
	add r2, r3, r4
	cmp r5, #0
	bne .LBB108_4	@ bb5
.LBB108_2:	@ bb6
	sub r4, sp, #44
	mov sp, r4
	ldr r1, .LCPI108_1
	mov r0, r4
	emit_nops_till_bundle_end
	bl sprintf
	mov r1, r4
.LBB108_3:	@ bb7
	mov r0, r6
	emit_nops_till_bundle_end
	bl pedwarn
	sub sp, r11, #12
	ldmfd sp, {r4, r5, r6, r11, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB108_4:	@ bb5
	ldr r3, [r5, #+12]
	add r3, r3, #52
	bic r3, r3, #3
	sub r4, sp, r3
	mov sp, r4
	ldr r3, [r5, #+16]
	ldr r1, .LCPI108_0
	mov r0, r4
	emit_nops_till_bundle_end
	bl sprintf
	mov r1, r4
	b .LBB108_3	@ bb7
	.align	4
.LBB108_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI108_0:
 	.long	argstring.6539

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI108_1:
 	.long	argnofun.6540

	.size warn_for_assignment, .-warn_for_assignment


	.globl	start_init
	.align	4
start_init:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r0, #40
	emit_nops_till_bundle_end
	bl xmalloc
	cmp r5, #0
	ldrne r5, [r5, #+20]
	moveq r5, #0
	b .LBB109_2	@ bb1
.LBB109_1:	@ bb
.LBB109_2:	@ bb1
	ldr r3, .LCPI109_0
	ldr r2, [r3]
	@comment
str r2, [r0, #+4]
	ldr r2, .LCPI109_1
	ldr r1, [r2]
	@comment
str r1, [r0, #+8]
	ldr r1, .LCPI109_2
	ldr r12, [r1]
	strb r12, [r0, #+33]
	ldr r12, .LCPI109_3
	ldr r12, [r12]
	strb r12, [r0, #+34]
	ldr r12, .LCPI109_4
	ldr r12, [r12]
	strb r12, [r0, #+35]
	ldr r12, .LCPI109_5
	ldr r12, [r12]
	@comment
str r12, [r0, #+12]
	ldr r12, .LCPI109_6
	ldr r12, [r12]
	@comment
str r12, [r0, #+16]
	ldr r12, .LCPI109_7
	ldr r12, [r12]
	@comment
str r12, [r0, #+20]
	ldr r12, .LCPI109_8
	ldr r12, [r12]
	@comment
str r12, [r0, #+24]
	ldr r12, .LCPI109_9
	ldr r12, [r12]
	@comment
str r12, [r0, #+28]
	ldr r12, .LCPI109_10
	ldr lr, [r12]
	strb lr, [r0, #+36]
	ldr lr, .LCPI109_11
	ldr r7, [lr]
	strb r7, [r0, #+32]
	ldr r7, .LCPI109_12
	ldr r8, [r7]
	@comment
str r8, [r0]
	@comment
str r0, [r7]
	@comment
str r6, [r3]
	@comment
str r4, [r1]
	@comment
str r5, [r2]
	mov r3, #0
	@comment
str r3, [r12]
	@comment
str r4, [lr]
	cmp r6, #0
	beq .LBB109_8	@ bb28.thread
.LBB109_3:	@ bb2
	ldrb r3, [r6, #+9]
	mov r3, r6
	ldrb r2, [r3, #+8]!
	ldrb r2, [r3, #+3]
	ldrb r3, [r3, #+2]
	mov r2, #1
	and r3, r2, r3, lsr #2
	ldr r2, .LCPI109_3
	@comment
str r3, [r2]
	ldrb r3, [r6, #+10]
	tst r3, #4
	ldreq r3, .LCPI109_13
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB109_9	@ bb19
.LBB109_4:	@ bb12
.LBB109_5:	@ bb13
	ldr r3, [r6, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #22
	bhi .LBB109_9	@ bb19
.LBB109_6:	@ bb13
	mov r2, #1
	mov r1, #29, 14 @ 7602176
	tst r1, r2, lsl r3
	beq .LBB109_9	@ bb19
.LBB109_7:	@ bb13.bb28_crit_edge
	mov r3, #1
	b .LBB109_10	@ bb28
.LBB109_8:	@ bb28.thread
	mov r3, #0
	ldr r4, .LCPI109_3
	@comment
str r3, [r4]
	ldr r4, .LCPI109_4
	@comment
str r3, [r4]
	ldr r4, .LCPI109_5
	@comment
str r3, [r4]
	ldr r4, .LCPI109_14
	strb r3, [r4]
	ldr r4, .LCPI109_8
	@comment
str r3, [r4]
	ldr r4, .LCPI109_9
	@comment
str r3, [r4]
	ldr r4, .LCPI109_7
	@comment
str r3, [r4]
	ldr r4, .LCPI109_15
	b .LBB109_11	@ bb29
.LBB109_9:	@ bb19
	mov r3, #0
.LBB109_10:	@ bb28
	ldr r2, .LCPI109_4
	@comment
str r3, [r2]
	ldr r3, [r6, #+32]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	ldrb r1, [r2, #+3]
	ldrb r1, [r6, #+9]
	ldrb r2, [r2, #+2]
	mov r1, #1
	and r2, r1, r2, lsr #2
	orr r2, r2, r4
	ldr r4, [r3, #+16]
	ldr r3, .LCPI109_2
	@comment
str r2, [r3]
	mov r3, #0
	ldr r2, .LCPI109_5
	@comment
str r3, [r2]
	ldr r2, .LCPI109_14
	strb r3, [r2]
	ldr r2, .LCPI109_8
	@comment
str r3, [r2]
	ldr r2, .LCPI109_9
	@comment
str r3, [r2]
	ldr r2, .LCPI109_7
	@comment
str r3, [r2]
	cmp r4, #0
	beq .LBB109_12	@ return
.LBB109_11:	@ bb29
	ldr r3, .LCPI109_9
	mov r2, #10
	@comment
str r2, [r3]
	mov r0, #80
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI109_8
	@comment
str r0, [r3]
	ldr r3, .LCPI109_7
	@comment
str r0, [r3]
	mov r2, #1
	@comment
str r2, [r0]
	ldr r2, [r3]
	@comment
str r4, [r2, #+4]
	ldr r2, [r3]
	add r2, r2, #8
	@comment
str r2, [r3]
.LBB109_12:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB109_13:	@ entry.bb1_crit_edge
	.align	4
.LBB109_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_0:
 	.long	constructor_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_1:
 	.long	constructor_asmspec

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_2:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_3:
 	.long	require_constant_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_4:
 	.long	require_constant_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_5:
 	.long	constructor_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_6:
 	.long	constructor_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_7:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_8:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_9:
 	.long	spelling_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_10:
 	.long	constructor_subconstants_deferred

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_11:
 	.long	constructor_top_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_12:
 	.long	initializer_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_13:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_14:
 	.long	missing_braces_mentioned.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI109_15:
 	.long	.str9838

	.size start_init, .-start_init


	.align	4
print_spelling:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r3, .LCPI110_0
	ldr r3, [r3]
	ldr r2, .LCPI110_1
	ldr r4, [r2]
	cmp r4, r3
	bhs .LBB110_12	@ bb9
.LBB110_1:	@ entry.bb_crit_edge
	mov r5, #46
	mov r6, r0
.LBB110_2:	@ bb
	ldr r3, [r4]
	cmp r3, #2
	beq .LBB110_5	@ bb3
.LBB110_3:	@ bb
	cmp r3, #3
	bne .LBB110_6	@ bb4
.LBB110_4:	@ bb1
	ldr r2, [r4, #+4]
	ldr r1, .LCPI110_2
	mov r0, r6
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r6, r6, r0
	b .LBB110_10	@ bb7
.LBB110_5:	@ bb3
	strb r5, [r6], #+1
.LBB110_6:	@ bb4
	ldr r3, [r4, #+4]
	ldrb r2, [r3]
	strb r2, [r6]
	cmp r2, #0
	beq .LBB110_10	@ bb7
.LBB110_7:	@ bb4.bb5_crit_edge
	mov r2, #0
.LBB110_8:	@ bb5
	add r1, r3, r2
	ldrb r1, [r1, #+1]
	add r0, r6, r2
	strb r1, [r0, #+1]
	add r2, r2, #1
	cmp r1, #0
	bne .LBB110_8	@ bb5
.LBB110_9:	@ bb7.loopexit
	add r6, r6, r2
.LBB110_10:	@ bb7
	ldr r3, .LCPI110_0
	ldr r3, [r3]
	add r4, r4, #8
	cmp r4, r3
	blo .LBB110_2	@ bb
.LBB110_11:	@ bb7.bb9_crit_edge
	mov r0, r6
.LBB110_12:	@ bb9
	mov r3, #0
	strb r3, [r0]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB110_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI110_0:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI110_1:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI110_2:
 	.long	.str10839

	.size print_spelling, .-print_spelling


	.align	4
get_spelling:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r11, lr}
	add r11, sp, #8
	ldr r3, .LCPI111_0
	cmp r0, r3
	bne .LBB111_12	@ bb6
.LBB111_1:	@ bb
	ldr r3, .LCPI111_1
	ldr r3, [r3]
	ldr r2, .LCPI111_2
	ldr r4, [r2]
	cmp r4, r3
	bhs .LBB111_13	@ bb.spelling_length.exit_crit_edge
.LBB111_2:	@ bb.bb.i_crit_edge
	mov r5, #0
.LBB111_3:	@ bb.i
	ldr r3, [r4]
	cmp r3, #3
	beq .LBB111_14	@ bb.i.bb3.i_crit_edge
.LBB111_4:	@ bb2.i
	ldr r0, [r4, #+4]
	emit_nops_till_bundle_end
	bl strlen
	add r2, r0, #1
	mov r3, r5
.LBB111_5:	@ bb3.i
	add r5, r3, r2
	ldr r3, .LCPI111_1
	ldr r3, [r3]
	add r4, r4, #8
	cmp r4, r3
	blo .LBB111_3	@ bb.i
.LBB111_6:	@ spelling_length.exit.loopexit
	add r4, r5, #24
.LBB111_7:	@ spelling_length.exit
	ldr r3, .LCPI111_3
	ldr r3, [r3]
	cmp r3, #0
	bge .LBB111_9	@ bb2
.LBB111_8:	@ bb1
	ldr r3, .LCPI111_3
	@comment
str r4, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI111_4
	@comment
str r0, [r3]
.LBB111_9:	@ bb2
	ldr r3, .LCPI111_3
	ldr r3, [r3]
	cmp r4, r3
	ble .LBB111_11	@ bb4
.LBB111_10:	@ bb3
	ldr r3, .LCPI111_3
	@comment
str r4, [r3]
	ldr r5, .LCPI111_4
	ldr r0, [r5]
	mov r1, r4
	emit_nops_till_bundle_end
	bl xrealloc
	@comment
str r0, [r5]
.LBB111_11:	@ bb4
	add r3, r4, #3
	bic r3, r3, #3
	sub r4, sp, r3
	mov sp, r4
	mov r0, r4
	emit_nops_till_bundle_end
	bl print_spelling
	ldr r5, .LCPI111_4
	ldr r0, [r5]
	ldr r1, .LCPI111_5
	mov r2, r4
	emit_nops_till_bundle_end
	bl sprintf
	ldr r0, [r5]
.LBB111_12:	@ bb6
	sub sp, r11, #8
	ldmfd sp, {r4, r5, r11, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB111_13:	@ bb.spelling_length.exit_crit_edge
	mov r4, #24
	b .LBB111_7	@ spelling_length.exit
.LBB111_14:	@ bb.i.bb3.i_crit_edge
	mov r3, #25
	mov r2, r5
	b .LBB111_5	@ bb3.i
	.align	4
.LBB111_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI111_0:
 	.long	initialization_message

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI111_1:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI111_2:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI111_3:
 	.long	size.6845

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI111_4:
 	.long	buffer.6844

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI111_5:
 	.long	message.6846

	.size get_spelling, .-get_spelling


	.align	4
warning_init:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r11, lr}
	add r11, sp, #20
	ldr r3, .LCPI112_0
	ldr r3, [r3]
	ldr r2, .LCPI112_1
	ldr r4, [r2]
	mov r5, r0
	cmp r4, r3
	bhs .LBB112_9	@ entry.spelling_length.exit_crit_edge
.LBB112_1:	@ entry.bb.i_crit_edge
	mov r6, #0
.LBB112_2:	@ bb.i
	ldr r3, [r4]
	cmp r3, #3
	beq .LBB112_10	@ bb.i.bb3.i_crit_edge
.LBB112_3:	@ bb2.i
	ldr r0, [r4, #+4]
	emit_nops_till_bundle_end
	bl strlen
	add r2, r0, #1
	mov r3, r6
.LBB112_4:	@ bb3.i
	add r6, r3, r2
	ldr r3, .LCPI112_0
	ldr r3, [r3]
	add r4, r4, #8
	cmp r4, r3
	blo .LBB112_2	@ bb.i
.LBB112_5:	@ spelling_length.exit.loopexit
	add r4, r6, #1
.LBB112_6:	@ spelling_length.exit
	add r3, r4, #3
	bic r4, r3, #3
	mov r6, sp
	sub r7, r6, r4
	mov sp, r7
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_spelling
	ldr r0, .LCPI112_2
	emit_nops_till_bundle_end
	bl strlen
	mov r8, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r8, r0
	add r3, r3, #5
	bic r3, r3, #3
	sub r8, sp, r3
	mov sp, r8
	ldrb r3, [r6, -r4]
	cmp r3, #0
	bne .LBB112_11	@ bb2
.LBB112_7:	@ bb3
	mov r3, #0
	strb r3, [r8]
.LBB112_8:	@ bb4
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl warning
	sub sp, r11, #20
	ldmfd sp, {r4, r5, r6, r7, r8, r11, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB112_9:	@ entry.spelling_length.exit_crit_edge
	mov r4, #1
	b .LBB112_6	@ spelling_length.exit
.LBB112_10:	@ bb.i.bb3.i_crit_edge
	mov r3, #25
	mov r2, r6
	b .LBB112_4	@ bb3.i
.LBB112_11:	@ bb2
	ldr r1, .LCPI112_2
	mov r0, r8
	mov r2, r7
	emit_nops_till_bundle_end
	bl sprintf
	b .LBB112_8	@ bb4
	.align	4
.LBB112_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI112_0:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI112_1:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI112_2:
 	.long	.str12841

	.size warning_init, .-warning_init


	.globl	pedwarn_init
	.align	4
pedwarn_init:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r11, lr}
	add r11, sp, #16
	mov r4, r1
	mov r5, r0
	cmp r2, #0
	bne .LBB113_8	@ bb1
.LBB113_1:	@ bb
	ldr r3, .LCPI113_0
	ldr r3, [r3]
	ldr r2, .LCPI113_1
	ldr r6, [r2]
	cmp r6, r3
	bhs .LBB113_11	@ bb.spelling_length.exit_crit_edge
.LBB113_2:	@ bb.bb.i_crit_edge
	mov r7, #0
.LBB113_3:	@ bb.i
	ldr r3, [r6]
	cmp r3, #3
	beq .LBB113_12	@ bb.i.bb3.i_crit_edge
.LBB113_4:	@ bb2.i
	ldr r0, [r6, #+4]
	emit_nops_till_bundle_end
	bl strlen
	add r2, r0, #1
	mov r3, r7
.LBB113_5:	@ bb3.i
	add r7, r3, r2
	ldr r3, .LCPI113_0
	ldr r3, [r3]
	add r6, r6, #8
	cmp r6, r3
	blo .LBB113_3	@ bb.i
.LBB113_6:	@ spelling_length.exit.loopexit
	add r6, r7, #1
.LBB113_7:	@ spelling_length.exit
	add r3, r6, #3
	bic r3, r3, #3
	sub r6, sp, r3
	mov sp, r6
	mov r0, r6
	emit_nops_till_bundle_end
	bl print_spelling
	mov r2, r6
.LBB113_8:	@ bb1
	mov r6, r2
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r7, r0
	add r3, r3, #5
	bic r3, r3, #3
	sub r7, sp, r3
	mov sp, r7
	ldrb r3, [r6]
	cmp r3, #0
	bne .LBB113_13	@ bb2
.LBB113_9:	@ bb3
	mov r3, #0
	strb r3, [r7]
.LBB113_10:	@ bb4
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl pedwarn
	sub sp, r11, #16
	ldmfd sp, {r4, r5, r6, r7, r11, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB113_11:	@ bb.spelling_length.exit_crit_edge
	mov r6, #1
	b .LBB113_7	@ spelling_length.exit
.LBB113_12:	@ bb.i.bb3.i_crit_edge
	mov r3, #25
	mov r2, r7
	b .LBB113_5	@ bb3.i
.LBB113_13:	@ bb2
	mov r0, r7
	mov r1, r4
	mov r2, r6
	emit_nops_till_bundle_end
	bl sprintf
	b .LBB113_10	@ bb4
	.align	4
.LBB113_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI113_0:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI113_1:
 	.long	spelling_base

	.size pedwarn_init, .-pedwarn_init


	.globl	error_init
	.align	4
error_init:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r11, lr}
	add r11, sp, #16
	mov r4, r1
	mov r5, r0
	cmp r2, #0
	bne .LBB114_8	@ bb1
.LBB114_1:	@ bb
	ldr r3, .LCPI114_0
	ldr r3, [r3]
	ldr r2, .LCPI114_1
	ldr r6, [r2]
	cmp r6, r3
	bhs .LBB114_11	@ bb.spelling_length.exit_crit_edge
.LBB114_2:	@ bb.bb.i_crit_edge
	mov r7, #0
.LBB114_3:	@ bb.i
	ldr r3, [r6]
	cmp r3, #3
	beq .LBB114_12	@ bb.i.bb3.i_crit_edge
.LBB114_4:	@ bb2.i
	ldr r0, [r6, #+4]
	emit_nops_till_bundle_end
	bl strlen
	add r2, r0, #1
	mov r3, r7
.LBB114_5:	@ bb3.i
	add r7, r3, r2
	ldr r3, .LCPI114_0
	ldr r3, [r3]
	add r6, r6, #8
	cmp r6, r3
	blo .LBB114_3	@ bb.i
.LBB114_6:	@ spelling_length.exit.loopexit
	add r6, r7, #1
.LBB114_7:	@ spelling_length.exit
	add r3, r6, #3
	bic r3, r3, #3
	sub r6, sp, r3
	mov sp, r6
	mov r0, r6
	emit_nops_till_bundle_end
	bl print_spelling
	mov r2, r6
.LBB114_8:	@ bb1
	mov r6, r2
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r7, r0
	add r3, r3, #5
	bic r3, r3, #3
	sub r7, sp, r3
	mov sp, r7
	ldrb r3, [r6]
	cmp r3, #0
	bne .LBB114_13	@ bb2
.LBB114_9:	@ bb3
	mov r3, #0
	strb r3, [r7]
.LBB114_10:	@ bb4
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl error
	sub sp, r11, #16
	ldmfd sp, {r4, r5, r6, r7, r11, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB114_11:	@ bb.spelling_length.exit_crit_edge
	mov r6, #1
	b .LBB114_7	@ spelling_length.exit
.LBB114_12:	@ bb.i.bb3.i_crit_edge
	mov r3, #25
	mov r2, r7
	b .LBB114_5	@ bb3.i
.LBB114_13:	@ bb2
	mov r0, r7
	mov r1, r4
	mov r2, r6
	emit_nops_till_bundle_end
	bl sprintf
	b .LBB114_10	@ bb4
	.align	4
.LBB114_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI114_0:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI114_1:
 	.long	spelling_base

	.size error_init, .-error_init


	.globl	set_init_index
	.align	4
set_init_index:
	sfi_sub sp, sp, #12
	@comment
str lr, [sp, #+8]
	@comment
str r5, [sp, #+4]
	@comment
str r4, [sp]
.LBB115_1:	@ bb1
	mov r4, r0
	ldrb r3, [r4, #+8]
	sub r2, r3, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB115_3	@ bb3
.LBB115_2:	@ bb2
	ldr r2, [r4, #+4]
	ldrb r2, [r2, #+29]
	ldr r0, [r4, #+16]
	ldr r12, [r0, #+4]
	ldrb r12, [r12, #+29]
	cmp r2, r12
	beq .LBB115_1	@ bb1
.LBB115_3:	@ bb3
	cmp r1, #0
	beq .LBB115_6	@ bb7
.LBB115_4:	@ bb5
	mov r2, r1
	ldrb r1, [r2, #+8]
	sub r1, r1, #105
	and r1, r1, #255
	cmp r1, #3
	blo .LBB115_19	@ bb6
.LBB115_5:	@ bb5.bb7_crit_edge
	mov r1, r2
.LBB115_6:	@ bb7
	mov r5, r1
	and r3, r3, #255
	cmp r3, #25
	beq .LBB115_9	@ bb9
.LBB115_7:	@ bb8
	ldr r0, .LCPI115_0
.LBB115_8:	@ bb8
	ldr r1, .LCPI115_1
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	b .LBB115_18	@ bb21
.LBB115_9:	@ bb9
	cmp r5, #0
	ldrneb r3, [r5, #+8]
	cmpne r3, #25
	bne .LBB115_7	@ bb8
.LBB115_10:	@ bb10
.LBB115_11:	@ bb12
	ldr r3, .LCPI115_2
	ldr r1, [r3]
	cmp r1, #0
	beq .LBB115_20	@ bb13
.LBB115_12:	@ bb14
	mov r0, r4
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	bne .LBB115_21	@ bb15
.LBB115_13:	@ bb16
	ldr r3, .LCPI115_5
	ldr r2, [r3]
	ldr r1, [r4, #+12]
	@comment
str r1, [r2, #+12]
	ldr r3, [r3]
	ldr r2, [r4, #+16]
	@comment
str r2, [r3, #+16]
	cmp r5, #0
	beq .LBB115_15	@ bb19
.LBB115_14:	@ bb17
	mov r0, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	bne .LBB115_22	@ bb18
.LBB115_15:	@ bb19
	ldr r3, .LCPI115_7
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI115_8
	emit_nops_till_bundle_end
	blne pedwarn
.LBB115_16:	@ bb20
.LBB115_17:	@ bb21
	ldr r3, .LCPI115_9
	@comment
str r5, [r3]
.LBB115_18:	@ bb21
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB115_19:	@ bb6
	ldr r1, [r2, #+4]
	ldrb r0, [r1, #+29]
	ldr r1, [r2, #+16]
	ldr r12, [r1, #+4]
	ldrb r12, [r12, #+29]
	cmp r0, r12
	beq .LBB115_4	@ bb5
	b .LBB115_5	@ bb5.bb7_crit_edge
.LBB115_20:	@ bb13
	ldr r0, .LCPI115_3
	b .LBB115_8	@ bb8
.LBB115_21:	@ bb15
	ldr r0, .LCPI115_4
	b .LBB115_8	@ bb8
.LBB115_22:	@ bb18
	ldr r0, .LCPI115_6
	b .LBB115_8	@ bb8
	.align	4
.LBB115_23:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_0:
 	.long	.str11840

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_1:
 	.long	.str12841

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_2:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_3:
 	.long	.str13842

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_4:
 	.long	.str14843

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_5:
 	.long	constructor_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_6:
 	.long	.str15844

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_7:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_8:
 	.long	.str16845

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI115_9:
 	.long	constructor_range_end

	.size set_init_index, .-set_init_index


	.globl	c_alignof
	.align	4
c_alignof:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #0
	andne r2, r3, #255
	cmpne r2, #6
	bne .LBB116_2	@ entry
	b .LBB116_8	@ bb11
.LBB116_1:	@ entry
.LBB116_2:	@ entry
	and r3, r3, #255
	cmp r3, #23
	bne .LBB116_9	@ bb12
.LBB116_3:	@ bb
	ldr r3, .LCPI116_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB116_10	@ bb.bb7_crit_edge
.LBB116_4:	@ bb1
	ldr r3, .LCPI116_1
	ldr r3, [r3]
	and r2, r3, #3
	cmp r2, #1
	bne .LBB116_6	@ bb4
.LBB116_5:	@ bb2
	tst r3, #16
	bne .LBB116_11	@ bb2.bb7_crit_edge
.LBB116_6:	@ bb4
	mov r0, #8
.LBB116_7:	@ bb7
	emit_nops_till_bundle_end
	bl size_int
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB116_8:	@ bb11
	mov r0, #1
	b .LBB116_7	@ bb7
.LBB116_9:	@ bb12
	ldr r3, [r0, #+32]
	mov r0, r3, lsr #3
	b .LBB116_7	@ bb7
.LBB116_10:	@ bb.bb7_crit_edge
	mov r0, #4
	b .LBB116_7	@ bb7
.LBB116_11:	@ bb2.bb7_crit_edge
	mov r0, #16
	b .LBB116_7	@ bb7
	.align	4
.LBB116_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI116_0:
 	.long	flag_inhibit_size_directive

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI116_1:
 	.long	target_flags

	.size c_alignof, .-c_alignof


	.globl	c_alignof_expr
	.align	4
c_alignof_expr:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #33
	bne .LBB117_3	@ bb1
.LBB117_1:	@ bb
	ldr r3, [r0, #+72]
.LBB117_2:	@ bb
	mov r0, r3, lsr #3
	b .LBB117_21	@ bb7.i
.LBB117_3:	@ bb1
	and r2, r3, #255
	cmp r2, #37
	bne .LBB117_7	@ bb10
.LBB117_4:	@ bb2
	ldr r2, [r0, #+20]
	ldrb r2, [r2, #+29]
	tst r2, #16
	bne .LBB117_26	@ bb6
.LBB117_5:	@ bb7
	and r2, r3, #255
	cmp r2, #37
	ldreq r2, [r0, #+20]
	ldreqb r1, [r2, #+8]
	cmpeq r1, #36
	beq .LBB117_28	@ bb9
.LBB117_6:	@ bb8
.LBB117_7:	@ bb10
	and r3, r3, #255
	cmp r3, #39
	bne .LBB117_22	@ bb17
.LBB117_8:	@ bb11
	ldr r3, [r0, #+16]
	ldr r2, [r3, #+4]
	ldr r2, [r2, #+4]
	ldr r2, [r2, #+32]
	mov r1, r3
	b .LBB117_10	@ bb14.outer
.LBB117_9:	@ bb12
	ldr r2, [r2, #+4]
	ldr r2, [r2, #+32]
	cmp r2, r12
	mov r1, r3
	ble .LBB117_11	@ bb14
.LBB117_10:	@ bb14.outer
	mov r12, r2
	mov r0, r3
	mov r3, r1
.LBB117_11:	@ bb14
	ldrb r2, [r3, #+8]
	cmp r2, #106
	ldreq r3, [r3, #+16]
	ldreq r2, [r3, #+4]
	ldreqb r1, [r2, #+8]
	cmpeq r1, #13
	beq .LBB117_9	@ bb12
.LBB117_12:	@ bb15
.LBB117_13:	@ bb16
	ldr r3, [r0, #+4]
	ldr r3, [r3, #+4]
.LBB117_14:	@ bb16
	ldrb r2, [r3, #+8]
	cmp r2, #0
	andne r1, r2, #255
	cmpne r1, #6
	bne .LBB117_16	@ bb16
	b .LBB117_27	@ bb11.i
.LBB117_15:	@ bb16
.LBB117_16:	@ bb16
	and r2, r2, #255
	cmp r2, #23
	bne .LBB117_23	@ bb12.i
.LBB117_17:	@ bb.i
	ldr r3, .LCPI117_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB117_24	@ bb.i.bb7.i_crit_edge
.LBB117_18:	@ bb1.i
	ldr r3, .LCPI117_2
	ldr r3, [r3]
	and r2, r3, #3
	cmp r2, #1
	bne .LBB117_20	@ bb4.i
.LBB117_19:	@ bb2.i
	tst r3, #16
	bne .LBB117_25	@ bb2.i.bb7.i_crit_edge
.LBB117_20:	@ bb4.i
	mov r0, #8
.LBB117_21:	@ bb7.i
	emit_nops_till_bundle_end
	bl size_int
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB117_22:	@ bb17
	ldr r3, [r0, #+4]
	b .LBB117_14	@ bb16
.LBB117_23:	@ bb12.i
	ldr r3, [r3, #+32]
	b .LBB117_2	@ bb
.LBB117_24:	@ bb.i.bb7.i_crit_edge
	mov r0, #4
	b .LBB117_21	@ bb7.i
.LBB117_25:	@ bb2.i.bb7.i_crit_edge
	mov r0, #16
	b .LBB117_21	@ bb7.i
.LBB117_26:	@ bb6
	ldr r0, .LCPI117_0
	emit_nops_till_bundle_end
	bl error
.LBB117_27:	@ bb11.i
	mov r0, #1
	b .LBB117_21	@ bb7.i
.LBB117_28:	@ bb9
	ldr r3, [r2, #+72]
	b .LBB117_2	@ bb
	.align	4
.LBB117_29:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI117_0:
 	.long	.str17846

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI117_1:
 	.long	flag_inhibit_size_directive

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI117_2:
 	.long	target_flags

	.size c_alignof_expr, .-c_alignof_expr


	.globl	incomplete_type_error
	.align	4
incomplete_type_error:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r1, #+8]
	cmp r3, #0
	beq .LBB118_22	@ return
.LBB118_1:	@ bb
	cmp r0, #0
	beq .LBB118_12	@ retry
.LBB118_2:	@ bb1
	ldrb r3, [r0, #+8]
	sub r3, r3, #33
	and r3, r3, #255
	cmp r3, #1
	bhi .LBB118_12	@ retry
.LBB118_3:	@ bb2
	ldr r3, [r0, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI118_0
	b .LBB118_21	@ bb12
.LBB118_4:	@ retry
	cmp r3, #18
	beq .LBB118_10	@ bb7
.LBB118_5:	@ retry
	cmp r3, #20
	beq .LBB118_17	@ bb11.loopexit
.LBB118_6:	@ retry
	cmp r3, #21
	beq .LBB118_18	@ bb11.loopexit1
.LBB118_7:	@ bb10
	emit_nops_till_bundle_end
	bl abort
.LBB118_8:	@ bb6
	ldr r0, .LCPI118_2
.LBB118_9:	@ bb6
	emit_nops_till_bundle_end
	bl error
	b .LBB118_22	@ return
.LBB118_10:	@ bb7
	ldr r3, [r1, #+12]
	cmp r3, #0
	beq .LBB118_16	@ bb9
.LBB118_11:	@ bb8
	ldr r1, [r1, #+4]
.LBB118_12:	@ retry
	ldrb r3, [r1, #+8]
	cmp r3, #17
	bgt .LBB118_4	@ retry
.LBB118_13:	@ retry
	cmp r3, #6
	beq .LBB118_8	@ bb6
.LBB118_14:	@ retry
	cmp r3, #10
	bne .LBB118_7	@ bb10
.LBB118_15:	@ retry.bb11_crit_edge
	ldr r0, .LCPI118_1
	b .LBB118_19	@ bb11
.LBB118_16:	@ bb9
	ldr r0, .LCPI118_3
	b .LBB118_9	@ bb6
.LBB118_17:	@ bb11.loopexit
	ldr r0, .LCPI118_4
	b .LBB118_19	@ bb11
.LBB118_18:	@ bb11.loopexit1
	ldr r0, .LCPI118_5
.LBB118_19:	@ bb11
	ldr r3, [r1, #+48]
	ldrb r2, [r3, #+8]
	cmp r2, #1
	ldreq r1, [r3, #+16]
	ldrne r3, [r3, #+32]
	ldrne r1, [r3, #+16]
	ldrne r0, .LCPI118_6
	b .LBB118_21	@ bb12
.LBB118_20:	@ bb12
.LBB118_21:	@ bb12
	emit_nops_till_bundle_end
	bl error
.LBB118_22:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB118_23:	@ bb13
	.align	4
.LBB118_24:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_0:
 	.long	.str18847

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_1:
 	.long	.str21850

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_2:
 	.long	.str22851

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_3:
 	.long	.str23852

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_4:
 	.long	.str19848

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_5:
 	.long	.str20849

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI118_6:
 	.long	.str24853

	.size incomplete_type_error, .-incomplete_type_error


	.globl	really_start_incremental_init
	.align	4
really_start_incremental_init:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r0
	mov r0, #64
	emit_nops_till_bundle_end
	bl xmalloc
	mov r5, r0
	cmp r4, #0
	ldreq r4, .LCPI119_0
	ldreq r4, [r4]
	ldreq r4, [r4, #+4]
.LBB119_1:	@ bb
.LBB119_2:	@ bb1
	mov r0, r4
	emit_nops_till_bundle_end
	bl check_init_type_bitfields
	ldr r3, .LCPI119_1
	ldr r2, [r3]
	@comment
str r2, [r5, #+4]
	ldr r2, .LCPI119_2
	ldr r2, [r2]
	@comment
str r2, [r5, #+8]
	ldr r2, .LCPI119_3
	ldr r2, [r2]
	@comment
str r2, [r5, #+12]
	ldr r2, .LCPI119_4
	ldr r2, [r2]
	@comment
str r2, [r5, #+16]
	ldr r2, .LCPI119_5
	ldr r2, [r2]
	@comment
str r2, [r5, #+20]
	ldr r2, .LCPI119_6
	ldr r2, [r2]
	@comment
str r2, [r5, #+24]
	ldr r2, .LCPI119_7
	ldr r2, [r2]
	@comment
str r2, [r5, #+28]
	ldr r2, .LCPI119_8
	ldr r2, [r2]
	@comment
str r2, [r5, #+32]
	ldr r2, .LCPI119_9
	ldr r1, [r2]
	@comment
str r1, [r5, #+36]
	ldr r1, .LCPI119_10
	ldr r0, [r1]
	strb r0, [r5, #+56]
	ldr r0, .LCPI119_11
	ldr r12, [r0]
	strb r12, [r5, #+57]
	ldr r12, .LCPI119_12
	ldr r12, [r12]
	strb r12, [r5, #+60]
	ldr r12, .LCPI119_13
	ldr lr, [r12]
	@comment
str lr, [r5, #+44]
	ldr lr, .LCPI119_14
	ldr r6, [lr]
	@comment
str r6, [r5, #+48]
	mov r6, #0
	@comment
str r6, [r5, #+52]
	strb r6, [r5, #+58]
	ldr r7, .LCPI119_15
	ldr r7, [r7]
	strb r7, [r5, #+59]
	strb r6, [r5, #+61]
	@comment
str r6, [r5]
	ldr r7, .LCPI119_16
	@comment
str r5, [r7]
	mov r5, #1
	@comment
str r5, [r1]
	@comment
str r5, [r0]
	ldr r1, .LCPI119_17
	ldr r1, [r1]
	ldr r0, .LCPI119_18
	ldr r0, [r0]
	sub r1, r0, r1
	mov r1, r1, asr #3
	@comment
str r1, [lr]
	@comment
str r6, [r2]
	@comment
str r6, [r12]
	@comment
str r4, [r3]
	ldrb r3, [r4, #+8]
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #1
	bhi .LBB119_8	@ bb11
.LBB119_3:	@ bb2
	add r3, r4, #12
.LBB119_4:	@ bb4
	ldr r3, [r3]
	ldr r4, .LCPI119_2
	@comment
str r3, [r4]
	cmp r3, #0
	ldrneb r4, [r3, #+29]
	tstne r4, #16
	bne .LBB119_6	@ bb9
	b .LBB119_7	@ bb10
.LBB119_5:	@ bb5
.LBB119_6:	@ bb9
	ldr r4, [r3, #+32]
	cmp r4, #0
	beq .LBB119_4	@ bb4
.LBB119_7:	@ bb10
	ldr r4, .LCPI119_7
	@comment
str r3, [r4]
	ldr r3, .LCPI119_19
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl copy_node
	ldr r3, .LCPI119_8
	@comment
str r0, [r3]
	b .LBB119_13	@ bb17
.LBB119_8:	@ bb11
	and r3, r3, #255
	cmp r3, #18
	bne .LBB119_12	@ bb16
.LBB119_9:	@ bb12
	ldr r3, .LCPI119_4
	mov r2, #0
	@comment
str r2, [r3]
	ldr r3, [r4, #+12]
	cmp r3, #0
	bne .LBB119_20	@ bb13
.LBB119_10:	@ bb14
	ldr r4, .LCPI119_19
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl copy_node
.LBB119_11:	@ bb15
	ldr r4, .LCPI119_3
	@comment
str r0, [r4]
	emit_nops_till_bundle_end
	bl copy_node
	ldr r4, .LCPI119_6
	@comment
str r0, [r4]
	b .LBB119_13	@ bb17
.LBB119_12:	@ bb16
	ldr r3, .LCPI119_2
	@comment
str r4, [r3]
	ldr r3, .LCPI119_7
	@comment
str r4, [r3]
.LBB119_13:	@ bb17
	ldr r3, .LCPI119_15
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB119_17	@ bb25
.LBB119_14:	@ bb18
	emit_nops_till_bundle_end
	bl suspend_momentary
	mov r4, r0
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r3, .LCPI119_0
	ldr r3, [r3]
	ldrb r3, [r3, #+9]
	tst r3, #4
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB119_15:	@ bb23
.LBB119_16:	@ bb24
	ldr r5, .LCPI119_0
	ldr r0, [r5]
	ldr r3, .LCPI119_20
	ldr r1, [r3]
	ldr r6, .LCPI119_21
	ldr r2, [r6]
	emit_nops_till_bundle_end
	bl make_decl_rtl
	ldr r0, [r5]
	ldr r1, [r6]
	mov r2, #0
	mov r3, #1
	emit_nops_till_bundle_end
	bl assemble_variable
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r4
	emit_nops_till_bundle_end
	bl resume_momentary
	ldr r3, .LCPI119_15
	ldr r3, [r3]
.LBB119_17:	@ bb25
	cmp r3, #0
	beq .LBB119_19	@ return
.LBB119_18:	@ bb26
	emit_nops_till_bundle_end
	bl defer_addressed_constants
	ldr r3, .LCPI119_22
	mov r2, #1
	@comment
str r2, [r3]
.LBB119_19:	@ return
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB119_20:	@ bb13
	ldr r3, [r3, #+56]
	ldr r2, .LCPI119_5
	@comment
str r3, [r2]
	ldr r4, [r4, #+12]
	ldr r0, [r4, #+52]
	emit_nops_till_bundle_end
	bl copy_node
	b .LBB119_11	@ bb15
	.align	4
.LBB119_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_0:
 	.long	constructor_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_1:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_2:
 	.long	constructor_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_3:
 	.long	constructor_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_4:
 	.long	constructor_range_end

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_5:
 	.long	constructor_max_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_6:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_7:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_8:
 	.long	constructor_bit_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_9:
 	.long	constructor_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_10:
 	.long	constructor_constant

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_11:
 	.long	constructor_simple

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_12:
 	.long	constructor_erroneous

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_13:
 	.long	constructor_pending_elts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_14:
 	.long	constructor_depth

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_15:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_16:
 	.long	constructor_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_17:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_18:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_19:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_20:
 	.long	constructor_asmspec

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_21:
 	.long	constructor_top_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI119_22:
 	.long	constructor_subconstants_deferred

	.size really_start_incremental_init, .-really_start_incremental_init


	.globl	finish_init
	.align	4
finish_init:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI120_0
	ldr r3, [r3]
	ldr r2, .LCPI120_1
	ldr r4, [r2]
	cmp r3, #0
	emit_nops_till_bundle_end
	blne output_deferred_addressed_constants
.LBB120_1:	@ bb
.LBB120_2:	@ bb2.preheader
	ldr r3, .LCPI120_2
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB120_4	@ bb3
.LBB120_3:	@ bb1
	ldr r5, [r0]
	ldr r3, .LCPI120_2
	@comment
str r5, [r3]
	emit_nops_till_bundle_end
	bl free
	cmp r5, #0
	mov r0, r5
	bne .LBB120_3	@ bb1
.LBB120_4:	@ bb3
	ldr r3, [r4, #+4]
	ldr r2, .LCPI120_3
	@comment
str r3, [r2]
	ldr r3, [r4, #+8]
	ldr r2, .LCPI120_4
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+33]
	ldr r2, .LCPI120_5
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+34]
	ldr r2, .LCPI120_6
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+35]
	ldr r2, .LCPI120_7
	@comment
str r3, [r2]
	ldr r3, [r4, #+12]
	ldr r2, .LCPI120_2
	@comment
str r3, [r2]
	ldr r3, [r4, #+16]
	ldr r2, .LCPI120_8
	@comment
str r3, [r2]
	ldr r3, [r4, #+20]
	ldr r2, .LCPI120_9
	@comment
str r3, [r2]
	ldr r3, [r4, #+24]
	ldr r2, .LCPI120_10
	@comment
str r3, [r2]
	ldr r3, [r4, #+28]
	ldr r2, .LCPI120_11
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+36]
	ldr r2, .LCPI120_0
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+32]
	ldr r2, .LCPI120_12
	@comment
str r3, [r2]
	ldr r3, [r4]
	ldr r2, .LCPI120_1
	@comment
str r3, [r2]
	mov r0, r4
	emit_nops_till_bundle_end
	bl free
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB120_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_0:
 	.long	constructor_subconstants_deferred

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_1:
 	.long	initializer_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_2:
 	.long	constructor_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_3:
 	.long	constructor_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_4:
 	.long	constructor_asmspec

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_5:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_6:
 	.long	require_constant_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_7:
 	.long	require_constant_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_8:
 	.long	constructor_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_9:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_10:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_11:
 	.long	spelling_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI120_12:
 	.long	constructor_top_level

	.size finish_init, .-finish_init


	.globl	mark_addressable
	.align	4
mark_addressable:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r3, #1
	mov r2, #97
	mov r4, r0
.LBB121_1:	@ bb
	ldrb r1, [r4, #+8]
	cmp r1, #109
	bgt .LBB121_6	@ bb
.LBB121_2:	@ bb
	sub r1, r1, #29
	cmp r1, #14
	bhi .LBB121_5	@ bb50
.LBB121_3:	@ bb
	.set PCRELV10, (.LJTI121_0_0-(.LPCRELL10+8))
.LPCRELL10:
	add r0, pc, #PCRELV10
	ldr pc, [r0, +r1, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI121_0_0:
	.long	 .LBB121_4
	.long	 .LBB121_5
	.long	 .LBB121_9
	.long	 .LBB121_5
	.long	 .LBB121_9
	.long	 .LBB121_9
	.long	 .LBB121_9
	.long	 .LBB121_5
	.long	 .LBB121_8
	.long	 .LBB121_5
	.long	 .LBB121_5
	.long	 .LBB121_5
	.long	 .LBB121_5
	.long	 .LBB121_8
	.long	 .LBB121_4

.text
@ JUMP TABLE END



	.align	2
.LBB121_4:	@ bb2
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+8]!
	ldrb r1, [r4, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r4, #+1]
	orr r1, r2, r1, lsl #8
	orr r3, r1, r3, lsl #16
	orr r3, r3, #2, 22 @ 2048
	mov r3, r3, lsr #8
	strb r3, [r4, #+1]
	strb r2, [r4]
	.align	2
.LBB121_5:	@ bb50
	mov r0, #1
	b .LBB121_16	@ bb22
.LBB121_6:	@ bb
	sub r1, r1, #110
	cmp r1, #6
	bhi .LBB121_5	@ bb50
.LBB121_7:	@ bb
	tst r2, r3, lsl r1
	beq .LBB121_5	@ bb50
	.align	2
.LBB121_8:	@ bb1
	ldr r4, [r4, #+16]
	b .LBB121_1	@ bb
	.align	2
.LBB121_9:	@ bb3
	ldrb r3, [r4, #+29]
	mov r2, r4
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	and r2, r3, #1, 22 @ 1024
	tst r3, #1, 22 @ 1024
	beq .LBB121_23	@ bb47
.LBB121_10:	@ bb7
	ldrb r1, [r4, #+9]
	mov r0, r4
	ldrb r12, [r0, #+8]!
	orr r1, r12, r1, lsl #8
	ldrb r12, [r0, #+3]
	ldrb r0, [r0, #+2]
	orr r0, r0, r12, lsl #8
	orr r0, r1, r0, lsl #16
	tst r0, #2, 22 @ 2048
	bne .LBB121_18	@ bb24
.LBB121_11:	@ bb12
	tst r3, #2, 24 @ 512
	beq .LBB121_18	@ bb24
.LBB121_12:	@ bb17
	ldr r2, [r4, #+32]
	ldr r1, [r2, #+16]
	tst r0, #2, 14 @ 524288
	beq .LBB121_17	@ bb23
.LBB121_13:	@ bb22
	ldr r0, .LCPI121_0
.LBB121_14:	@ bb22
	emit_nops_till_bundle_end
	bl error
.LBB121_15:	@ bb22
	mov r0, #0
.LBB121_16:	@ bb22
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB121_17:	@ bb23
	ldr r0, .LCPI121_1
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB121_23	@ bb47
.LBB121_18:	@ bb24
	cmp r2, #0
	beq .LBB121_23	@ bb47
.LBB121_19:	@ bb29
	ldrb r3, [r4, #+9]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 22 @ 2048
	bne .LBB121_23	@ bb47
.LBB121_20:	@ bb34
	tst r3, #2, 14 @ 524288
	bne .LBB121_24	@ bb39
.LBB121_21:	@ bb40
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+11]
	tst r3, #1
	bne .LBB121_25	@ bb45
.LBB121_22:	@ bb46
	ldr r3, [r4, #+32]
	ldr r1, [r3, #+16]
	ldr r0, .LCPI121_4
	emit_nops_till_bundle_end
	bl pedwarn
.LBB121_23:	@ bb47
	mov r0, r4
	emit_nops_till_bundle_end
	bl put_var_into_stack
	b .LBB121_4	@ bb2
.LBB121_24:	@ bb39
	ldr r4, [r4, #+32]
	ldr r1, [r4, #+16]
	ldr r0, .LCPI121_2
	b .LBB121_14	@ bb22
.LBB121_25:	@ bb45
	ldr r0, .LCPI121_3
	emit_nops_till_bundle_end
	bl error
	b .LBB121_15	@ bb22
	.align	4
.LBB121_26:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI121_0:
 	.long	.str25854

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI121_1:
 	.long	.str26855

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI121_2:
 	.long	.str27856

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI121_3:
 	.long	.str28857

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI121_4:
 	.long	.str29858

	.size mark_addressable, .-mark_addressable


	.globl	readonly_warning
	.align	4
readonly_warning:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #80
	mov r4, r1
	mov r5, r0
	mov r0, sp
	emit_nops_till_bundle_end
	bl strcpy
	ldrb r3, [r5, #+8]
	cmp r3, #33
	bne .LBB122_3	@ bb8
.LBB122_1:	@ bb
	ldrb r3, [r5, #+31]
	tst r3, #16
	beq .LBB122_3	@ bb8
.LBB122_2:	@ bb5
	mov r6, sp
	ldr r1, .LCPI122_0
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcat
	ldr r3, [r5, #+32]
	ldr r1, [r3, #+16]
	mov r0, r6
	emit_nops_till_bundle_end
	bl pedwarn
.LBB122_3:	@ bb8
	ldrb r3, [r5, #+8]
	cmp r3, #33
	beq .LBB122_8	@ bb19
.LBB122_4:	@ bb8
	and r3, r3, #255
	cmp r3, #37
	bne .LBB122_12	@ bb22
.LBB122_5:	@ bb9
	ldr r0, [r5, #+16]
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+9]
	tst r3, #32
	beq .LBB122_7	@ bb15
.LBB122_6:	@ bb14
	mov r1, r4
	emit_nops_till_bundle_end
	bl readonly_warning
	b .LBB122_11	@ bb19
.LBB122_7:	@ bb15
	mov r4, sp
	ldr r1, .LCPI122_1
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcat
	ldr r5, [r5, #+20]
	ldr r5, [r5, #+32]
	ldr r1, [r5, #+16]
	b .LBB122_9	@ bb19
.LBB122_8:	@ bb19
	mov r4, sp
	ldr r1, .LCPI122_2
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcat
	ldr r3, [r5, #+32]
	ldr r1, [r3, #+16]
.LBB122_9:	@ bb19
	mov r0, r4
.LBB122_10:	@ bb19
	emit_nops_till_bundle_end
	bl pedwarn
.LBB122_11:	@ bb19
	sfi_add sp, sp, #80
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB122_12:	@ bb22
	ldr r0, .LCPI122_3
	mov r1, sp
	b .LBB122_10	@ bb19
	.align	4
.LBB122_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI122_0:
 	.long	.str30859

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI122_1:
 	.long	.str31860

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI122_2:
 	.long	.str32861

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI122_3:
 	.long	.str33862

	.size readonly_warning, .-readonly_warning


	.globl	comptypes
	.align	4
comptypes:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	mov r4, #1
	mov r5, r0
	mov r6, r1
.LBB123_1:	@ tailrecurse
	cmp r5, r6
	beq .LBB123_69	@ tailrecurse.bb75_crit_edge
.LBB123_2:	@ bb
	ldrb r3, [r5, #+8]
	cmp r3, #0
	ldrneb r2, [r6, #+8]
	cmpne r2, #0
	bne .LBB123_4	@ bb3
	b .LBB123_69	@ tailrecurse.bb75_crit_edge
.LBB123_3:	@ bb1
.LBB123_4:	@ bb3
	and r3, r3, #255
	cmp r3, #10
	bne .LBB123_6	@ bb10
.LBB123_5:	@ bb4
	ldrb r0, [r5, #+28]
	ldrb r3, [r5, #+9]
	ldrb r2, [r5, #+8]!
	and r1, r4, r3, lsr #6
	emit_nops_till_bundle_end
	bl type_for_size
	mov r5, r0
.LBB123_6:	@ bb10
	ldrb r3, [r6, #+8]
	cmp r3, #10
	bne .LBB123_8	@ bb18
.LBB123_7:	@ bb11
	ldrb r0, [r6, #+28]
	ldrb r3, [r6, #+9]
	ldrb r2, [r6, #+8]!
	and r1, r4, r3, lsr #6
	emit_nops_till_bundle_end
	bl type_for_size
	mov r6, r0
.LBB123_8:	@ bb18
	cmp r5, r6
	beq .LBB123_69	@ tailrecurse.bb75_crit_edge
.LBB123_9:	@ bb20
	ldrb r3, [r6, #+8]
	ldrb r2, [r5, #+8]
	cmp r2, r3
	bne .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_10:	@ bb22
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	ldrb r2, [r6, #+9]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	orr r2, r0, r2, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r1, [r1, #+2]
	orr r1, r1, r0, lsl #8
	orr r2, r2, r1, lsl #16
	eor r3, r2, r3
	tst r3, #2, 20 @ 8192
	tsteq r3, #1, 20 @ 4096
	beq .LBB123_12	@ bb42
	b .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_11:	@ bb32
.LBB123_12:	@ bb42
	ldr r3, [r6, #+64]
	ldr r2, [r5, #+64]
	cmp r2, r3
	beq .LBB123_69	@ tailrecurse.bb75_crit_edge
.LBB123_13:	@ bb44
	ldrb r3, [r5, #+8]
	cmp r3, #17
	ble .LBB123_67	@ bb44
.LBB123_14:	@ bb44
	cmp r3, #18
	beq .LBB123_51	@ bb50
.LBB123_15:	@ bb44
	cmp r3, #20
	beq .LBB123_64	@ bb66
.LBB123_16:	@ bb44
	cmp r3, #23
	bne .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_17:	@ bb49
	ldr r1, [r6, #+4]
	ldr r0, [r5, #+4]
	cmp r0, r1
	beq .LBB123_70	@ bb49.bb2.i_crit_edge
.LBB123_18:	@ bb.i
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_19:	@ bb2.i
	mov r4, r0
	ldr r0, [r5, #+12]
	ldr r3, [r6, #+12]
	cmp r0, #0
	bne .LBB123_34	@ bb9.i
.LBB123_20:	@ bb3.i
	ldr r6, .LCPI123_0
	ldr r6, [r6]
	ldr r2, .LCPI123_1
	ldr r2, [r2]
	ldr r1, .LCPI123_2
	ldr r1, [r1]
	ldr r0, .LCPI123_3
	ldr r0, [r0]
	ldr r12, .LCPI123_4
	ldr r12, [r12]
	ldr lr, .LCPI123_5
	ldr lr, [lr]
	ldr r7, .LCPI123_6
	ldr r7, [r7]
	mov r8, r3
	b .LBB123_31	@ bb15.i37.i
.LBB123_21:	@ bb.i23.i
	ldr r8, [r9]
	ldr r9, [r9, #+16]
	cmp r8, #0
	bne .LBB123_23	@ bb1.i26.i
.LBB123_22:	@ bb1.i26.i
	cmp r9, r7
	bne .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_23:	@ bb1.i26.i
	cmp r9, #0
	ldrne r10, [r9, #+64]
	cmpne r10, lr
	bne .LBB123_25	@ bb7.i30.i
	b .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_24:	@ bb5.i29.i
.LBB123_25:	@ bb7.i30.i
	ldrb r9, [r9, #+8]
	cmp r9, #7
	bne .LBB123_31	@ bb15.i37.i
.LBB123_26:	@ bb8.i35.i
	cmp r10, r2
	beq .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_27:	@ bb8.i35.i
	cmp r10, r6
	cmpne r10, r1
	bne .LBB123_29	@ bb8.i35.i
	b .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_28:	@ bb8.i35.i
.LBB123_29:	@ bb8.i35.i
	cmp r10, r0
	cmpne r10, r12
	bne .LBB123_31	@ bb15.i37.i
	b .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_30:	@ bb8.i35.i
.LBB123_31:	@ bb15.i37.i
	mov r9, r8
	cmp r9, #0
	bne .LBB123_21	@ bb.i23.i
.LBB123_32:	@ bb5.i
	ldr r1, [r5, #+72]
	cmp r1, #0
	beq .LBB123_72	@ function_types_compatible_p.exit
.LBB123_33:	@ bb6.i
	mov r0, r3
	b .LBB123_48	@ bb13.i
.LBB123_34:	@ bb9.i
	cmp r3, #0
	bne .LBB123_50	@ bb16.i
.LBB123_35:	@ bb10.i
	ldr r3, .LCPI123_0
	ldr r3, [r3]
	ldr r5, .LCPI123_1
	ldr r5, [r5]
	ldr r2, .LCPI123_2
	ldr r2, [r2]
	ldr r1, .LCPI123_3
	ldr r1, [r1]
	ldr r12, .LCPI123_4
	ldr r12, [r12]
	ldr lr, .LCPI123_5
	ldr lr, [lr]
	ldr r7, .LCPI123_6
	ldr r7, [r7]
	mov r8, r0
	b .LBB123_46	@ bb15.i.i
.LBB123_36:	@ bb.i.i
	ldr r8, [r9]
	ldr r9, [r9, #+16]
	cmp r8, #0
	bne .LBB123_38	@ bb1.i.i
.LBB123_37:	@ bb1.i.i
	cmp r9, r7
	bne .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_38:	@ bb1.i.i
	cmp r9, #0
	ldrne r10, [r9, #+64]
	cmpne r10, lr
	bne .LBB123_40	@ bb7.i.i
	b .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_39:	@ bb5.i.i
.LBB123_40:	@ bb7.i.i
	ldrb r9, [r9, #+8]
	cmp r9, #7
	bne .LBB123_46	@ bb15.i.i
.LBB123_41:	@ bb8.i.i
	cmp r10, r5
	beq .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_42:	@ bb8.i.i
	cmp r10, r3
	cmpne r10, r2
	bne .LBB123_44	@ bb8.i.i
	b .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_43:	@ bb8.i.i
.LBB123_44:	@ bb8.i.i
	cmp r10, r1
	cmpne r10, r12
	bne .LBB123_46	@ bb15.i.i
	b .LBB123_71	@ bb.i.function_types_compatible_p.exit_crit_edge
.LBB123_45:	@ bb8.i.i
.LBB123_46:	@ bb15.i.i
	mov r9, r8
	cmp r9, #0
	bne .LBB123_36	@ bb.i.i
.LBB123_47:	@ bb12.i
	ldr r1, [r6, #+72]
	cmp r1, #0
	beq .LBB123_72	@ function_types_compatible_p.exit
.LBB123_48:	@ bb13.i
	emit_nops_till_bundle_end
	bl type_lists_compatible_p
	cmp r0, #1
	mov r0, #2
.LBB123_49:	@ bb13.i
	moveq r0, r4
	b .LBB123_65	@ bb75
.LBB123_50:	@ bb16.i
	mov r1, r3
	emit_nops_till_bundle_end
	bl type_lists_compatible_p
	cmp r0, #1
	b .LBB123_49	@ bb13.i
.LBB123_51:	@ bb50
	ldr r1, [r6, #+4]
	ldr r0, [r5, #+4]
	ldr r6, [r6, #+12]
	ldr r5, [r5, #+12]
	cmp r0, r1
	beq .LBB123_73	@ bb50.bb53_crit_edge
.LBB123_52:	@ bb51
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_53:	@ bb53
	cmp r5, r6
	beq .LBB123_65	@ bb75
.LBB123_54:	@ bb53
	cmp r5, #0
	cmpne r6, #0
	bne .LBB123_56	@ bb57
	b .LBB123_65	@ bb75
.LBB123_55:	@ bb53
.LBB123_56:	@ bb57
	ldr r3, [r5, #+52]
	ldrb r2, [r3, #+8]
	cmp r2, #25
	ldreq r2, [r6, #+52]
	ldreqb r1, [r2, #+8]
	cmpeq r1, #25
	beq .LBB123_58	@ bb59
	b .LBB123_65	@ bb75
.LBB123_57:	@ bb58
.LBB123_58:	@ bb59
	ldr r5, [r5, #+56]
	ldrb r1, [r5, #+8]
	cmp r1, #25
	ldreq r6, [r6, #+56]
	ldreqb r1, [r6, #+8]
	cmpeq r1, #25
	beq .LBB123_60	@ bb61
	b .LBB123_65	@ bb75
.LBB123_59:	@ bb60
.LBB123_60:	@ bb61
	ldr r1, [r2, #+12]
	ldr r12, [r3, #+12]
	cmp r12, r1
	bne .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_61:	@ bb62
	ldr r2, [r2, #+16]
	ldr r3, [r3, #+16]
	cmp r3, r2
	ldreq r3, [r6, #+12]
	ldreq r2, [r5, #+12]
	cmpeq r2, r3
	beq .LBB123_63	@ bb64
	b .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_62:	@ bb63
.LBB123_63:	@ bb64
	ldr r6, [r6, #+16]
	ldr r5, [r5, #+16]
	mov r3, #0
	cmp r5, r6
	moveq r3, r0
	mov r0, r3
	b .LBB123_65	@ bb75
.LBB123_64:	@ bb66
	mov r0, r5
	mov r1, r6
	mov r2, #0
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	mov r3, #1
	cmp r0, #1
	mov r0, #0
	moveq r0, r3
.LBB123_65:	@ bb75
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB123_66:	@ bb20.bb75_crit_edge
	mov r0, #0
	b .LBB123_65	@ bb75
.LBB123_67:	@ bb44
	cmp r3, #13
	bne .LBB123_66	@ bb20.bb75_crit_edge
.LBB123_68:	@ bb45
	ldr r6, [r6, #+4]
	ldr r5, [r5, #+4]
	cmp r5, r6
	bne .LBB123_1	@ tailrecurse
.LBB123_69:	@ tailrecurse.bb75_crit_edge
	mov r0, #1
	b .LBB123_65	@ bb75
.LBB123_70:	@ bb49.bb2.i_crit_edge
	mov r0, #1
	b .LBB123_19	@ bb2.i
.LBB123_71:	@ bb.i.function_types_compatible_p.exit_crit_edge
	mov r4, #0
.LBB123_72:	@ function_types_compatible_p.exit
	mov r0, r4
	b .LBB123_65	@ bb75
.LBB123_73:	@ bb50.bb53_crit_edge
	mov r0, #1
	b .LBB123_53	@ bb53
	.align	4
.LBB123_74:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_0:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_1:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_2:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_3:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_4:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_5:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI123_6:
 	.long	void_type_node

	.size comptypes, .-comptypes


	.align	4
type_lists_compatible_p:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, #0
	mov r5, #1
	mov r6, r1
	mov r7, r0
.LBB124_1:	@ bb
	orr r3, r7, r6
	cmp r3, #0
	beq .LBB124_36	@ bb47
.LBB124_2:	@ bb3
	cmp r7, #0
	cmpne r6, #0
	bne .LBB124_4	@ bb7
	b .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_3:	@ bb3
.LBB124_4:	@ bb7
	ldr r0, [r7, #+16]
	ldr r1, [r6, #+16]
	cmp r0, #0
	bne .LBB124_14	@ bb10
.LBB124_5:	@ bb8
	ldr r3, .LCPI124_0
	ldr r3, [r3]
	ldr r2, [r1, #+64]
	cmp r2, r3
	beq .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_6:	@ bb1.i
	ldrb r3, [r1, #+8]
.LBB124_7:	@ bb1.i
	cmp r3, #7
	bne .LBB124_13	@ bb44
.LBB124_8:	@ bb2.i
	ldr r3, .LCPI124_1
	ldr r3, [r3]
	cmp r2, r3
	beq .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_9:	@ bb3.i
	ldr r3, .LCPI124_2
	ldr r3, [r3]
	cmp r2, r3
	ldrne r3, .LCPI124_3
	ldrne r3, [r3]
	cmpne r2, r3
	bne .LBB124_11	@ bb5.i
	b .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_10:	@ bb4.i
.LBB124_11:	@ bb5.i
	ldr r3, .LCPI124_4
	ldr r3, [r3]
	cmp r2, r3
	ldrne r3, .LCPI124_5
	ldrne r3, [r3]
	cmpne r2, r3
	bne .LBB124_13	@ bb44
	b .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_12:	@ self_promoting_type_p.exit
.LBB124_13:	@ bb44
	cmp r4, r5
	movgt r5, r4
	ldr r6, [r6]
	ldr r7, [r7]
	b .LBB124_1	@ bb
.LBB124_14:	@ bb10
	cmp r1, #0
	bne .LBB124_17	@ bb13
.LBB124_15:	@ bb11
	ldr r3, .LCPI124_0
	ldr r3, [r3]
	ldr r2, [r0, #+64]
	cmp r2, r3
	beq .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_16:	@ bb1.i49
	ldrb r3, [r0, #+8]
	b .LBB124_7	@ bb1.i
.LBB124_17:	@ bb13
	emit_nops_till_bundle_end
	bl comptypes
	mov r4, r0
	cmp r0, #0
	bne .LBB124_13	@ bb44
.LBB124_18:	@ bb14
	ldr r3, [r7, #+16]
	ldrb r2, [r3, #+8]
	cmp r2, #21
	bne .LBB124_26	@ bb28
.LBB124_19:	@ bb15
	ldr r2, [r3, #+48]
	cmp r2, #0
	beq .LBB124_21	@ bb20
.LBB124_20:	@ bb16
	ldrb r2, [r3, #+30]
	tst r2, #8
	beq .LBB124_26	@ bb28
.LBB124_21:	@ bb20
	ldr r0, [r3, #+16]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	bne .LBB124_26	@ bb28
.LBB124_22:	@ bb21
	ldr r3, [r6, #+16]
	ldr r1, [r3, #+16]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	beq .LBB124_26	@ bb28
.LBB124_23:	@ bb22
	ldr r3, [r7, #+16]
	add r8, r3, #12
	b .LBB124_25	@ bb25
.LBB124_24:	@ bb23
	ldr r0, [r8, #+4]
	ldr r1, [r6, #+16]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB124_34	@ bb26
.LBB124_25:	@ bb25
	ldr r8, [r8]
	cmp r8, #0
	bne .LBB124_24	@ bb23
	b .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_26:	@ bb28
	ldr r3, [r6, #+16]
	ldrb r2, [r3, #+8]
	cmp r2, #21
	bne .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_27:	@ bb29
	ldr r2, [r3, #+48]
	cmp r2, #0
	beq .LBB124_29	@ bb35
.LBB124_28:	@ bb30
	ldrb r2, [r3, #+30]
	tst r2, #8
	beq .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_29:	@ bb35
	ldr r0, [r3, #+16]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	bne .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_30:	@ bb36
	ldr r3, [r7, #+16]
	ldr r1, [r3, #+16]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	beq .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_31:	@ bb37
	ldr r3, [r6, #+16]
	add r8, r3, #12
.LBB124_32:	@ bb40
	ldr r8, [r8]
	cmp r8, #0
	beq .LBB124_35	@ bb3.bb47_crit_edge
.LBB124_33:	@ bb38
	ldr r0, [r8, #+4]
	ldr r1, [r7, #+16]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB124_32	@ bb40
.LBB124_34:	@ bb26
	cmp r8, #0
	bne .LBB124_13	@ bb44
.LBB124_35:	@ bb3.bb47_crit_edge
	mov r5, #0
.LBB124_36:	@ bb47
	mov r0, r5
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
	.align	4
.LBB124_37:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI124_0:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI124_1:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI124_2:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI124_3:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI124_4:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI124_5:
 	.long	short_unsigned_type_node

	.size type_lists_compatible_p, .-type_lists_compatible_p


	.globl	c_size_in_bytes
	.align	4
c_size_in_bytes:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldrb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #0
	andne r2, r3, #255
	cmpne r2, #6
	bne .LBB125_2	@ entry
	b .LBB125_3	@ bb
.LBB125_1:	@ entry
.LBB125_2:	@ entry
	and r3, r3, #255
	cmp r3, #23
	bne .LBB125_5	@ bb5
.LBB125_3:	@ bb
	mov r0, #1
	emit_nops_till_bundle_end
	bl size_int
.LBB125_4:	@ bb
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB125_5:	@ bb5
	ldr r3, [r4, #+16]
	cmp r3, #0
	bne .LBB125_7	@ bb7
.LBB125_6:	@ bb6
	ldr r0, .LCPI125_0
	emit_nops_till_bundle_end
	bl error
	b .LBB125_3	@ bb
.LBB125_7:	@ bb7
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r4, #+16]
	mov r0, #60
	emit_nops_till_bundle_end
	bl size_binop
	mov r4, r0
	mov r1, #0
	emit_nops_till_bundle_end
	bl force_fit_type
	mov r0, r4
	b .LBB125_4	@ bb
	.align	4
.LBB125_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI125_0:
 	.long	.str35864

	.size c_size_in_bytes, .-c_size_in_bytes


	.globl	c_sizeof_nowarn
	.align	4
c_sizeof_nowarn:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldrb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #23
	bhi .LBB126_5	@ bb4
.LBB126_1:	@ entry
	mov r2, #1
	mov r1, #65
	orr r1, r1, #2, 10 @ 8388608
	tst r1, r2, lsl r3
	beq .LBB126_5	@ bb4
.LBB126_2:	@ bb3
	mov r0, #1
.LBB126_3:	@ bb3
	emit_nops_till_bundle_end
	bl size_int
.LBB126_4:	@ bb3
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB126_5:	@ bb4
	ldr r3, [r4, #+16]
	cmp r3, #0
	bne .LBB126_7	@ bb6
.LBB126_6:	@ bb5
	mov r0, #0
	b .LBB126_3	@ bb3
.LBB126_7:	@ bb6
	ldr r3, .LCPI126_0
	ldr r3, [r3]
	ldrb r0, [r3, #+28]
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r4, #+16]
	mov r0, #60
	emit_nops_till_bundle_end
	bl size_binop
	mov r4, r0
	mov r1, #0
	emit_nops_till_bundle_end
	bl force_fit_type
	mov r0, r4
	b .LBB126_4	@ bb3
	.align	4
.LBB126_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI126_0:
 	.long	char_type_node

	.size c_sizeof_nowarn, .-c_sizeof_nowarn


	.globl	c_sizeof
	.align	4
c_sizeof:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldrb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #0
	beq .LBB127_6	@ bb3
.LBB127_1:	@ entry
	and r2, r3, #255
	cmp r2, #6
	beq .LBB127_8	@ bb5
.LBB127_2:	@ entry
	and r3, r3, #255
	cmp r3, #23
	bne .LBB127_11	@ bb11
.LBB127_3:	@ bb
	ldr r4, .LCPI127_0
	ldr r4, [r4]
	cmp r4, #0
	ldreq r4, .LCPI127_1
	ldreq r4, [r4]
	cmpeq r4, #0
	beq .LBB127_6	@ bb3
.LBB127_4:	@ bb1
.LBB127_5:	@ bb2
	ldr r0, .LCPI127_2
	emit_nops_till_bundle_end
	bl pedwarn
.LBB127_6:	@ bb3
	mov r0, #1
.LBB127_7:	@ bb3
	emit_nops_till_bundle_end
	bl size_int
	b .LBB127_16	@ bb22
.LBB127_8:	@ bb5
	ldr r4, .LCPI127_0
	ldr r4, [r4]
	cmp r4, #0
	ldreq r4, .LCPI127_1
	ldreq r4, [r4]
	cmpeq r4, #0
	beq .LBB127_6	@ bb3
.LBB127_9:	@ bb6
.LBB127_10:	@ bb7
	ldr r0, .LCPI127_3
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB127_6	@ bb3
.LBB127_11:	@ bb11
	ldr r3, [r4, #+16]
	cmp r3, #0
	beq .LBB127_17	@ bb12
.LBB127_12:	@ bb13
	ldr r3, .LCPI127_5
	ldr r3, [r3]
	ldrb r0, [r3, #+28]
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r4, #+16]
	mov r0, #60
	emit_nops_till_bundle_end
	bl size_binop
	ldrb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #25
	bne .LBB127_15	@ bb22
.LBB127_13:	@ bb14
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl force_fit_type
	cmp r0, #0
	beq .LBB127_15	@ bb22
.LBB127_14:	@ bb15
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+11]
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #3, 14 @ 786432
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
.LBB127_15:	@ bb22
	mov r0, r4
.LBB127_16:	@ bb22
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB127_17:	@ bb12
	ldr r0, .LCPI127_4
	emit_nops_till_bundle_end
	bl error
	mov r0, #0
	b .LBB127_7	@ bb3
	.align	4
.LBB127_18:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI127_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI127_1:
 	.long	warn_pointer_arith

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI127_2:
 	.long	.str36865

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI127_3:
 	.long	.str37866

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI127_4:
 	.long	.str38867

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI127_5:
 	.long	char_type_node

	.size c_sizeof, .-c_sizeof


	.globl	common_type
	.align	4
common_type:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	mov r4, r1
	mov r5, r0
	cmp r0, r1
	beq .LBB128_94	@ bb150
.LBB128_1:	@ bb2
	ldr r3, .LCPI128_0
	ldr r3, [r3]
	cmp r3, r5
	beq .LBB128_93	@ bb2.bb150_crit_edge
.LBB128_2:	@ bb4
	cmp r3, r4
	beq .LBB128_94	@ bb150
.LBB128_3:	@ bb6
	ldr r6, [r5, #+20]
	ldr r7, [r4, #+20]
	cmp r6, #0
	beq .LBB128_13	@ bb18
.LBB128_4:	@ bb8
	cmp r7, #0
	beq .LBB128_12	@ bb16.bb18_crit_edge
.LBB128_5:	@ bb9
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	bne .LBB128_12	@ bb16.bb18_crit_edge
.LBB128_6:	@ bb10
	mov r0, r7
	mov r1, r6
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	bne .LBB128_13	@ bb18
.LBB128_7:	@ bb12
	mov r0, r6
	emit_nops_till_bundle_end
	bl list_length
	mov r8, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl list_length
	cmp r8, r0
	mov r9, r7
	movlt r9, r6
	cmp r8, r0
	movlt r6, r7
.LBB128_8:	@ bb12
	cmp r9, #0
	beq .LBB128_12	@ bb16.bb18_crit_edge
.LBB128_9:	@ bb14
	ldr r7, [r9, #+12]
	ldr r0, [r7, #+16]
	mov r1, r6
	emit_nops_till_bundle_end
	bl lookup_attribute
	cmp r0, #0
	bne .LBB128_11	@ bb16
.LBB128_10:	@ bb15
	mov r0, r9
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r6, [r0]
	mov r6, r0
.LBB128_11:	@ bb16
	ldr r9, [r9]
	b .LBB128_8	@ bb12
.LBB128_12:	@ bb16.bb18_crit_edge
	mov r7, r6
.LBB128_13:	@ bb18
	ldrb r3, [r5, #+8]
	cmp r3, #10
	bne .LBB128_15	@ bb20
.LBB128_14:	@ bb19
	ldrb r0, [r5, #+28]
	mov r1, #1
	emit_nops_till_bundle_end
	bl type_for_size
	mov r5, r0
.LBB128_15:	@ bb20
	ldrb r3, [r4, #+8]
	cmp r3, #10
	bne .LBB128_17	@ bb22
.LBB128_16:	@ bb21
	ldrb r0, [r4, #+28]
	mov r1, #1
	emit_nops_till_bundle_end
	bl type_for_size
	mov r4, r0
.LBB128_17:	@ bb22
	ldrb r6, [r4, #+8]
	ldrb r8, [r5, #+8]
	cmp r6, #9
	andne r3, r8, #255
	cmpne r3, #9
	bne .LBB128_29	@ bb38
.LBB128_18:	@ bb22
.LBB128_19:	@ bb25
	and r3, r8, #255
	cmp r3, #9
	ldreq r0, [r5, #+4]
	movne r0, r5
	b .LBB128_21	@ bb28
.LBB128_20:	@ bb26
.LBB128_21:	@ bb28
	and r3, r6, #255
	cmp r3, #9
	ldreq r1, [r4, #+4]
	movne r1, r4
	b .LBB128_23	@ bb31
.LBB128_22:	@ bb29
.LBB128_23:	@ bb31
	emit_nops_till_bundle_end
	bl common_type
	and r8, r8, #255
	cmp r8, #9
	ldreq r8, [r5, #+4]
	cmpeq r8, r0
	beq .LBB128_62	@ bb33
.LBB128_24:	@ bb32
.LBB128_25:	@ bb34
	and r5, r6, #255
	cmp r5, #9
	ldreq r5, [r4, #+4]
	cmpeq r5, r0
	beq .LBB128_27	@ bb36
	b .LBB128_28	@ bb37
.LBB128_26:	@ bb35
.LBB128_27:	@ bb36
	mov r0, r4
	b .LBB128_46	@ bb55
.LBB128_28:	@ bb37
	emit_nops_till_bundle_end
	bl build_complex_type
	b .LBB128_46	@ bb55
.LBB128_29:	@ bb38
	and r3, r8, #255
	cmp r3, #22
	bgt .LBB128_38	@ bb38
.LBB128_30:	@ bb38
	sub r2, r3, #7
	cmp r2, #2
	blo .LBB128_47	@ bb39
.LBB128_31:	@ bb38
	cmp r3, #13
	beq .LBB128_63	@ bb77
.LBB128_32:	@ bb38
	cmp r3, #18
	bne .LBB128_62	@ bb33
.LBB128_33:	@ bb102
	ldr r0, [r5, #+4]
	ldr r1, [r4, #+4]
	emit_nops_till_bundle_end
	bl common_type
	ldr r3, [r5, #+4]
	cmp r3, r0
	bne .LBB128_35	@ bb105
.LBB128_34:	@ bb103
	ldr r3, [r5, #+12]
	cmp r3, #0
	bne .LBB128_62	@ bb33
.LBB128_35:	@ bb105
	ldr r3, [r4, #+4]
	cmp r3, r0
	bne .LBB128_37	@ bb108
.LBB128_36:	@ bb106
	ldr r3, [r4, #+12]
	cmp r3, #0
	bne .LBB128_27	@ bb36
.LBB128_37:	@ bb108
	ldr r3, [r5, #+12]
	cmp r3, #0
	moveq r5, r4
	ldr r1, [r5, #+12]
	emit_nops_till_bundle_end
	bl build_array_type
	b .LBB128_46	@ bb55
.LBB128_38:	@ bb38
	cmp r3, #23
	bne .LBB128_62	@ bb33
.LBB128_39:	@ bb112
	ldr r0, [r5, #+4]
	ldr r1, [r4, #+4]
	emit_nops_till_bundle_end
	bl common_type
	ldr r3, [r5, #+4]
	ldr r6, [r4, #+12]
	ldr r8, [r5, #+12]
	mov r9, r0
	cmp r3, r0
	cmpeq r6, #0
	beq .LBB128_62	@ bb33
.LBB128_40:	@ bb112
.LBB128_41:	@ bb115
	ldr r5, [r4, #+4]
	cmp r5, r9
	cmpeq r8, #0
	beq .LBB128_27	@ bb36
.LBB128_42:	@ bb115
.LBB128_43:	@ bb118
	cmp r8, #0
	bne .LBB128_70	@ bb120
.LBB128_44:	@ bb119
	mov r0, r9
	mov r1, r6
.LBB128_45:	@ bb119
	emit_nops_till_bundle_end
	bl build_function_type
.LBB128_46:	@ bb55
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_type_attribute_variant
	b .LBB128_95	@ bb150
.LBB128_47:	@ bb39
	and r3, r6, #255
	cmp r3, #8
	beq .LBB128_49	@ bb44
.LBB128_48:	@ bb39
	and r3, r8, #255
	cmp r3, #8
	beq .LBB128_62	@ bb33
.LBB128_49:	@ bb44
	and r3, r6, #255
	cmp r3, #8
	bne .LBB128_51	@ bb49
.LBB128_50:	@ bb44
	and r3, r8, #255
	cmp r3, #8
	bne .LBB128_27	@ bb36
.LBB128_51:	@ bb49
	ldrb r3, [r4, #+28]
	ldrb r2, [r5, #+28]
	cmp r2, r3
	bhi .LBB128_62	@ bb33
.LBB128_52:	@ bb51
	and r2, r2, #255
	and r3, r3, #255
	cmp r3, r2
	bhi .LBB128_27	@ bb36
.LBB128_53:	@ bb53
	ldr r3, .LCPI128_1
	ldr r0, [r3]
	ldr r3, [r5, #+64]
	cmp r3, r0
	ldrne r2, [r4, #+64]
	cmpne r2, r0
	bne .LBB128_55	@ bb56
	b .LBB128_46	@ bb55
.LBB128_54:	@ bb54
.LBB128_55:	@ bb56
	ldrb r1, [r5, #+9]
	mov r0, #1, 18 @ 16384
	and r1, r0, r1, lsl #8
	ldr r0, .LCPI128_2
	ldr r0, [r0]
	cmp r3, r0
	cmpne r2, r0
	bne .LBB128_61	@ bb70
.LBB128_56:	@ bb56
.LBB128_57:	@ bb58
	cmp r1, #0
	ldreqb r1, [r4, #+9]
	tsteq r1, #64
	beq .LBB128_59	@ bb68
	b .LBB128_98	@ bb58.bb69_crit_edge
.LBB128_58:	@ bb62
.LBB128_59:	@ bb68
	ldr r1, .LCPI128_2
.LBB128_60:	@ bb69
	ldr r0, [r1]
	b .LBB128_46	@ bb55
.LBB128_61:	@ bb70
	cmp r1, #0
	beq .LBB128_27	@ bb36
.LBB128_62:	@ bb33
	mov r0, r5
	b .LBB128_46	@ bb55
.LBB128_63:	@ bb77
	ldr r3, [r5, #+4]
	ldr r0, [r3, #+64]
	ldr r3, [r4, #+4]
	ldr r1, [r3, #+64]
	emit_nops_till_bundle_end
	bl common_type
	ldr r5, [r5, #+4]
	ldrb r3, [r5, #+9]
	ldrb r2, [r5, #+8]!
	orr r3, r2, r3, lsl #8
	ldrb r2, [r5, #+3]
	ldrb r5, [r5, #+2]
	orr r5, r5, r2, lsl #8
	orr r5, r3, r5, lsl #16
	tst r5, #2, 20 @ 8192
	ldreq r3, [r4, #+4]
	ldreqb r3, [r3, #+9]
	tsteq r3, #32
	beq .LBB128_65	@ bb88
	b .LBB128_99	@ bb77.bb89_crit_edge
.LBB128_64:	@ bb82
.LBB128_65:	@ bb88
	mov r1, #0
.LBB128_66:	@ bb89
	tst r5, #1, 20 @ 4096
	ldreq r4, [r4, #+4]
	ldreqb r4, [r4, #+9]
	tsteq r4, #16
	beq .LBB128_68	@ bb100
	b .LBB128_100	@ bb89.bb101_crit_edge
.LBB128_67:	@ bb94
.LBB128_68:	@ bb100
	mov r2, #0
.LBB128_69:	@ bb101
	emit_nops_till_bundle_end
	bl c_build_type_variant
	emit_nops_till_bundle_end
	bl build_pointer_type
	b .LBB128_46	@ bb55
.LBB128_70:	@ bb120
	cmp r6, #0
	beq .LBB128_101	@ bb121
.LBB128_71:	@ bb122
	mov r0, r8
	emit_nops_till_bundle_end
	bl list_length
	mov r5, r0
	cmp r0, #0
	ble .LBB128_102	@ bb122.bb147.loopexit_crit_edge
.LBB128_72:	@ bb122.bb123_crit_edge
	mov r2, #0
	mov r4, #0
.LBB128_73:	@ bb123
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl tree_cons
	add r4, r4, #1
	cmp r4, r5
	mov r2, r0
	bne .LBB128_73	@ bb123
	b .LBB128_103	@ bb147.loopexit
.LBB128_74:	@ bb126
	ldr r3, [r8, #+16]
	ldr r2, [r6, #+16]
	cmp r3, #0
	beq .LBB128_105	@ bb127
.LBB128_75:	@ bb128
	cmp r2, #0
	beq .LBB128_106	@ bb129
.LBB128_76:	@ bb130
	ldrb r1, [r3, #+8]
	cmp r1, #21
	bne .LBB128_84	@ bb138
.LBB128_77:	@ bb130
	cmp r3, r2
	beq .LBB128_84	@ bb138
.LBB128_78:	@ bb132
	add r10, r3, #12
.LBB128_79:	@ bb137
	ldr r10, [r10]
	cmp r10, #0
	beq .LBB128_84	@ bb138
.LBB128_80:	@ bb133
	ldr r0, [r10, #+4]
	ldr r1, [r6, #+16]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB128_79	@ bb137
.LBB128_81:	@ bb134
	ldr r10, [r6, #+16]
.LBB128_82:	@ bb134
	@comment
str r10, [r4, #+16]
	ldr r10, .LCPI128_3
	ldr r10, [r10]
	cmp r10, #0
	beq .LBB128_91	@ parm_done
.LBB128_83:	@ bb135
	ldr r0, .LCPI128_4
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB128_91	@ parm_done
.LBB128_84:	@ bb138
	ldr r3, [r6, #+16]
	ldrb r2, [r3, #+8]
	cmp r2, #21
	bne .LBB128_90	@ bb146
.LBB128_85:	@ bb139
	ldr r2, [r8, #+16]
	cmp r3, r2
	beq .LBB128_90	@ bb146
.LBB128_86:	@ bb140
	add r10, r3, #12
.LBB128_87:	@ bb145
	ldr r10, [r10]
	cmp r10, #0
	beq .LBB128_90	@ bb146
.LBB128_88:	@ bb141
	ldr r0, [r10, #+4]
	ldr r1, [r8, #+16]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB128_87	@ bb145
.LBB128_89:	@ bb142
	ldr r10, [r8, #+16]
	b .LBB128_82	@ bb134
.LBB128_90:	@ bb146
	ldr r0, [r8, #+16]
	ldr r1, [r6, #+16]
	emit_nops_till_bundle_end
	bl common_type
	@comment
str r0, [r4, #+16]
.LBB128_91:	@ parm_done
	ldr r8, [r8]
	ldr r4, [r4]
	ldr r6, [r6]
	cmp r8, #0
	bne .LBB128_74	@ bb126
.LBB128_92:	@ bb148
	mov r0, r9
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_function_type
	mov r5, r0
	b .LBB128_62	@ bb33
.LBB128_93:	@ bb2.bb150_crit_edge
	mov r5, r4
.LBB128_94:	@ bb150
	mov r0, r5
.LBB128_95:	@ bb150
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB128_96:	@ bb25.bb28_crit_edge
.LBB128_97:	@ bb28.bb31_crit_edge
.LBB128_98:	@ bb58.bb69_crit_edge
	ldr r1, .LCPI128_1
	b .LBB128_60	@ bb69
.LBB128_99:	@ bb77.bb89_crit_edge
	mov r1, #1
	b .LBB128_66	@ bb89
.LBB128_100:	@ bb89.bb101_crit_edge
	mov r2, #1
	b .LBB128_69	@ bb101
.LBB128_101:	@ bb121
	mov r0, r9
	mov r1, r8
	b .LBB128_45	@ bb119
.LBB128_102:	@ bb122.bb147.loopexit_crit_edge
	mov r0, #0
.LBB128_103:	@ bb147.loopexit
	mov r5, r0
	cmp r8, #0
	beq .LBB128_92	@ bb148
.LBB128_104:	@ bb147.loopexit.bb126_crit_edge
	mov r4, r5
	b .LBB128_74	@ bb126
.LBB128_105:	@ bb127
	@comment
str r2, [r4, #+16]
	b .LBB128_91	@ parm_done
.LBB128_106:	@ bb129
	@comment
str r3, [r4, #+16]
	b .LBB128_91	@ parm_done
	.align	4
.LBB128_107:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI128_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI128_1:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI128_2:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI128_3:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI128_4:
 	.long	.str39868

	.size common_type, .-common_type


	.globl	build_binary_op
	.align	4
build_binary_op:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #76
	@comment
str r2, [sp, #+20]
	@comment
str r1, [sp, #+24]
	@comment
str r0, [sp, #+28]
	cmp r3, #0
	beq .LBB129_345	@ entry.bb3_crit_edge
.LBB129_1:	@ bb
	ldr r0, [sp, #+24]
	emit_nops_till_bundle_end
	bl default_conversion
	mov r4, r0
	ldr r0, [sp, #+20]
	emit_nops_till_bundle_end
	bl default_conversion
.LBB129_2:	@ bb3
	ldr r3, [r0, #+4]
	@comment
str r3, [sp]
	ldrb r3, [r3, #+8]
	@comment
str r3, [sp, #+12]
	ldr r3, [r4, #+4]
	@comment
str r3, [sp, #+8]
	ldrb r3, [r3, #+8]
	@comment
str r3, [sp, #+16]
.LBB129_3:	@ bb5
	@comment
str r4, [sp, #+32]
	ldrb r3, [r4, #+8]
	sub r4, r3, #105
	and r4, r4, #255
	cmp r4, #3
	bhs .LBB129_5	@ bb8
.LBB129_4:	@ bb6
	ldr r2, [sp, #+32]
	ldr r4, [r2, #+16]
	ldr r1, [r4, #+4]
	ldr r2, [r2, #+4]
	cmp r2, r1
	beq .LBB129_3	@ bb5
.LBB129_5:	@ bb8
	mov r2, r0
	@comment
str r2, [sp, #+36]
	ldrb r2, [r2, #+8]
	sub r1, r2, #105
	and r1, r1, #255
	cmp r1, #2
	bhi .LBB129_7	@ bb10
.LBB129_6:	@ bb9
	ldr r1, [sp, #+36]
	ldr r0, [r1, #+16]
	ldr r12, [r0, #+4]
	ldr r1, [r1, #+4]
	cmp r1, r12
	beq .LBB129_5	@ bb8
.LBB129_7:	@ bb10
	ldr r1, [sp, #+12]
	tst r1, #255
	ldrne r1, [sp, #+16]
	tstne r1, #255
	bne .LBB129_9	@ bb14
	b .LBB129_346	@ bb13
.LBB129_8:	@ bb10
.LBB129_9:	@ bb14
	ldr r1, [sp, #+28]
	sub r1, r1, #56
	cmp r1, #44
	bhi .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_10:	@ bb14
	.set PCRELV11, (.LJTI129_0_0-(.LPCRELL11+8))
.LPCRELL11:
	add r0, pc, #PCRELV11
	ldr pc, [r0, +r1, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI129_0_0:
	.long	 .LBB129_13
	.long	 .LBB129_21
	.long	 .LBB129_41
	.long	 .LBB129_43
	.long	 .LBB129_43
	.long	 .LBB129_43
	.long	 .LBB129_43
	.long	 .LBB129_65
	.long	 .LBB129_11
	.long	 .LBB129_65
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_43
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_161
	.long	 .LBB129_161
	.long	 .LBB129_11
	.long	 .LBB129_11
	.long	 .LBB129_92
	.long	 .LBB129_74
	.long	 .LBB129_102
	.long	 .LBB129_102
	.long	 .LBB129_52
	.long	 .LBB129_52
	.long	 .LBB129_52
	.long	 .LBB129_52
	.long	 .LBB129_11
	.long	 .LBB129_67
	.long	 .LBB129_67
	.long	 .LBB129_67
	.long	 .LBB129_67
	.long	 .LBB129_67
	.long	 .LBB129_11
	.long	 .LBB129_176
	.long	 .LBB129_176
	.long	 .LBB129_176
	.long	 .LBB129_176
	.long	 .LBB129_111
	.long	 .LBB129_111

.text
@ JUMP TABLE END



	.align	2
.LBB129_11:	@ bb14.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
.LBB129_12:	@ bb14.bb256_crit_edge
	mov r7, r3
	@comment
str r3, [sp, #+4]
	b .LBB129_115	@ bb161.bb256_crit_edge
	.align	2
.LBB129_13:	@ bb15
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_15	@ bb19
	b .LBB129_18	@ bb20
.LBB129_14:	@ bb15
.LBB129_15:	@ bb19
	mov r0, #56
.LBB129_16:	@ bb19
	ldr r1, [sp, #+32]
	ldr r2, [sp, #+36]
.LBB129_17:	@ bb19
	emit_nops_till_bundle_end
	bl pointer_int_sum
	b .LBB129_38	@ pointer_diff.exit
.LBB129_18:	@ bb20
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #7
	beq .LBB129_20	@ bb24
	b .LBB129_41	@ bb41
.LBB129_19:	@ bb20
.LBB129_20:	@ bb24
	mov r0, #56
	ldr r1, [sp, #+36]
	ldr r2, [sp, #+32]
	b .LBB129_17	@ bb19
	.align	2
.LBB129_21:	@ bb26
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_23	@ bb33
	b .LBB129_39	@ bb35
.LBB129_22:	@ bb26
.LBB129_23:	@ bb33
	mov r4, #1
	ldr r0, [sp, #+8]
	ldr r1, [sp]
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r4, r4, r0, lsr #31
	cmp r0, #0
	bge .LBB129_27	@ comp_target_types.exit551
.LBB129_24:	@ bb1.i546
	ldr r3, [sp, #+8]
	ldr r3, [r3, #+4]
	ldr r0, [r3, #+64]
	ldr r3, [sp]
	ldr r3, [r3, #+4]
	ldr r1, [r3, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r4, r0
	cmp r0, #2
	bne .LBB129_27	@ comp_target_types.exit551
.LBB129_25:	@ bb2.i547
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI129_38
	emit_nops_till_bundle_end
	blne pedwarn
.LBB129_26:	@ bb3.i548
.LBB129_27:	@ comp_target_types.exit551
	cmp r4, #0
	beq .LBB129_39	@ bb35
.LBB129_28:	@ bb34
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	ldr r2, .LCPI129_39
	ldr r4, [r2]
	ldr r2, [sp, #+32]
	ldr r2, [r2, #+4]
	ldr r5, [r2, #+4]
	cmp r3, #0
	ldreq r3, .LCPI129_40
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB129_34	@ bb5.i555
.LBB129_29:	@ bb.i
.LBB129_30:	@ bb1.i552
	ldrb r3, [r5, #+8]
	cmp r3, #6
	ldreq r0, .LCPI129_41
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB129_31:	@ bb2.i553
.LBB129_32:	@ bb3.i554
	ldrb r3, [r5, #+8]
	cmp r3, #23
	ldreq r0, .LCPI129_42
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB129_33:	@ bb4.i
.LBB129_34:	@ bb5.i555
	mov r0, r4
	ldr r6, [sp, #+36]
	mov r1, r6
	emit_nops_till_bundle_end
	bl convert
	mov r7, r0
	mov r0, r4
	ldr r1, [sp, #+32]
	emit_nops_till_bundle_end
	bl convert
	mov r1, r0
	mov r0, #57
	mov r3, #1
	mov r2, r7
	emit_nops_till_bundle_end
	bl build_binary_op
	ldr r3, [r6, #+4]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+16]
	mov r6, r0
	cmp r3, #0
	ldreq r0, .LCPI129_43
	emit_nops_till_bundle_end
	bleq error
.LBB129_35:	@ bb6.i556
.LBB129_36:	@ bb7.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl c_size_in_bytes
	mov r5, r0
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl convert
	mov r3, r0
	mov r0, #68
	mov r1, r4
	mov r2, r6
	emit_nops_till_bundle_end
	bl build
	mov r4, r0
	emit_nops_till_bundle_end
	bl fold
	cmp r0, r4
	bne .LBB129_38	@ pointer_diff.exit
.LBB129_37:	@ bb8.i
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r4, [r2, #+8]!
	ldrb r7, [r2, #+3]
	orr r3, r3, r7, lsl #8
	ldrb r7, [r2, #+1]
	orr r4, r4, r7, lsl #8
	orr r3, r4, r3, lsl #16
	bic r3, r3, #2, 24 @ 512
	ldrb r4, [r5, #+8]!
	ldrb r4, [r5, #+1]
	ldrb r5, [r6, #+8]!
	ldrb r5, [r6, #+1]
	strb r3, [r2]
	mov r6, r3, lsr #24
	strb r6, [r2, #+3]
	and r4, r5, r4
	mov r5, #2, 24 @ 512
	and r4, r5, r4, lsl #8
	orr r4, r3, r4
	mov r4, r4, lsr #8
	strb r4, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
.LBB129_38:	@ pointer_diff.exit
	sfi_add sp, sp, #76
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB129_39:	@ bb35
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_392	@ bb39
.LBB129_40:	@ bb35
	.align	2
.LBB129_41:	@ bb41
	mov r4, #0
	mov r3, #1
	mov r5, r4
	mov r6, r4
.LBB129_42:	@ bb41
	mov r7, r4
	@comment
str r4, [sp, #+4]
	mov r8, r4
	mov r9, r4
	ldr r10, [sp, #+28]
	b .LBB129_348	@ bb256
	.align	2
.LBB129_43:	@ bb42
	ldr r3, [sp, #+16]
	sub r3, r3, #7
	cmp r3, #2
	ldrls r3, [sp, #+12]
	subls r3, r3, #7
	cmpls r3, #2
	bls .LBB129_45	@ bb44
	b .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_44:	@ bb43
.LBB129_45:	@ bb44
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #7
	beq .LBB129_47	@ bb49
	b .LBB129_347	@ bb44.bb256_crit_edge
.LBB129_46:	@ bb44
.LBB129_47:	@ bb49
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+4]
	ldrb r3, [r3, #+9]
	tst r3, #64
	bne .LBB129_51	@ bb49.bb256_crit_edge
.LBB129_48:	@ bb54
	and r3, r2, #255
	cmp r3, #25
	bne .LBB129_41	@ bb41
.LBB129_49:	@ bb55
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+12]
	cmn r3, #1
	ldreq r3, [sp, #+36]
	ldreq r3, [r3, #+16]
	cmneq r3, #1
	beq .LBB129_41	@ bb41
.LBB129_50:	@ bb56
.LBB129_51:	@ bb49.bb256_crit_edge
	mov r4, #0
	mov r3, #1
	mov r5, r4
	mov r6, r3
	b .LBB129_42	@ bb41
	.align	2
.LBB129_52:	@ bb61
	ldr r4, [sp, #+16]
	and r4, r4, #255
	mov r6, #0
	mov r5, #1
	cmp r4, #7
	mov r4, #0
	moveq r4, r5
	ldr r7, [sp, #+12]
	and r7, r7, #255
	cmp r7, #7
	mov r7, #0
	moveq r7, r5
	mvn r5, #0
	tst r7, r4
	movne r6, r5
	and r4, r3, #255
	cmp r4, #25
	andeq r2, r2, #255
	cmpeq r2, #106
	beq .LBB129_54	@ bb68
	b .LBB129_369	@ bb61.bb75_crit_edge
.LBB129_53:	@ bb61
.LBB129_54:	@ bb68
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+16]
	ldr r9, [r2, #+4]
	ldrb r4, [r9, #+28]
	ldr r5, [sp]
	ldrb r5, [r5, #+28]
	cmp r5, r4
	bls .LBB129_369	@ bb61.bb75_crit_edge
.LBB129_55:	@ bb69
	ldrb r4, [r9, #+9]
	tst r4, #64
	beq .LBB129_369	@ bb61.bb75_crit_edge
.LBB129_56:	@ bb74
	@comment
str r2, [sp, #+36]
.LBB129_57:	@ bb75
	ldr r2, [sp, #+36]
	ldrb r2, [r2, #+8]
	cmp r2, #25
	andeq r3, r3, #255
	cmpeq r3, #106
	beq .LBB129_62	@ bb77
.LBB129_58:	@ bb75
.LBB129_59:	@ bb75.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
.LBB129_60:	@ bb75.bb256_crit_edge
	mov r7, r3
	@comment
str r3, [sp, #+4]
.LBB129_61:	@ bb75.bb256_crit_edge
	mov r8, r3
	ldr r10, [sp, #+28]
	b .LBB129_348	@ bb256
.LBB129_62:	@ bb77
	ldr r3, [sp, #+32]
	ldr r2, [r3, #+16]
	ldr r10, [r2, #+4]
	ldrb r3, [r10, #+28]
	ldr r4, [sp, #+8]
	ldrb r4, [r4, #+28]
	cmp r4, r3
	bls .LBB129_59	@ bb75.bb256_crit_edge
.LBB129_63:	@ bb78
	ldrb r3, [r10, #+9]
	tst r3, #64
	beq .LBB129_59	@ bb75.bb256_crit_edge
.LBB129_64:	@ bb83
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r7, r9
	@comment
str r3, [sp, #+4]
	mov r8, r3
	mov r9, r10
	ldr r10, [sp, #+28]
	@comment
str r2, [sp, #+32]
	b .LBB129_348	@ bb256
	.align	2
.LBB129_65:	@ bb84
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	bne .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_66:	@ bb84
	ldr r3, [sp, #+16]
	and r3, r3, #255
	cmp r3, #7
	bne .LBB129_11	@ bb14.bb256_crit_edge
	b .LBB129_47	@ bb49
	.align	2
.LBB129_67:	@ bb99
	ldr r3, [sp, #+16]
	and r3, r3, #255
	cmp r3, #7
	ldrne r3, [sp, #+16]
	andne r3, r3, #255
	cmpne r3, #13
	bne .LBB129_69	@ bb103
	b .LBB129_70	@ bb107
.LBB129_68:	@ bb99
.LBB129_69:	@ bb103
	ldr r3, [sp, #+16]
	sub r3, r3, #8
	cmp r3, #1
	bhi .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_70:	@ bb107
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldrne r3, [sp, #+12]
	andne r3, r3, #255
	cmpne r3, #13
	bne .LBB129_72	@ bb111
	b .LBB129_73	@ bb115
.LBB129_71:	@ bb107
.LBB129_72:	@ bb111
	ldr r3, [sp, #+12]
	sub r3, r3, #8
	cmp r3, #1
	bhi .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_73:	@ bb115
	ldr r3, .LCPI129_44
	ldr r9, [r3]
	ldr r0, [sp, #+32]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	@comment
str r0, [sp, #+32]
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r8, #1
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
	mov r7, r3
	@comment
str r3, [sp, #+4]
	b .LBB129_91	@ bb130
	.align	2
.LBB129_74:	@ bb116
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #7
	beq .LBB129_76	@ bb120
	b .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_75:	@ bb116
.LBB129_76:	@ bb120
	and r3, r2, #255
	cmp r3, #25
	bne .LBB129_371	@ bb120.bb128_crit_edge
.LBB129_77:	@ bb121
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	blt .LBB129_370	@ bb122
.LBB129_78:	@ bb123
	ldr r3, [sp, #+36]
	ldr r2, [r3, #+16]
	ldr r3, [r3, #+12]
	orr r5, r2, r3
	mov r6, #1
	mov r4, #0
	cmp r5, #0
	movne r4, r6
	cmp r2, #0
	bne .LBB129_80	@ bb127
.LBB129_79:	@ bb126
	ldr r2, [sp, #+8]
	ldrb r2, [r2, #+28]
	cmp r3, r2
	ldrhs r0, .LCPI129_45
	emit_nops_till_bundle_end
	blhs warning
	b .LBB129_81	@ bb128
.LBB129_80:	@ bb127
	ldr r0, .LCPI129_45
	emit_nops_till_bundle_end
	bl warning
.LBB129_81:	@ bb128
	ldr r3, .LCPI129_46
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB129_86	@ bb129
.LBB129_82:	@ bb128.bb256_crit_edge
	mov r3, #0
.LBB129_83:	@ bb128.bb256_crit_edge
	mov r5, r3
	mov r6, r3
	mov r7, r3
	@comment
str r3, [sp, #+4]
.LBB129_84:	@ bb128.bb256_crit_edge
	mov r8, r3
.LBB129_85:	@ bb128.bb256_crit_edge
	ldr r9, [sp, #+8]
	ldr r10, [sp, #+28]
	b .LBB129_348	@ bb256
.LBB129_86:	@ bb129
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+64]
	ldr r2, .LCPI129_44
	ldr r0, [r2]
	cmp r3, r0
	bne .LBB129_89	@ bb130
.LBB129_87:	@ bb129.bb256_crit_edge
	mov r8, #1
	mov r3, #0
.LBB129_88:	@ bb129.bb256_crit_edge
	mov r5, r3
	mov r6, r3
	mov r7, r3
	@comment
str r3, [sp, #+4]
	b .LBB129_85	@ bb128.bb256_crit_edge
.LBB129_89:	@ bb130
	ldr r1, [sp, #+36]
	emit_nops_till_bundle_end
	bl convert
	mov r8, #1
	mov r3, #0
.LBB129_90:	@ bb130
	mov r5, r3
	mov r6, r3
	mov r7, r3
	@comment
str r3, [sp, #+4]
	ldr r9, [sp, #+8]
.LBB129_91:	@ bb130
	ldr r10, [sp, #+28]
	@comment
str r0, [sp, #+36]
	b .LBB129_348	@ bb256
	.align	2
.LBB129_92:	@ bb132
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #7
	beq .LBB129_94	@ bb136
	b .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_93:	@ bb132
.LBB129_94:	@ bb136
	and r3, r2, #255
	cmp r3, #25
	bne .LBB129_99	@ bb142
.LBB129_95:	@ bb137
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	blt .LBB129_372	@ bb138
.LBB129_96:	@ bb139
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB129_98	@ bb141
.LBB129_97:	@ bb140
	ldr r3, [sp, #+8]
	ldrb r3, [r3, #+28]
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+12]
	cmp r2, r3
	ldrhs r0, .LCPI129_47
	emit_nops_till_bundle_end
	blhs warning
	b .LBB129_99	@ bb142
.LBB129_98:	@ bb141
	ldr r0, .LCPI129_47
	emit_nops_till_bundle_end
	bl warning
.LBB129_99:	@ bb142
	ldr r3, .LCPI129_46
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB129_109	@ bb142.bb256_crit_edge
.LBB129_100:	@ bb143
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+64]
	ldr r2, .LCPI129_44
	ldr r0, [r2]
	cmp r3, r0
	bne .LBB129_110	@ bb144
.LBB129_101:	@ bb143.bb256_crit_edge
	mov r8, #1
	mov r3, #0
	mov r4, r3
	b .LBB129_88	@ bb129.bb256_crit_edge
	.align	2
.LBB129_102:	@ bb146
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #7
	beq .LBB129_104	@ bb150
	b .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_103:	@ bb146
.LBB129_104:	@ bb150
	and r3, r2, #255
	cmp r3, #25
	bne .LBB129_99	@ bb142
.LBB129_105:	@ bb151
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	blt .LBB129_373	@ bb152
.LBB129_106:	@ bb153
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB129_108	@ bb155
.LBB129_107:	@ bb154
	ldr r3, [sp, #+8]
	ldrb r3, [r3, #+28]
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+12]
	cmp r2, r3
	blo .LBB129_99	@ bb142
.LBB129_108:	@ bb155
	ldr r0, .LCPI129_48
	emit_nops_till_bundle_end
	bl warning
	b .LBB129_99	@ bb142
.LBB129_109:	@ bb142.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	b .LBB129_83	@ bb128.bb256_crit_edge
.LBB129_110:	@ bb144
	ldr r1, [sp, #+36]
	emit_nops_till_bundle_end
	bl convert
	mov r8, #1
	mov r3, #0
	mov r4, r3
	b .LBB129_90	@ bb130
	.align	2
.LBB129_111:	@ bb160
	ldr r3, [sp, #+16]
	sub r3, r3, #7
	ldr r4, .LCPI129_44
	ldr r4, [r4]
	@comment
str r4, [sp, #+4]
	cmp r3, #2
	ldrls r3, [sp, #+12]
	subls r3, r3, #7
	cmpls r3, #2
	bls .LBB129_113	@ bb161.bb256_crit_edge
	b .LBB129_116	@ bb163
.LBB129_112:	@ bb161
.LBB129_113:	@ bb161.bb256_crit_edge
	mov r3, #0
	mov r5, #1
	mov r4, r3
.LBB129_114:	@ bb161.bb256_crit_edge
	mov r6, r3
	mov r7, r3
.LBB129_115:	@ bb161.bb256_crit_edge
	mov r8, r3
	mov r9, r3
	ldr r10, [sp, #+28]
	b .LBB129_348	@ bb256
.LBB129_116:	@ bb163
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_118	@ bb167
	b .LBB129_142	@ bb184
.LBB129_117:	@ bb163
.LBB129_118:	@ bb167
	ldr r3, [sp]
	ldr r4, [r3, #+4]
	ldr r2, [sp, #+8]
	ldr r5, [r2, #+4]
	mov r6, #1
	mov r0, r2
	mov r1, r3
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r6, r6, r0, lsr #31
	cmp r0, #0
	bge .LBB129_122	@ comp_target_types.exit543
.LBB129_119:	@ bb1.i538
	ldr r6, [sp, #+8]
	ldr r6, [r6, #+4]
	ldr r0, [r6, #+64]
	ldr r6, [sp]
	ldr r6, [r6, #+4]
	ldr r1, [r6, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r6, r0
	cmp r0, #2
	bne .LBB129_122	@ comp_target_types.exit543
.LBB129_120:	@ bb2.i539
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI129_38
	emit_nops_till_bundle_end
	blne pedwarn
.LBB129_121:	@ bb3.i540
.LBB129_122:	@ comp_target_types.exit543
	cmp r6, #0
	bne .LBB129_136	@ bb182
.LBB129_123:	@ bb169
	ldr r3, [r5, #+64]
	ldr r2, .LCPI129_49
	ldr r2, [r2]
	cmp r3, r2
	bne .LBB129_129	@ bb175
.LBB129_124:	@ bb170
	ldr r2, .LCPI129_37
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB129_139	@ bb183
.LBB129_125:	@ bb171
	ldr r0, [sp, #+32]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB129_127	@ bb173
.LBB129_126:	@ bb171
	ldr r5, [sp, #+32]
	ldr r2, [sp, #+24]
	cmp r5, r2
	beq .LBB129_139	@ bb183
.LBB129_127:	@ bb173
	ldrb r2, [r4, #+8]
	cmp r2, #23
	bne .LBB129_139	@ bb183
.LBB129_128:	@ bb174
	ldr r0, .LCPI129_50
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB129_139	@ bb183
.LBB129_129:	@ bb175
	ldr r3, [r4, #+64]
	cmp r3, r2
	bne .LBB129_138	@ bb181
.LBB129_130:	@ bb176
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB129_139	@ bb183
.LBB129_131:	@ bb177
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB129_133	@ bb179
.LBB129_132:	@ bb177
	ldr r2, [sp, #+36]
	ldr r3, [sp, #+20]
	cmp r2, r3
	beq .LBB129_139	@ bb183
.LBB129_133:	@ bb179
	ldrb r3, [r5, #+8]
	cmp r3, #23
	beq .LBB129_128	@ bb174
	b .LBB129_139	@ bb183
	.align	4
.LBB129_134:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_37:
 	.long	pedantic

.LBB129_135:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_38:
 	.long	.str34863

	.align	4
.LBB129_136:	@ bb182
	ldr r0, [sp, #+8]
	ldr r1, [sp]
	emit_nops_till_bundle_end
	bl common_type
	cmp r0, #0
	beq .LBB129_139	@ bb183
.LBB129_137:	@ bb182.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
	mov r7, r3
	mov r8, r3
	mov r9, r0
	ldr r10, [sp, #+28]
	b .LBB129_348	@ bb256
.LBB129_138:	@ bb181
	ldr r0, .LCPI129_51
	emit_nops_till_bundle_end
	bl pedwarn
.LBB129_139:	@ bb183
	ldr r3, .LCPI129_52
	ldr r9, [r3]
	b .LBB129_188	@ bb229.bb256_crit_edge
	.align	4
.LBB129_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_39:
 	.long	ptrdiff_type_node

.LBB129_141:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_40:
 	.long	warn_pointer_arith

	.align	4
.LBB129_142:	@ bb184
	ldr r3, [sp, #+16]
	and r3, r3, #255
	cmp r3, #13
	andeq r3, r2, #255
	cmpeq r3, #25
	beq .LBB129_146	@ bb186
	b .LBB129_147	@ bb188
	.align	4
.LBB129_143:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_41:
 	.long	.str156984

.LBB129_144:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_42:
 	.long	.str157985

.LBB129_145:	@ bb184
	.align	4
.LBB129_146:	@ bb186
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB129_156	@ bb186.bb256_crit_edge
.LBB129_147:	@ bb188
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+32]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #25
	beq .LBB129_149	@ bb190
	b .LBB129_150	@ bb192
.LBB129_148:	@ bb189
.LBB129_149:	@ bb190
	ldr r0, [sp, #+32]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB129_160	@ bb190.bb256_crit_edge
.LBB129_150:	@ bb192
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #7
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_153	@ bb196
	b .LBB129_157	@ bb198
	.align	4
.LBB129_151:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_43:
 	.long	.str35864

.LBB129_152:	@ bb192
	.align	4
.LBB129_153:	@ bb196
	ldr r3, .LCPI129_46
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB129_156	@ bb186.bb256_crit_edge
.LBB129_154:	@ bb197
	ldr r0, .LCPI129_53
.LBB129_155:	@ bb197
	emit_nops_till_bundle_end
	bl pedwarn
.LBB129_156:	@ bb186.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
	mov r7, r3
	b .LBB129_84	@ bb128.bb256_crit_edge
.LBB129_157:	@ bb198
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #7
	beq .LBB129_159	@ bb202
	b .LBB129_206	@ bb198.bb256_crit_edge
.LBB129_158:	@ bb198
.LBB129_159:	@ bb202
	ldr r3, .LCPI129_46
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB129_208	@ bb255
.LBB129_160:	@ bb190.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
	mov r7, r3
	mov r8, r3
	ldr r9, [sp]
	ldr r10, [sp, #+28]
	b .LBB129_348	@ bb256
	.align	2
.LBB129_161:	@ bb204
	ldr r3, [sp, #+16]
	sub r3, r3, #7
	cmp r3, #1
	ldrls r3, [sp, #+12]
	subls r3, r3, #7
	cmpls r3, #1
	bls .LBB129_374	@ bb205.bb256_crit_edge
.LBB129_162:	@ bb205
.LBB129_163:	@ bb207
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_165	@ bb211
	b .LBB129_11	@ bb14.bb256_crit_edge
.LBB129_164:	@ bb207
.LBB129_165:	@ bb211
	mov r4, #1
	ldr r0, [sp, #+8]
	ldr r1, [sp]
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r4, r4, r0, lsr #31
	cmp r0, #0
	bge .LBB129_169	@ comp_target_types.exit535
.LBB129_166:	@ bb1.i530
	ldr r4, [sp, #+8]
	ldr r4, [r4, #+4]
	ldr r0, [r4, #+64]
	ldr r4, [sp]
	ldr r4, [r4, #+4]
	ldr r1, [r4, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r4, r0
	cmp r0, #2
	bne .LBB129_169	@ comp_target_types.exit535
.LBB129_167:	@ bb2.i531
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI129_38
	emit_nops_till_bundle_end
	blne pedwarn
.LBB129_168:	@ bb3.i532
.LBB129_169:	@ comp_target_types.exit535
	cmp r4, #0
	beq .LBB129_175	@ bb215
.LBB129_170:	@ bb212
	ldr r0, [sp, #+8]
	ldr r1, [sp]
	emit_nops_till_bundle_end
	bl common_type
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	mov r9, r0
	cmp r3, #0
	beq .LBB129_174	@ bb212.bb256_crit_edge
.LBB129_171:	@ bb213
	ldr r3, [sp, #+8]
	ldr r3, [r3, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #23
	bne .LBB129_174	@ bb212.bb256_crit_edge
.LBB129_172:	@ bb214
	ldr r0, .LCPI129_54
.LBB129_173:	@ bb214
	emit_nops_till_bundle_end
	bl pedwarn
.LBB129_174:	@ bb212.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
	b .LBB129_60	@ bb75.bb256_crit_edge
.LBB129_175:	@ bb215
	ldr r3, .LCPI129_52
	ldr r9, [r3]
	ldr r0, .LCPI129_51
	b .LBB129_173	@ bb214
	.align	2
.LBB129_176:	@ bb216
	ldr r3, [sp, #+16]
	sub r3, r3, #7
	ldr r4, .LCPI129_44
	ldr r4, [r4]
	@comment
str r4, [sp, #+4]
	cmp r3, #1
	ldrls r3, [sp, #+12]
	subls r3, r3, #7
	cmpls r3, #1
	bls .LBB129_113	@ bb161.bb256_crit_edge
.LBB129_177:	@ bb217
.LBB129_178:	@ bb219
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+16]
	andeq r3, r3, #255
	cmpeq r3, #13
	beq .LBB129_180	@ bb223
	b .LBB129_194	@ bb233
.LBB129_179:	@ bb219
.LBB129_180:	@ bb223
	mov r4, #1
	ldr r0, [sp, #+8]
	ldr r1, [sp]
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r4, r4, r0, lsr #31
	cmp r0, #0
	bge .LBB129_184	@ comp_target_types.exit
.LBB129_181:	@ bb1.i
	ldr r4, [sp, #+8]
	ldr r4, [r4, #+4]
	ldr r0, [r4, #+64]
	ldr r4, [sp]
	ldr r4, [r4, #+4]
	ldr r1, [r4, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r4, r0
	cmp r0, #2
	bne .LBB129_184	@ comp_target_types.exit
.LBB129_182:	@ bb2.i
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI129_38
	emit_nops_till_bundle_end
	blne pedwarn
.LBB129_183:	@ bb3.i
.LBB129_184:	@ comp_target_types.exit
	cmp r4, #0
	beq .LBB129_192	@ bb232
.LBB129_185:	@ bb224
	ldr r4, [sp, #+8]
	mov r0, r4
	ldr r5, [sp]
	mov r1, r5
	emit_nops_till_bundle_end
	bl common_type
	ldr r3, [r4, #+4]
	ldr r2, [r3, #+16]
	mov r4, #1
	mov r6, #0
	cmp r2, #0
	mov r2, #0
	movne r2, r4
	ldr r5, [r5, #+4]
	ldr r5, [r5, #+16]
	cmp r5, #0
	movne r6, r4
	eor r2, r6, r2
	mov r9, r0
	teq r2, #1
	bne .LBB129_189	@ bb229
.LBB129_186:	@ bb228
	ldr r0, .LCPI129_55
.LBB129_187:	@ bb228
	emit_nops_till_bundle_end
	bl pedwarn
.LBB129_188:	@ bb229.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	mov r6, r3
	mov r7, r3
	b .LBB129_61	@ bb75.bb256_crit_edge
.LBB129_189:	@ bb229
	ldr r2, .LCPI129_37
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB129_188	@ bb229.bb256_crit_edge
.LBB129_190:	@ bb230
	ldrb r3, [r3, #+8]
	cmp r3, #23
	bne .LBB129_188	@ bb229.bb256_crit_edge
.LBB129_191:	@ bb231
	ldr r0, .LCPI129_54
	b .LBB129_187	@ bb228
.LBB129_192:	@ bb232
	ldr r3, .LCPI129_52
	ldr r9, [r3]
	ldr r0, .LCPI129_51
	b .LBB129_187	@ bb228
	.align	4
.LBB129_193:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_44:
 	.long	integer_type_node

	.align	4
.LBB129_194:	@ bb233
	ldr r3, [sp, #+16]
	and r3, r3, #255
	cmp r3, #13
	andeq r3, r2, #255
	cmpeq r3, #25
	beq .LBB129_196	@ bb235
	b .LBB129_200	@ bb239
.LBB129_195:	@ bb233
.LBB129_196:	@ bb235
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB129_200	@ bb239
.LBB129_197:	@ bb236
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI129_56
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB129_156	@ bb186.bb256_crit_edge
.LBB129_198:	@ bb237
.LBB129_199:	@ bb238
	ldr r0, .LCPI129_57
	b .LBB129_155	@ bb197
.LBB129_200:	@ bb239
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #13
	ldreq r3, [sp, #+32]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #25
	beq .LBB129_203	@ bb241
	b .LBB129_150	@ bb192
	.align	4
.LBB129_201:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_45:
 	.long	.str41870

.LBB129_202:	@ bb240
	.align	4
.LBB129_203:	@ bb241
	ldr r0, [sp, #+32]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB129_150	@ bb192
.LBB129_204:	@ bb242
	ldr r3, .LCPI129_37
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB129_160	@ bb190.bb256_crit_edge
.LBB129_205:	@ bb243
	ldr r0, .LCPI129_57
	b .LBB129_209	@ bb255
.LBB129_206:	@ bb198.bb256_crit_edge
	mov r3, #0
	mov r4, r3
	mov r5, r3
	b .LBB129_114	@ bb161.bb256_crit_edge
	.align	4
.LBB129_207:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_46:
 	.long	flag_traditional

	.align	4
.LBB129_208:	@ bb255
	ldr r0, .LCPI129_53
.LBB129_209:	@ bb255
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB129_160	@ bb190.bb256_crit_edge
.LBB129_210:	@ bb5.i501
	ldr r2, .LCPI129_58
	ldr r2, [r2]
	ldrb r11, [r2, #+28]
	ldrb r3, [r0, #+28]
	cmp r3, r11
	bne .LBB129_213	@ bb10.i506
.LBB129_211:	@ bb6.i504
	ldr r3, .LCPI129_59
.LBB129_212:	@ bb6.i504
	ldr r3, [r3]
	cmp r7, #0
	moveq r3, r2
	mov r7, r9
	mov r9, r3
	b .LBB129_256	@ bb321
.LBB129_213:	@ bb10.i506
	ldr r2, .LCPI129_44
	ldr r2, [r2]
	ldrb r11, [r2, #+28]
	and r1, r3, #255
	cmp r1, r11
	beq .LBB129_375	@ bb11.i509
.LBB129_214:	@ bb15.i511
	ldr r2, .LCPI129_60
	ldr r2, [r2]
	ldrb r11, [r2, #+28]
	and r1, r3, #255
	cmp r1, r11
	beq .LBB129_376	@ bb16.i514
.LBB129_215:	@ bb20.i516
	ldr r2, .LCPI129_61
	ldr r2, [r2]
	ldrb r11, [r2, #+28]
	and r1, r3, #255
	cmp r1, r11
	beq .LBB129_377	@ bb21.i519
.LBB129_216:	@ bb25.i521
	ldr r2, .LCPI129_62
	ldr r2, [r2]
	ldrb r11, [r2, #+28]
	and r3, r3, #255
	cmp r3, r11
	bne .LBB129_368	@ bb301.bb321_crit_edge
.LBB129_217:	@ bb26.i524
	ldr r11, .LCPI129_63
	ldr r11, [r11]
	cmp r7, #0
	moveq r11, r2
	mov r7, r9
	mov r9, r11
	b .LBB129_256	@ bb321
	.align	4
.LBB129_218:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_47:
 	.long	.str43872

	.align	4
.LBB129_219:	@ bb302
	ldr r7, [sp, #+12]
	ldrb r7, [r7, #+8]
	cmp r7, #25
	bne .LBB129_236	@ bb313
.LBB129_220:	@ bb303
	ldr r7, [sp, #+44]
	cmp r7, #0
	bne .LBB129_222	@ bb310
.LBB129_221:	@ bb303
	cmp r11, #0
	bne .LBB129_236	@ bb313
.LBB129_222:	@ bb310
	and r3, r2, #255
	ldr r2, [sp, #+16]
	ldr r6, [r2, #+4]
	ldrb r2, [r6, #+28]
	cmp r2, r3
	bhs .LBB129_236	@ bb313
.LBB129_223:	@ bb311
	ldrb r3, [r6, #+8]
	cmp r3, #12
	bhi .LBB129_235	@ signed_or_unsigned_type.exit499
.LBB129_224:	@ bb311
	mov r1, #1
	mov r0, #114, 26 @ 7296
	tst r0, r1, lsl r3
	beq .LBB129_235	@ signed_or_unsigned_type.exit499
.LBB129_225:	@ bb5.i474
	ldr r3, .LCPI129_58
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	bne .LBB129_229	@ bb10.i479
.LBB129_226:	@ bb6.i477
	ldr r2, .LCPI129_59
.LBB129_227:	@ bb6.i477
	ldr r6, [r2]
	b .LBB129_234	@ bb26.i497
	.align	4
.LBB129_228:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_48:
 	.long	.str45874

	.align	4
.LBB129_229:	@ bb10.i479
	ldr r3, .LCPI129_44
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	beq .LBB129_378	@ bb11.i482
.LBB129_230:	@ bb15.i484
	ldr r3, .LCPI129_60
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	beq .LBB129_379	@ bb16.i487
.LBB129_231:	@ bb20.i489
	ldr r3, .LCPI129_61
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	beq .LBB129_380	@ bb21.i492
.LBB129_232:	@ bb25.i494
	ldr r3, .LCPI129_62
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r2, r2, #255
	cmp r2, r1
	bne .LBB129_235	@ signed_or_unsigned_type.exit499
.LBB129_233:	@ bb26.i497
	ldr r6, .LCPI129_63
	ldr r6, [r6]
.LBB129_234:	@ bb26.i497
	cmp r7, #0
	moveq r6, r3
.LBB129_235:	@ signed_or_unsigned_type.exit499
	ldr r0, [sp, #+12]
	mov r1, r6
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB129_255	@ bb320
.LBB129_236:	@ bb313
	ldr r7, [sp, #+16]
	ldrb r7, [r7, #+8]
	cmp r7, #25
	bne .LBB129_381	@ bb313.bb321_crit_edge
.LBB129_237:	@ bb314
	ldr r7, [sp, #+40]
	cmp r7, #0
	bne .LBB129_239	@ bb318
.LBB129_238:	@ bb314
	cmp r11, #0
	bne .LBB129_381	@ bb313.bb321_crit_edge
.LBB129_239:	@ bb318
	ldrb r3, [r9, #+28]
	ldr r2, [sp, #+12]
	ldr r6, [r2, #+4]
	ldrb r2, [r6, #+28]
	cmp r2, r3
	bhs .LBB129_381	@ bb313.bb321_crit_edge
.LBB129_240:	@ bb319
	ldrb r3, [r6, #+8]
	cmp r3, #12
	bhi .LBB129_254	@ signed_or_unsigned_type.exit472
.LBB129_241:	@ bb319
	mov r1, #1
	mov r0, #114, 26 @ 7296
	tst r0, r1, lsl r3
	beq .LBB129_254	@ signed_or_unsigned_type.exit472
.LBB129_242:	@ bb5.i447
	ldr r3, .LCPI129_58
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	bne .LBB129_248	@ bb10.i452
.LBB129_243:	@ bb6.i450
	ldr r2, .LCPI129_59
.LBB129_244:	@ bb6.i450
	ldr r6, [r2]
	b .LBB129_253	@ bb26.i470
	.align	4
.LBB129_245:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_49:
 	.long	void_type_node

.LBB129_246:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_50:
 	.long	.str46875

.LBB129_247:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_51:
 	.long	.str47876

	.align	4
.LBB129_248:	@ bb10.i452
	ldr r3, .LCPI129_44
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	beq .LBB129_382	@ bb11.i455
.LBB129_249:	@ bb15.i457
	ldr r3, .LCPI129_60
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	beq .LBB129_383	@ bb16.i460
.LBB129_250:	@ bb20.i462
	ldr r3, .LCPI129_61
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r0, r2, #255
	cmp r0, r1
	beq .LBB129_384	@ bb21.i465
.LBB129_251:	@ bb25.i467
	ldr r3, .LCPI129_62
	ldr r3, [r3]
	ldrb r1, [r3, #+28]
	and r2, r2, #255
	cmp r2, r1
	bne .LBB129_254	@ signed_or_unsigned_type.exit472
.LBB129_252:	@ bb26.i470
	ldr r6, .LCPI129_63
	ldr r6, [r6]
.LBB129_253:	@ bb26.i470
	cmp r7, #0
	moveq r6, r3
.LBB129_254:	@ signed_or_unsigned_type.exit472
	ldr r0, [sp, #+16]
	mov r1, r6
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	beq .LBB129_381	@ bb313.bb321_crit_edge
.LBB129_255:	@ bb320
	mov r7, r9
	mov r9, r6
.LBB129_256:	@ bb321
	cmp r4, #0
	beq .LBB129_281	@ bb344
.LBB129_257:	@ bb322
	add r1, sp, #48
	ldr r7, [sp, #+32]
	mov r0, r7
	emit_nops_till_bundle_end
	bl get_narrower
	cmp r0, r7
	bne .LBB129_260	@ bb331
.LBB129_258:	@ bb323
	ldr r7, [sp, #+32]
	ldr r7, [r7, #+4]
	cmp r7, r9
	ldreqb r3, [r7, #+9]
	ldreqb r2, [r7, #+8]!
	moveq r7, #1
	andeq r7, r7, r3, lsr #6
	@comment
streq r7, [sp, #+48]
.LBB129_259:	@ bb324
.LBB129_260:	@ bb331
	ldr r4, [r0, #+4]
	ldrb r7, [r4, #+28]
	ldrb r3, [r9, #+28]
	cmp r7, r3
	bhs .LBB129_385	@ bb331.bb344_crit_edge
.LBB129_261:	@ bb332
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+16]
	cmp r2, #0
	bne .LBB129_385	@ bb331.bb344_crit_edge
.LBB129_262:	@ bb333
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+12]
	and r1, r7, #255
	cmp r1, r2
	ble .LBB129_385	@ bb331.bb344_crit_edge
.LBB129_263:	@ bb334
	ldrb r2, [r9, #+9]
	tst r2, #64
	beq .LBB129_266	@ bb341
.LBB129_264:	@ bb339
	ldr r2, [sp, #+48]
	cmp r2, #0
	bne .LBB129_266	@ bb341
.LBB129_265:	@ bb340
	and r3, r3, #255
	mov r2, r1, lsl #1
	cmp r2, r3
	bgt .LBB129_385	@ bb331.bb344_crit_edge
.LBB129_266:	@ bb341
	ldrb r8, [r4, #+8]
	ldr r3, [sp, #+48]
	cmp r8, #12
	bhi .LBB129_279	@ signed_or_unsigned_type.exit
.LBB129_267:	@ bb341
	mov r2, #1
	mov r1, #114, 26 @ 7296
	tst r1, r2, lsl r8
	beq .LBB129_279	@ signed_or_unsigned_type.exit
.LBB129_268:	@ bb5.i
	ldr r8, .LCPI129_58
	ldr r8, [r8]
	ldrb r2, [r8, #+28]
	and r1, r7, #255
	cmp r1, r2
	bne .LBB129_273	@ bb10.i
.LBB129_269:	@ bb6.i
	ldr r7, .LCPI129_26
.LBB129_270:	@ bb6.i
	ldr r4, [r7]
	b .LBB129_278	@ bb26.i
	.align	4
.LBB129_271:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_52:
 	.long	ptr_type_node

.LBB129_272:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_53:
 	.long	.str48877

	.align	4
.LBB129_273:	@ bb10.i
	ldr r8, .LCPI129_8
	ldr r8, [r8]
	ldrb r2, [r8, #+28]
	and r1, r7, #255
	cmp r1, r2
	beq .LBB129_386	@ bb11.i
.LBB129_274:	@ bb15.i
	ldr r8, .LCPI129_28
	ldr r8, [r8]
	ldrb r2, [r8, #+28]
	and r1, r7, #255
	cmp r1, r2
	beq .LBB129_387	@ bb16.i
.LBB129_275:	@ bb20.i
	ldr r8, .LCPI129_30
	ldr r8, [r8]
	ldrb r2, [r8, #+28]
	and r1, r7, #255
	cmp r1, r2
	beq .LBB129_388	@ bb21.i
.LBB129_276:	@ bb25.i
	ldr r8, .LCPI129_32
	ldr r8, [r8]
	ldrb r2, [r8, #+28]
	and r7, r7, #255
	cmp r7, r2
	bne .LBB129_279	@ signed_or_unsigned_type.exit
.LBB129_277:	@ bb26.i
	ldr r4, .LCPI129_33
	ldr r4, [r4]
.LBB129_278:	@ bb26.i
	cmp r3, #0
	moveq r4, r8
.LBB129_279:	@ signed_or_unsigned_type.exit
	ldr r7, [sp, #+32]
	ldr r7, [r7, #+4]
	cmp r7, r4
	beq .LBB129_389	@ signed_or_unsigned_type.exit.bb344_crit_edge
.LBB129_280:	@ bb342
	mov r0, r4
	ldr r1, [sp, #+32]
	emit_nops_till_bundle_end
	bl convert
	mov r8, #1
	mov r7, r9
	mov r9, r4
	@comment
str r0, [sp, #+32]
.LBB129_281:	@ bb344
	cmp r5, #0
	beq .LBB129_285	@ bb407
.LBB129_282:	@ bb345
	ldr r8, [sp, #+32]
	@comment
str r8, [sp, #+52]
	ldr r8, [sp, #+36]
	add r0, sp, #56
	stmia r0, {r8, r9, r10}
	add r0, sp, #52
	add r1, sp, #56
	add r2, sp, #60
	add r3, sp, #64
	emit_nops_till_bundle_end
	bl shorten_compare
	cmp r0, #0
	bne .LBB129_38	@ pointer_diff.exit
.LBB129_283:	@ bb347
	ldr r8, .LCPI129_23
	ldr r8, [r8]
	ldr r10, [sp, #+64]
	ldr r3, [sp, #+56]
	@comment
str r3, [sp, #+36]
	ldr r3, [sp, #+52]
	@comment
str r3, [sp, #+32]
	cmp r8, #0
	bne .LBB129_287	@ bb348
.LBB129_284:	@ bb347.bb407_crit_edge
	mov r8, #1
.LBB129_285:	@ bb407
	cmp r9, #0
	bne .LBB129_335	@ bb409
.LBB129_286:	@ bb408
	ldr r0, [sp, #+28]
	emit_nops_till_bundle_end
	bl binary_op_error
	ldr r7, .LCPI129_0
	ldr r0, [r7]
	b .LBB129_38	@ pointer_diff.exit
.LBB129_287:	@ bb348
	ldr r8, [sp, #+20]
	ldr r3, [r8, #+4]
	ldrb r4, [r3, #+9]
	ldrb r2, [r3, #+8]!
	ldr r5, [sp, #+24]
	ldr r3, [r5, #+4]
	ldrb r6, [r3, #+9]
	ldrb r2, [r3, #+8]!
	add r1, sp, #68
	ldr r0, [sp, #+32]
	emit_nops_till_bundle_end
	bl get_narrower
	mov r11, r0
	add r1, sp, #72
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl get_narrower
	@comment
str r5, [sp, #+52]
	@comment
str r8, [sp, #+56]
	mov r8, #1, 18 @ 16384
	and r4, r8, r4, lsl #8
	and r8, r8, r6, lsl #8
	mov r5, r0
	b .LBB129_289	@ bb358
.LBB129_288:	@ bb357
	ldr r3, [sp, #+24]
	@comment
str r3, [sp, #+52]
.LBB129_289:	@ bb358
	ldr r0, [sp, #+24]
	ldrb r3, [r0, #+8]
	sub r3, r3, #105
	and r3, r3, #255
	cmp r3, #3
	bhs .LBB129_292	@ bb361
.LBB129_290:	@ bb359
	ldr r3, [r0, #+16]
	@comment
str r3, [sp, #+24]
	ldr r3, [r3, #+4]
	ldr r2, [r0, #+4]
	cmp r2, r3
	beq .LBB129_288	@ bb357
	b .LBB129_292	@ bb361
.LBB129_291:	@ bb360
	ldr r3, [sp, #+20]
	@comment
str r3, [sp, #+56]
.LBB129_292:	@ bb361
	ldr r3, [sp, #+20]
	ldrb r2, [r3, #+8]
	sub r2, r2, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB129_294	@ bb363
.LBB129_293:	@ bb362
	ldr r2, [r3, #+16]
	@comment
str r2, [sp, #+20]
	ldr r2, [r2, #+4]
	ldr r3, [r3, #+4]
	cmp r3, r2
	beq .LBB129_291	@ bb360
.LBB129_294:	@ bb363
	mov r3, #1
	mov r2, #0
	cmp r8, #0
	mov r1, #0
	moveq r1, r3
	cmp r4, #0
	moveq r2, r3
	eor r3, r2, r1
	ldrb r2, [r9, #+9]
	tst r2, #64
	beq .LBB129_312	@ bb383
.LBB129_295:	@ bb363
	teq r3, #1
	bne .LBB129_312	@ bb383
.LBB129_296:	@ bb369
	cmp r8, #0
	ldreqb r3, [r0, #+8]
	cmpeq r3, #25
	beq .LBB129_299	@ bb371
	b .LBB129_300	@ bb372
	.align	4
.LBB129_297:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_54:
 	.long	.str49878

.LBB129_298:	@ bb370
	.align	4
.LBB129_299:	@ bb371
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	bge .LBB129_312	@ bb383
.LBB129_300:	@ bb372
	cmp r4, #0
	ldreq r0, [sp, #+56]
	ldreqb r3, [r0, #+8]
	cmpeq r3, #25
	beq .LBB129_302	@ bb374
	b .LBB129_303	@ bb375
.LBB129_301:	@ bb373
.LBB129_302:	@ bb374
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	bge .LBB129_312	@ bb383
.LBB129_303:	@ bb375
	sub r3, r10, #99
	cmp r3, #1
	bhi .LBB129_311	@ bb382
.LBB129_304:	@ bb376
	cmp r8, #0
	ldreq r8, [sp, #+56]
	ldreqb r3, [r8, #+8]
	cmpeq r3, #25
	beq .LBB129_306	@ bb378
	b .LBB129_307	@ bb379
.LBB129_305:	@ bb377
.LBB129_306:	@ bb378
	mov r0, r9
	emit_nops_till_bundle_end
	bl signed_type
	mov r1, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB129_312	@ bb383
.LBB129_307:	@ bb379
	cmp r4, #0
	ldreq r8, [sp, #+52]
	ldreqb r3, [r8, #+8]
	cmpeq r3, #25
	beq .LBB129_309	@ bb381
	b .LBB129_311	@ bb382
.LBB129_308:	@ bb380
.LBB129_309:	@ bb381
	mov r0, r9
	emit_nops_till_bundle_end
	bl signed_type
	mov r1, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	ldreq r0, .LCPI129_34
	emit_nops_till_bundle_end
	bleq warning
	b .LBB129_312	@ bb383
	.align	4
.LBB129_310:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_55:
 	.long	.str50879

	.align	4
.LBB129_311:	@ bb382
	ldr r0, .LCPI129_34
	emit_nops_till_bundle_end
	bl warning
.LBB129_312:	@ bb383
	ldrb r8, [r11, #+8]
	mov r3, #1
	mov r2, #0
	cmp r8, #88
	mov r1, #0
	moveq r1, r3
	ldrb r0, [r5, #+8]
	cmp r0, #88
	moveq r2, r3
	eor r3, r2, r1
	teq r3, #1
	bne .LBB129_284	@ bb347.bb407_crit_edge
.LBB129_313:	@ bb387
	and r8, r8, #255
	cmp r8, #88
	beq .LBB129_390	@ bb388
.LBB129_314:	@ bb389
	ldr r0, [r5, #+16]
	add r1, sp, #72
	emit_nops_till_bundle_end
	bl get_narrower
	mov r5, r0
	mov r0, r11
.LBB129_315:	@ bb390
	ldrb r8, [r0, #+8]
	cmp r8, #25
	ldrneb r3, [r5, #+8]
	cmpne r3, #25
	bne .LBB129_322	@ bb402
.LBB129_316:	@ bb391
.LBB129_317:	@ bb392
	and r3, r8, #255
	cmp r3, #25
	mov r2, r0
	moveq r2, r5
	ldr r2, [r2, #+4]
	ldrb r2, [r2, #+28]
	cmp r3, #25
	moveq r5, r0
	ldr r5, [r5, #+12]
	ldrb r3, [r9, #+28]
	cmp r3, r2
	bls .LBB129_284	@ bb347.bb407_crit_edge
.LBB129_318:	@ bb392
	cmp r2, #31
	bgt .LBB129_284	@ bb347.bb407_crit_edge
.LBB129_319:	@ bb399
	and r8, r8, #255
	add r3, sp, #72
	add r1, sp, #68
	cmp r8, #25
	moveq r1, r3
	ldr r8, [r1]
	cmp r8, #0
	mvnne r8, #0
	andne r5, r5, r8, lsl r2
	cmpne r5, r8, lsl r2
	bne .LBB129_321	@ bb401
	b .LBB129_284	@ bb347.bb407_crit_edge
.LBB129_320:	@ bb400
.LBB129_321:	@ bb401
	ldr r0, .LCPI129_35
	b .LBB129_329	@ bb406
.LBB129_322:	@ bb402
	ldr r8, [sp, #+68]
	cmp r8, #0
	ldrne r8, [sp, #+72]
	cmpne r8, #0
	bne .LBB129_326	@ bb404
	b .LBB129_284	@ bb347.bb407_crit_edge
	.align	4
.LBB129_323:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_56:
 	.long	extra_warnings

.LBB129_324:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_57:
 	.long	.str51880

.LBB129_325:	@ bb403
	.align	4
.LBB129_326:	@ bb404
	ldr r8, [r0, #+4]
	ldrb r8, [r8, #+28]
	ldrb r3, [r9, #+28]
	cmp r8, r3
	ldrlo r8, [r5, #+4]
	ldrlob r8, [r8, #+28]
	andlo r3, r3, #255
	cmplo r8, r3
	blo .LBB129_328	@ bb406
	b .LBB129_284	@ bb347.bb407_crit_edge
.LBB129_327:	@ bb405
.LBB129_328:	@ bb406
	ldr r0, .LCPI129_36
.LBB129_329:	@ bb406
	emit_nops_till_bundle_end
	bl warning
	b .LBB129_284	@ bb347.bb407_crit_edge
	.align	4
.LBB129_330:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_58:
 	.long	signed_char_type_node

.LBB129_331:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_59:
 	.long	unsigned_char_type_node

.LBB129_332:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_60:
 	.long	short_integer_type_node

.LBB129_333:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_61:
 	.long	long_integer_type_node

.LBB129_334:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_62:
 	.long	long_long_integer_type_node

	.align	4
.LBB129_335:	@ bb409
	cmp r8, #0
	bne .LBB129_340	@ bb414
.LBB129_336:	@ bb410
	ldr r3, [sp, #+32]
	ldr r3, [r3, #+4]
	cmp r3, r9
	beq .LBB129_338	@ bb412
.LBB129_337:	@ bb411
	mov r0, r9
	ldr r1, [sp, #+32]
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [sp, #+32]
.LBB129_338:	@ bb412
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+4]
	cmp r3, r9
	beq .LBB129_340	@ bb414
.LBB129_339:	@ bb413
	mov r0, r9
	ldr r1, [sp, #+36]
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [sp, #+36]
.LBB129_340:	@ bb414
	ldr r3, [sp, #+4]
	cmp r3, #0
	mov r1, r3
	moveq r1, r9
	mov r0, r10
	ldr r2, [sp, #+32]
	ldr r3, [sp, #+36]
	emit_nops_till_bundle_end
	bl build
	mov r4, r0
	emit_nops_till_bundle_end
	bl fold
	mov r1, r0
	cmp r0, r4
	bne .LBB129_342	@ bb434
.LBB129_341:	@ bb417
	ldrb r3, [r1, #+10]
	mov r2, r1
	ldrb r0, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r0, r0, r12, lsl #8
	orr r3, r0, r3, lsl #16
	bic r3, r3, #2, 24 @ 512
	ldr r0, [sp, #+36]
	ldrb r12, [r0, #+8]!
	ldrb r0, [r0, #+1]
	ldr r12, [sp, #+32]
	ldrb lr, [r12, #+8]!
	ldrb r12, [r12, #+1]
	strb r3, [r2]
	mov lr, r3, lsr #24
	strb lr, [r2, #+3]
	and r0, r12, r0
	mov r12, #2, 24 @ 512
	and r0, r12, r0, lsl #8
	orr r0, r3, r0
	mov r0, r0, lsr #8
	strb r0, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r1, #+10]
.LBB129_342:	@ bb434
	cmp r7, #0
	bne .LBB129_391	@ bb435
.LBB129_343:	@ bb434.bb437_crit_edge
	mov r0, r1
	b .LBB129_38	@ pointer_diff.exit
	.align	4
.LBB129_344:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_63:
 	.long	long_long_unsigned_type_node

	.align	4
.LBB129_345:	@ entry.bb3_crit_edge
	ldr r0, [sp, #+20]
	ldr r4, [sp, #+24]
	b .LBB129_2	@ bb3
.LBB129_346:	@ bb13
	ldr r3, .LCPI129_0
	ldr r0, [r3]
	b .LBB129_38	@ pointer_diff.exit
.LBB129_347:	@ bb44.bb256_crit_edge
	mov r10, #67
	mov r4, #0
	mov r3, #1
	mov r5, r4
	mov r6, r4
	mov r7, r4
	@comment
str r4, [sp, #+4]
	mov r8, r4
	mov r9, r4
.LBB129_348:	@ bb256
	ldr r2, [sp, #+16]
	sub r2, r2, #7
	cmp r2, #3
	bhs .LBB129_285	@ bb407
.LBB129_349:	@ bb257
	ldr r2, [sp, #+12]
	sub r2, r2, #7
	cmp r2, #2
	bhi .LBB129_285	@ bb407
.LBB129_350:	@ bb258
	orr r3, r5, r3
	orr r3, r3, r6
	cmp r3, #0
	beq .LBB129_352	@ bb262
.LBB129_351:	@ bb261
	ldr r0, [sp, #+8]
	ldr r1, [sp]
	emit_nops_till_bundle_end
	bl common_type
	mov r9, r0
.LBB129_352:	@ bb262
	ldr r3, [sp, #+12]
	and r3, r3, #255
	cmp r3, #9
	beq .LBB129_256	@ bb321
.LBB129_353:	@ bb262
	ldr r3, [sp, #+16]
	and r3, r3, #255
	cmp r3, #9
	cmpne r6, #0
	bne .LBB129_355	@ bb266
	b .LBB129_256	@ bb321
.LBB129_354:	@ bb262
.LBB129_355:	@ bb266
	add r1, sp, #40
	ldr r7, [sp, #+32]
	mov r0, r7
	emit_nops_till_bundle_end
	bl get_narrower
	mov r11, r0
	@comment
str r11, [sp, #+12]
	add r1, sp, #44
	ldr r0, [sp, #+36]
	emit_nops_till_bundle_end
	bl get_narrower
	ldr r3, [r11, #+4]
	ldrb r3, [r3, #+28]
	ldrb r2, [r9, #+9]
	mov r1, #1
	and r11, r1, r2, lsr #6
	ldr r7, [r7, #+4]
	ldrb r2, [r7, #+28]
	@comment
str r0, [sp, #+16]
	cmp r2, r3
	bne .LBB129_358	@ bb280
.LBB129_356:	@ bb266
	cmp r7, r9
	ldrneb r3, [r7, #+9]
	ldrneb r2, [r7, #+8]!
	movne r7, #1
	andne r7, r7, r3, lsr #6
	@comment
strne r7, [sp, #+40]
.LBB129_357:	@ bb273
.LBB129_358:	@ bb280
	ldr r7, [sp, #+16]
	ldr r7, [r7, #+4]
	ldrb r7, [r7, #+28]
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+4]
	ldrb r2, [r3, #+28]
	cmp r2, r7
	bne .LBB129_361	@ bb289
.LBB129_359:	@ bb280
	cmp r3, r9
	ldrneb r7, [r3, #+9]
	ldrneb r2, [r3, #+8]!
	movne r3, #1
	andne r7, r3, r7, lsr #6
	@comment
strne r7, [sp, #+44]
.LBB129_360:	@ bb282
.LBB129_361:	@ bb289
	ldr r7, [sp, #+40]
	cmn r6, #1
	moveq r11, r7
	ldr r3, [sp, #+12]
	ldr r0, [r3, #+4]
	ldrb r3, [r0, #+28]
	ldrb r2, [r9, #+28]
	cmp r3, r2
	bhs .LBB129_219	@ bb302
.LBB129_362:	@ bb292
	ldr r1, [sp, #+16]
	ldr r1, [r1, #+4]
	ldrb r12, [r1, #+28]
	and r3, r3, #255
	cmp r12, r3
	ldreq r3, [sp, #+44]
	cmpeq r7, r3
	beq .LBB129_364	@ bb294
	b .LBB129_219	@ bb302
.LBB129_363:	@ bb293
.LBB129_364:	@ bb294
	cmp r7, #0
	bne .LBB129_366	@ bb301
.LBB129_365:	@ bb294
	cmp r11, #0
	bne .LBB129_219	@ bb302
.LBB129_366:	@ bb301
	emit_nops_till_bundle_end
	bl common_type
	ldrb r2, [r0, #+8]
	ldr r7, [sp, #+40]
	cmp r2, #12
	bhi .LBB129_368	@ bb301.bb321_crit_edge
.LBB129_367:	@ bb301
	mov r11, #1
	mov r3, #114, 26 @ 7296
	tst r3, r11, lsl r2
	bne .LBB129_210	@ bb5.i501
.LBB129_368:	@ bb301.bb321_crit_edge
	mov r7, r9
	mov r9, r0
	b .LBB129_256	@ bb321
.LBB129_369:	@ bb61.bb75_crit_edge
	mov r9, #0
	b .LBB129_57	@ bb75
.LBB129_370:	@ bb122
	ldr r0, .LCPI129_9
	emit_nops_till_bundle_end
	bl warning
.LBB129_371:	@ bb120.bb128_crit_edge
	mov r4, #0
	b .LBB129_81	@ bb128
.LBB129_372:	@ bb138
	ldr r0, .LCPI129_12
	emit_nops_till_bundle_end
	bl warning
	b .LBB129_99	@ bb142
.LBB129_373:	@ bb152
	ldr r0, .LCPI129_14
	emit_nops_till_bundle_end
	bl warning
	b .LBB129_99	@ bb142
.LBB129_374:	@ bb205.bb256_crit_edge
	mov r3, #0
	mov r6, #1
	mov r4, r3
	mov r5, r3
	b .LBB129_12	@ bb14.bb256_crit_edge
.LBB129_375:	@ bb11.i509
	ldr r3, .LCPI129_27
	b .LBB129_212	@ bb6.i504
.LBB129_376:	@ bb16.i514
	ldr r3, .LCPI129_29
	b .LBB129_212	@ bb6.i504
.LBB129_377:	@ bb21.i519
	ldr r3, .LCPI129_31
	b .LBB129_212	@ bb6.i504
.LBB129_378:	@ bb11.i482
	ldr r2, .LCPI129_27
	b .LBB129_227	@ bb6.i477
.LBB129_379:	@ bb16.i487
	ldr r2, .LCPI129_29
	b .LBB129_227	@ bb6.i477
.LBB129_380:	@ bb21.i492
	ldr r2, .LCPI129_31
	b .LBB129_227	@ bb6.i477
.LBB129_381:	@ bb313.bb321_crit_edge
	mov r7, r9
	b .LBB129_256	@ bb321
.LBB129_382:	@ bb11.i455
	ldr r2, .LCPI129_27
	b .LBB129_244	@ bb6.i450
.LBB129_383:	@ bb16.i460
	ldr r2, .LCPI129_29
	b .LBB129_244	@ bb6.i450
.LBB129_384:	@ bb21.i465
	ldr r2, .LCPI129_31
	b .LBB129_244	@ bb6.i450
.LBB129_385:	@ bb331.bb344_crit_edge
	mov r7, r9
	b .LBB129_281	@ bb344
.LBB129_386:	@ bb11.i
	ldr r7, .LCPI129_27
	b .LBB129_270	@ bb6.i
.LBB129_387:	@ bb16.i
	ldr r7, .LCPI129_29
	b .LBB129_270	@ bb6.i
.LBB129_388:	@ bb21.i
	ldr r7, .LCPI129_31
	b .LBB129_270	@ bb6.i
.LBB129_389:	@ signed_or_unsigned_type.exit.bb344_crit_edge
	mov r8, #1
	mov r7, r9
	mov r9, r4
	b .LBB129_281	@ bb344
.LBB129_390:	@ bb388
	ldr r0, [r11, #+16]
	add r1, sp, #68
	emit_nops_till_bundle_end
	bl get_narrower
	b .LBB129_315	@ bb390
.LBB129_391:	@ bb435
	mov r0, r7
	emit_nops_till_bundle_end
	bl convert
	b .LBB129_38	@ pointer_diff.exit
.LBB129_392:	@ bb39
	mov r0, #57
	b .LBB129_16	@ bb19
	.align	4
.LBB129_393:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_8:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_9:
 	.long	.str40869

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_12:
 	.long	.str42871

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_14:
 	.long	.str44873

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_23:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_26:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_27:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_28:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_29:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_30:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_31:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_32:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_33:
 	.long	long_long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_34:
 	.long	.str52881

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_35:
 	.long	.str53882

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI129_36:
 	.long	.str54883

	.size build_binary_op, .-build_binary_op


	.globl	default_conversion
	.align	4
default_conversion:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldrb r3, [r0, #+8]
	ldr r2, [r0, #+4]
	ldrb r1, [r2, #+8]
	cmp r3, #31
	beq .LBB130_86	@ bb
.LBB130_1:	@ bb1
	ldr r12, .LCPI130_0
	ldr r12, [r12]
	cmp r12, #0
	beq .LBB130_16	@ bb7.preheader
.LBB130_2:	@ bb2
	and r3, r3, #255
	cmp r3, #33
	bne .LBB130_16	@ bb7.preheader
.LBB130_3:	@ bb2
	and r3, r1, #255
	cmp r3, #18
	beq .LBB130_16	@ bb7.preheader
.LBB130_4:	@ bb5
	ldrb r2, [r0, #+9]
	mov r3, r0
	ldrb r12, [r3, #+8]!
	orr r2, r12, r2, lsl #8
	ldrb r12, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r12, lsl #8
	orr r2, r2, r3, lsl #16
	tst r2, #2, 14 @ 524288
	bne .LBB130_15	@ decl_constant_value.exit
.LBB130_5:	@ bb.i119
	ldr r3, .LCPI130_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB130_15	@ decl_constant_value.exit
.LBB130_6:	@ bb4.i
	ldr r3, .LCPI130_2
	ldr r3, [r3]
	cmp r3, #0
	tsteq r2, #1, 20 @ 4096
	beq .LBB130_8	@ bb10.i
	b .LBB130_15	@ decl_constant_value.exit
.LBB130_7:	@ bb5.i
.LBB130_8:	@ bb10.i
	tst r2, #2, 20 @ 8192
	beq .LBB130_15	@ decl_constant_value.exit
.LBB130_9:	@ bb15.i
	ldrb r2, [r0, #+31]
	tst r2, #16
	bne .LBB130_15	@ decl_constant_value.exit
.LBB130_10:	@ bb20.i
	ldr r2, [r0, #+48]
	cmp r2, #0
	ldrneb r3, [r2, #+8]
	cmpne r3, #0
	bne .LBB130_12	@ bb22.i
	b .LBB130_15	@ decl_constant_value.exit
.LBB130_11:	@ bb21.i
.LBB130_12:	@ bb22.i
	ldrb r3, [r2, #+9]
	tst r3, #2
	ldrneb r3, [r2, #+8]
	cmpne r3, #43
	bne .LBB130_14	@ bb28.i
	b .LBB130_15	@ decl_constant_value.exit
.LBB130_13:	@ bb27.i
.LBB130_14:	@ bb28.i
	ldrb r3, [r0, #+28]
	cmp r3, #26
	moveq r2, r0
	mov r0, r2
.LBB130_15:	@ decl_constant_value.exit
	ldr r2, [r0, #+4]
.LBB130_16:	@ bb7.preheader
	mov r4, r0
	b .LBB130_18	@ bb7
.LBB130_17:	@ bb6
	ldr r4, [r4, #+16]
.LBB130_18:	@ bb7
	ldrb r3, [r4, #+8]
	cmp r3, #107
	beq .LBB130_17	@ bb6
.LBB130_19:	@ bb7
	and r0, r3, #255
	cmp r0, #106
	ldreq r0, [r4, #+16]
	ldreq r0, [r0, #+4]
	ldreq r12, [r4, #+4]
	cmpeq r0, r12
	beq .LBB130_17	@ bb6
.LBB130_20:	@ bb9
.LBB130_21:	@ bb10
	and r0, r1, #255
	cmp r0, #10
	bne .LBB130_27	@ bb23
.LBB130_22:	@ bb11
	ldr r3, .LCPI130_3
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB130_24	@ bb13
.LBB130_23:	@ bb12
	ldr r3, .LCPI130_4
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	ldrb r1, [r2, #+28]
	cmp r1, r3
	blo .LBB130_25	@ bb18
.LBB130_24:	@ bb13
	ldrb r3, [r2, #+9]
	tst r3, #64
	bne .LBB130_87	@ bb13.bb19_crit_edge
.LBB130_25:	@ bb18
	mov r1, #0
.LBB130_26:	@ bb19
	ldr r3, .LCPI130_4
	ldr r3, [r3]
	ldrb r0, [r3, #+28]
	ldrb r12, [r2, #+28]
	cmp r12, r0
	movhi r3, r2
	ldrb r0, [r3, #+28]
	emit_nops_till_bundle_end
	bl type_for_size
	b .LBB130_38	@ bb36
.LBB130_27:	@ bb23
	ldrb r0, [r2, #+8]
	cmp r0, #7
	bne .LBB130_41	@ bb38
.LBB130_28:	@ bb24
	ldr r0, .LCPI130_5
	ldr r0, [r0]
	ldr r12, [r2, #+64]
	cmp r12, r0
	ldrne r0, .LCPI130_6
	ldrne r0, [r0]
	cmpne r12, r0
	bne .LBB130_30	@ bb26
	b .LBB130_33	@ bb29
.LBB130_29:	@ bb25
.LBB130_30:	@ bb26
	ldr r0, .LCPI130_7
	ldr r0, [r0]
	cmp r12, r0
	ldrne r0, .LCPI130_8
	ldrne r0, [r0]
	cmpne r12, r0
	bne .LBB130_32	@ bb28
	b .LBB130_33	@ bb29
.LBB130_31:	@ bb27
.LBB130_32:	@ bb28
	ldr r0, .LCPI130_9
	ldr r0, [r0]
	cmp r12, r0
	bne .LBB130_41	@ bb38
.LBB130_33:	@ bb29
	ldrb r3, [r2, #+9]
	tst r3, #64
	beq .LBB130_40	@ bb37
.LBB130_34:	@ bb34
	ldr r3, .LCPI130_3
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB130_36	@ bb36
.LBB130_35:	@ bb35
	ldr r3, .LCPI130_4
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	ldrb r2, [r2, #+28]
	cmp r2, r3
	bne .LBB130_40	@ bb37
.LBB130_36:	@ bb36
	ldr r3, .LCPI130_10
.LBB130_37:	@ bb36
	ldr r0, [r3]
.LBB130_38:	@ bb36
	mov r1, r4
.LBB130_39:	@ bb36
	emit_nops_till_bundle_end
	bl convert
	b .LBB130_85	@ bb113
.LBB130_40:	@ bb37
	ldr r3, .LCPI130_4
	b .LBB130_37	@ bb36
.LBB130_41:	@ bb38
	ldr r0, .LCPI130_3
	ldr r0, [r0]
	cmp r0, #0
	beq .LBB130_44	@ bb42
.LBB130_42:	@ bb39
	ldr r0, .LCPI130_11
	ldr r0, [r0]
	cmp r0, #0
	ldreq r0, .LCPI130_12
	ldreq r0, [r0]
	ldreq r12, [r2, #+64]
	cmpeq r12, r0
	beq .LBB130_88	@ bb41
.LBB130_43:	@ bb40
.LBB130_44:	@ bb42
	and r0, r1, #255
	cmp r0, #23
	beq .LBB130_48	@ bb45
.LBB130_45:	@ bb42
	and r0, r1, #255
	cmp r0, #18
	beq .LBB130_49	@ bb47
.LBB130_46:	@ bb42
	and r3, r1, #255
	cmp r3, #6
	bne .LBB130_84	@ bb113
.LBB130_47:	@ bb43
	ldr r0, .LCPI130_14
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI130_15
	ldr r0, [r3]
	b .LBB130_85	@ bb113
.LBB130_48:	@ bb45
	mov r0, #110
	mov r2, #0
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_unary_op
	b .LBB130_85	@ bb113
.LBB130_49:	@ bb47
	ldr r1, .LCPI130_16
	ldr r1, [r1]
	and r3, r3, #255
	ldr r3, [r1, +r3, lsl #2]
	ldrb r3, [r3]
	ldr r0, [r2, #+4]
	cmp r3, #100
	andne r3, r3, #255
	cmpne r3, #114
	bne .LBB130_89	@ bb47.bb62_crit_edge
.LBB130_50:	@ bb47
.LBB130_51:	@ bb51
	ldrb r3, [r4, #+9]
	mov r12, r4
	ldrb r1, [r12, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r12, #+3]
	ldrb r12, [r12, #+2]
	orr r12, r12, r1, lsl #8
	orr r3, r3, r12, lsl #16
	mov r1, #1
	and r12, r1, r3, lsr #12
	and r3, r1, r3, lsr #13
.LBB130_52:	@ bb62
	ldrb r1, [r2, #+9]
	ldrb lr, [r2, #+8]!
	orr r1, lr, r1, lsl #8
	ldrb lr, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, lr, lsl #8
	orr r2, r1, r2, lsl #16
	tst r2, #2, 20 @ 8192
	bne .LBB130_55	@ bb76
.LBB130_53:	@ bb67
	and r1, r2, #1, 20 @ 4096
	orr r1, r1, r3
	mov lr, #1
	mov r5, #0
	cmp r1, #0
	moveq r5, lr
	cmp r12, #0
	teqeq r5, #1
	beq .LBB130_56	@ bb89
.LBB130_54:	@ bb67
.LBB130_55:	@ bb76
	mov lr, #1
	mov r5, #0
	cmp r3, #0
	mov r3, #0
	movne r3, lr
	orr r3, r3, r2, lsr #13
	and r1, r3, #1
	cmp r12, #0
	movne r5, lr
	orr r3, r5, r2, lsr #12
	and r2, r3, #1
	emit_nops_till_bundle_end
	bl c_build_type_variant
.LBB130_56:	@ bb89
	ldrb r3, [r4, #+8]
	cmp r3, #39
	beq .LBB130_64	@ bb90
.LBB130_57:	@ bb89
	and r2, r3, #255
	cmp r2, #44
	beq .LBB130_65	@ bb92
.LBB130_58:	@ bb89.tailrecurse.i_crit_edge
	mov r2, #1
	mov r1, #142, 28 @ 2272
	orr r1, r1, #1, 18 @ 16384
	mov r12, #2, 24 @ 512
	mov lr, r4
.LBB130_59:	@ tailrecurse.i
	ldrb r5, [lr, #+8]
	cmp r5, #114
	bgt .LBB130_73	@ tailrecurse.i
.LBB130_60:	@ tailrecurse.i
	cmp r5, #27
	bgt .LBB130_66	@ tailrecurse.i
.LBB130_61:	@ tailrecurse.i
	cmp r5, #0
	bne .LBB130_70	@ bb94
.LBB130_62:	@ bb2.i
	ldr r2, [lr, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #16
	beq .LBB130_70	@ bb94
.LBB130_63:	@ bb2.i
	and r2, r2, #255
	cmp r2, #23
	beq .LBB130_70	@ bb94
	b .LBB130_93	@ bb101
.LBB130_64:	@ bb90
	ldr r0, [r0, #+36]
	ldr r1, [r4, #+16]
	b .LBB130_39	@ bb36
.LBB130_65:	@ bb92
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl default_conversion
	mov r3, r0
	ldr r1, [r3, #+4]
	ldr r2, [r4, #+16]
	mov r0, #44
	emit_nops_till_bundle_end
	bl build
	b .LBB130_85	@ bb113
.LBB130_66:	@ tailrecurse.i
	sub r5, r5, #28
	cmp r5, #14
	bhi .LBB130_70	@ bb94
.LBB130_67:	@ tailrecurse.i
	tst r1, r2, lsl r5
	bne .LBB130_62	@ bb2.i
.LBB130_68:	@ tailrecurse.i
	tst r2, r2, lsl r5
	bne .LBB130_93	@ bb101
.LBB130_69:	@ tailrecurse.i
	tst r12, r2, lsl r5
	bne .LBB130_74	@ bb.i
.LBB130_70:	@ bb94
	and r3, r3, #255
	cmp r3, #43
	bne .LBB130_72	@ bb100
.LBB130_71:	@ bb95
	ldrb r3, [r4, #+10]
	tst r3, #4
	bne .LBB130_93	@ bb101
.LBB130_72:	@ bb100
	ldr r0, .LCPI130_17
	emit_nops_till_bundle_end
	bl error
	ldr r0, .LCPI130_15
	ldr r0, [r0]
	b .LBB130_85	@ bb113
.LBB130_73:	@ tailrecurse.i
	sub r5, r5, #115
	cmp r5, #1
	bhi .LBB130_70	@ bb94
.LBB130_74:	@ bb.i
	ldr lr, [lr, #+16]
	ldrb r5, [lr, #+8]
	cmp r5, #114
	bgt .LBB130_80	@ bb.i
.LBB130_75:	@ bb.i
	cmp r5, #27
	ble .LBB130_90	@ bb.i
.LBB130_76:	@ bb.i
	sub r5, r5, #28
	cmp r5, #14
	bhi .LBB130_70	@ bb94
.LBB130_77:	@ bb.i
	tst r1, r2, lsl r5
	bne .LBB130_91	@ bb2.i.i
.LBB130_78:	@ bb.i
	tst r2, r2, lsl r5
	bne .LBB130_93	@ bb101
.LBB130_79:	@ bb.i
	tst r12, r2, lsl r5
	beq .LBB130_70	@ bb94
	b .LBB130_81	@ bb.i.i
.LBB130_80:	@ bb.i
	sub r5, r5, #115
	cmp r5, #1
	bhi .LBB130_70	@ bb94
.LBB130_81:	@ bb.i.i
	ldr lr, [lr, #+16]
	b .LBB130_59	@ tailrecurse.i
.LBB130_82:	@ bb104
	mov r0, r4
	emit_nops_till_bundle_end
	bl staticp
	ldrb r4, [r5, #+10]
	mov r3, r5
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r4, r4, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r2, r2, r1, lsl #8
	orr r4, r2, r4, lsl #16
	bic r4, r4, #3, 24 @ 768
	strb r4, [r3]
	mov r2, r4, lsr #24
	strb r2, [r3, #+3]
	mov r2, #2, 24 @ 512
	and r2, r2, r0, lsl #9
	orr r2, r4, r2
	mov r2, r2, lsr #8
	strb r2, [r3, #+1]
	mov r4, r4, lsr #16
	strb r4, [r5, #+10]
	mov r0, r5
	b .LBB130_85	@ bb113
.LBB130_83:	@ bb111
	mov r0, #110
	mov r2, #1
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_unary_op
	mov r1, r0
	mov r0, r5
	b .LBB130_39	@ bb36
.LBB130_84:	@ bb113
	mov r0, r4
.LBB130_85:	@ bb113
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB130_86:	@ bb
	ldr r0, [r0, #+48]
	b .LBB130_16	@ bb7.preheader
.LBB130_87:	@ bb13.bb19_crit_edge
	mov r1, #1
	b .LBB130_26	@ bb19
.LBB130_88:	@ bb41
	ldr r3, .LCPI130_13
	b .LBB130_37	@ bb36
.LBB130_89:	@ bb47.bb62_crit_edge
	mov r3, #0
	mov r12, r3
	b .LBB130_52	@ bb62
.LBB130_90:	@ bb.i
	cmp r5, #0
	bne .LBB130_70	@ bb94
.LBB130_91:	@ bb2.i.i
	ldr lr, [lr, #+4]
	ldrb lr, [lr, #+8]
	cmp lr, #16
	andne lr, lr, #255
	cmpne lr, #23
	bne .LBB130_93	@ bb101
	b .LBB130_70	@ bb94
.LBB130_92:	@ bb2.i.i
.LBB130_93:	@ bb101
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldrb r3, [r4, #+8]
	mov r5, r0
	cmp r3, #33
	bne .LBB130_83	@ bb111
.LBB130_94:	@ bb102
	mov r0, #110
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	mov r5, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl mark_addressable
	cmp r0, #0
	bne .LBB130_82	@ bb104
.LBB130_95:	@ bb103
	ldr r5, .LCPI130_15
	ldr r0, [r5]
	b .LBB130_85	@ bb113
	.align	4
.LBB130_96:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_0:
 	.long	optimize

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_1:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_2:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_3:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_4:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_5:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_6:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_7:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_8:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_9:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_10:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_11:
 	.long	flag_allow_single_precision

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_12:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_13:
 	.long	double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_14:
 	.long	.str69898

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_15:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_16:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI130_17:
 	.long	.str70899

	.size default_conversion, .-default_conversion


	.align	4
pointer_int_sum:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr r4, [r1, #+4]
	ldr r3, [r4, #+4]
	ldrb r12, [r3, #+8]
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r12, #23
	beq .LBB131_6	@ bb5
.LBB131_1:	@ entry
	and r2, r12, #255
	cmp r2, #6
	bne .LBB131_9	@ bb9
.LBB131_2:	@ bb
	ldr r3, .LCPI131_0
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI131_1
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB131_5	@ bb3
.LBB131_3:	@ bb1
.LBB131_4:	@ bb2
	ldr r0, .LCPI131_2
	emit_nops_till_bundle_end
	bl pedwarn
.LBB131_5:	@ bb3
	ldr r3, .LCPI131_3
	ldr r0, [r3]
	b .LBB131_10	@ bb10
.LBB131_6:	@ bb5
	ldr r3, .LCPI131_0
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI131_1
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB131_5	@ bb3
.LBB131_7:	@ bb6
.LBB131_8:	@ bb7
	ldr r0, .LCPI131_4
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB131_5	@ bb3
.LBB131_9:	@ bb9
	mov r0, r3
	emit_nops_till_bundle_end
	bl c_size_in_bytes
.LBB131_10:	@ bb10
	mov r8, r0
	ldrb r3, [r5, #+8]
	sub r3, r3, #56
	and r3, r3, #255
	cmp r3, #2
	bhs .LBB131_20	@ bb38
.LBB131_11:	@ bb11
	ldrb r3, [r5, #+9]
	tst r3, #2
	bne .LBB131_20	@ bb38
.LBB131_12:	@ bb15
	ldr r1, [r5, #+20]
	ldrb r3, [r1, #+9]
	tst r3, #2
	ldrneb r3, [r8, #+9]
	tstne r3, #2
	bne .LBB131_14	@ bb25
	b .LBB131_20	@ bb38
.LBB131_13:	@ bb20
.LBB131_14:	@ bb25
	ldr r3, [r5, #+16]
	ldr r3, [r3, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #7
	bne .LBB131_20	@ bb38
.LBB131_15:	@ bb26
	ldr r9, [r5, #+4]
	ldrb r3, [r9, #+9]
	tst r3, #64
	ldrne r3, [r6, #+4]
	ldrneb r3, [r3, #+28]
	ldrneb r2, [r9, #+28]
	cmpne r2, r3
	bne .LBB131_20	@ bb38
.LBB131_16:	@ bb31
.LBB131_17:	@ bb32
	ldrb r3, [r5, #+8]
	cmp r3, #57
	bne .LBB131_25	@ bb32.bb37_crit_edge
.LBB131_18:	@ bb33
	mov r3, #57
	mov r10, #56
	cmp r7, #56
	moveq r10, r3
.LBB131_19:	@ bb37
	mov r0, r9
	emit_nops_till_bundle_end
	bl convert
	mov r2, r0
	mov r3, #1
	mov r0, r10
	mov r1, r6
	emit_nops_till_bundle_end
	bl build_binary_op
	mov r6, r0
	ldr r1, [r5, #+16]
	mov r0, r9
	emit_nops_till_bundle_end
	bl convert
	mov r5, r0
.LBB131_20:	@ bb38
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+28]
	cmp r3, #32
	beq .LBB131_22	@ bb40
.LBB131_21:	@ bb39
	mov r0, #32
	mov r1, #0
	emit_nops_till_bundle_end
	bl type_for_size
	mov r1, r5
	emit_nops_till_bundle_end
	bl convert
	mov r5, r0
.LBB131_22:	@ bb40
	ldr r0, [r5, #+4]
	mov r1, r8
	emit_nops_till_bundle_end
	bl convert
	mov r2, r0
	mov r0, #58
	mov r3, #1
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_binary_op
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl convert
	mov r5, r0
	mov r0, r7
	mov r1, r4
	mov r2, r6
	mov r3, r5
	emit_nops_till_bundle_end
	bl build
	mov r4, r0
	emit_nops_till_bundle_end
	bl fold
	cmp r0, r4
	bne .LBB131_24	@ bb58
.LBB131_23:	@ bb41
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 24 @ 512
	ldrb r1, [r5, #+8]!
	ldrb r1, [r5, #+1]
	ldrb r12, [r6, #+8]!
	ldrb r12, [r6, #+1]
	strb r3, [r2]
	mov lr, r3, lsr #24
	strb lr, [r2, #+3]
	and r1, r12, r1
	mov r12, #2, 24 @ 512
	and r1, r12, r1, lsl #8
	orr r1, r3, r1
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
.LBB131_24:	@ bb58
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB131_25:	@ bb32.bb37_crit_edge
	mov r10, r7
	b .LBB131_19	@ bb37
	.align	4
.LBB131_26:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI131_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI131_1:
 	.long	warn_pointer_arith

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI131_2:
 	.long	.str158986

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI131_3:
 	.long	integer_one_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI131_4:
 	.long	.str159987

	.size pointer_int_sum, .-pointer_int_sum


	.globl	build_unary_op
	.align	4
build_unary_op:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	ldr r3, [r1, #+4]
	ldrb r12, [r3, #+8]
	mov r4, r1
	mov r5, r0
	cmp r12, #0
	beq .LBB132_3	@ bb
.LBB132_1:	@ entry
	and r1, r12, #255
	cmp r1, #10
	moveq r6, #7
	movne r6, r12
	b .LBB132_5	@ bb3
.LBB132_2:	@ entry.bb3_crit_edge
.LBB132_3:	@ bb
	ldr r3, .LCPI132_23
	ldr r0, [r3]
	b .LBB132_165	@ bb201
.LBB132_4:	@ bb2
.LBB132_5:	@ bb3
	cmp r5, #77
	ble .LBB132_143	@ bb3
.LBB132_6:	@ bb3
	cmp r5, #87
	ble .LBB132_146	@ bb3
.LBB132_7:	@ bb3
	cmp r5, #93
	ble .LBB132_150	@ bb3
.LBB132_8:	@ bb3
	cmp r5, #104
	ble .LBB132_154	@ bb3
.LBB132_9:	@ bb3
	sub r1, r5, #105
	cmp r1, #15
	bhi .LBB132_140	@ bb198
.LBB132_10:	@ bb3
	.set PCRELV12, (.LJTI132_0_0-(.LPCRELL12+8))
.LPCRELL12:
	add r0, pc, #PCRELV12
	ldr pc, [r0, +r1, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI132_0_0:
	.long	 .LBB132_11
	.long	 .LBB132_140
	.long	 .LBB132_140
	.long	 .LBB132_140
	.long	 .LBB132_140
	.long	 .LBB132_88
	.long	 .LBB132_140
	.long	 .LBB132_140
	.long	 .LBB132_140
	.long	 .LBB132_16
	.long	 .LBB132_19
	.long	 .LBB132_24
	.long	 .LBB132_28
	.long	 .LBB132_28
	.long	 .LBB132_28
	.long	 .LBB132_28

.text
@ JUMP TABLE END



	.align	2
.LBB132_11:	@ bb4
	sub r3, r6, #7
	cmp r3, #3
	bhs .LBB132_161	@ bb4.bb200_crit_edge
.LBB132_12:	@ bb6
	cmp r2, #0
	bne .LBB132_140	@ bb198
.LBB132_13:	@ bb7
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	mov r4, r0
	b .LBB132_140	@ bb198
.LBB132_14:	@ bb13
	cmp r2, #0
	beq .LBB132_139	@ bb14
.LBB132_15:	@ bb13.bb198_crit_edge
	mov r5, #114
	b .LBB132_140	@ bb198
	.align	2
.LBB132_16:	@ bb23
	sub r3, r6, #7
	cmp r3, #3
	blo .LBB132_12	@ bb6
.LBB132_17:	@ bb23.bb200_crit_edge
	ldr r0, .LCPI132_24
	b .LBB132_142	@ bb200
.LBB132_18:	@ bb36
	mov r0, r4
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	emit_nops_till_bundle_end
	bl invert_truthvalue
	b .LBB132_165	@ bb201
	.align	2
.LBB132_19:	@ bb37
	ldrb r5, [r4, #+8]
	cmp r5, #27
	beq .LBB132_97	@ bb38
.LBB132_20:	@ bb39
	and r12, r12, #255
	cmp r12, #9
	bne .LBB132_164	@ bb201
.LBB132_21:	@ bb40
	ldr r1, [r3, #+4]
	mov r0, #115
.LBB132_22:	@ bb40
	mov r2, r4
.LBB132_23:	@ bb40
	emit_nops_till_bundle_end
	bl build1
	emit_nops_till_bundle_end
	bl fold
	b .LBB132_165	@ bb201
	.align	2
.LBB132_24:	@ bb42
	ldrb r5, [r4, #+8]
	cmp r5, #27
	beq .LBB132_162	@ bb43
.LBB132_25:	@ bb44
	and r5, r12, #255
	cmp r5, #9
	bne .LBB132_27	@ bb46
.LBB132_26:	@ bb45
	ldr r1, [r3, #+4]
	mov r0, #116
	b .LBB132_22	@ bb40
.LBB132_27:	@ bb46
	ldr r4, .LCPI132_25
	ldr r1, [r4]
	mov r0, r3
	emit_nops_till_bundle_end
	bl convert
	b .LBB132_165	@ bb201
	.align	2
.LBB132_28:	@ bb47
	mov r0, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl unary_complex_lvalue
	cmp r0, #0
	bne .LBB132_163	@ bb47.bb201_crit_edge
.LBB132_29:	@ bb49
	cmp r6, #9
	beq .LBB132_170	@ bb50
.LBB132_30:	@ bb51
	mov r3, #1
	mov r2, #0
	cmp r6, #7
	mov r1, #0
	moveq r1, r3
	cmp r6, #13
	moveq r2, r3
	orr r3, r2, r1
	cmp r6, #8
	beq .LBB132_35	@ bb62
.LBB132_31:	@ bb51
	cmp r3, #0
	bne .LBB132_35	@ bb62
.LBB132_32:	@ bb56
	cmp r5, #118
	cmpne r5, #120
	bne .LBB132_34	@ bb56.bb200_crit_edge
	b .LBB132_141	@ bb196
.LBB132_33:	@ bb56
.LBB132_34:	@ bb56.bb200_crit_edge
	ldr r0, .LCPI132_26
	b .LBB132_142	@ bb200
.LBB132_35:	@ bb62
	ldr r7, [r4, #+4]
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl get_unwidened
	ldr r4, [r0, #+4]
	mov r8, r0
	cmp r6, #13
	bne .LBB132_50	@ bb85
.LBB132_36:	@ bb63
	ldr r6, [r7, #+4]
	ldr r3, [r6, #+16]
	cmp r3, #0
	bne .LBB132_41	@ bb71
.LBB132_37:	@ bb64
	cmp r5, #118
	cmpne r5, #120
	bne .LBB132_39	@ bb69
	b .LBB132_171	@ bb64.bb70_crit_edge
.LBB132_38:	@ bb64
.LBB132_39:	@ bb69
	ldr r1, .LCPI132_27
.LBB132_40:	@ bb70
	ldr r0, .LCPI132_28
	emit_nops_till_bundle_end
	bl error
	b .LBB132_49	@ bb84
.LBB132_41:	@ bb71
	ldr r3, .LCPI132_29
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI132_30
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB132_49	@ bb84
.LBB132_42:	@ bb72
.LBB132_43:	@ bb73
	ldrb r6, [r6, #+8]
	cmp r6, #6
	andne r6, r6, #255
	cmpne r6, #23
	bne .LBB132_49	@ bb84
.LBB132_44:	@ bb73
.LBB132_45:	@ bb77
	cmp r5, #118
	cmpne r5, #120
	bne .LBB132_47	@ bb82
	b .LBB132_172	@ bb77.bb83_crit_edge
.LBB132_46:	@ bb77
.LBB132_47:	@ bb82
	ldr r1, .LCPI132_27
.LBB132_48:	@ bb83
	ldr r0, .LCPI132_31
	emit_nops_till_bundle_end
	bl pedwarn
.LBB132_49:	@ bb84
	ldr r0, [r7, #+4]
	emit_nops_till_bundle_end
	bl c_size_in_bytes
	b .LBB132_51	@ bb86
.LBB132_50:	@ bb85
	ldr r6, .LCPI132_32
	ldr r0, [r6]
.LBB132_51:	@ bb86
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl convert
	mov r6, r0
.LBB132_52:	@ bb87
	mov r9, r8
	ldrb r8, [r9, #+8]
	sub r3, r8, #69
	cmp r3, #5
	subhs r8, r8, #105
	cmphs r8, #1
	bhi .LBB132_64	@ give_up
.LBB132_53:	@ bb87
.LBB132_54:	@ bb88
	ldr r8, .LCPI132_29
	ldr r8, [r8]
	cmp r8, #0
	ldrne r0, .LCPI132_33
	ldrne r1, .LCPI132_34
	emit_nops_till_bundle_end
	blne pedwarn
.LBB132_55:	@ bb6.i221
.LBB132_56:	@ pedantic_lvalue_warning.exit
	ldr r3, [r9, #+4]
	ldrb r2, [r3, #+8]
	ldr r8, [r9, #+16]
	ldr r1, [r8, #+4]
	ldrb r0, [r1, #+8]
	cmp r2, r0
	ldreqb r2, [r1, #+29]
	ldreqb r3, [r3, #+29]
	cmpeq r3, r2
	beq .LBB132_52	@ bb87
.LBB132_57:	@ bb89
.LBB132_58:	@ bb91
	mov r0, r9
	emit_nops_till_bundle_end
	bl stabilize_reference
	sub r7, r5, #117
	mov r9, r0
	cmp r7, #1
	mov r0, r9
	emit_nops_till_bundle_end
	blhi save_expr
	b .LBB132_60	@ bb94
.LBB132_59:	@ bb93
.LBB132_60:	@ bb94
	mov r7, r0
	cmp r5, #118
	cmpne r5, #120
	bne .LBB132_62	@ bb99
	b .LBB132_174	@ bb94.bb100_crit_edge
.LBB132_61:	@ bb94
.LBB132_62:	@ bb99
	mov r0, #57
.LBB132_63:	@ bb100
	mov r1, r4
	mov r2, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl build
	mov r2, r0
	ldrb r6, [r2, #+10]
	mov r4, r2
	ldrb r5, [r4, #+8]!
	ldrb r3, [r4, #+3]
	orr r6, r6, r3, lsl #8
	ldrb r3, [r4, #+1]
	orr r3, r5, r3, lsl #8
	orr r6, r3, r6, lsl #16
	orr r6, r6, #1, 24 @ 256
	mov r6, r6, lsr #8
	strb r6, [r4, #+1]
	strb r5, [r4]
	mov r1, #106
	mov r0, r9
	emit_nops_till_bundle_end
	bl build_modify_expr
	mov r2, r0
	ldr r1, [r9, #+4]
	mov r0, #44
	mov r3, r7
	emit_nops_till_bundle_end
	bl build
	ldrb r6, [r0, #+10]
	ldrb r4, [r0, #+11]
	mov r5, r0
	ldrb r7, [r5, #+8]!
	ldrb r9, [r5, #+1]
	strb r7, [r5]
	orr r6, r6, r4, lsl #8
	orr r4, r7, r9, lsl #8
	orr r6, r4, r6, lsl #16
	orr r6, r6, #1, 16 @ 65536
	mov r6, r6, lsr #16
	strb r6, [r0, #+10]
	b .LBB132_165	@ bb201
.LBB132_64:	@ give_up
	cmp r5, #118
	cmpne r5, #120
	bne .LBB132_66	@ bb105
	b .LBB132_175	@ give_up.tailrecurse.i.i212.preheader_crit_edge
.LBB132_65:	@ give_up
.LBB132_66:	@ bb105
	ldr r1, .LCPI132_27
.LBB132_67:	@ tailrecurse.i.i212.preheader
	mov r4, #1
	mov r3, #142, 28 @ 2272
	orr r3, r3, #1, 18 @ 16384
	mov r2, #2, 24 @ 512
	mov r0, r9
.LBB132_68:	@ tailrecurse.i.i212
	ldrb r12, [r0, #+8]
	cmp r12, #114
	bgt .LBB132_75	@ tailrecurse.i.i212
.LBB132_69:	@ tailrecurse.i.i212
	cmp r12, #27
	ble .LBB132_178	@ tailrecurse.i.i212
.LBB132_70:	@ tailrecurse.i.i212
	sub r12, r12, #28
	cmp r12, #14
	bhi .LBB132_74	@ bb107
.LBB132_71:	@ tailrecurse.i.i212
	tst r3, r4, lsl r12
	bne .LBB132_179	@ bb2.i.i216
.LBB132_72:	@ tailrecurse.i.i212
	tst r4, r4, lsl r12
	bne .LBB132_186	@ bb108
.LBB132_73:	@ tailrecurse.i.i212
	tst r2, r4, lsl r12
	bne .LBB132_76	@ bb.i.i213
.LBB132_74:	@ bb107
	ldr r0, .LCPI132_35
	emit_nops_till_bundle_end
	bl error
	ldr r6, .LCPI132_23
	ldr r0, [r6]
	b .LBB132_165	@ bb201
.LBB132_75:	@ tailrecurse.i.i212
	sub r12, r12, #115
	cmp r12, #1
	bhi .LBB132_74	@ bb107
.LBB132_76:	@ bb.i.i213
	ldr r0, [r0, #+16]
	ldrb r12, [r0, #+8]
	cmp r12, #114
	bgt .LBB132_82	@ bb.i.i213
.LBB132_77:	@ bb.i.i213
	cmp r12, #27
	ble .LBB132_181	@ bb.i.i213
.LBB132_78:	@ bb.i.i213
	sub r12, r12, #28
	cmp r12, #14
	bhi .LBB132_74	@ bb107
.LBB132_79:	@ bb.i.i213
	tst r3, r4, lsl r12
	bne .LBB132_182	@ bb2.i.i.i215
.LBB132_80:	@ bb.i.i213
	tst r4, r4, lsl r12
	bne .LBB132_186	@ bb108
.LBB132_81:	@ bb.i.i213
	tst r2, r4, lsl r12
	beq .LBB132_74	@ bb107
	b .LBB132_83	@ bb.i.i.i214
.LBB132_82:	@ bb.i.i213
	sub r12, r12, #115
	cmp r12, #1
	bhi .LBB132_74	@ bb107
.LBB132_83:	@ bb.i.i.i214
	ldr r0, [r0, #+16]
	b .LBB132_68	@ tailrecurse.i.i212
.LBB132_84:	@ bb117
	ldr r1, .LCPI132_10
.LBB132_85:	@ bb118
	mov r0, r9
	emit_nops_till_bundle_end
	bl readonly_warning
.LBB132_86:	@ bb119
	ldr r1, [r9, #+4]
	mov r0, r5
	mov r2, r9
	mov r3, r6
	emit_nops_till_bundle_end
	bl build
	mov r1, r0
	ldrb r4, [r1, #+10]
	mov r6, r1
	ldrb r3, [r6, #+8]!
	ldrb r2, [r6, #+3]
	orr r4, r4, r2, lsl #8
	ldrb r2, [r6, #+1]
	orr r2, r3, r2, lsl #8
	orr r4, r2, r4, lsl #16
	orr r4, r4, #1, 24 @ 256
	mov r4, r4, lsr #8
	strb r4, [r6, #+1]
	strb r3, [r6]
	mov r0, r7
	emit_nops_till_bundle_end
	bl convert
	ldrb r4, [r0, #+8]
	cmp r4, r5
	beq .LBB132_163	@ bb47.bb201_crit_edge
.LBB132_87:	@ bb120
	ldrb r4, [r0, #+10]
	ldrb r5, [r0, #+11]
	mov r6, r0
	ldrb r3, [r6, #+8]!
	ldrb r2, [r6, #+1]
	strb r3, [r6]
	orr r4, r4, r5, lsl #8
	orr r5, r3, r2, lsl #8
	orr r4, r5, r4, lsl #16
	orr r4, r4, #1, 14 @ 262144
	mov r4, r4, lsr #16
	strb r4, [r0, #+10]
	b .LBB132_165	@ bb201
	.align	2
.LBB132_88:	@ bb122
	ldrb r3, [r4, #+8]
	cmp r3, #42
	beq .LBB132_106	@ bb127
.LBB132_89:	@ bb122
	and r3, r3, #255
	cmp r3, #39
	bne .LBB132_109	@ bb130
.LBB132_90:	@ bb122.tailrecurse.i_crit_edge
	mov r5, #1
	mov r6, #142, 28 @ 2272
	orr r6, r6, #1, 18 @ 16384
	mov r3, #2, 24 @ 512
	mov r2, r4
.LBB132_91:	@ tailrecurse.i
	ldr r2, [r2, #+16]
	ldrb r1, [r2, #+8]
	cmp r1, #114
	bgt .LBB132_98	@ tailrecurse.i
.LBB132_92:	@ tailrecurse.i
	cmp r1, #27
	ble .LBB132_190	@ tailrecurse.i
.LBB132_93:	@ tailrecurse.i
	sub r1, r1, #28
	cmp r1, #14
	bhi .LBB132_97	@ bb38
.LBB132_94:	@ tailrecurse.i
	tst r6, r5, lsl r1
	bne .LBB132_191	@ bb2.i
.LBB132_95:	@ tailrecurse.i
	tst r5, r5, lsl r1
	bne .LBB132_196	@ bb124
.LBB132_96:	@ tailrecurse.i
	tst r3, r5, lsl r1
	bne .LBB132_99	@ bb.i207
.LBB132_97:	@ bb38
	ldr r0, [r4, #+16]
	b .LBB132_165	@ bb201
.LBB132_98:	@ tailrecurse.i
	sub r1, r1, #115
	cmp r1, #1
	bhi .LBB132_97	@ bb38
.LBB132_99:	@ bb.i207
	ldr r2, [r2, #+16]
	ldrb r1, [r2, #+8]
	cmp r1, #114
	bgt .LBB132_105	@ bb.i207
.LBB132_100:	@ bb.i207
	cmp r1, #27
	ble .LBB132_193	@ bb.i207
.LBB132_101:	@ bb.i207
	sub r1, r1, #28
	cmp r1, #14
	bhi .LBB132_97	@ bb38
.LBB132_102:	@ bb.i207
	tst r6, r5, lsl r1
	bne .LBB132_194	@ bb2.i.i209
.LBB132_103:	@ bb.i207
	tst r5, r5, lsl r1
	bne .LBB132_196	@ bb124
.LBB132_104:	@ bb.i207
	tst r3, r5, lsl r1
	bne .LBB132_91	@ tailrecurse.i
	b .LBB132_97	@ bb38
.LBB132_105:	@ bb.i207
	sub r1, r1, #115
	cmp r1, #2
	blo .LBB132_91	@ tailrecurse.i
	b .LBB132_97	@ bb38
.LBB132_106:	@ bb127
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl mark_addressable
	cmp r0, #0
	bne .LBB132_108	@ bb129
.LBB132_107:	@ bb128
	ldr r4, .LCPI132_0
	ldr r0, [r4]
	b .LBB132_165	@ bb201
.LBB132_108:	@ bb129
	ldr r1, [r4, #+16]
	ldr r2, [r4, #+20]
	mov r0, #56
	mov r3, #1
	emit_nops_till_bundle_end
	bl build_binary_op
	b .LBB132_165	@ bb201
.LBB132_109:	@ bb130
	mov r0, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl unary_complex_lvalue
	cmp r0, #0
	bne .LBB132_163	@ bb47.bb201_crit_edge
.LBB132_110:	@ bb132
	ldrb r3, [r4, #+8]
	cmp r3, #43
	bne .LBB132_112	@ bb133
.LBB132_111:	@ bb133
	ldrb r3, [r4, #+9]
	tst r3, #2
	bne .LBB132_204	@ bb141
.LBB132_112:	@ bb133
	cmp r6, #23
	beq .LBB132_204	@ bb141
.LBB132_113:	@ bb133.tailrecurse.i.i_crit_edge
	mov r6, #1
	mov r3, #142, 28 @ 2272
	orr r3, r3, #1, 18 @ 16384
	mov r2, #2, 24 @ 512
	mov r1, r4
.LBB132_114:	@ tailrecurse.i.i
	ldrb r0, [r1, #+8]
	cmp r0, #114
	bgt .LBB132_121	@ tailrecurse.i.i
.LBB132_115:	@ tailrecurse.i.i
	cmp r0, #27
	ble .LBB132_197	@ tailrecurse.i.i
.LBB132_116:	@ tailrecurse.i.i
	sub r0, r0, #28
	cmp r0, #14
	bhi .LBB132_120	@ bb140
.LBB132_117:	@ tailrecurse.i.i
	tst r3, r6, lsl r0
	bne .LBB132_198	@ bb2.i.i
.LBB132_118:	@ tailrecurse.i.i
	tst r6, r6, lsl r0
	bne .LBB132_204	@ bb141
.LBB132_119:	@ tailrecurse.i.i
	tst r2, r6, lsl r0
	bne .LBB132_122	@ bb.i.i
.LBB132_120:	@ bb140
	ldr r0, .LCPI132_18
	ldr r1, .LCPI132_19
	emit_nops_till_bundle_end
	bl error
	b .LBB132_107	@ bb128
.LBB132_121:	@ tailrecurse.i.i
	sub r0, r0, #115
	cmp r0, #1
	bhi .LBB132_120	@ bb140
.LBB132_122:	@ bb.i.i
	ldr r1, [r1, #+16]
	ldrb r0, [r1, #+8]
	cmp r0, #114
	bgt .LBB132_128	@ bb.i.i
.LBB132_123:	@ bb.i.i
	cmp r0, #27
	ble .LBB132_200	@ bb.i.i
.LBB132_124:	@ bb.i.i
	sub r0, r0, #28
	cmp r0, #14
	bhi .LBB132_120	@ bb140
.LBB132_125:	@ bb.i.i
	tst r3, r6, lsl r0
	bne .LBB132_201	@ bb2.i.i.i
.LBB132_126:	@ bb.i.i
	tst r6, r6, lsl r0
	bne .LBB132_204	@ bb141
.LBB132_127:	@ bb.i.i
	tst r2, r6, lsl r0
	beq .LBB132_120	@ bb140
	b .LBB132_129	@ bb.i.i.i
.LBB132_128:	@ bb.i.i
	sub r0, r0, #115
	cmp r0, #1
	bhi .LBB132_120	@ bb140
.LBB132_129:	@ bb.i.i.i
	ldr r1, [r1, #+16]
	b .LBB132_114	@ tailrecurse.i.i
	.align	4
.LBB132_130:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_23:
 	.long	error_mark_node

	.align	4
.LBB132_131:	@ bb177
	mov r0, r6
	emit_nops_till_bundle_end
	bl convert
	mov r7, r0
	ldr r0, [r5, #+40]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB132_134	@ bb191
.LBB132_132:	@ bb178
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r5, #+40]
	mov r0, #59
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	ldrb r5, [r7, #+9]
	mov r0, r6
	emit_nops_till_bundle_end
	bl convert
	mov r3, r0
	mov r0, #56
	mov r1, r6
	mov r2, r7
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
	ldrb r6, [r0, #+10]
	mov r7, r0
	ldrb r3, [r7, #+8]!
	ldrb r2, [r7, #+3]
	orr r6, r6, r2, lsl #8
	ldrb r2, [r7, #+1]
	orr r3, r3, r2, lsl #8
	orr r6, r3, r6, lsl #16
	bic r6, r6, #2, 24 @ 512
	strb r6, [r7]
	mov r3, r6, lsr #24
	strb r3, [r7, #+3]
	mov r3, #2, 24 @ 512
	and r5, r3, r5, lsl #8
	orr r5, r6, r5
	mov r5, r5, lsr #8
	strb r5, [r7, #+1]
	mov r5, r6, lsr #16
	strb r5, [r0, #+10]
	mov r7, r0
	b .LBB132_134	@ bb191
.LBB132_133:	@ bb190
	mov r0, r5
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	mov r7, r0
.LBB132_134:	@ bb191
	mov r0, r4
	emit_nops_till_bundle_end
	bl staticp
	cmp r0, #0
	beq .LBB132_213	@ bb191.bb201_crit_edge
.LBB132_135:	@ bb192
	ldrb r5, [r4, #+8]
	cmp r5, #29
	bne .LBB132_137	@ bb194
.LBB132_136:	@ bb193
	ldr r4, [r4, #+36]
	cmp r4, #0
	bne .LBB132_213	@ bb191.bb201_crit_edge
.LBB132_137:	@ bb194
	ldrb r4, [r7, #+10]
	mov r5, r7
	ldrb r3, [r5, #+8]!
	ldrb r2, [r5, #+3]
	orr r4, r4, r2, lsl #8
	ldrb r2, [r5, #+1]
	orr r2, r3, r2, lsl #8
	orr r4, r2, r4, lsl #16
	orr r4, r4, #2, 24 @ 512
	mov r4, r4, lsr #8
	strb r4, [r5, #+1]
	strb r3, [r5]
	mov r0, r7
	b .LBB132_165	@ bb201
	.align	4
.LBB132_138:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_24:
 	.long	.str59888

	.align	4
.LBB132_139:	@ bb14
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, #114
	mov r4, r0
	.align	2
.LBB132_140:	@ bb198
	mov r0, r5
	mov r2, r4
	ldr r1, [r2, #+4]
	b .LBB132_23	@ bb40
.LBB132_141:	@ bb196
	ldr r0, .LCPI132_22
.LBB132_142:	@ bb200
	emit_nops_till_bundle_end
	bl error
	b .LBB132_107	@ bb128
.LBB132_143:	@ bb3
	cmp r5, #75
	bne .LBB132_140	@ bb198
.LBB132_144:	@ bb8
	sub r3, r6, #7
	cmp r3, #3
	blo .LBB132_12	@ bb6
.LBB132_145:	@ bb8.bb200_crit_edge
	ldr r0, .LCPI132_2
	b .LBB132_142	@ bb200
.LBB132_146:	@ bb3
	cmp r5, #78
	bne .LBB132_140	@ bb198
.LBB132_147:	@ bb19
	sub r3, r6, #7
	cmp r3, #3
	blo .LBB132_12	@ bb6
.LBB132_148:	@ bb19.bb200_crit_edge
	ldr r0, .LCPI132_4
	b .LBB132_142	@ bb200
	.align	4
.LBB132_149:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_25:
 	.long	integer_zero_node

	.align	4
.LBB132_150:	@ bb3
	cmp r5, #88
	bne .LBB132_140	@ bb198
.LBB132_151:	@ bb12
	cmp r6, #7
	beq .LBB132_12	@ bb6
.LBB132_152:	@ bb12
	cmp r6, #9
	beq .LBB132_14	@ bb13
.LBB132_153:	@ bb12.bb200_crit_edge
	ldr r0, .LCPI132_3
	b .LBB132_142	@ bb200
.LBB132_154:	@ bb3
	cmp r5, #94
	bne .LBB132_140	@ bb198
.LBB132_155:	@ bb27
	sub r3, r6, #7
	cmp r3, #2
	blo .LBB132_18	@ bb36
.LBB132_156:	@ bb27
	cmp r6, #13
	beq .LBB132_18	@ bb36
.LBB132_157:	@ bb30
	mov r3, #1
	mov r12, #0
	cmp r6, #18
	mov r5, #0
	moveq r5, r3
	cmp r6, #9
	moveq r12, r3
	orr r3, r12, r5
	cmp r6, #23
	beq .LBB132_18	@ bb36
.LBB132_158:	@ bb30
	cmp r3, #0
	bne .LBB132_18	@ bb36
.LBB132_159:	@ bb30.bb200_crit_edge
	ldr r0, .LCPI132_6
	b .LBB132_142	@ bb200
	.align	4
.LBB132_160:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_26:
 	.long	.str62891

	.align	4
.LBB132_161:	@ bb4.bb200_crit_edge
	ldr r0, .LCPI132_1
	b .LBB132_142	@ bb200
.LBB132_162:	@ bb43
	ldr r0, [r4, #+20]
	b .LBB132_165	@ bb201
.LBB132_163:	@ bb47.bb201_crit_edge
	mov r4, r0
.LBB132_164:	@ bb201
	mov r0, r4
.LBB132_165:	@ bb201
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
	.align	4
.LBB132_166:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_27:
 	.long	.str64893

.LBB132_167:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_28:
 	.long	.str65894

.LBB132_168:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_29:
 	.long	pedantic

.LBB132_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_30:
 	.long	warn_pointer_arith

	.align	4
.LBB132_170:	@ bb50
	mov r0, r4
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r4, r0
	mov r0, #115
	mov r1, r4
	mov r2, #1
	emit_nops_till_bundle_end
	bl build_unary_op
	mov r6, r0
	mov r0, #116
	mov r1, r4
	mov r2, #1
	emit_nops_till_bundle_end
	bl build_unary_op
	mov r7, r0
	mov r0, r5
	mov r1, r6
	mov r2, #1
	emit_nops_till_bundle_end
	bl build_unary_op
	mov r2, r0
	ldr r1, [r4, #+4]
	mov r0, #113
	mov r3, r7
	emit_nops_till_bundle_end
	bl build
	b .LBB132_165	@ bb201
.LBB132_171:	@ bb64.bb70_crit_edge
	ldr r1, .LCPI132_9
	b .LBB132_40	@ bb70
.LBB132_172:	@ bb77.bb83_crit_edge
	ldr r1, .LCPI132_9
	b .LBB132_48	@ bb83
.LBB132_173:	@ bb91.bb94_crit_edge
.LBB132_174:	@ bb94.bb100_crit_edge
	mov r0, #56
	b .LBB132_63	@ bb100
.LBB132_175:	@ give_up.tailrecurse.i.i212.preheader_crit_edge
	ldr r1, .LCPI132_9
	b .LBB132_67	@ tailrecurse.i.i212.preheader
	.align	4
.LBB132_176:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_31:
 	.long	.str66895

.LBB132_177:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_32:
 	.long	integer_one_node

	.align	4
.LBB132_178:	@ tailrecurse.i.i212
	cmp r12, #0
	bne .LBB132_74	@ bb107
.LBB132_179:	@ bb2.i.i216
	ldr r4, [r0, #+4]
	ldrb r4, [r4, #+8]
	cmp r4, #16
	beq .LBB132_74	@ bb107
.LBB132_180:	@ bb2.i.i216
	and r4, r4, #255
	cmp r4, #23
	beq .LBB132_74	@ bb107
	b .LBB132_186	@ bb108
.LBB132_181:	@ bb.i.i213
	cmp r12, #0
	bne .LBB132_74	@ bb107
.LBB132_182:	@ bb2.i.i.i215
	ldr r0, [r0, #+4]
	ldrb r0, [r0, #+8]
	cmp r0, #16
	andne r0, r0, #255
	cmpne r0, #23
	bne .LBB132_186	@ bb108
	b .LBB132_74	@ bb107
	.align	4
.LBB132_183:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_33:
 	.long	.str7836

.LBB132_184:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_34:
 	.long	.str5834

.LBB132_185:	@ bb2.i.i.i215
	.align	4
.LBB132_186:	@ bb108
	ldrb r4, [r9, #+9]
	tst r4, #32
	beq .LBB132_86	@ bb119
.LBB132_187:	@ bb112
	cmp r5, #118
	cmpne r5, #120
	bne .LBB132_84	@ bb117
.LBB132_188:	@ bb112
.LBB132_189:	@ bb112.bb118_crit_edge
	ldr r1, .LCPI132_9
	b .LBB132_85	@ bb118
.LBB132_190:	@ tailrecurse.i
	cmp r1, #0
	bne .LBB132_97	@ bb38
.LBB132_191:	@ bb2.i
	ldr r5, [r2, #+4]
	ldrb r5, [r5, #+8]
	cmp r5, #16
	beq .LBB132_97	@ bb38
.LBB132_192:	@ bb2.i
	and r5, r5, #255
	cmp r5, #23
	beq .LBB132_97	@ bb38
	b .LBB132_196	@ bb124
.LBB132_193:	@ bb.i207
	cmp r1, #0
	bne .LBB132_97	@ bb38
.LBB132_194:	@ bb2.i.i209
	ldr r2, [r2, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #16
	andne r2, r2, #255
	cmpne r2, #23
	bne .LBB132_196	@ bb124
	b .LBB132_97	@ bb38
.LBB132_195:	@ bb2.i.i209
.LBB132_196:	@ bb124
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl non_lvalue
	b .LBB132_165	@ bb201
.LBB132_197:	@ tailrecurse.i.i
	cmp r0, #0
	bne .LBB132_120	@ bb140
.LBB132_198:	@ bb2.i.i
	ldr r3, [r1, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #16
	beq .LBB132_120	@ bb140
.LBB132_199:	@ bb2.i.i
	and r3, r3, #255
	cmp r3, #23
	beq .LBB132_120	@ bb140
	b .LBB132_204	@ bb141
.LBB132_200:	@ bb.i.i
	cmp r0, #0
	bne .LBB132_120	@ bb140
.LBB132_201:	@ bb2.i.i.i
	ldr r1, [r1, #+4]
	ldrb r1, [r1, #+8]
	cmp r1, #16
	andne r1, r1, #255
	cmpne r1, #23
	bne .LBB132_204	@ bb141
	b .LBB132_120	@ bb140
	.align	4
.LBB132_202:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_35:
 	.long	.str829

.LBB132_203:	@ bb2.i.i.i
	.align	4
.LBB132_204:	@ bb141
	ldr r3, .LCPI132_20
	ldr r3, [r3]
	ldrb r2, [r4, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldrb r3, [r3]
	ldr r0, [r4, #+4]
	cmp r3, #100
	andne r3, r3, #255
	cmpne r3, #114
	bne .LBB132_209	@ bb168
.LBB132_205:	@ bb141
.LBB132_206:	@ bb145
	ldrb r3, [r4, #+9]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 20 @ 8192
	tsteq r3, #1, 20 @ 4096
	beq .LBB132_209	@ bb168
.LBB132_207:	@ bb150
.LBB132_208:	@ bb155
	mov r2, #1
	and r1, r2, r3, lsr #13
	and r2, r2, r3, lsr #12
	emit_nops_till_bundle_end
	bl c_build_type_variant
.LBB132_209:	@ bb168
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r6, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl mark_addressable
	cmp r0, #0
	beq .LBB132_107	@ bb128
.LBB132_210:	@ bb170
	ldrb r3, [r4, #+8]
	cmp r3, #37
	bne .LBB132_133	@ bb190
.LBB132_211:	@ bb171
	ldr r1, [r4, #+16]
	ldr r5, [r4, #+20]
	mov r0, #110
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_unary_op
	ldrb r3, [r5, #+29]
	mov r1, r0
	tst r3, #16
	beq .LBB132_131	@ bb177
.LBB132_212:	@ bb176
	ldr r5, [r5, #+32]
	ldr r1, [r5, #+16]
	ldr r0, .LCPI132_21
	emit_nops_till_bundle_end
	bl error
	ldr r5, .LCPI132_0
	ldr r0, [r5]
	b .LBB132_165	@ bb201
.LBB132_213:	@ bb191.bb201_crit_edge
	mov r4, r7
	b .LBB132_164	@ bb201
	.align	4
.LBB132_214:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_1:
 	.long	.str55884

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_2:
 	.long	.str56885

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_3:
 	.long	.str57886

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_4:
 	.long	.str58887

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_6:
 	.long	.str60889

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_9:
 	.long	.str63892

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_10:
 	.long	.str64893

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_18:
 	.long	.str829

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_19:
 	.long	.str67896

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_20:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_21:
 	.long	.str68897

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI132_22:
 	.long	.str61890

	.size build_unary_op, .-build_unary_op


	.align	4
unary_complex_lvalue:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r3, [r1, #+8]
	mov r4, r1
	mov r5, r0
	cmp r3, #48
	beq .LBB133_5	@ bb2
.LBB133_1:	@ entry
	and r3, r3, #255
	cmp r3, #44
	bne .LBB133_8	@ bb4
.LBB133_2:	@ bb
	ldr r1, [r4, #+20]
	mov r2, #0
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_unary_op
	ldr r5, .LCPI133_0
	ldr r5, [r5]
	mov r6, r0
	cmp r5, #0
	ldrne r0, .LCPI133_1
	ldrne r1, .LCPI133_2
	emit_nops_till_bundle_end
	blne pedwarn
.LBB133_3:	@ bb6.i
.LBB133_4:	@ pedantic_lvalue_warning.exit
	ldr r1, [r6, #+4]
	ldr r2, [r4, #+16]
	mov r0, #44
	mov r3, r6
	emit_nops_till_bundle_end
	bl build
	b .LBB133_9	@ bb4
.LBB133_5:	@ bb2
	ldr r3, .LCPI133_0
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI133_1
	ldrne r1, .LCPI133_3
	emit_nops_till_bundle_end
	blne pedwarn
.LBB133_6:	@ bb6.i8
.LBB133_7:	@ pedantic_lvalue_warning.exit10
	ldr r1, [r4, #+24]
	mov r0, r5
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_unary_op
	mov r6, r0
	ldr r1, [r4, #+20]
	mov r0, r5
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_unary_op
	mov r1, r0
	ldr r0, [r4, #+16]
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_conditional_expr
	b .LBB133_9	@ bb4
.LBB133_8:	@ bb4
	mov r0, #0
.LBB133_9:	@ bb4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB133_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI133_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI133_1:
 	.long	.str7836

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI133_2:
 	.long	.str4833

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI133_3:
 	.long	.str6835

	.size unary_complex_lvalue, .-unary_complex_lvalue


	.globl	build_modify_expr
	.align	4
build_modify_expr:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #8
	ldr r4, [r0, #+4]
	ldr r3, [r4, #+16]
	mov r5, r2
	mov r6, r1
	cmp r3, #0
	ldrne r3, .LCPI134_0
	ldrne r3, [r3]
	cmpne r4, r3
	bne .LBB134_3	@ require_complete_type.exit
.LBB134_1:	@ bb.i
.LBB134_2:	@ bb2.i
	mov r1, r4
	emit_nops_till_bundle_end
	bl incomplete_type_error
	ldr r3, .LCPI134_1
	ldr r0, [r3]
.LBB134_3:	@ require_complete_type.exit
	mov r7, r0
	ldrb r3, [r7, #+8]
	cmp r3, #0
	ldrneb r2, [r5, #+8]
	cmpne r2, #0
	bne .LBB134_5	@ bb
	b .LBB134_53	@ bb2
.LBB134_4:	@ bb
.LBB134_5:	@ bb
	and r2, r2, #255
	cmp r2, #107
	ldreq r5, [r5, #+16]
.LBB134_6:	@ bb4
.LBB134_7:	@ bb5
	and r3, r3, #255
	cmp r3, #48
	beq .LBB134_14	@ bb9
.LBB134_8:	@ bb5
	cmp r3, #44
	bne .LBB134_18	@ bb12
.LBB134_9:	@ bb6
	ldr r3, .LCPI134_2
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI134_3
	ldrne r1, .LCPI134_4
	emit_nops_till_bundle_end
	blne pedwarn
.LBB134_10:	@ bb6.i
.LBB134_11:	@ pedantic_lvalue_warning.exit
	ldr r0, [r7, #+20]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_modify_expr
	ldrb r5, [r0, #+8]
	mov r3, r0
	cmp r5, #0
	beq .LBB134_34	@ bb7
.LBB134_12:	@ bb8
	ldr r2, [r7, #+16]
	mov r0, #44
	mov r1, r4
.LBB134_13:	@ bb8
	emit_nops_till_bundle_end
	bl build
	b .LBB134_52	@ bb53
.LBB134_14:	@ bb9
	ldr r4, .LCPI134_2
	ldr r4, [r4]
	cmp r4, #0
	ldrne r0, .LCPI134_3
	ldrne r1, .LCPI134_5
	emit_nops_till_bundle_end
	blne pedwarn
.LBB134_15:	@ bb6.i58
.LBB134_16:	@ pedantic_lvalue_warning.exit60
	mov r0, r5
	emit_nops_till_bundle_end
	bl save_expr
	mov r4, r0
	ldr r0, [r7, #+24]
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_modify_expr
	mov r5, r0
	ldr r0, [r7, #+20]
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_modify_expr
	mov r1, r0
	ldr r0, [r7, #+16]
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_conditional_expr
	ldrb r5, [r0, #+8]
	mov r6, r0
	cmp r5, #0
	beq .LBB134_51	@ bb53
.LBB134_17:	@ bb11
	ldr r5, .LCPI134_0
	ldr r0, [r5]
	mov r1, r4
	emit_nops_till_bundle_end
	bl convert
	mov r2, r0
	ldr r1, [r7, #+4]
	mov r0, #44
	mov r3, r6
	b .LBB134_13	@ bb8
.LBB134_18:	@ bb12
	cmp r6, #106
	beq .LBB134_20	@ bb14
.LBB134_19:	@ bb13
	mov r0, r7
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r7, r0
	mov r3, #1
	mov r0, r6
	mov r1, r7
	mov r2, r5
	emit_nops_till_bundle_end
	bl build_binary_op
	mov r5, r0
.LBB134_20:	@ bb14
	ldrb r6, [r7, #+8]
	sub r3, r6, #69
	cmp r3, #5
	subhs r6, r6, #105
	cmphs r6, #2
	bhs .LBB134_54	@ bb14.tailrecurse.i.i_crit_edge
.LBB134_21:	@ bb14
.LBB134_22:	@ bb15
	ldr r6, [r5, #+4]
	ldrb r6, [r6, #+8]
	cmp r6, #18
	andne r6, r6, #255
	cmpne r6, #23
	bne .LBB134_25	@ bb19
.LBB134_23:	@ bb15
.LBB134_24:	@ bb18
	mov r0, r5
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, r0
.LBB134_25:	@ bb19
	mov r1, r5
	ldr r6, [r7, #+16]
	mov r0, r4
	emit_nops_till_bundle_end
	bl convert
	mov r1, r0
	ldr r0, [r6, #+4]
	emit_nops_till_bundle_end
	bl convert
	mov r2, r0
	mov r1, #106
	mov r0, r6
	emit_nops_till_bundle_end
	bl build_modify_expr
	ldrb r3, [r0, #+8]
	mov r6, r0
	cmp r3, #0
	beq .LBB134_51	@ bb53
.LBB134_26:	@ bb21
	ldr r3, .LCPI134_2
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI134_3
	ldrne r1, .LCPI134_6
	emit_nops_till_bundle_end
	blne pedwarn
.LBB134_27:	@ bb6.i64
.LBB134_28:	@ pedantic_lvalue_warning.exit66
	ldr r0, [r7, #+4]
	mov r1, r6
	emit_nops_till_bundle_end
	bl convert
	b .LBB134_52	@ bb53
.LBB134_29:	@ tailrecurse.i.i
	sub r0, r0, #28
	cmp r0, #14
	bhi .LBB134_33	@ bb23
.LBB134_30:	@ tailrecurse.i.i
	tst r3, r6, lsl r0
	bne .LBB134_58	@ bb2.i.i
.LBB134_31:	@ tailrecurse.i.i
	tst r6, r6, lsl r0
	bne .LBB134_63	@ bb24
.LBB134_32:	@ tailrecurse.i.i
	tst r2, r6, lsl r0
	bne .LBB134_36	@ bb.i.i
.LBB134_33:	@ bb23
	ldr r0, .LCPI134_7
	ldr r1, .LCPI134_8
	emit_nops_till_bundle_end
	bl error
.LBB134_34:	@ bb7
	ldr r4, .LCPI134_1
	ldr r0, [r4]
	b .LBB134_52	@ bb53
.LBB134_35:	@ tailrecurse.i.i
	sub r0, r0, #115
	cmp r0, #1
	bhi .LBB134_33	@ bb23
.LBB134_36:	@ bb.i.i
	ldr r1, [r1, #+16]
	ldrb r0, [r1, #+8]
	cmp r0, #114
	bgt .LBB134_42	@ bb.i.i
.LBB134_37:	@ bb.i.i
	cmp r0, #27
	ble .LBB134_60	@ bb.i.i
.LBB134_38:	@ bb.i.i
	sub r0, r0, #28
	cmp r0, #14
	bhi .LBB134_33	@ bb23
.LBB134_39:	@ bb.i.i
	tst r3, r6, lsl r0
	bne .LBB134_61	@ bb2.i.i.i
.LBB134_40:	@ bb.i.i
	tst r6, r6, lsl r0
	bne .LBB134_63	@ bb24
.LBB134_41:	@ bb.i.i
	tst r2, r6, lsl r0
	beq .LBB134_33	@ bb23
	b .LBB134_43	@ bb.i.i.i
.LBB134_42:	@ bb.i.i
	sub r0, r0, #115
	cmp r0, #1
	bhi .LBB134_33	@ bb23
.LBB134_43:	@ bb.i.i.i
	ldr r1, [r1, #+16]
	b .LBB134_55	@ tailrecurse.i.i
.LBB134_44:	@ bb41
	ldrb r6, [r4, #+8]
	sub r3, r6, #7
	and r3, r3, #255
	cmp r3, #2
	blo .LBB134_46	@ bb45
.LBB134_45:	@ bb41
	and r6, r6, #255
	cmp r6, #10
	bne .LBB134_69	@ bb40.bb46_crit_edge
.LBB134_46:	@ bb45
	mov r1, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl get_unwidened
	ldr r6, [r0, #+4]
.LBB134_47:	@ bb46
	ldr r3, [r7, #+4]
	cmp r3, r6
	beq .LBB134_49	@ bb48
.LBB134_48:	@ bb47
	mov r0, r7
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r6, [r0, #+4]
	mov r7, r0
.LBB134_49:	@ bb48
	mov r3, #0
	@comment
str r3, [sp, #+4]
	@comment
str r3, [sp]
	ldr r2, .LCPI134_8
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl convert_for_assignment
	ldrb r2, [r0, #+8]
	mov r3, r0
	cmp r2, #0
	beq .LBB134_70	@ bb49
.LBB134_50:	@ bb50
	mov r0, #45
	mov r1, r6
	mov r2, r7
	emit_nops_till_bundle_end
	bl build
	ldrb r6, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r6, r6, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r1, r2, r1, lsl #8
	orr r6, r1, r6, lsl #16
	orr r6, r6, #1, 24 @ 256
	mov r6, r6, lsr #8
	strb r6, [r3, #+1]
	strb r2, [r3]
	ldr r3, [r0, #+4]
	mov r6, r0
	cmp r3, r4
	bne .LBB134_71	@ bb52
.LBB134_51:	@ bb53
	mov r0, r6
.LBB134_52:	@ bb53
	sfi_add sp, sp, #8
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB134_53:	@ bb2
	ldr r3, .LCPI134_1
	ldr r0, [r3]
	b .LBB134_52	@ bb53
.LBB134_54:	@ bb14.tailrecurse.i.i_crit_edge
	mov r6, #1
	mov r3, #142, 28 @ 2272
	orr r3, r3, #1, 18 @ 16384
	mov r2, #2, 24 @ 512
	mov r1, r7
.LBB134_55:	@ tailrecurse.i.i
	ldrb r0, [r1, #+8]
	cmp r0, #114
	bgt .LBB134_35	@ tailrecurse.i.i
.LBB134_56:	@ tailrecurse.i.i
	cmp r0, #27
	bgt .LBB134_29	@ tailrecurse.i.i
.LBB134_57:	@ tailrecurse.i.i
	cmp r0, #0
	bne .LBB134_33	@ bb23
.LBB134_58:	@ bb2.i.i
	ldr r6, [r1, #+4]
	ldrb r6, [r6, #+8]
	cmp r6, #16
	beq .LBB134_33	@ bb23
.LBB134_59:	@ bb2.i.i
	and r6, r6, #255
	cmp r6, #23
	beq .LBB134_33	@ bb23
	b .LBB134_63	@ bb24
.LBB134_60:	@ bb.i.i
	cmp r0, #0
	bne .LBB134_33	@ bb23
.LBB134_61:	@ bb2.i.i.i
	ldr r1, [r1, #+4]
	ldrb r1, [r1, #+8]
	cmp r1, #16
	andne r1, r1, #255
	cmpne r1, #23
	bne .LBB134_63	@ bb24
	b .LBB134_33	@ bb23
.LBB134_62:	@ bb2.i.i.i
.LBB134_63:	@ bb24
	ldrb r6, [r7, #+9]
	tst r6, #32
	ldreqb r6, [r4, #+9]
	tsteq r6, #32
	beq .LBB134_65	@ bb33
	b .LBB134_67	@ bb39
.LBB134_64:	@ bb28
.LBB134_65:	@ bb33
	ldrb r6, [r4, #+8]
	sub r6, r6, #20
	and r6, r6, #255
	cmp r6, #1
	bhi .LBB134_68	@ bb40
.LBB134_66:	@ bb34
	ldrb r6, [r4, #+10]
	tst r6, #128
	beq .LBB134_68	@ bb40
.LBB134_67:	@ bb39
	ldr r1, .LCPI134_8
	mov r0, r7
	emit_nops_till_bundle_end
	bl readonly_warning
.LBB134_68:	@ bb40
	ldrb r6, [r7, #+8]
	cmp r6, #37
	beq .LBB134_44	@ bb41
.LBB134_69:	@ bb40.bb46_crit_edge
	mov r6, r4
	b .LBB134_47	@ bb46
.LBB134_70:	@ bb49
	ldr r6, .LCPI134_1
	ldr r0, [r6]
	b .LBB134_52	@ bb53
.LBB134_71:	@ bb52
	mov r3, #0
	@comment
str r3, [sp, #+4]
	@comment
str r3, [sp]
	ldr r2, .LCPI134_8
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl convert_for_assignment
	b .LBB134_52	@ bb53
	.align	4
.LBB134_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_0:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_1:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_2:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_3:
 	.long	.str7836

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_4:
 	.long	.str4833

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_5:
 	.long	.str6835

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_6:
 	.long	.str5834

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_7:
 	.long	.str829

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI134_8:
 	.long	.str133961

	.size build_modify_expr, .-build_modify_expr


	.globl	c_expand_start_case
	.align	4
c_expand_start_case:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, [r0, #+4]
	ldrb r3, [r4, #+8]
	mov r2, #1
	mov r1, #0
	cmp r3, #10
	mov r12, #0
	moveq r12, r2
	cmp r3, #7
	moveq r1, r2
	orr r2, r1, r12
	mov r5, r0
	cmp r3, #0
	beq .LBB135_2	@ bb7
.LBB135_1:	@ entry
	cmp r2, #0
	beq .LBB135_9	@ bb6
.LBB135_2:	@ bb7
	ldr r3, .LCPI135_2
	ldr r3, [r3]
	ldr r4, [r4, #+64]
	cmp r3, #0
	beq .LBB135_6	@ bb11
.LBB135_3:	@ bb8
	ldr r3, .LCPI135_3
	ldr r3, [r3]
	cmp r4, r3
	ldrne r3, .LCPI135_4
	ldrne r3, [r3]
	cmpne r4, r3
	bne .LBB135_6	@ bb11
.LBB135_4:	@ bb9
.LBB135_5:	@ bb10
	ldr r0, .LCPI135_5
	emit_nops_till_bundle_end
	bl pedwarn
.LBB135_6:	@ bb11
	mov r0, r5
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, r0
	ldr r4, [r5, #+4]
	mov r1, #0
	emit_nops_till_bundle_end
	bl get_unwidened
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+9]
	ldr r2, [r5, #+4]
	ldrb r2, [r2, #+9]
	eor r3, r3, r2
	mov r2, #1, 18 @ 16384
	tst r2, r3, lsl #8
	moveq r5, r0
.LBB135_7:	@ bb19
.LBB135_8:	@ bb20
	mov r2, r4
	mov r0, #1
	ldr r3, .LCPI135_6
	mov r1, r5
	emit_nops_till_bundle_end
	bl expand_start_case
	mov r0, r5
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB135_9:	@ bb6
	ldr r0, .LCPI135_0
	emit_nops_till_bundle_end
	bl error
	ldr r5, .LCPI135_1
	ldr r5, [r5]
	b .LBB135_8	@ bb20
	.align	4
.LBB135_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_0:
 	.long	.str71900

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_1:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_2:
 	.long	warn_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_3:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_4:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_5:
 	.long	.str72901

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI135_6:
 	.long	.str73902

	.size c_expand_start_case, .-c_expand_start_case


	.align	4
convert_for_assignment:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #16
	ldrb r12, [r1, #+8]
	ldrb r4, [r0, #+8]
	@comment
str r3, [sp]
	@comment
str r2, [sp, #+4]
	@comment
str r0, [sp, #+8]
	cmp r12, #107
	ldreq r1, [r1, #+16]
.LBB136_1:	@ bb
.LBB136_2:	@ bb3
	ldr r3, [r1, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB136_4	@ bb7
	b .LBB136_133	@ bb6
.LBB136_3:	@ bb3
.LBB136_4:	@ bb7
	ldr r3, .LCPI136_21
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_5:	@ bb8
	ldrb r3, [r1, #+8]
	cmp r3, #33
	ldreqb r3, [r1, #+9]
	moveq r2, r1
	ldreqb r0, [r2, #+8]!
	orreq r3, r0, r3, lsl #8
	ldreqb r0, [r2, #+3]
	ldreqb r2, [r2, #+2]
	orreq r2, r2, r0, lsl #8
	orreq r3, r3, r2, lsl #16
	tsteq r3, #2, 14 @ 524288
	beq .LBB136_7	@ bb.i
	b .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_6:	@ bb9
.LBB136_7:	@ bb.i
	ldr r2, .LCPI136_22
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_8:	@ bb4.i
	ldr r2, .LCPI136_23
	ldr r2, [r2]
	cmp r2, #0
	tsteq r3, #1, 20 @ 4096
	beq .LBB136_10	@ bb10.i
	b .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_9:	@ bb5.i
.LBB136_10:	@ bb10.i
	tst r3, #2, 20 @ 8192
	beq .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_11:	@ bb15.i
	ldrb r3, [r1, #+31]
	tst r3, #16
	bne .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_12:	@ bb20.i
	ldr r0, [r1, #+48]
	cmp r0, #0
	ldrneb r3, [r0, #+8]
	cmpne r3, #0
	bne .LBB136_14	@ bb22.i
	b .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_13:	@ bb21.i
.LBB136_14:	@ bb22.i
	ldrb r3, [r0, #+9]
	tst r3, #2
	ldrneb r3, [r0, #+8]
	cmpne r3, #43
	bne .LBB136_16	@ bb28.i
	b .LBB136_134	@ bb7.bb10_crit_edge
.LBB136_15:	@ bb27.i
.LBB136_16:	@ bb28.i
	ldrb r3, [r1, #+28]
	cmp r3, #26
	moveq r0, r1
.LBB136_17:	@ bb10
	mov r3, r0
	@comment
str r3, [sp, #+12]
	ldr r5, [r3, #+4]
	ldrb r6, [r5, #+8]
	cmp r6, #0
	bne .LBB136_21	@ bb12
.LBB136_18:	@ bb11
	ldr r4, .LCPI136_24
.LBB136_19:	@ bb11
	ldr r0, [r4]
.LBB136_20:	@ bb11
	sfi_add sp, sp, #16
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB136_21:	@ bb12
	ldr r3, [r5, #+64]
	ldr r2, [sp, #+8]
	ldr r2, [r2, #+64]
	cmp r2, r3
	beq .LBB136_135	@ bb13
.LBB136_22:	@ bb14
	and r3, r6, #255
	cmp r3, #6
	beq .LBB136_136	@ bb15
.LBB136_23:	@ bb16
	sub r3, r4, #9
	and r3, r3, #255
	sub r2, r4, #7
	cmp r3, #2
	cmphs r2, #1
	bhi .LBB136_27	@ bb27
.LBB136_24:	@ bb16
.LBB136_25:	@ bb21
	sub r3, r6, #9
	and r3, r3, #255
	sub r2, r6, #7
	cmp r3, #2
	cmphs r2, #1
	bhi .LBB136_27	@ bb27
	b .LBB136_137	@ bb26
.LBB136_26:	@ bb21
.LBB136_27:	@ bb27
	and r3, r4, #255
	cmp r3, #21
	bne .LBB136_66	@ bb105
.LBB136_28:	@ bb28
	ldr r4, [sp, #+8]
	add r4, r4, #12
	mov r7, #1
.LBB136_29:	@ bb104
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB136_122	@ bb193
.LBB136_30:	@ bb29
	ldr r0, [r4, #+4]
	ldr r3, [sp, #+12]
	ldr r1, [r3, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB136_37	@ bb38
.LBB136_31:	@ bb30
	ldr r4, .LCPI136_2
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB136_35	@ bb37
.LBB136_32:	@ bb31
	ldr r4, [sp]
	cmp r4, #0
	ldrne r4, [sp]
	ldrneb r4, [r4, #+30]
	tstne r4, #1
	bne .LBB136_35	@ bb37
.LBB136_33:	@ bb32
.LBB136_34:	@ bb36
	ldr r0, .LCPI136_5
	emit_nops_till_bundle_end
	bl pedwarn
.LBB136_35:	@ bb37
	mov r0, #106
	ldr r1, [sp, #+8]
	ldr r2, [sp, #+12]
.LBB136_36:	@ bb37
	emit_nops_till_bundle_end
	bl build1
	b .LBB136_20	@ bb11
.LBB136_37:	@ bb38
	and r3, r6, #255
	cmp r3, #13
	ldreq r8, [r4, #+4]
	ldreqb r3, [r8, #+8]
	cmpeq r3, #13
	beq .LBB136_39	@ bb40
	b .LBB136_61	@ bb98
.LBB136_38:	@ bb39
.LBB136_39:	@ bb40
	ldr r9, [r8, #+4]
	ldr r3, [r9, #+64]
	ldr r2, .LCPI136_6
	ldr r2, [r2]
	ldr r10, [r5, #+4]
	cmp r3, r2
	ldrne r3, [r10, #+64]
	cmpne r3, r2
	bne .LBB136_41	@ bb42
	b .LBB136_46	@ bb43
.LBB136_40:	@ bb41
.LBB136_41:	@ bb42
	mov r0, r8
	mov r1, r5
	mov r2, r7
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r11, r7, r0, lsr #31
	cmp r0, #0
	bge .LBB136_45	@ comp_target_types.exit
.LBB136_42:	@ bb1.i
	ldr r11, [r8, #+4]
	ldr r0, [r11, #+64]
	ldr r11, [r5, #+4]
	ldr r1, [r11, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r11, r0
	cmp r0, #2
	bne .LBB136_45	@ comp_target_types.exit
.LBB136_43:	@ bb2.i
	ldr r3, .LCPI136_2
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI136_7
	emit_nops_till_bundle_end
	blne pedwarn
.LBB136_44:	@ bb3.i
.LBB136_45:	@ comp_target_types.exit
	cmp r11, #0
	beq .LBB136_29	@ bb104
.LBB136_46:	@ bb43
	ldrb r4, [r10, #+8]
	cmp r4, #23
	ldreqb r4, [r9, #+8]
	cmpeq r4, #23
	beq .LBB136_54	@ bb67
.LBB136_47:	@ bb44
.LBB136_48:	@ bb45
	ldrb r4, [r9, #+9]
	tst r4, #32
	bne .LBB136_51	@ bb56
.LBB136_49:	@ bb50
	ldrb r4, [r10, #+9]
	tst r4, #32
	beq .LBB136_51	@ bb56
.LBB136_50:	@ bb55
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_8
	ldr r2, [sp, #+52]
	ldr r3, [sp, #+56]
	emit_nops_till_bundle_end
	bl warn_for_assignment
.LBB136_51:	@ bb56
	ldrb r4, [r9, #+9]
	tst r4, #16
	bne .LBB136_31	@ bb30
.LBB136_52:	@ bb61
	ldrb r4, [r10, #+9]
	tst r4, #16
	beq .LBB136_31	@ bb30
.LBB136_53:	@ bb66
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_9
	b .LBB136_60	@ bb88
.LBB136_54:	@ bb67
	ldrb r4, [r9, #+9]
	tst r4, #32
	beq .LBB136_57	@ bb78
.LBB136_55:	@ bb72
	ldrb r4, [r10, #+9]
	tst r4, #32
	bne .LBB136_57	@ bb78
.LBB136_56:	@ bb77
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_10
	ldr r2, [sp, #+52]
	ldr r3, [sp, #+56]
	emit_nops_till_bundle_end
	bl warn_for_assignment
.LBB136_57:	@ bb78
	ldrb r4, [r9, #+9]
	tst r4, #16
	beq .LBB136_31	@ bb30
.LBB136_58:	@ bb83
	ldrb r4, [r10, #+9]
	tst r4, #16
	bne .LBB136_31	@ bb30
.LBB136_59:	@ bb88
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_11
.LBB136_60:	@ bb88
	ldr r2, [sp, #+52]
	ldr r3, [sp, #+56]
	emit_nops_till_bundle_end
	bl warn_for_assignment
	b .LBB136_31	@ bb30
.LBB136_61:	@ bb98
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #13
	bne .LBB136_29	@ bb104
.LBB136_62:	@ bb99
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB136_65	@ bb102
.LBB136_63:	@ bb100
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+8]
	cmp r3, #106
	bne .LBB136_29	@ bb104
.LBB136_64:	@ bb101
	ldr r3, [sp, #+12]
	ldr r0, [r3, #+16]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB136_29	@ bb104
.LBB136_65:	@ bb102
	ldr r4, .LCPI136_12
	ldr r2, [r4]
	mov r0, #106
	ldr r1, [sp, #+8]
	b .LBB136_36	@ bb37
.LBB136_66:	@ bb105
	and r3, r6, #255
	cmp r3, #13
	andeq r3, r4, #255
	cmpeq r3, #13
	beq .LBB136_68	@ bb109
	b .LBB136_107	@ bb176
.LBB136_67:	@ bb105
.LBB136_68:	@ bb109
	ldr r4, [sp, #+8]
	ldr r4, [r4, #+4]
	ldr r6, [r4, #+64]
	ldr r3, .LCPI136_6
	ldr r3, [r3]
	ldr r7, [r5, #+4]
	cmp r6, r3
	ldrne r6, [r7, #+64]
	cmpne r6, r3
	bne .LBB136_70	@ bb111
	b .LBB136_76	@ bb113
.LBB136_69:	@ bb110
.LBB136_70:	@ bb111
	mov r6, #1
	ldr r0, [sp, #+8]
	mov r1, r5
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r6, r6, r0, lsr #31
	cmp r0, #0
	bge .LBB136_74	@ comp_target_types.exit215
.LBB136_71:	@ bb1.i210
	ldr r6, [sp, #+8]
	ldr r6, [r6, #+4]
	ldr r0, [r6, #+64]
	ldr r6, [r5, #+4]
	ldr r1, [r6, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r6, r0
	cmp r0, #2
	bne .LBB136_74	@ comp_target_types.exit215
.LBB136_72:	@ bb2.i211
	ldr r3, .LCPI136_2
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI136_7
	emit_nops_till_bundle_end
	blne pedwarn
.LBB136_73:	@ bb3.i212
.LBB136_74:	@ comp_target_types.exit215
	cmp r6, #0
	bne .LBB136_76	@ bb113
.LBB136_75:	@ bb112
	ldr r0, [r4, #+64]
	emit_nops_till_bundle_end
	bl unsigned_type
	mov r6, r0
	ldr r0, [r7, #+64]
	emit_nops_till_bundle_end
	bl unsigned_type
	cmp r6, r0
	bne .LBB136_106	@ bb174
.LBB136_76:	@ bb113
	ldr r6, .LCPI136_2
	ldr r6, [r6]
	cmp r6, #0
	beq .LBB136_83	@ bb121
.LBB136_77:	@ bb114
	ldr r6, [r4, #+64]
	ldr r3, .LCPI136_6
	ldr r3, [r3]
	cmp r6, r3
	ldreqb r6, [r7, #+8]
	cmpeq r6, #23
	beq .LBB136_138	@ bb120
.LBB136_78:	@ bb115
.LBB136_79:	@ bb116
	ldr r6, [r7, #+64]
	cmp r6, r3
	bne .LBB136_83	@ bb121
.LBB136_80:	@ bb117
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	ldrne r6, [sp, #+12]
	ldrneb r6, [r6, #+8]
	cmpne r6, #106
	bne .LBB136_83	@ bb121
.LBB136_81:	@ bb118
.LBB136_82:	@ bb119
	ldrb r6, [r4, #+8]
	cmp r6, #23
	beq .LBB136_138	@ bb120
.LBB136_83:	@ bb121
	ldrb r6, [r7, #+8]
	cmp r6, #23
	ldrneb r3, [r4, #+8]
	cmpne r3, #23
	bne .LBB136_85	@ bb123
	b .LBB136_98	@ bb150
.LBB136_84:	@ bb122
.LBB136_85:	@ bb123
	ldrb r6, [r4, #+9]
	mov r3, r4
	ldrb r2, [r3, #+8]!
	orr r6, r2, r6, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r2, lsl #8
	orr r6, r6, r3, lsl #16
	tst r6, #2, 20 @ 8192
	bne .LBB136_87	@ bb134
.LBB136_86:	@ bb128
	ldrb r3, [r7, #+9]
	tst r3, #32
	bne .LBB136_140	@ bb133
.LBB136_87:	@ bb134
	tst r6, #1, 20 @ 4096
	bne .LBB136_89	@ bb145
.LBB136_88:	@ bb139
	ldrb r6, [r7, #+9]
	tst r6, #16
	bne .LBB136_141	@ bb144
.LBB136_89:	@ bb145
	ldr r4, [r4, #+64]
	ldr r6, .LCPI136_6
	ldr r6, [r6]
	cmp r4, r6
	ldrne r4, [r7, #+64]
	cmpne r4, r6
	bne .LBB136_91	@ bb147
	b .LBB136_117	@ bb175
.LBB136_90:	@ bb146
.LBB136_91:	@ bb147
	mov r4, #1
	ldr r0, [sp, #+8]
	mov r1, r5
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r4, r4, r0, lsr #31
	cmp r0, #0
	bge .LBB136_95	@ comp_target_types.exit223
.LBB136_92:	@ bb1.i218
	ldr r4, [sp, #+8]
	ldr r4, [r4, #+4]
	ldr r0, [r4, #+64]
	ldr r4, [r5, #+4]
	ldr r1, [r4, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r4, r0
	cmp r0, #2
	bne .LBB136_95	@ comp_target_types.exit223
.LBB136_93:	@ bb2.i219
	ldr r6, .LCPI136_2
	ldr r6, [r6]
	cmp r6, #0
	ldrne r0, .LCPI136_7
	emit_nops_till_bundle_end
	blne pedwarn
.LBB136_94:	@ bb3.i220
.LBB136_95:	@ comp_target_types.exit223
	cmp r4, #0
	bne .LBB136_117	@ bb175
.LBB136_96:	@ bb148
	ldr r4, .LCPI136_2
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB136_117	@ bb175
.LBB136_97:	@ bb149
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_14
	b .LBB136_116	@ bb186
.LBB136_98:	@ bb150
	and r6, r6, #255
	mov r3, #1
	mov r2, #0
	cmp r6, #23
	movne r2, r3
	ldrb r6, [r4, #+8]
	cmp r6, #23
	cmpeq r2, #0
	beq .LBB136_100	@ bb152
	b .LBB136_117	@ bb175
.LBB136_99:	@ bb150
.LBB136_100:	@ bb152
	ldrb r6, [r4, #+9]
	tst r6, #32
	beq .LBB136_103	@ bb163
.LBB136_101:	@ bb157
	ldrb r6, [r7, #+9]
	tst r6, #32
	bne .LBB136_103	@ bb163
.LBB136_102:	@ bb162
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_10
	ldr r2, [sp, #+52]
	ldr r3, [sp, #+56]
	emit_nops_till_bundle_end
	bl warn_for_assignment
.LBB136_103:	@ bb163
	ldrb r4, [r4, #+9]
	tst r4, #16
	beq .LBB136_117	@ bb175
.LBB136_104:	@ bb168
	ldrb r4, [r7, #+9]
	tst r4, #16
	bne .LBB136_117	@ bb175
.LBB136_105:	@ bb173
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_11
	b .LBB136_116	@ bb186
.LBB136_106:	@ bb174
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_15
	b .LBB136_116	@ bb186
.LBB136_107:	@ bb176
	and r3, r6, #255
	cmp r3, #7
	andeq r3, r4, #255
	cmpeq r3, #13
	beq .LBB136_109	@ bb180
	b .LBB136_120	@ bb188
.LBB136_108:	@ bb176
.LBB136_109:	@ bb180
	ldr r4, [sp, #+12]
	ldrb r4, [r4, #+8]
	cmp r4, #25
	bne .LBB136_111	@ bb182
.LBB136_110:	@ bb181
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB136_118	@ bb187
.LBB136_111:	@ bb182
	ldr r4, [sp, #+12]
	ldrb r4, [r4, #+8]
	cmp r4, #106
	bne .LBB136_115	@ bb186
.LBB136_112:	@ bb183
	ldr r4, [sp, #+12]
	ldr r4, [r4, #+4]
	ldrb r4, [r4, #+8]
	cmp r4, #7
	ldreq r4, [sp, #+12]
	ldreq r0, [r4, #+16]
	ldreqb r4, [r0, #+8]
	cmpeq r4, #25
	beq .LBB136_114	@ bb185
	b .LBB136_115	@ bb186
.LBB136_113:	@ bb184
.LBB136_114:	@ bb185
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB136_118	@ bb187
.LBB136_115:	@ bb186
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_16
.LBB136_116:	@ bb186
	ldr r2, [sp, #+52]
	ldr r3, [sp, #+56]
	emit_nops_till_bundle_end
	bl warn_for_assignment
.LBB136_117:	@ bb175
	ldr r0, [sp, #+8]
	ldr r1, [sp, #+12]
	emit_nops_till_bundle_end
	bl convert
	b .LBB136_20	@ bb11
.LBB136_118:	@ bb187
	ldr r4, .LCPI136_12
	b .LBB136_19	@ bb11
	.align	4
.LBB136_119:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_21:
 	.long	optimize

	.align	4
.LBB136_120:	@ bb188
	and r3, r6, #255
	cmp r3, #13
	andeq r3, r4, #255
	cmpeq r3, #7
	beq .LBB136_142	@ bb192
.LBB136_121:	@ bb188
.LBB136_122:	@ bb193
	ldr r3, [sp, #+4]
	cmp r3, #0
	bne .LBB136_131	@ bb202
.LBB136_123:	@ bb194
	ldr r3, [sp, #+52]
	cmp r3, #0
	beq .LBB136_128	@ bb201
.LBB136_124:	@ bb195
	emit_nops_till_bundle_end
	bl maybe_building_objc_message_expr
	cmp r0, #0
	beq .LBB136_127	@ bb200
.LBB136_125:	@ bb195
	ldr r3, [sp, #+56]
	cmp r3, #3
	blt .LBB136_127	@ bb200
.LBB136_126:	@ bb199
	ldr r2, [r0, #+16]
	ldr r3, [sp, #+56]
	sub r1, r3, #2
	ldr r0, .LCPI136_18
	emit_nops_till_bundle_end
	bl error
	b .LBB136_132	@ bb203
.LBB136_127:	@ bb200
	ldr r3, [sp, #+52]
	ldr r2, [r3, #+16]
	ldr r0, .LCPI136_18
	ldr r1, [sp, #+56]
	emit_nops_till_bundle_end
	bl error
	b .LBB136_132	@ bb203
.LBB136_128:	@ bb201
	ldr r0, .LCPI136_19
	ldr r1, [sp, #+56]
	emit_nops_till_bundle_end
	bl error
	b .LBB136_132	@ bb203
	.align	4
.LBB136_129:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_22:
 	.long	current_function_decl

.LBB136_130:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_23:
 	.long	pedantic

	.align	4
.LBB136_131:	@ bb202
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_20
	emit_nops_till_bundle_end
	bl error
.LBB136_132:	@ bb203
	ldr r3, .LCPI136_3
	ldr r0, [r3]
	b .LBB136_20	@ bb11
.LBB136_133:	@ bb6
	mov r0, r1
	emit_nops_till_bundle_end
	bl default_conversion
	b .LBB136_17	@ bb10
.LBB136_134:	@ bb7.bb10_crit_edge
	mov r0, r1
	b .LBB136_17	@ bb10
.LBB136_135:	@ bb13
	ldr r4, [sp, #+12]
	mov r0, r4
	emit_nops_till_bundle_end
	bl overflow_warning
	mov r2, #0
	ldr r0, [sp, #+8]
	mov r1, r5
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	mov r0, r4
	b .LBB136_20	@ bb11
.LBB136_136:	@ bb15
	ldr r0, .LCPI136_4
	emit_nops_till_bundle_end
	bl error
	b .LBB136_18	@ bb11
.LBB136_137:	@ bb26
	ldr r0, [sp, #+8]
	ldr r1, [sp, #+12]
	emit_nops_till_bundle_end
	bl convert_and_check
	b .LBB136_20	@ bb11
.LBB136_138:	@ bb120
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_13
	b .LBB136_116	@ bb186
	.align	4
.LBB136_139:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_24:
 	.long	error_mark_node

	.align	4
.LBB136_140:	@ bb133
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_8
	b .LBB136_116	@ bb186
.LBB136_141:	@ bb144
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_9
	b .LBB136_116	@ bb186
.LBB136_142:	@ bb192
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl get_spelling
	mov r1, r0
	ldr r0, .LCPI136_17
	b .LBB136_116	@ bb186
	.align	4
.LBB136_143:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_2:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_3:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_4:
 	.long	.str69898

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_5:
 	.long	.str74903

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_6:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_7:
 	.long	.str34863

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_8:
 	.long	.str75904

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_9:
 	.long	.str76905

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_10:
 	.long	.str77906

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_11:
 	.long	.str78907

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_12:
 	.long	null_pointer_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_13:
 	.long	.str79908

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_14:
 	.long	.str80909

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_15:
 	.long	.str81910

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_16:
 	.long	.str82911

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_17:
 	.long	.str83912

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_18:
 	.long	.str84913

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_19:
 	.long	.str85914

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI136_20:
 	.long	.str86915

	.size convert_for_assignment, .-convert_for_assignment


	.globl	c_expand_return
	.align	4
c_expand_return:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #8
	ldr r3, .LCPI137_0
	ldr r3, [r3]
	ldrb r2, [r3, #+9]
	ldr r3, [r3, #+4]
	ldr r4, [r3, #+4]
	mov r5, r0
	tst r2, #16
	ldrne r0, .LCPI137_1
	emit_nops_till_bundle_end
	blne warning
.LBB137_1:	@ bb
.LBB137_2:	@ bb4
	cmp r5, #0
	bne .LBB137_8	@ bb11
.LBB137_3:	@ bb5
	ldr r5, .LCPI137_2
	mov r3, #1
	@comment
str r3, [r5]
	ldr r5, .LCPI137_3
	ldr r5, [r5]
	cmp r5, #0
	cmpne r4, #0
	bne .LBB137_5	@ bb8
	b .LBB137_7	@ bb10
.LBB137_4:	@ bb5
.LBB137_5:	@ bb8
	ldrb r4, [r4, #+8]
	cmp r4, #6
	ldrne r0, .LCPI137_4
	emit_nops_till_bundle_end
	blne warning
.LBB137_6:	@ bb9
.LBB137_7:	@ bb10
	emit_nops_till_bundle_end
	bl expand_null_return
	b .LBB137_37	@ return
.LBB137_8:	@ bb11
	cmp r4, #0
	ldrneb r3, [r4, #+8]
	cmpne r3, #6
	bne .LBB137_14	@ bb17
.LBB137_9:	@ bb12
.LBB137_10:	@ bb13
	ldr r4, .LCPI137_2
	mov r3, #1
	@comment
str r3, [r4]
	ldr r4, .LCPI137_5
	ldr r4, [r4]
	cmp r4, #0
	ldreq r4, [r5, #+4]
	ldreqb r4, [r4, #+8]
	cmpeq r4, #6
	beq .LBB137_13	@ bb16
.LBB137_11:	@ bb14
.LBB137_12:	@ bb15
	ldr r0, .LCPI137_6
	emit_nops_till_bundle_end
	bl pedwarn
.LBB137_13:	@ bb16
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_return
	b .LBB137_37	@ return
.LBB137_14:	@ bb17
	mov r3, #0
	@comment
str r3, [sp, #+4]
	@comment
str r3, [sp]
	ldr r2, .LCPI137_7
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl convert_for_assignment
	ldr r3, .LCPI137_8
	ldr r3, [r3]
	ldr r2, .LCPI137_0
	ldr r2, [r2]
	ldr r4, [r2, #+44]
	mov r1, r0
	cmp r0, r3
	beq .LBB137_37	@ return
.LBB137_15:	@ bb18
	ldr r0, [r4, #+4]
	emit_nops_till_bundle_end
	bl convert
	mov r5, r0
	mov r3, r5
.LBB137_16:	@ bb19
	ldrb r2, [r3, #+8]
	cmp r2, #104
	bgt .LBB137_20	@ bb19
.LBB137_17:	@ bb19
	cmp r2, #56
	beq .LBB137_22	@ bb19.backedge
.LBB137_18:	@ bb19
	cmp r2, #57
	bne .LBB137_36	@ bb52
.LBB137_19:	@ bb21
	add r2, r3, #20
	b .LBB137_24	@ bb23
.LBB137_20:	@ bb19
	cmp r2, #110
	beq .LBB137_29	@ bb38.loopexit
.LBB137_21:	@ bb19
	sub r2, r2, #105
	cmp r2, #2
	bhi .LBB137_36	@ bb52
.LBB137_22:	@ bb19.backedge
	ldr r3, [r3, #+16]
	b .LBB137_16	@ bb19
.LBB137_23:	@ bb22
	add r2, r2, #16
.LBB137_24:	@ bb23
	ldr r2, [r2]
	ldr r1, [r2, #+4]
	ldrb r1, [r1, #+8]
	cmp r1, #13
	andne r0, r1, #255
	cmpne r0, #15
	bne .LBB137_26	@ bb30
	b .LBB137_36	@ bb52
.LBB137_25:	@ bb23
.LBB137_26:	@ bb30
	ldrb r0, [r2, #+8]
	sub r0, r0, #105
	and r0, r0, #255
	cmp r0, #3
	blo .LBB137_23	@ bb22
.LBB137_27:	@ bb31
	and r2, r1, #255
	cmp r2, #13
	beq .LBB137_36	@ bb52
.LBB137_28:	@ bb31
	and r2, r1, #255
	cmp r2, #15
	bne .LBB137_22	@ bb19.backedge
	b .LBB137_36	@ bb52
.LBB137_29:	@ bb38.loopexit
	ldr r2, .LCPI137_9
	ldr r2, [r2]
.LBB137_30:	@ bb38
	ldr r3, [r3, #+16]
	ldrb r1, [r3, #+8]
	ldr r0, [r2, +r1, lsl #2]
	ldrb r0, [r0]
	cmp r0, #114
	beq .LBB137_30	@ bb38
.LBB137_31:	@ bb39
	and r2, r1, #255
	cmp r2, #33
	bne .LBB137_36	@ bb52
.LBB137_32:	@ bb40
	ldrb r2, [r3, #+29]
	tst r2, #1
	ldreqb r2, [r3, #+10]
	tsteq r2, #4
	beq .LBB137_34	@ bb50
	b .LBB137_36	@ bb52
.LBB137_33:	@ bb45
.LBB137_34:	@ bb50
	ldr r2, .LCPI137_0
	ldr r2, [r2]
	ldr r3, [r3, #+36]
	cmp r3, r2
	ldreq r0, .LCPI137_10
	emit_nops_till_bundle_end
	bleq warning
.LBB137_35:	@ bb51
.LBB137_36:	@ bb52
	ldr r1, [r4, #+4]
	mov r0, #45
	mov r2, r4
	mov r3, r5
	emit_nops_till_bundle_end
	bl build
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	emit_nops_till_bundle_end
	bl expand_return
	ldr r3, .LCPI137_11
	mov r2, #1
	@comment
str r2, [r3]
.LBB137_37:	@ return
	sfi_add sp, sp, #8
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB137_38:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_1:
 	.long	.str87916

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_2:
 	.long	current_function_returns_null

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_3:
 	.long	warn_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_4:
 	.long	.str88917

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_5:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_6:
 	.long	.str89918

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_7:
 	.long	.str90919

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_8:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_9:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_10:
 	.long	.str91920

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI137_11:
 	.long	current_function_returns_value

	.size c_expand_return, .-c_expand_return


	.align	4
digest_init:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #20
	ldr r3, .LCPI138_0
	ldr r3, [r3]
	ldrb r4, [r0, #+8]
	@comment
str r2, [sp, #+8]
	@comment
str r1, [sp, #+16]
	@comment
str r0, [sp, #+12]
	cmp r3, r1
	beq .LBB138_100	@ bb116
.LBB138_1:	@ bb1
	ldr r3, [sp, #+16]
	ldrb r3, [r3, #+8]
	cmp r3, #107
	ldr r5, [sp, #+16]
	ldreq r5, [r5, #+16]
	b .LBB138_3	@ bb3
.LBB138_2:	@ bb2
.LBB138_3:	@ bb3
	and r3, r4, #255
	cmp r3, #18
	bne .LBB138_25	@ bb27
.LBB138_4:	@ bb4
	ldr r3, .LCPI138_1
	ldr r3, [r3]
	ldr r2, [sp, #+12]
	ldr r2, [r2, #+4]
	ldr r6, [r2, #+64]
	cmp r6, r3
	ldrne r3, .LCPI138_2
	ldrne r3, [r3]
	cmpne r6, r3
	bne .LBB138_6	@ bb6
	b .LBB138_9	@ bb9
.LBB138_5:	@ bb5
.LBB138_6:	@ bb6
	ldr r3, .LCPI138_3
	ldr r3, [r3]
	cmp r6, r3
	ldrne r3, .LCPI138_4
	ldrne r3, [r3]
	cmpne r6, r3
	bne .LBB138_8	@ bb8
	b .LBB138_9	@ bb9
.LBB138_7:	@ bb7
.LBB138_8:	@ bb8
	ldr r3, .LCPI138_5
	ldr r3, [r3]
	cmp r6, r3
	bne .LBB138_25	@ bb27
.LBB138_9:	@ bb9
	cmp r5, #0
	beq .LBB138_25	@ bb27
.LBB138_10:	@ bb10
	ldrb r3, [r5, #+8]
	cmp r3, #28
	bne .LBB138_25	@ bb27
.LBB138_11:	@ bb11
	ldr r4, [r5, #+4]
	ldr r0, [r4, #+64]
	ldr r4, [sp, #+12]
	ldr r1, [r4, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_12:	@ bb13
	ldr r4, .LCPI138_1
	ldr r4, [r4]
	ldr r3, [r5, #+4]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+64]
	cmp r3, r4
	beq .LBB138_18	@ bb17
.LBB138_13:	@ bb14
	ldrb r2, [r4, #+28]
	ldrb r1, [r6, #+28]
	cmp r1, r2
	bne .LBB138_17	@ bb16
.LBB138_14:	@ bb15
	ldr r0, .LCPI138_6
.LBB138_15:	@ bb15
	ldr r1, .LCPI138_7
.LBB138_16:	@ bb15
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	b .LBB138_62	@ bb63
.LBB138_17:	@ bb16
	cmp r3, r4
	bne .LBB138_19	@ bb19
.LBB138_18:	@ bb17
	ldrb r4, [r4, #+28]
	ldrb r3, [r6, #+28]
	cmp r3, r4
	bne .LBB138_102	@ bb18
.LBB138_19:	@ bb19
	ldr r4, [sp, #+12]
	@comment
str r4, [r5, #+4]
	ldr r4, [r4, #+12]
	cmp r4, #0
	beq .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_20:	@ bb20
	ldr r4, [sp, #+12]
	ldr r4, [r4, #+16]
	ldrb r3, [r4, #+8]
	cmp r3, #25
	bne .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_21:	@ bb21
	ldr r4, [r4, #+12]
	add r4, r4, #7
	mov r3, r4, asr #31
	add r4, r4, r3, lsr #29
	mov r4, r4, asr #3
	ldr r3, .LCPI138_1
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	ldrb r2, [r6, #+28]
	ldr r1, [r5, #+16]
	cmp r2, r3
	moveq r3, #1
	ldrne r3, .LCPI138_9
	ldrne r3, [r3]
	ldrneb r3, [r3, #+28]
	movne r3, r3, lsr #3
	b .LBB138_23	@ bb24
.LBB138_22:	@ bb22
.LBB138_23:	@ bb24
	sub r3, r1, r3
	cmp r3, r4
	ble .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_24:	@ bb25
	ldr r0, .LCPI138_10
	ldr r1, .LCPI138_7
	mov r2, #0
	emit_nops_till_bundle_end
	bl pedwarn_init
	mov r0, r5
	b .LBB138_101	@ bb116
.LBB138_25:	@ bb27
	cmp r5, #0
	ldrne r3, [r5, #+4]
	cmpne r3, #0
	bne .LBB138_27	@ bb29
	b .LBB138_70	@ bb74
.LBB138_26:	@ bb28
.LBB138_27:	@ bb29
	ldr r0, [r3, #+64]
	ldr r3, [sp, #+12]
	ldr r1, [r3, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB138_35	@ bb40
.LBB138_28:	@ bb30
	and r3, r4, #255
	cmp r3, #13
	beq .LBB138_32	@ bb33
.LBB138_29:	@ bb30
	and r3, r4, #255
	cmp r3, #18
	bne .LBB138_70	@ bb74
.LBB138_30:	@ bb31
	ldr r0, [r5, #+4]
	ldr r1, [sp, #+12]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB138_35	@ bb40
.LBB138_31:	@ bb32
	and r3, r4, #255
	cmp r3, #13
	bne .LBB138_70	@ bb74
.LBB138_32:	@ bb33
	ldr r3, [r5, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #18
	andne r2, r2, #255
	cmpne r2, #23
	bne .LBB138_70	@ bb74
.LBB138_33:	@ bb33
.LBB138_34:	@ bb39
	ldr r0, [r3, #+4]
	ldr r3, [sp, #+12]
	ldr r1, [r3, #+4]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB138_70	@ bb74
.LBB138_35:	@ bb40
	and r3, r4, #255
	cmp r3, #13
	beq .LBB138_40	@ bb41
.LBB138_36:	@ bb40
	and r4, r4, #255
	cmp r4, #18
	bne .LBB138_43	@ bb53
.LBB138_37:	@ bb50
	ldrb r4, [r5, #+8]
	cmp r4, #28
	andne r4, r4, #255
	cmpne r4, #43
	bne .LBB138_39	@ bb52
	b .LBB138_43	@ bb53
.LBB138_38:	@ bb50
.LBB138_39:	@ bb52
	ldr r0, .LCPI138_11
	b .LBB138_15	@ bb15
.LBB138_40:	@ bb41
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB138_36	@ bb40
.LBB138_41:	@ bb41
.LBB138_42:	@ bb48
	mov r0, r5
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, r0
.LBB138_43:	@ bb53
	ldr r4, .LCPI138_12
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB138_56	@ bb56
.LBB138_44:	@ bb54
	ldrb r4, [r5, #+8]
	cmp r4, #33
	ldreqb r4, [r5, #+9]
	moveq r3, r5
	ldreqb r2, [r3, #+8]!
	orreq r4, r2, r4, lsl #8
	ldreqb r2, [r3, #+3]
	ldreqb r3, [r3, #+2]
	orreq r3, r3, r2, lsl #8
	orreq r4, r4, r3, lsl #16
	tsteq r4, #2, 14 @ 524288
	beq .LBB138_46	@ bb.i
	b .LBB138_56	@ bb56
.LBB138_45:	@ bb55
.LBB138_46:	@ bb.i
	ldr r3, .LCPI138_13
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB138_56	@ bb56
.LBB138_47:	@ bb4.i
	ldr r3, .LCPI138_14
	ldr r3, [r3]
	cmp r3, #0
	tsteq r4, #1, 20 @ 4096
	beq .LBB138_49	@ bb10.i
	b .LBB138_56	@ bb56
.LBB138_48:	@ bb5.i
.LBB138_49:	@ bb10.i
	tst r4, #2, 20 @ 8192
	beq .LBB138_56	@ bb56
.LBB138_50:	@ bb15.i
	ldrb r4, [r5, #+31]
	tst r4, #16
	bne .LBB138_56	@ bb56
.LBB138_51:	@ bb20.i
	ldr r4, [r5, #+48]
	cmp r4, #0
	ldrneb r3, [r4, #+8]
	cmpne r3, #0
	bne .LBB138_53	@ bb22.i
	b .LBB138_56	@ bb56
.LBB138_52:	@ bb21.i
.LBB138_53:	@ bb22.i
	ldrb r3, [r4, #+9]
	tst r3, #2
	ldrneb r3, [r4, #+8]
	cmpne r3, #43
	bne .LBB138_55	@ bb28.i
	b .LBB138_56	@ bb56
.LBB138_54:	@ bb27.i
.LBB138_55:	@ bb28.i
	ldrb r3, [r5, #+28]
	cmp r3, #26
	moveq r4, r5
	mov r5, r4
.LBB138_56:	@ bb56
	ldr r4, [sp, #+8]
	cmp r4, #0
	beq .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_57:	@ bb57
	ldr r4, .LCPI138_14
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB138_63	@ bb64
.LBB138_58:	@ bb58
	ldrb r4, [r5, #+8]
	cmp r4, #44
	bne .LBB138_63	@ bb64
.LBB138_59:	@ bb59
	ldr r1, [r5, #+4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl valid_compound_expr_initializer
	ldr r4, .LCPI138_0
	ldr r4, [r4]
	@comment
str r0, [sp, #+16]
	cmp r0, r4
	beq .LBB138_104	@ bb60
.LBB138_60:	@ bb61
	ldr r0, .LCPI138_15
	ldr r1, .LCPI138_16
	mov r2, #0
	emit_nops_till_bundle_end
	bl pedwarn_init
.LBB138_61:	@ bb62
	ldr r4, .LCPI138_17
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB138_100	@ bb116
.LBB138_62:	@ bb63
	ldr r4, .LCPI138_0
	ldr r0, [r4]
	b .LBB138_101	@ bb116
.LBB138_63:	@ bb64
	ldr r4, [sp, #+8]
	cmp r4, #0
	beq .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_64:	@ bb65
	ldrb r4, [r5, #+9]
	tst r4, #2
	bne .LBB138_67	@ bb70
.LBB138_65:	@ bb69
	ldr r0, .LCPI138_15
.LBB138_66:	@ bb69
	ldr r1, .LCPI138_16
	b .LBB138_16	@ bb15
.LBB138_67:	@ bb70
	ldr r4, [sp, #+8]
	cmp r4, #0
	beq .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_68:	@ bb71
	ldr r1, [r5, #+4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	cmp r0, #0
	bne .LBB138_99	@ bb11.bb116_crit_edge
.LBB138_69:	@ bb72
	ldr r0, .LCPI138_18
	b .LBB138_66	@ bb69
.LBB138_70:	@ bb74
	sub r3, r4, #7
	cmp r3, #2
	blo .LBB138_73	@ bb82
.LBB138_71:	@ bb74
	and r3, r4, #255
	cmp r3, #13
	subne r3, r4, #9
	cmpne r3, #1
	bhi .LBB138_82	@ bb93
.LBB138_72:	@ bb78
.LBB138_73:	@ bb82
	mov r3, #0
	@comment
str r3, [sp, #+4]
	@comment
str r3, [sp]
	ldr r2, .LCPI138_19
	ldr r0, [sp, #+12]
	ldr r1, [sp, #+16]
	emit_nops_till_bundle_end
	bl convert_for_assignment
	@comment
str r0, [sp, #+16]
	ldr r3, [sp, #+8]
	cmp r3, #0
	beq .LBB138_100	@ bb116
.LBB138_74:	@ bb83
	ldr r3, [sp, #+16]
	ldrb r3, [r3, #+9]
	tst r3, #2
	bne .LBB138_79	@ bb89
.LBB138_75:	@ bb88
	ldr r0, .LCPI138_15
.LBB138_76:	@ bb88
	ldr r1, .LCPI138_16
.LBB138_77:	@ bb88
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
.LBB138_78:	@ bb114
	ldr r3, .LCPI138_0
	ldr r0, [r3]
	b .LBB138_101	@ bb116
.LBB138_79:	@ bb89
	ldr r3, [sp, #+8]
	cmp r3, #0
	beq .LBB138_100	@ bb116
.LBB138_80:	@ bb90
	ldr r3, [sp, #+16]
	ldr r1, [r3, #+4]
	mov r0, r3
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	cmp r0, #0
	bne .LBB138_100	@ bb116
.LBB138_81:	@ bb91
	ldr r0, .LCPI138_18
	b .LBB138_76	@ bb88
.LBB138_82:	@ bb93
	ldr r3, [sp, #+12]
	ldr r3, [r3, #+16]
	cmp r3, #0
	ldrneb r3, [r3, #+8]
	cmpne r3, #25
	bne .LBB138_105	@ bb95
.LBB138_83:	@ bb94
.LBB138_84:	@ bb96
	ldr r3, .LCPI138_21
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB138_97	@ bb115
.LBB138_85:	@ bb96.bb106_crit_edge
	mov r4, #0
	mov r5, #1
	mov r6, #29, 14 @ 7602176
	mov r7, #43
	mov r8, #0
	mov r9, r4
	ldr r10, [sp, #+12]
.LBB138_86:	@ bb106
	mov r11, r4
	ldrb r3, [r10, #+8]
	cmp r3, #22
	bhi .LBB138_95	@ bb112
.LBB138_87:	@ bb106
	tst r6, r5, lsl r3
	beq .LBB138_95	@ bb112
.LBB138_88:	@ bb98
	mov r0, r7
	mov r1, r10
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl build
	mov r4, r0
	cmp r11, #0
	beq .LBB138_106	@ bb98.bb101_crit_edge
.LBB138_89:	@ bb100
	mov r0, r8
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #+20]
.LBB138_90:	@ bb101
	ldrb r11, [r10, #+8]
	cmp r11, #18
	bne .LBB138_93	@ bb103
.LBB138_91:	@ bb102
	add r10, r10, #4
.LBB138_92:	@ bb106.backedge
	ldr r10, [r10]
	b .LBB138_86	@ bb106
.LBB138_93:	@ bb103
	ldr r10, [r10, #+12]
	cmp r10, #0
	bne .LBB138_91	@ bb102
.LBB138_94:	@ bb105
	ldr r0, .LCPI138_22
	b .LBB138_66	@ bb69
.LBB138_95:	@ bb112
	ldr r3, [sp, #+12]
	cmp r10, r3
	beq .LBB138_78	@ bb114
.LBB138_96:	@ bb113
	mov r0, r10
	ldr r1, [sp, #+16]
	ldr r2, [sp, #+8]
	emit_nops_till_bundle_end
	bl digest_init
	mov r1, r0
	mov r0, #0
	emit_nops_till_bundle_end
	bl build_tree_list
	@comment
str r0, [r11, #+20]
	mov r0, r9
	b .LBB138_101	@ bb116
.LBB138_97:	@ bb115
	ldr r0, .LCPI138_22
	b .LBB138_76	@ bb88
.LBB138_98:	@ bb1.bb3_crit_edge
.LBB138_99:	@ bb11.bb116_crit_edge
	@comment
str r5, [sp, #+16]
.LBB138_100:	@ bb116
	ldr r0, [sp, #+16]
.LBB138_101:	@ bb116
	sfi_add sp, sp, #20
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB138_102:	@ bb18
	ldr r0, .LCPI138_8
	b .LBB138_15	@ bb15
.LBB138_103:	@ bb21.bb24_crit_edge
.LBB138_104:	@ bb60
	ldr r0, .LCPI138_15
	ldr r1, .LCPI138_16
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	b .LBB138_61	@ bb62
.LBB138_105:	@ bb95
	ldr r0, .LCPI138_20
	ldr r1, .LCPI138_7
	b .LBB138_77	@ bb88
.LBB138_106:	@ bb98.bb101_crit_edge
	mov r9, r4
	b .LBB138_90	@ bb101
	.align	4
.LBB138_107:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_1:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_2:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_3:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_4:
 	.long	unsigned_wchar_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_5:
 	.long	signed_wchar_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_6:
 	.long	.str92921

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_7:
 	.long	.str93922

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_8:
 	.long	.str94923

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_9:
 	.long	wchar_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_10:
 	.long	.str95924

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_11:
 	.long	.str96925

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_12:
 	.long	optimize

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_13:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_14:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_15:
 	.long	.str97926

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_16:
 	.long	.str12841

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_17:
 	.long	flag_pedantic_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_18:
 	.long	.str98927

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_19:
 	.long	.str99928

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_20:
 	.long	.str100929

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_21:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI138_22:
 	.long	.str101930

	.size digest_init, .-digest_init


	.align	4
output_init_element:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	ldr r12, [r0, #+4]
	ldrb lr, [r12, #+8]
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp lr, #18
	bne .LBB139_66	@ entry
.LBB139_1:	@ bb1
	ldrb r3, [r7, #+8]
	cmp r3, #28
	ldreqb r3, [r6, #+8]
	cmpeq r3, #18
	beq .LBB139_3	@ bb3
	b .LBB139_4	@ bb4
.LBB139_2:	@ bb2
.LBB139_3:	@ bb3
	ldr r3, [r6, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #7
	beq .LBB139_6	@ bb6
.LBB139_4:	@ bb4
	ldr r0, [r12, #+64]
	ldr r1, [r6, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	bne .LBB139_6	@ bb6
.LBB139_5:	@ bb5
	mov r0, r7
	emit_nops_till_bundle_end
	bl default_conversion
	mov r7, r0
.LBB139_6:	@ bb6
	ldr r3, .LCPI139_0
	ldr r3, [r3]
	cmp r7, r3
	beq .LBB139_61	@ bb7
.LBB139_7:	@ bb8
	ldrb r3, [r7, #+9]
	tst r3, #2
	beq .LBB139_62	@ bb12
.LBB139_8:	@ bb13
	ldr r1, [r7, #+4]
	mov r0, r7
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	cmp r0, #0
	beq .LBB139_12	@ bb21
.LBB139_9:	@ bb14
	ldr r3, .LCPI139_3
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	sub r3, r3, #20
	and r3, r3, #255
	cmp r3, #1
	bhi .LBB139_14	@ bb22
.LBB139_10:	@ bb15
	ldrb r3, [r5, #+29]
	tst r3, #16
	ldrneb r3, [r7, #+8]
	cmpne r3, #25
	bne .LBB139_12	@ bb21
	b .LBB139_14	@ bb22
.LBB139_11:	@ bb20
.LBB139_12:	@ bb21
	ldr r3, .LCPI139_4
.LBB139_13:	@ bb21
	mov r2, #0
	@comment
str r2, [r3]
.LBB139_14:	@ bb22
	ldr r3, .LCPI139_5
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB139_16	@ bb29
.LBB139_15:	@ bb23
	ldrb r3, [r7, #+9]
	tst r3, #2
	beq .LBB139_63	@ bb28
.LBB139_16:	@ bb29
	ldr r3, .LCPI139_8
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB139_20	@ bb32
.LBB139_17:	@ bb30
	ldr r1, [r7, #+4]
	mov r0, r7
	emit_nops_till_bundle_end
	bl initializer_constant_valid_p
	cmp r0, #0
	bne .LBB139_20	@ bb32
.LBB139_18:	@ bb31
	ldr r0, .LCPI139_9
.LBB139_19:	@ bb31
	ldr r1, .LCPI139_7
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	ldr r7, .LCPI139_0
	ldr r7, [r7]
.LBB139_20:	@ bb32
	cmp r4, #0
	beq .LBB139_64	@ bb32.bb45_crit_edge
.LBB139_21:	@ bb33
	ldr r8, .LCPI139_3
	ldr r8, [r8]
	ldrb r8, [r8, #+8]
	sub r8, r8, #20
	and r8, r8, #255
	cmp r8, #2
	bhs .LBB139_65	@ bb33.bb36_crit_edge
.LBB139_22:	@ bb34
	ldr r8, .LCPI139_10
	ldr r1, [r8]
	mov r0, r5
	emit_nops_till_bundle_end
	bl purpose_member
	cmp r0, #0
	beq .LBB139_65	@ bb33.bb36_crit_edge
.LBB139_23:	@ bb35
	ldr r0, .LCPI139_11
	ldr r1, .LCPI139_7
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	mov r8, #1
.LBB139_24:	@ bb36
	ldr r3, .LCPI139_3
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	bne .LBB139_32	@ bb45
.LBB139_25:	@ bb36.bb42_crit_edge
	ldr r9, .LCPI139_10
.LBB139_26:	@ bb42
	ldr r9, [r9]
	cmp r9, #0
	beq .LBB139_32	@ bb45
.LBB139_27:	@ bb38
	ldr r0, [r9, #+12]
	cmp r0, #0
	beq .LBB139_26	@ bb42
.LBB139_28:	@ bb39
	ldrb r3, [r0, #+8]
	cmp r3, #25
	bne .LBB139_26	@ bb42
.LBB139_29:	@ bb40
	ldr r3, .LCPI139_12
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	beq .LBB139_26	@ bb42
.LBB139_30:	@ bb43
	cmp r9, #0
	beq .LBB139_32	@ bb45
.LBB139_31:	@ bb44
	ldr r0, .LCPI139_11
	ldr r1, .LCPI139_7
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	mov r8, #1
.LBB139_32:	@ bb45
	ldr r3, .LCPI139_3
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	bne .LBB139_36	@ bb49
.LBB139_33:	@ bb46
	ldr r3, .LCPI139_13
	ldr r1, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	bne .LBB139_36	@ bb49
.LBB139_34:	@ bb47
	cmp r8, #0
	bne .LBB139_60	@ return
.LBB139_35:	@ bb48
	ldr r4, .LCPI139_5
	ldr r2, [r4]
	ldr r4, .LCPI139_10
	ldr r8, [r4]
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl digest_init
	mov r6, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl copy_node
	mov r1, r6
	b .LBB139_40	@ bb52
.LBB139_36:	@ bb49
	ldr r3, .LCPI139_3
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	cmp r3, #20
	bne .LBB139_41	@ bb53
.LBB139_37:	@ bb50
	ldr r2, .LCPI139_14
	ldr r2, [r2]
	cmp r2, r5
	beq .LBB139_41	@ bb53
.LBB139_38:	@ bb51
	cmp r8, #0
	bne .LBB139_60	@ return
.LBB139_39:	@ bb52
	ldr r3, .LCPI139_5
	ldr r2, [r3]
	ldr r4, .LCPI139_10
	ldr r8, [r4]
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl digest_init
	mov r1, r0
	mov r0, r5
.LBB139_40:	@ bb52
	mov r2, r8
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r4]
	b .LBB139_60	@ return
.LBB139_41:	@ bb53
	cmp r8, #0
	bne .LBB139_52	@ bb64
.LBB139_42:	@ bb54
	ldr r2, .LCPI139_15
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB139_47	@ bb59
.LBB139_43:	@ bb55
	cmp r5, #0
	beq .LBB139_46	@ bb58
.LBB139_44:	@ bb56
	ldrb r3, [r5, #+8]
	cmp r3, #25
	bne .LBB139_46	@ bb58
.LBB139_45:	@ bb57
	mov r0, r5
	emit_nops_till_bundle_end
	bl copy_node
	mov r5, r0
.LBB139_46:	@ bb58
	ldr r3, .LCPI139_5
	ldr r2, [r3]
	ldr r8, .LCPI139_16
	ldr r9, [r8]
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl digest_init
	mov r1, r0
	mov r0, r5
	mov r2, r9
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r8]
	b .LBB139_52	@ bb64
.LBB139_47:	@ bb59
	and r3, r3, #255
	cmp r3, #20
	bne .LBB139_50	@ bb62
.LBB139_48:	@ bb60
	ldr r3, .LCPI139_17
	ldr r0, [r3]
	ldr r1, [r5, #+40]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	bne .LBB139_50	@ bb62
.LBB139_49:	@ bb61
	ldr r3, .LCPI139_17
	ldr r3, [r3]
	ldr r3, [r3, #+12]
	ldr r2, [r5, #+40]
	ldr r2, [r2, #+12]
	mov r1, r3, asr #31
	add r3, r3, r1, lsr #29
	mov r1, r2, asr #31
	add r2, r2, r1, lsr #29
	mov r2, r2, asr #3
	sub r0, r2, r3, asr #3
	emit_nops_till_bundle_end
	bl assemble_zeros
.LBB139_50:	@ bb62
	mov r0, r6
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r8, r0
	ldr r3, .LCPI139_5
	ldr r2, [r3]
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl digest_init
	mov r1, r8
	emit_nops_till_bundle_end
	bl output_constant
	ldr r3, .LCPI139_3
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	sub r3, r3, #20
	and r3, r3, #255
	cmp r3, #1
	bhi .LBB139_52	@ bb64
.LBB139_51:	@ bb63
	ldr r1, [r5, #+40]
	ldr r2, [r5, #+20]
	mov r0, #56
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, [r0, #+12]
	ldr r2, .LCPI139_17
	ldr r1, [r2]
	@comment
str r3, [r1, #+12]
	ldr r3, [r0, #+16]
	ldr r2, [r2]
	@comment
str r3, [r2, #+16]
.LBB139_52:	@ bb64
	ldr r3, .LCPI139_3
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	cmp r3, #21
	beq .LBB139_57	@ bb69
.LBB139_53:	@ bb64
	and r2, r3, #255
	cmp r2, #20
	beq .LBB139_56	@ bb67
.LBB139_54:	@ bb64
	and r3, r3, #255
	cmp r3, #18
	bne .LBB139_58	@ bb70
.LBB139_55:	@ bb65
	ldr r5, .LCPI139_13
	ldr r1, [r5]
	ldr r3, .LCPI139_18
	ldr r2, [r3]
	mov r0, #56
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, [r0, #+12]
	ldr r2, [r5]
	@comment
str r3, [r2, #+12]
	ldr r3, [r0, #+16]
	ldr r2, [r5]
	@comment
str r3, [r2, #+16]
	b .LBB139_58	@ bb70
.LBB139_56:	@ bb67
	ldr r3, .LCPI139_14
	ldr r2, [r3]
	ldr r2, [r2]
	@comment
str r2, [r3]
	b .LBB139_58	@ bb70
.LBB139_57:	@ bb69
	ldr r3, .LCPI139_14
	mov r2, #0
	@comment
str r2, [r3]
.LBB139_58:	@ bb70
	cmp r4, #0
	movne r0, #0
	emit_nops_till_bundle_end
	blne output_pending_init_elements
.LBB139_59:	@ bb71
.LBB139_60:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB139_61:	@ bb7
	ldr r3, .LCPI139_1
	mov r2, #1
	@comment
str r2, [r3]
	b .LBB139_14	@ bb22
.LBB139_62:	@ bb12
	ldr r3, .LCPI139_2
	b .LBB139_13	@ bb21
.LBB139_63:	@ bb28
	ldr r0, .LCPI139_6
	b .LBB139_19	@ bb31
.LBB139_64:	@ bb32.bb45_crit_edge
	mov r8, #0
	b .LBB139_32	@ bb45
.LBB139_65:	@ bb33.bb36_crit_edge
	mov r8, #0
	b .LBB139_24	@ bb36
.LBB139_66:	@ entry
	and r12, lr, #255
	cmp r12, #23
	beq .LBB139_5	@ bb5
	b .LBB139_6	@ bb6
	.align	4
.LBB139_67:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_1:
 	.long	constructor_erroneous

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_2:
 	.long	constructor_constant

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_3:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_4:
 	.long	constructor_simple

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_5:
 	.long	require_constant_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_6:
 	.long	.str97926

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_7:
 	.long	.str12841

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_8:
 	.long	require_constant_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_9:
 	.long	.str98927

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_10:
 	.long	constructor_pending_elts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_11:
 	.long	.str102931

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_12:
 	.long	constructor_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_13:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_14:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_15:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_16:
 	.long	constructor_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_17:
 	.long	constructor_bit_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI139_18:
 	.long	integer_one_node

	.size output_init_element, .-output_init_element


	.align	4
output_pending_init_elements:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	ldr r4, .LCPI140_0
	mov r5, #0
	mov r6, r0
	mov r7, #58
	mov r8, #8
	mov r9, #60
	b .LBB140_17	@ bb16
.LBB140_1:	@ bb
	ldr r5, .LCPI140_1
	ldr r5, [r5]
	ldrb r5, [r5, #+8]
	cmp r5, #18
	bne .LBB140_6	@ bb7
.LBB140_2:	@ bb1
	ldr r5, .LCPI140_2
	ldr r1, [r5]
	ldr r0, [r4, #+12]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	ldr r2, [r5]
	cmp r0, #0
	bne .LBB140_38	@ bb2
.LBB140_3:	@ bb3
	ldr r0, [r4, #+12]
	mov r1, r2
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	bne .LBB140_16	@ bb15
.LBB140_4:	@ bb4
	cmp r10, #0
	beq .LBB140_15	@ bb14
.LBB140_5:	@ bb5
	ldr r0, [r4, #+12]
	mov r1, r10
	b .LBB140_14	@ bb13
.LBB140_6:	@ bb7
	sub r5, r5, #20
	and r5, r5, #255
	cmp r5, #1
	bhi .LBB140_16	@ bb15
.LBB140_7:	@ bb8
	ldr r5, .LCPI140_3
	ldr r2, [r5]
	ldr r5, [r4, #+12]
	cmp r5, r2
	bne .LBB140_10	@ bb10
.LBB140_8:	@ bb9
	ldr r0, [r4, #+16]
	ldr r1, [r2, #+4]
.LBB140_9:	@ bb9
	mov r5, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl output_init_element
	ldr r4, .LCPI140_0
	b .LBB140_17	@ bb16
.LBB140_10:	@ bb10
	cmp r2, #0
	beq .LBB140_16	@ bb15
.LBB140_11:	@ bb11
	ldr r0, [r5, #+40]
	ldr r1, [r2, #+40]
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	bne .LBB140_16	@ bb15
.LBB140_12:	@ bb12
	cmp r10, #0
	beq .LBB140_15	@ bb14
.LBB140_13:	@ bb13
	ldr r5, [r4, #+12]
	ldr r0, [r5, #+40]
	ldr r1, [r10, #+40]
.LBB140_14:	@ bb13
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	ldrne r10, [r4, #+12]
	b .LBB140_16	@ bb15
.LBB140_15:	@ bb14
	ldr r10, [r4, #+12]
.LBB140_16:	@ bb15
	mov r5, r10
.LBB140_17:	@ bb16
	mov r10, r5
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB140_1	@ bb
.LBB140_18:	@ bb17
	cmp r10, #0
	cmpne r6, #0
	bne .LBB140_20	@ bb20
	b .LBB140_37	@ return
.LBB140_19:	@ bb17
.LBB140_20:	@ bb20
	ldr r4, .LCPI140_4
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB140_32	@ bb35
.LBB140_21:	@ bb21
	mov r4, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl size_int
	ldr r4, .LCPI140_1
	ldr r3, [r4]
	ldrb r4, [r3, #+8]
	sub r5, r4, #20
	and r5, r5, #255
	cmp r5, #1
	bhi .LBB140_28	@ bb30
.LBB140_22:	@ bb22
	ldr r4, .LCPI140_3
	ldr r4, [r4]
	add r5, r3, #12
.LBB140_23:	@ bb25
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB140_26	@ bb28
.LBB140_24:	@ bb23
	ldr r3, [r5]
	cmp r3, r4
	bne .LBB140_23	@ bb25
.LBB140_25:	@ bb26
	cmp r5, #0
	bne .LBB140_39	@ bb27
.LBB140_26:	@ bb28
	mov r4, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl size_int
.LBB140_27:	@ bb29
	mov r11, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r10, #+40]
	mov r0, r9
	emit_nops_till_bundle_end
	bl size_binop
	ldr r4, .LCPI140_5
	ldr r3, [r4]
	ldr r5, [r10, #+40]
	ldr r5, [r5, #+16]
	@comment
str r5, [r3, #+16]
	ldr r4, [r4]
	ldr r3, [r10, #+40]
	ldr r3, [r3, #+12]
	@comment
str r3, [r4, #+12]
	ldr r4, .LCPI140_3
	@comment
str r10, [r4]
	b .LBB140_30	@ bb33
.LBB140_28:	@ bb30
	and r11, r4, #255
	ldr r4, .LCPI140_0
	mov r5, #0
	cmp r11, #18
	bne .LBB140_17	@ bb16
.LBB140_29:	@ bb31
	ldr r0, [r3, #+4]
	emit_nops_till_bundle_end
	bl size_in_bytes
	mov r2, r0
	ldr r4, .LCPI140_2
	ldr r1, [r4]
	mov r0, r7
	emit_nops_till_bundle_end
	bl size_binop
	mov r11, r0
	ldr r5, .LCPI140_1
	ldr r5, [r5]
	ldr r0, [r5, #+4]
	emit_nops_till_bundle_end
	bl size_in_bytes
	mov r2, r0
	mov r0, r7
	mov r1, r10
	emit_nops_till_bundle_end
	bl size_binop
	ldr r5, [r4]
	ldr r3, [r10, #+12]
	@comment
str r3, [r5, #+12]
	ldr r4, [r4]
	ldr r5, [r10, #+16]
	@comment
str r5, [r4, #+16]
.LBB140_30:	@ bb33
	ldr r4, .LCPI140_0
	mov r5, #0
	cmp r11, #0
	beq .LBB140_17	@ bb16
.LBB140_31:	@ bb34
	ldr r4, [r11, #+12]
	ldr r5, [r0, #+12]
	sub r0, r5, r4
	emit_nops_till_bundle_end
	bl assemble_zeros
	b .LBB140_34	@ bb36
.LBB140_32:	@ bb35
	ldr r4, .LCPI140_1
	ldr r4, [r4]
	ldrb r4, [r4, #+8]
	sub r5, r4, #20
	and r5, r5, #255
	cmp r5, #1
	bhi .LBB140_35	@ bb37
.LBB140_33:	@ bb36
	ldr r4, .LCPI140_3
	@comment
str r10, [r4]
.LBB140_34:	@ bb36
	ldr r4, .LCPI140_0
	mov r5, #0
	b .LBB140_17	@ bb16
.LBB140_35:	@ bb37
	and r3, r4, #255
	ldr r4, .LCPI140_0
	mov r5, #0
	cmp r3, #18
	bne .LBB140_17	@ bb16
.LBB140_36:	@ bb38
	ldr r4, .LCPI140_2
	ldr r5, [r4]
	ldr r3, [r10, #+12]
	@comment
str r3, [r5, #+12]
	ldr r4, [r4]
	ldr r5, [r10, #+16]
	@comment
str r5, [r4, #+16]
	b .LBB140_34	@ bb36
.LBB140_37:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB140_38:	@ bb2
	ldr r5, .LCPI140_1
	ldr r5, [r5]
	ldr r1, [r5, #+4]
	ldr r0, [r4, #+16]
	b .LBB140_9	@ bb9
.LBB140_39:	@ bb27
	mov r0, r8
	emit_nops_till_bundle_end
	bl size_int
	mov r4, r0
	ldr r1, [r5, #+40]
	ldr r2, [r5, #+20]
	mov r3, #56
	mov r0, r3
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	mov r0, r9
	mov r2, r4
	emit_nops_till_bundle_end
	bl size_binop
	b .LBB140_27	@ bb29
	.align	4
.LBB140_40:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI140_0:
 	.long	constructor_pending_elts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI140_1:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI140_2:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI140_3:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI140_4:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI140_5:
 	.long	constructor_bit_index

	.size output_pending_init_elements, .-output_pending_init_elements


	.globl	pop_init_level
	.align	4
pop_init_level:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	cmp r0, #0
	bne .LBB141_2	@ bb3
.LBB141_1:	@ bb2.preheader
	ldr r3, .LCPI141_0
	ldr r3, [r3]
	ldrb r3, [r3, #+58]
	cmp r3, #0
	bne .LBB141_53	@ bb
.LBB141_2:	@ bb3
	ldr r3, .LCPI141_1
	ldr r0, [r3]
	ldr r3, .LCPI141_0
	ldr r4, [r3]
	cmp r0, #0
	moveq r0, #0
	emit_nops_till_bundle_end
	blne int_size_in_bytes
	b .LBB141_4	@ bb5
.LBB141_3:	@ bb4
.LBB141_4:	@ bb5
	mov r5, r0
	mov r0, #1
	emit_nops_till_bundle_end
	bl output_pending_init_elements
	ldr r1, [r4, #+52]
	cmp r1, #0
	beq .LBB141_20	@ bb22
.LBB141_5:	@ bb6
	ldr r3, [r4]
	cmp r3, #0
	bne .LBB141_16	@ bb64
.LBB141_6:	@ bb7
	ldr r3, .LCPI141_2
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI141_3
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB141_8	@ bb9
	b .LBB141_16	@ bb64
.LBB141_7:	@ bb8
.LBB141_8:	@ bb9
	ldr r6, .LCPI141_1
	ldr r0, [r6]
	ldr r3, .LCPI141_4
	ldr r2, [r3]
	emit_nops_till_bundle_end
	bl digest_init
	ldr r3, [r6]
	ldrb r2, [r3, #+8]
	mov r6, r0
	cmp r2, #18
	ldreq r3, [r3, #+12]
	cmpeq r3, #0
	beq .LBB141_10	@ bb11
	b .LBB141_15	@ bb21
.LBB141_9:	@ bb10
.LBB141_10:	@ bb11
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r5, .LCPI141_1
	ldr r5, [r5]
	ldrb r5, [r5, #+9]
	tst r5, #4
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB141_11:	@ bb15
.LBB141_12:	@ bb16
	emit_nops_till_bundle_end
	bl suspend_momentary
	ldr r5, .LCPI141_0
	ldr r5, [r5]
	ldr r5, [r5]
	mov r7, r0
	cmp r5, #0
	bne .LBB141_55	@ bb17
.LBB141_13:	@ bb18
	ldr r5, .LCPI141_1
	ldr r0, [r5]
	mov r2, #0
	mov r1, r6
	emit_nops_till_bundle_end
	bl complete_array_type
	cmp r0, #0
	bne .LBB141_55	@ bb17
.LBB141_14:	@ bb20
	ldr r5, .LCPI141_1
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r5, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl resume_momentary
	emit_nops_till_bundle_end
	bl pop_obstacks
.LBB141_15:	@ bb21
	mov r1, r5
	mov r0, r6
	emit_nops_till_bundle_end
	bl output_constant
	mov r1, r6
.LBB141_16:	@ bb64
	mov r5, r1
	ldr r3, [r4, #+4]
	ldr r2, .LCPI141_1
	@comment
str r3, [r2]
	ldr r3, [r4, #+8]
	ldr r2, .LCPI141_18
	@comment
str r3, [r2]
	ldr r3, [r4, #+12]
	ldr r2, .LCPI141_19
	@comment
str r3, [r2]
	ldr r3, [r4, #+16]
	ldr r2, .LCPI141_20
	@comment
str r3, [r2]
	ldr r3, [r4, #+20]
	ldr r2, .LCPI141_21
	@comment
str r3, [r2]
	ldr r3, [r4, #+24]
	ldr r2, .LCPI141_14
	@comment
str r3, [r2]
	ldr r3, [r4, #+28]
	ldr r2, .LCPI141_22
	@comment
str r3, [r2]
	ldr r3, [r4, #+32]
	ldr r2, .LCPI141_13
	@comment
str r3, [r2]
	ldr r3, [r4, #+36]
	ldr r2, .LCPI141_5
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+56]
	ldr r2, .LCPI141_11
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+57]
	ldr r2, .LCPI141_12
	@comment
str r3, [r2]
	ldrsb r3, [r4, #+60]
	ldr r2, .LCPI141_10
	@comment
str r3, [r2]
	ldr r3, [r4, #+44]
	ldr r2, .LCPI141_23
	@comment
str r3, [r2]
	ldr r3, [r4, #+48]
	ldr r2, .LCPI141_24
	@comment
str r3, [r2]
	ldrsb r2, [r4, #+59]
	ldr r1, .LCPI141_3
	@comment
str r2, [r1]
	ldr r2, .LCPI141_25
	ldr r2, [r2]
	add r3, r2, r3, lsl #3
	ldr r2, .LCPI141_26
	@comment
str r3, [r2]
	ldr r6, [r4]
	ldr r3, .LCPI141_0
	@comment
str r6, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl free
	cmp r5, #0
	bne .LBB141_19	@ bb69
.LBB141_17:	@ bb65
	cmp r6, #0
	beq .LBB141_51	@ bb66
.LBB141_18:	@ bb65.bb69_crit_edge
	mov r5, #0
.LBB141_19:	@ bb69
	mov r0, r5
	b .LBB141_52	@ bb69
.LBB141_20:	@ bb22
	ldr r3, .LCPI141_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB141_50	@ bb22.bb64_crit_edge
.LBB141_21:	@ bb23
	ldrb r3, [r3, #+8]
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #2
	blo .LBB141_28	@ bb35thread-split
.LBB141_22:	@ bb23
	and r3, r3, #255
	cmp r3, #18
	beq .LBB141_28	@ bb35thread-split
.LBB141_23:	@ bb29
	ldr r3, .LCPI141_3
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB141_29	@ bb35
.LBB141_24:	@ bb30
	ldr r3, .LCPI141_5
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB141_56	@ bb31
.LBB141_25:	@ bb32
	ldr r5, [r3]
	cmp r5, #0
	beq .LBB141_27	@ bb34
.LBB141_26:	@ bb33
	ldr r0, .LCPI141_9
	ldr r1, .LCPI141_7
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	ldr r3, .LCPI141_5
	ldr r3, [r3]
.LBB141_27:	@ bb34
	ldr r1, [r3, #+16]
	b .LBB141_16	@ bb64
.LBB141_28:	@ bb35thread-split
	ldr r3, .LCPI141_3
	ldr r3, [r3]
.LBB141_29:	@ bb35
	cmp r3, #0
	bne .LBB141_37	@ bb44
.LBB141_30:	@ bb36
	ldr r5, .LCPI141_10
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB141_57	@ bb37
.LBB141_31:	@ bb38
	emit_nops_till_bundle_end
	bl suspend_momentary
	mov r5, r0
	ldr r3, .LCPI141_5
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl nreverse
	mov r3, r0
	ldr r2, .LCPI141_1
	ldr r1, [r2]
	mov r0, #43
	mov r2, #0
	emit_nops_till_bundle_end
	bl build
	ldr r3, .LCPI141_11
	ldr r3, [r3]
	mov r6, r0
	cmp r3, #0
	beq .LBB141_33	@ bb40
.LBB141_32:	@ bb39
	ldrb r3, [r6, #+10]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 24 @ 512
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldr r3, .LCPI141_11
	ldr r3, [r3]
.LBB141_33:	@ bb40
	cmp r3, #0
	ldrne r3, .LCPI141_12
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB141_35	@ bb42
	b .LBB141_36	@ bb43
.LBB141_34:	@ bb41
.LBB141_35:	@ bb42
	ldrb r3, [r6, #+10]
	ldrb r2, [r6, #+11]
	mov r1, r6
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #1, 14 @ 262144
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
.LBB141_36:	@ bb43
	mov r0, r5
	emit_nops_till_bundle_end
	bl resume_momentary
	mov r1, r6
	b .LBB141_16	@ bb64
.LBB141_37:	@ bb44
	emit_nops_till_bundle_end
	bl suspend_momentary
	ldr r3, .LCPI141_1
	ldr r3, [r3]
	ldrb r2, [r3, #+8]
	sub r1, r2, #20
	and r1, r1, #255
	mov r6, r0
	cmp r1, #1
	bls .LBB141_58	@ bb45
.LBB141_38:	@ bb46
	and r2, r2, #255
	cmp r2, #18
	bne .LBB141_49	@ bb63
.LBB141_39:	@ bb48
	ldr r3, [r3, #+12]
	cmp r3, #0
	bne .LBB141_46	@ bb59
.LBB141_40:	@ bb49
	ldr r5, .LCPI141_14
	ldr r1, [r5]
	ldr r5, .LCPI141_15
	ldr r2, [r5]
	mov r0, #57
	emit_nops_till_bundle_end
	bl size_binop
	mov r5, r0
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	ldr r3, .LCPI141_1
	ldr r3, [r3]
	ldrb r3, [r3, #+9]
	tst r3, #4
	emit_nops_till_bundle_end
	blne end_temporary_allocation
.LBB141_41:	@ bb54
.LBB141_42:	@ bb55
	mov r0, r5
	emit_nops_till_bundle_end
	bl copy_node
	mov r5, r0
	ldr r7, .LCPI141_1
	ldr r8, [r7]
	emit_nops_till_bundle_end
	bl build_index_type
	@comment
str r0, [r8, #+12]
	ldr r3, [r7]
	ldr r3, [r3, #+12]
	@comment
str r3, [r5, #+4]
	ldr r5, .LCPI141_16
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB141_45	@ bb58
.LBB141_43:	@ bb56
	ldr r5, .LCPI141_1
	ldr r5, [r5]
	ldr r5, [r5, #+12]
	ldr r0, [r5, #+56]
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	ldrlt r5, .LCPI141_2
	ldrlt r0, [r5]
	ldrlt r1, .LCPI141_17
	emit_nops_till_bundle_end
	bllt error_with_decl
.LBB141_44:	@ bb57
.LBB141_45:	@ bb58
	ldr r5, .LCPI141_1
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl layout_type
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r5, r0
	emit_nops_till_bundle_end
	bl pop_obstacks
.LBB141_46:	@ bb59
	ldr r3, .LCPI141_1
	ldr r3, [r3]
	ldr r0, [r3, #+4]
	emit_nops_till_bundle_end
	bl size_in_bytes
	mov r2, r0
	ldr r3, .LCPI141_14
	ldr r1, [r3]
	mov r0, #58
	emit_nops_till_bundle_end
	bl size_binop
.LBB141_47:	@ bb61
	cmp r0, #0
	ldrne r3, [r0, #+12]
	subne r0, r5, r3
	emit_nops_till_bundle_end
	blne assemble_zeros
.LBB141_48:	@ bb62
.LBB141_49:	@ bb63
	mov r0, r6
	emit_nops_till_bundle_end
	bl resume_momentary
.LBB141_50:	@ bb22.bb64_crit_edge
	mov r1, #0
	b .LBB141_16	@ bb64
.LBB141_51:	@ bb66
	ldr r5, .LCPI141_8
	ldr r0, [r5]
.LBB141_52:	@ bb69
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB141_53:	@ bb
	mov r0, #1
	emit_nops_till_bundle_end
	bl pop_init_level
	emit_nops_till_bundle_end
	bl process_init_element
	b .LBB141_1	@ bb2.preheader
.LBB141_54:	@ bb3.bb5_crit_edge
.LBB141_55:	@ bb17
	emit_nops_till_bundle_end
	bl abort
.LBB141_56:	@ bb31
	ldr r0, .LCPI141_6
	ldr r1, .LCPI141_7
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	ldr r3, .LCPI141_8
	ldr r1, [r3]
	b .LBB141_16	@ bb64
.LBB141_57:	@ bb37
	ldr r5, .LCPI141_8
	ldr r1, [r5]
	b .LBB141_16	@ bb64
.LBB141_58:	@ bb45
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r3, .LCPI141_13
	ldr r1, [r3]
	mov r0, #60
	emit_nops_till_bundle_end
	bl size_binop
	b .LBB141_47	@ bb61
	.align	4
.LBB141_59:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_0:
 	.long	constructor_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_1:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_2:
 	.long	constructor_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_3:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_4:
 	.long	require_constant_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_5:
 	.long	constructor_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_6:
 	.long	.str103932

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_7:
 	.long	.str12841

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_8:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_9:
 	.long	.str104933

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_10:
 	.long	constructor_erroneous

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_11:
 	.long	constructor_constant

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_12:
 	.long	constructor_simple

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_13:
 	.long	constructor_bit_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_14:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_15:
 	.long	integer_one_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_16:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_17:
 	.long	.str105934

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_18:
 	.long	constructor_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_19:
 	.long	constructor_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_20:
 	.long	constructor_range_end

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_21:
 	.long	constructor_max_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_22:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_23:
 	.long	constructor_pending_elts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_24:
 	.long	constructor_depth

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_25:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI141_26:
 	.long	spelling

	.size pop_init_level, .-pop_init_level


	.globl	process_init_element
	.align	4
process_init_element:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	mov r4, r0
	cmp r0, #0
	beq .LBB142_102	@ entry.bb11_crit_edge
.LBB142_1:	@ bb
	ldrb r5, [r4, #+8]
	cmp r5, #28
	bne .LBB142_102	@ entry.bb11_crit_edge
.LBB142_2:	@ bb5
	ldr r5, .LCPI142_0
	ldr r5, [r5]
	cmp r5, #0
	beq .LBB142_105	@ bb5.bb11_crit_edge
.LBB142_3:	@ bb7
	ldrb r3, [r5, #+8]
	cmp r3, #18
	ldreq r5, [r5, #+4]
	ldreqb r5, [r5, #+8]
	cmpeq r5, #7
	beq .LBB142_5	@ bb9
	b .LBB142_105	@ bb5.bb11_crit_edge
.LBB142_4:	@ bb8
.LBB142_5:	@ bb9
	ldr r5, .LCPI142_1
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB142_105	@ bb5.bb11_crit_edge
.LBB142_6:	@ bb10
	ldr r5, .LCPI142_2
	ldr r5, [r5]
	@comment
str r4, [r5, #+52]
	b .LBB142_101	@ return
.LBB142_7:	@ bb13
	ldr r3, .LCPI142_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB142_13	@ bb20
	b .LBB142_101	@ return
.LBB142_8:	@ bb14
	ldr r3, .LCPI142_0
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #1
	bhi .LBB142_10	@ bb17
.LBB142_9:	@ bb15
	ldr r2, .LCPI142_5
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB142_12	@ bb19
.LBB142_10:	@ bb17
	and r3, r3, #255
	cmp r3, #18
	bne .LBB142_14	@ bb21.loopexit
.LBB142_11:	@ bb18
	ldr r3, .LCPI142_6
	ldr r0, [r3]
	ldr r3, .LCPI142_7
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	beq .LBB142_14	@ bb21.loopexit
.LBB142_12:	@ bb19
	mov r0, #1
	emit_nops_till_bundle_end
	bl pop_init_level
	emit_nops_till_bundle_end
	bl process_init_element
.LBB142_13:	@ bb20
	ldr r3, .LCPI142_2
	ldr r3, [r3]
	ldrb r3, [r3, #+58]
	cmp r3, #0
	bne .LBB142_8	@ bb14
.LBB142_14:	@ bb21.loopexit
	mov r6, #1
	mov r7, #13, 14 @ 3407872
.LBB142_15:	@ bb21
	ldr r3, .LCPI142_0
	ldr r1, [r3]
	ldrb r3, [r1, #+8]
	cmp r3, #18
	beq .LBB142_68	@ bb96
.LBB142_16:	@ bb21
	and r2, r3, #255
	cmp r2, #21
	beq .LBB142_45	@ bb62
.LBB142_17:	@ bb21
	and r3, r3, #255
	cmp r3, #20
	bne .LBB142_92	@ bb132
.LBB142_18:	@ bb22
	ldr r3, .LCPI142_5
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB142_21	@ bb24
.LBB142_19:	@ bb23
	ldr r0, .LCPI142_3
.LBB142_20:	@ bb23
	ldr r1, .LCPI142_4
	mov r2, #0
	emit_nops_till_bundle_end
	bl pedwarn_init
	b .LBB142_96	@ bb137
.LBB142_21:	@ bb24
	ldr r2, .LCPI142_8
	ldr r2, [r2]
	ldr r8, [r3, #+4]
	cmp r8, r2
	ldrne r8, [r8, #+64]
.LBB142_22:	@ bb25
.LBB142_23:	@ bb26
	ldrb r1, [r8, #+8]
	cmp r1, #18
	bne .LBB142_27	@ bb40
.LBB142_24:	@ bb26
	cmp r4, #0
	beq .LBB142_27	@ bb40
.LBB142_25:	@ bb32
	ldr r0, [r8, #+4]
	ldrb r0, [r0, #+8]
	cmp r0, #7
	mov r0, #0
	moveq r0, r6
	cmp r5, #0
	mov r12, #0
	movne r12, r6
	tst r0, r12
	bne .LBB142_33	@ bb50
.LBB142_26:	@ bb32
	cmp r4, #0
	bne .LBB142_28	@ bb41
	b .LBB142_33	@ bb50
.LBB142_27:	@ bb40
	cmp r4, #0
	beq .LBB142_41	@ bb52
.LBB142_28:	@ bb41
	ldr r0, .LCPI142_9
	ldr r0, [r0]
	cmp r0, #0
	bne .LBB142_33	@ bb50
.LBB142_29:	@ bb41
	cmp r2, r4
	ldrne r2, [r4, #+4]
	ldrne r2, [r2, #+64]
	cmpne r2, r8
	bne .LBB142_31	@ bb44
	b .LBB142_33	@ bb50
.LBB142_30:	@ bb43
.LBB142_31:	@ bb44
	and r2, r1, #255
	cmp r2, #21
	bhi .LBB142_33	@ bb50
.LBB142_32:	@ bb44
	tst r7, r6, lsl r2
	bne .LBB142_111	@ bb49
.LBB142_33:	@ bb50
	cmp r4, #0
	beq .LBB142_41	@ bb52
.LBB142_34:	@ bb51
	ldr r3, [r3, #+32]
	cmp r3, #0
	ldrne r5, [r3, #+16]
	ldreq r5, .LCPI142_10
	b .LBB142_36	@ bb2.i160
.LBB142_35:	@ bb.i159
.LBB142_36:	@ bb2.i160
	ldr r3, .LCPI142_11
	ldr r0, [r3]
	ldr r3, .LCPI142_12
	ldr r3, [r3]
	sub r6, r3, r0
	mov r6, r6, asr #3
	ldr r7, .LCPI142_13
	ldr r7, [r7]
	cmp r6, r7
	blt .LBB142_40	@ push_member_name.exit
.LBB142_37:	@ bb3.i161
	add r3, r7, #10
	ldr r7, .LCPI142_13
	@comment
str r3, [r7]
	mov r1, r3, lsl #3
	cmp r0, #0
	beq .LBB142_107	@ bb4.i
.LBB142_38:	@ bb5.i
	emit_nops_till_bundle_end
	bl xrealloc
.LBB142_39:	@ bb6.i
	ldr r3, .LCPI142_11
	@comment
str r0, [r3]
	add r3, r0, r6, lsl #3
	ldr r6, .LCPI142_12
	@comment
str r3, [r6]
.LBB142_40:	@ push_member_name.exit
	mov r6, #2
	@comment
str r6, [r3]
	ldr r6, .LCPI142_12
	ldr r3, [r6]
	@comment
str r5, [r3, #+4]
	ldr r3, [r6]
	add r3, r3, #8
	@comment
str r3, [r6]
	ldr r3, .LCPI142_5
	ldr r2, [r3]
	mov r3, #1
	mov r0, r4
	mov r1, r8
	emit_nops_till_bundle_end
	bl output_init_element
	ldr r3, .LCPI142_14
	ldr r3, [r3]
	ldr r5, .LCPI142_11
	ldr r5, [r5]
	add r3, r5, r3, lsl #3
	@comment
str r3, [r6]
	b .LBB142_42	@ bb55
.LBB142_41:	@ bb52
	ldr r1, [r3, #+40]
	ldr r2, [r3, #+20]
	mov r0, #56
	emit_nops_till_bundle_end
	bl size_binop
	ldr r5, [r0, #+12]
	ldr r6, .LCPI142_15
	ldr r7, [r6]
	@comment
str r5, [r7, #+12]
	ldr r5, [r0, #+16]
	ldr r6, [r6]
	@comment
str r5, [r6, #+16]
	ldr r5, .LCPI142_5
	ldr r5, [r5]
	ldr r5, [r5]
	ldr r6, .LCPI142_16
	@comment
str r5, [r6]
.LBB142_42:	@ bb55
	ldr r5, .LCPI142_5
	ldr r6, [r5]
	ldr r6, [r6]
	@comment
str r6, [r5]
	cmp r6, #0
	ldrneb r5, [r6, #+29]
	tstne r5, #16
	bne .LBB142_44	@ bb60
	b .LBB142_96	@ bb137
.LBB142_43:	@ bb56
.LBB142_44:	@ bb60
	ldr r5, [r6, #+32]
	cmp r5, #0
	beq .LBB142_42	@ bb55
	b .LBB142_96	@ bb137
.LBB142_45:	@ bb62
	ldr r3, .LCPI142_5
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB142_108	@ bb63
.LBB142_46:	@ bb64
	ldr r2, .LCPI142_8
	ldr r2, [r2]
	ldr r8, [r3, #+4]
	cmp r8, r2
	ldrne r8, [r8, #+64]
.LBB142_47:	@ bb65
.LBB142_48:	@ bb66
	ldrb r1, [r8, #+8]
	cmp r1, #18
	bne .LBB142_52	@ bb81
.LBB142_49:	@ bb66
	cmp r4, #0
	beq .LBB142_52	@ bb81
.LBB142_50:	@ bb73
	ldr r0, [r8, #+4]
	ldrb r0, [r0, #+8]
	cmp r0, #7
	mov r0, #0
	moveq r0, r6
	cmp r5, #0
	mov r12, #0
	movne r12, r6
	tst r0, r12
	bne .LBB142_58	@ bb91
.LBB142_51:	@ bb73
	cmp r4, #0
	bne .LBB142_53	@ bb82
	b .LBB142_58	@ bb91
.LBB142_52:	@ bb81
	cmp r4, #0
	beq .LBB142_66	@ bb93
.LBB142_53:	@ bb82
	ldr r0, .LCPI142_9
	ldr r0, [r0]
	cmp r0, #0
	bne .LBB142_58	@ bb91
.LBB142_54:	@ bb82
	cmp r2, r4
	ldrne r2, [r4, #+4]
	ldrne r2, [r2, #+64]
	cmpne r2, r8
	bne .LBB142_56	@ bb85
	b .LBB142_58	@ bb91
.LBB142_55:	@ bb84
.LBB142_56:	@ bb85
	and r2, r1, #255
	cmp r2, #21
	bhi .LBB142_58	@ bb91
.LBB142_57:	@ bb85
	tst r7, r6, lsl r2
	bne .LBB142_111	@ bb49
.LBB142_58:	@ bb91
	cmp r4, #0
	beq .LBB142_66	@ bb93
.LBB142_59:	@ bb92
	ldr r3, [r3, #+32]
	cmp r3, #0
	ldrne r5, [r3, #+16]
	ldreq r5, .LCPI142_10
	b .LBB142_61	@ bb2.i167
.LBB142_60:	@ bb.i165
.LBB142_61:	@ bb2.i167
	ldr r3, .LCPI142_11
	ldr r0, [r3]
	ldr r3, .LCPI142_12
	ldr r3, [r3]
	sub r6, r3, r0
	mov r6, r6, asr #3
	ldr r7, .LCPI142_13
	ldr r7, [r7]
	cmp r6, r7
	blt .LBB142_65	@ push_member_name.exit174
.LBB142_62:	@ bb3.i168
	add r3, r7, #10
	ldr r7, .LCPI142_13
	@comment
str r3, [r7]
	mov r1, r3, lsl #3
	cmp r0, #0
	beq .LBB142_110	@ bb4.i169
.LBB142_63:	@ bb5.i170
	emit_nops_till_bundle_end
	bl xrealloc
.LBB142_64:	@ bb6.i173
	ldr r3, .LCPI142_11
	@comment
str r0, [r3]
	add r3, r0, r6, lsl #3
	ldr r6, .LCPI142_12
	@comment
str r3, [r6]
.LBB142_65:	@ push_member_name.exit174
	mov r6, #2
	@comment
str r6, [r3]
	ldr r6, .LCPI142_12
	ldr r3, [r6]
	@comment
str r5, [r3, #+4]
	ldr r3, [r6]
	add r3, r3, #8
	@comment
str r3, [r6]
	ldr r3, .LCPI142_5
	ldr r2, [r3]
	mov r3, #1
	mov r0, r4
	mov r1, r8
	emit_nops_till_bundle_end
	bl output_init_element
	ldr r3, .LCPI142_14
	ldr r3, [r3]
	ldr r5, .LCPI142_11
	ldr r5, [r5]
	add r3, r5, r3, lsl #3
	@comment
str r3, [r6]
	b .LBB142_67	@ bb94
.LBB142_66:	@ bb93
	ldr r5, .LCPI142_15
	ldr r6, [r5]
	ldr r7, [r3, #+20]
	ldr r7, [r7, #+12]
	@comment
str r7, [r6, #+12]
	ldr r5, [r5]
	ldr r6, .LCPI142_5
	ldr r7, [r6]
	ldr r7, [r7, #+20]
	ldr r7, [r7, #+16]
	@comment
str r7, [r5, #+16]
	ldr r5, [r6]
	ldr r5, [r5]
	ldr r6, .LCPI142_16
	@comment
str r5, [r6]
.LBB142_67:	@ bb94
	ldr r5, .LCPI142_5
	mov r6, #0
	@comment
str r6, [r5]
	b .LBB142_96	@ bb137
.LBB142_68:	@ bb96
	ldr r3, [r1, #+4]
	ldr r8, [r3, #+64]
	ldrb r3, [r8, #+8]
	cmp r3, #18
	bne .LBB142_71	@ bb111
.LBB142_69:	@ bb96
	cmp r4, #0
	beq .LBB142_71	@ bb111
.LBB142_70:	@ bb103
	ldr r2, [r8, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #7
	mov r2, #0
	moveq r2, r6
	cmp r5, #0
	mov r1, #0
	movne r1, r6
	tst r2, r1
	bne .LBB142_77	@ bb121
.LBB142_71:	@ bb111
	cmp r4, #0
	beq .LBB142_77	@ bb121
.LBB142_72:	@ bb112
	ldr r2, .LCPI142_9
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB142_77	@ bb121
.LBB142_73:	@ bb113
	ldr r2, .LCPI142_8
	ldr r2, [r2]
	cmp r2, r4
	ldrne r2, [r4, #+4]
	ldrne r2, [r2, #+64]
	cmpne r2, r8
	bne .LBB142_75	@ bb115
	b .LBB142_77	@ bb121
.LBB142_74:	@ bb114
.LBB142_75:	@ bb115
	and r3, r3, #255
	cmp r3, #21
	bhi .LBB142_77	@ bb121
.LBB142_76:	@ bb115
	tst r7, r6, lsl r3
	bne .LBB142_111	@ bb49
.LBB142_77:	@ bb121
	ldr r3, .LCPI142_6
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB142_79	@ bb124
.LBB142_78:	@ bb122
	ldr r3, .LCPI142_7
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	bne .LBB142_112	@ bb123
.LBB142_79:	@ bb124
	ldr r3, .LCPI142_19
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB142_81	@ bb126.preheader
.LBB142_80:	@ bb125
	mov r0, r4
	emit_nops_till_bundle_end
	bl save_expr
	mov r4, r0
.LBB142_81:	@ bb126.preheader
	mov r5, #56
	mov r6, #3
	mov r7, #1
.LBB142_82:	@ bb126
	cmp r4, #0
	beq .LBB142_88	@ bb128
.LBB142_83:	@ bb127
	ldr r3, .LCPI142_11
	ldr r0, [r3]
	ldr r3, .LCPI142_12
	ldr r3, [r3]
	sub r2, r3, r0
	mov r9, r2, asr #3
	ldr r2, .LCPI142_13
	ldr r2, [r2]
	ldr r1, .LCPI142_7
	ldr r1, [r1]
	ldr r10, [r1, #+12]
	cmp r9, r2
	blt .LBB142_87	@ push_array_bounds.exit
.LBB142_84:	@ bb.i
	add r3, r2, #10
	ldr r2, .LCPI142_13
	@comment
str r3, [r2]
	mov r1, r3, lsl #3
	cmp r0, #0
	beq .LBB142_113	@ bb1.i
.LBB142_85:	@ bb2.i
	emit_nops_till_bundle_end
	bl xrealloc
.LBB142_86:	@ bb3.i
	ldr r3, .LCPI142_11
	@comment
str r0, [r3]
	add r3, r0, r9, lsl #3
	ldr r2, .LCPI142_12
	@comment
str r3, [r2]
.LBB142_87:	@ push_array_bounds.exit
	@comment
str r6, [r3]
	ldr r9, .LCPI142_12
	ldr r3, [r9]
	@comment
str r10, [r3, #+4]
	ldr r3, [r9]
	add r3, r3, #8
	@comment
str r3, [r9]
	ldr r3, .LCPI142_7
	ldr r2, [r3]
	mov r0, r4
	mov r1, r8
	mov r3, r7
	emit_nops_till_bundle_end
	bl output_init_element
	ldr r3, .LCPI142_14
	ldr r3, [r3]
	ldr r2, .LCPI142_11
	ldr r2, [r2]
	add r3, r2, r3, lsl #3
	@comment
str r3, [r9]
.LBB142_88:	@ bb128
	ldr r9, .LCPI142_7
	ldr r1, [r9]
	ldr r3, .LCPI142_20
	ldr r2, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, [r0, #+12]
	ldr r2, [r9]
	@comment
str r3, [r2, #+12]
	ldr r3, [r0, #+16]
	ldr r2, [r9]
	@comment
str r3, [r2, #+16]
	cmp r4, #0
	ldreq r3, .LCPI142_1
	ldreq r2, [r3]
	ldreq r1, .LCPI142_7
	ldreq r0, [r1]
	ldreq r0, [r0, #+12]
	@comment
streq r0, [r2, #+12]
	ldreq r3, [r3]
	ldreq r2, [r1]
	ldreq r2, [r2, #+16]
	@comment
streq r2, [r3, #+16]
.LBB142_89:	@ bb129
.LBB142_90:	@ bb130
	ldr r3, .LCPI142_19
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB142_96	@ bb137
.LBB142_91:	@ bb131
	ldr r3, .LCPI142_7
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	beq .LBB142_82	@ bb126
	b .LBB142_96	@ bb137
.LBB142_92:	@ bb132
	ldr r3, .LCPI142_5
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB142_114	@ bb133
.LBB142_93:	@ bb134
	cmp r4, #0
	movne r2, #0
	movne r3, #1
	movne r0, r4
	emit_nops_till_bundle_end
	blne output_init_element
.LBB142_94:	@ bb135
.LBB142_95:	@ bb136
	ldr r3, .LCPI142_5
	mov r2, #0
	@comment
str r2, [r3]
.LBB142_96:	@ bb137
	ldr r3, .LCPI142_22
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB142_101	@ return
.LBB142_97:	@ bb138
	ldr r3, .LCPI142_23
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB142_101	@ return
.LBB142_98:	@ bb138
	cmp r4, #0
	beq .LBB142_101	@ return
.LBB142_99:	@ bb142
	ldr r3, .LCPI142_2
	ldr r3, [r3]
	cmp r3, #0
	emit_nops_till_bundle_end
	bleq clear_momentary
.LBB142_100:	@ bb143
.LBB142_101:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB142_102:	@ entry.bb11_crit_edge
	mov r5, #0
.LBB142_103:	@ bb11
	ldr r3, .LCPI142_2
	ldr r3, [r3]
	ldr r3, [r3, #+52]
	cmp r3, #0
	beq .LBB142_7	@ bb13
.LBB142_104:	@ bb12
	ldr r0, .LCPI142_3
	ldr r1, .LCPI142_4
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	b .LBB142_101	@ return
.LBB142_105:	@ bb5.bb11_crit_edge
	mov r5, #1
	b .LBB142_103	@ bb11
.LBB142_106:	@ bb51.bb2.i160_crit_edge
.LBB142_107:	@ bb4.i
	mov r0, r1
	emit_nops_till_bundle_end
	bl xmalloc
	b .LBB142_39	@ bb6.i
.LBB142_108:	@ bb63
	ldr r0, .LCPI142_17
	b .LBB142_20	@ bb23
.LBB142_109:	@ bb92.bb2.i167_crit_edge
.LBB142_110:	@ bb4.i169
	mov r0, r1
	emit_nops_till_bundle_end
	bl xmalloc
	b .LBB142_64	@ bb6.i173
.LBB142_111:	@ bb49
	mov r0, #1
	emit_nops_till_bundle_end
	bl push_init_level
	b .LBB142_15	@ bb21
.LBB142_112:	@ bb123
	ldr r0, .LCPI142_18
	b .LBB142_20	@ bb23
.LBB142_113:	@ bb1.i
	mov r0, r1
	emit_nops_till_bundle_end
	bl xmalloc
	b .LBB142_86	@ bb3.i
.LBB142_114:	@ bb133
	ldr r0, .LCPI142_21
	b .LBB142_20	@ bb23
	.align	4
.LBB142_115:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_0:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_1:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_2:
 	.long	constructor_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_3:
 	.long	.str109938

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_4:
 	.long	.str110939

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_5:
 	.long	constructor_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_6:
 	.long	constructor_max_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_7:
 	.long	constructor_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_8:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_9:
 	.long	constructor_no_implicit

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_10:
 	.long	.str8837

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_11:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_12:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_13:
 	.long	spelling_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_14:
 	.long	constructor_depth

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_15:
 	.long	constructor_bit_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_16:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_17:
 	.long	.str111940

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_18:
 	.long	.str112941

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_19:
 	.long	constructor_range_end

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_20:
 	.long	integer_one_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_21:
 	.long	.str113942

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_22:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI142_23:
 	.long	constructor_pending_elts

	.size process_init_element, .-process_init_element


	.globl	push_init_level
	.align	4
push_init_level:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	mov r5, #1
	b .LBB143_7	@ bb6
.LBB143_1:	@ bb
	ldr r3, .LCPI143_0
	ldr r3, [r3]
	ldrb r3, [r3, #+8]
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #1
	bhi .LBB143_3	@ bb3
.LBB143_2:	@ bb1
	ldr r2, .LCPI143_1
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB143_48	@ bb2
.LBB143_3:	@ bb3
	and r3, r3, #255
	cmp r3, #18
	bne .LBB143_8	@ bb7
.LBB143_4:	@ bb4
	ldr r3, .LCPI143_2
	ldr r0, [r3]
	ldr r3, .LCPI143_3
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl tree_int_cst_lt
	cmp r0, #0
	beq .LBB143_8	@ bb7
.LBB143_5:	@ bb5
	mov r0, r5
.LBB143_6:	@ bb5
	emit_nops_till_bundle_end
	bl pop_init_level
	emit_nops_till_bundle_end
	bl process_init_element
.LBB143_7:	@ bb6
	ldr r3, .LCPI143_4
	ldr r3, [r3]
	ldrb r3, [r3, #+58]
	cmp r3, #0
	bne .LBB143_1	@ bb
.LBB143_8:	@ bb7
	ldr r3, .LCPI143_5
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI143_0
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB143_10	@ bb9
	b .LBB143_14	@ bb13
.LBB143_9:	@ bb8
.LBB143_10:	@ bb9
	ldrb r3, [r3, #+8]
	cmp r3, #20
	bne .LBB143_14	@ bb13
.LBB143_11:	@ bb10
	ldr r3, .LCPI143_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB143_14	@ bb13
.LBB143_12:	@ bb11
	ldr r2, .LCPI143_6
	ldr r0, [r2]
	ldr r1, [r3, #+40]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	bne .LBB143_14	@ bb13
.LBB143_13:	@ bb12
	ldr r3, .LCPI143_6
	ldr r3, [r3]
	ldr r3, [r3, #+12]
	ldr r2, .LCPI143_1
	ldr r2, [r2]
	ldr r2, [r2, #+40]
	ldr r2, [r2, #+12]
	mov r1, r3, asr #31
	add r3, r3, r1, lsr #29
	mov r1, r2, asr #31
	add r2, r2, r1, lsr #29
	mov r2, r2, asr #3
	sub r0, r2, r3, asr #3
	emit_nops_till_bundle_end
	bl assemble_zeros
.LBB143_14:	@ bb13
	mov r0, #64
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI143_0
	ldr r2, [r3]
	@comment
str r2, [r0, #+4]
	ldr r2, .LCPI143_1
	ldr r2, [r2]
	@comment
str r2, [r0, #+8]
	ldr r2, .LCPI143_3
	ldr r2, [r2]
	@comment
str r2, [r0, #+12]
	ldr r2, .LCPI143_7
	ldr r2, [r2]
	@comment
str r2, [r0, #+16]
	ldr r2, .LCPI143_2
	ldr r2, [r2]
	@comment
str r2, [r0, #+20]
	ldr r2, .LCPI143_8
	ldr r2, [r2]
	@comment
str r2, [r0, #+24]
	ldr r2, .LCPI143_9
	ldr r2, [r2]
	@comment
str r2, [r0, #+28]
	ldr r2, .LCPI143_6
	ldr r2, [r2]
	@comment
str r2, [r0, #+32]
	ldr r2, .LCPI143_10
	ldr r1, [r2]
	@comment
str r1, [r0, #+36]
	ldr r1, .LCPI143_11
	ldr r12, [r1]
	strb r12, [r0, #+56]
	ldr r12, .LCPI143_12
	ldr lr, [r12]
	strb lr, [r0, #+57]
	ldr lr, .LCPI143_13
	ldr lr, [lr]
	strb lr, [r0, #+60]
	ldr lr, .LCPI143_14
	ldr r5, [lr]
	@comment
str r5, [r0, #+44]
	ldr r5, .LCPI143_15
	ldr r6, [r5]
	@comment
str r6, [r0, #+48]
	mov r6, #0
	@comment
str r6, [r0, #+52]
	strb r4, [r0, #+58]
	ldr r7, .LCPI143_5
	ldr r7, [r7]
	strb r7, [r0, #+59]
	strb r6, [r0, #+61]
	ldr r7, .LCPI143_4
	ldr r8, [r7]
	@comment
str r8, [r0]
	@comment
str r0, [r7]
	mov r0, #1
	@comment
str r0, [r1]
	@comment
str r0, [r12]
	ldr r1, .LCPI143_16
	ldr r0, [r1]
	ldr r1, .LCPI143_17
	ldr r1, [r1]
	sub r12, r1, r0
	mov r7, r12, asr #3
	@comment
str r7, [r5]
	@comment
str r6, [r2]
	@comment
str r6, [lr]
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB143_34	@ bb13.bb23_crit_edge
.LBB143_15:	@ bb14
	ldrb r2, [r3, #+8]
	sub r12, r2, #20
	and r12, r12, #255
	cmp r12, #1
	bhi .LBB143_25	@ bb19
.LBB143_16:	@ bb15
	ldr r3, .LCPI143_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB143_54	@ bb23.thread
.LBB143_17:	@ bb17
	ldr r2, [r3, #+4]
	ldr r12, .LCPI143_0
	@comment
str r2, [r12]
	ldr r3, [r3, #+32]
	cmp r3, #0
	ldrne r5, [r3, #+16]
	ldreq r5, .LCPI143_18
	b .LBB143_19	@ bb2.i
.LBB143_18:	@ bb.i
.LBB143_19:	@ bb2.i
	ldr r3, .LCPI143_19
	ldr r3, [r3]
	cmp r7, r3
	blt .LBB143_23	@ push_member_name.exit
.LBB143_20:	@ bb3.i
	add r1, r3, #10
	ldr r3, .LCPI143_19
	@comment
str r1, [r3]
	mov r1, r1, lsl #3
	cmp r0, #0
	beq .LBB143_57	@ bb4.i
.LBB143_21:	@ bb5.i
	emit_nops_till_bundle_end
	bl xrealloc
.LBB143_22:	@ bb6.i
	ldr r1, .LCPI143_16
	@comment
str r0, [r1]
	add r1, r0, r7, lsl #3
	ldr r3, .LCPI143_17
	@comment
str r1, [r3]
.LBB143_23:	@ push_member_name.exit
	mov r3, #2
	@comment
str r3, [r1]
	ldr r1, .LCPI143_17
	ldr r3, [r1]
	@comment
str r5, [r3, #+4]
	ldr r3, [r1]
	add r3, r3, #8
	@comment
str r3, [r1]
	ldr r1, .LCPI143_15
	ldr r3, [r1]
	add r3, r3, #1
	@comment
str r3, [r1]
	ldr r1, .LCPI143_9
	ldr r1, [r1]
	ldr r3, .LCPI143_1
	ldr r3, [r3]
	cmp r3, r1
	ldrne r1, .LCPI143_5
	movne r3, #0
	@comment
strne r3, [r1]
	b .LBB143_33	@ bb23thread-split
.LBB143_24:	@ bb18
.LBB143_25:	@ bb19
	and r2, r2, #255
	cmp r2, #18
	bne .LBB143_34	@ bb13.bb23_crit_edge
.LBB143_26:	@ bb20
	ldr r3, [r3, #+4]
	ldr r2, .LCPI143_0
	@comment
str r3, [r2]
	ldr r3, .LCPI143_19
	ldr r3, [r3]
	ldr r2, .LCPI143_3
	ldr r2, [r2]
	ldr r5, [r2, #+12]
	cmp r7, r3
	blt .LBB143_30	@ push_array_bounds.exit
.LBB143_27:	@ bb.i47
	add r1, r3, #10
	ldr r3, .LCPI143_19
	@comment
str r1, [r3]
	mov r1, r1, lsl #3
	cmp r0, #0
	beq .LBB143_58	@ bb1.i
.LBB143_28:	@ bb2.i48
	emit_nops_till_bundle_end
	bl xrealloc
.LBB143_29:	@ bb3.i51
	ldr r1, .LCPI143_16
	@comment
str r0, [r1]
	add r1, r0, r7, lsl #3
	ldr r3, .LCPI143_17
	@comment
str r1, [r3]
.LBB143_30:	@ push_array_bounds.exit
	mov r3, #3
	@comment
str r3, [r1]
	ldr r3, .LCPI143_17
	ldr r1, [r3]
	@comment
str r5, [r1, #+4]
	ldr r1, [r3]
	add r1, r1, #8
	@comment
str r1, [r3]
	ldr r3, .LCPI143_15
	ldr r1, [r3]
	add r1, r1, #1
	@comment
str r1, [r3]
	ldr r3, .LCPI143_3
	ldr r0, [r3]
	ldr r3, .LCPI143_8
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl tree_int_cst_equal
	cmp r0, #0
	beq .LBB143_32	@ bb22
.LBB143_31:	@ bb21
	ldr r3, .LCPI143_7
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB143_33	@ bb23thread-split
.LBB143_32:	@ bb22
	ldr r3, .LCPI143_5
	mov r1, #0
	@comment
str r1, [r3]
.LBB143_33:	@ bb23thread-split
	ldr r3, .LCPI143_0
	ldr r3, [r3]
.LBB143_34:	@ bb13.bb23_crit_edge
	mov r1, r3
.LBB143_35:	@ bb23
	cmp r1, #0
	beq .LBB143_55	@ bb24
.LBB143_36:	@ bb25
	mov r0, r3
	emit_nops_till_bundle_end
	bl check_init_type_bitfields
	cmp r4, #0
	ldrne r3, .LCPI143_22
	ldrne r3, [r3]
	cmpne r3, #0
	bne .LBB143_38	@ bb27
	b .LBB143_40	@ bb29
.LBB143_37:	@ bb26
.LBB143_38:	@ bb27
	ldr r3, .LCPI143_23
	ldrb r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI143_23
	moveq r2, #1
	streqb r2, [r3]
	ldreq r0, .LCPI143_24
	emit_nops_till_bundle_end
	bleq warning_init
.LBB143_39:	@ bb28
.LBB143_40:	@ bb29
	ldr r3, .LCPI143_0
	ldr r3, [r3]
	ldrb r2, [r3, #+8]
	sub r1, r2, #20
	and r1, r1, #255
	cmp r1, #1
	bls .LBB143_49	@ bb30
.LBB143_41:	@ bb39
	and r2, r2, #255
	cmp r2, #18
	bne .LBB143_47	@ bb44
.LBB143_42:	@ bb40
	ldr r2, .LCPI143_7
	mov r1, #0
	@comment
str r1, [r2]
	ldr r2, [r3, #+12]
	cmp r2, #0
	bne .LBB143_59	@ bb41
.LBB143_43:	@ bb42
	ldr r3, .LCPI143_25
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl copy_node
.LBB143_44:	@ bb43
	ldr r3, .LCPI143_3
	@comment
str r0, [r3]
	emit_nops_till_bundle_end
	bl copy_node
	ldr r3, .LCPI143_8
.LBB143_45:	@ bb43
	@comment
str r0, [r3]
.LBB143_46:	@ bb43
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB143_47:	@ bb44
	ldr r0, .LCPI143_26
	emit_nops_till_bundle_end
	bl warning_init
	ldr r3, .LCPI143_0
	ldr r3, [r3]
	ldr r2, .LCPI143_1
	@comment
str r3, [r2]
	ldr r2, .LCPI143_9
	@comment
str r3, [r2]
	b .LBB143_46	@ bb43
.LBB143_48:	@ bb2
	mov r0, #1
	b .LBB143_6	@ bb5
.LBB143_49:	@ bb30
	add r3, r3, #12
.LBB143_50:	@ bb32
	ldr r3, [r3]
	ldr r2, .LCPI143_1
	@comment
str r3, [r2]
	cmp r3, #0
	ldrneb r2, [r3, #+29]
	tstne r2, #16
	bne .LBB143_52	@ bb37
	b .LBB143_53	@ bb38
.LBB143_51:	@ bb33
.LBB143_52:	@ bb37
	ldr r2, [r3, #+32]
	cmp r2, #0
	beq .LBB143_50	@ bb32
.LBB143_53:	@ bb38
	ldr r2, .LCPI143_9
	@comment
str r3, [r2]
	ldr r3, .LCPI143_25
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl copy_node
	ldr r3, .LCPI143_6
	b .LBB143_45	@ bb43
.LBB143_54:	@ bb23.thread
	ldr r3, .LCPI143_0
	mov r1, #0
	@comment
str r1, [r3]
.LBB143_55:	@ bb24
	mov r4, #0
	ldr r0, .LCPI143_20
	ldr r1, .LCPI143_21
	mov r2, #0
	emit_nops_till_bundle_end
	bl error_init
	ldr r3, .LCPI143_1
	@comment
str r4, [r3]
	ldr r3, .LCPI143_9
	@comment
str r4, [r3]
	b .LBB143_46	@ bb43
.LBB143_56:	@ bb17.bb2.i_crit_edge
.LBB143_57:	@ bb4.i
	mov r0, r1
	emit_nops_till_bundle_end
	bl xmalloc
	b .LBB143_22	@ bb6.i
.LBB143_58:	@ bb1.i
	mov r0, r1
	emit_nops_till_bundle_end
	bl xmalloc
	b .LBB143_29	@ bb3.i51
.LBB143_59:	@ bb41
	ldr r2, [r2, #+56]
	ldr r1, .LCPI143_2
	@comment
str r2, [r1]
	ldr r3, [r3, #+12]
	ldr r0, [r3, #+52]
	emit_nops_till_bundle_end
	bl copy_node
	b .LBB143_44	@ bb43
	.align	4
.LBB143_60:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_0:
 	.long	constructor_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_1:
 	.long	constructor_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_2:
 	.long	constructor_max_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_3:
 	.long	constructor_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_4:
 	.long	constructor_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_5:
 	.long	constructor_incremental

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_6:
 	.long	constructor_bit_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_7:
 	.long	constructor_range_end

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_8:
 	.long	constructor_unfilled_index

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_9:
 	.long	constructor_unfilled_fields

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_10:
 	.long	constructor_elements

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_11:
 	.long	constructor_constant

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_12:
 	.long	constructor_simple

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_13:
 	.long	constructor_erroneous

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_14:
 	.long	constructor_pending_elts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_15:
 	.long	constructor_depth

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_16:
 	.long	spelling_base

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_17:
 	.long	spelling

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_18:
 	.long	.str8837

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_19:
 	.long	spelling_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_20:
 	.long	.str106935

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_21:
 	.long	.str12841

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_22:
 	.long	warn_missing_braces

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_23:
 	.long	missing_braces_mentioned.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_24:
 	.long	.str107936

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_25:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI143_26:
 	.long	.str108937

	.size push_init_level, .-push_init_level


	.globl	store_init_value
	.align	4
store_init_value:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, [r0, #+4]
	ldrb r2, [r3, #+8]
	mov r4, r0
	cmp r2, #0
	beq .LBB144_5	@ return
.LBB144_1:	@ bb
	ldrb r2, [r4, #+9]
	mov r2, r4
	ldrb r0, [r2, #+8]!
	ldrb r0, [r2, #+3]
	ldrb r2, [r2, #+2]
	mov r0, #1
	and r2, r0, r2, lsr #2
	mov r0, r3
	emit_nops_till_bundle_end
	bl digest_init
	@comment
str r0, [r4, #+48]
.LBB144_2:	@ bb15
	mov r3, r0
	ldrb r2, [r3, #+8]
	sub r2, r2, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB144_4	@ bb17
.LBB144_3:	@ bb16
	ldr r0, [r3, #+16]
	ldr r2, [r0, #+4]
	ldr r1, [r3, #+4]
	cmp r1, r2
	beq .LBB144_2	@ bb15
.LBB144_4:	@ bb17
	mov r0, r3
	emit_nops_till_bundle_end
	bl constant_expression_warning
.LBB144_5:	@ return
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.size store_init_value, .-store_init_value


	.globl	build_c_cast
	.align	4
build_c_cast:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI145_0
	ldr r3, [r3]
	mov r4, r1
	cmp r3, r0
	cmpne r3, r4
	bne .LBB145_2	@ bb2
	b .LBB145_69	@ bb1
.LBB145_1:	@ entry
.LBB145_2:	@ bb2
	ldr r5, [r0, #+64]
	ldrb r3, [r5, #+8]
	cmp r3, #23
	beq .LBB145_6	@ bb5
.LBB145_3:	@ bb2
	and r2, r3, #255
	cmp r2, #18
	bne .LBB145_7	@ bb6
.LBB145_4:	@ bb3
	ldr r0, .LCPI145_1
.LBB145_5:	@ bb3
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI145_0
	ldr r0, [r3]
	b .LBB145_68	@ bb118
.LBB145_6:	@ bb5
	ldr r0, .LCPI145_2
	b .LBB145_5	@ bb3
.LBB145_7:	@ bb6
	ldr r2, [r4, #+4]
	cmp r2, r5
	bne .LBB145_12	@ bb10
.LBB145_8:	@ bb7
	ldr r2, .LCPI145_3
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB145_70	@ bb7.bb109_crit_edge
.LBB145_9:	@ bb8
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #2
	blo .LBB145_11	@ bb9
.LBB145_10:	@ bb8.bb109thread-split_crit_edge
	mov r0, r4
	b .LBB145_59	@ bb109thread-split
.LBB145_11:	@ bb9
	ldr r0, .LCPI145_4
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB145_10	@ bb8.bb109thread-split_crit_edge
.LBB145_12:	@ bb10
	and r3, r3, #255
	cmp r3, #21
	bne .LBB145_23	@ bb34
.LBB145_13:	@ bb11
	ldrb r2, [r2, #+8]
	cmp r2, #18
	andne r2, r2, #255
	cmpne r2, #23
	bne .LBB145_16	@ bb15
.LBB145_14:	@ bb11
.LBB145_15:	@ bb14
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	mov r4, r0
.LBB145_16:	@ bb15
	add r6, r5, #12
.LBB145_17:	@ bb18
	ldr r6, [r6]
	cmp r6, #0
	beq .LBB145_71	@ bb33
.LBB145_18:	@ bb16
	ldr r2, [r6, #+4]
	ldr r0, [r2, #+64]
	ldr r2, [r4, #+4]
	ldr r1, [r2, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	cmp r0, #0
	beq .LBB145_17	@ bb18
.LBB145_19:	@ bb19
	cmp r6, #0
	beq .LBB145_71	@ bb33
.LBB145_20:	@ bb20
	ldr r2, .LCPI145_3
	ldr r2, [r2]
	cmp r2, #0
	ldrne r0, .LCPI145_5
	emit_nops_till_bundle_end
	blne pedwarn
.LBB145_21:	@ bb21
.LBB145_22:	@ bb22
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_tree_list
	mov r3, r0
	mov r0, #43
	mov r1, r5
	mov r2, #0
	emit_nops_till_bundle_end
	bl build
	mov r1, r0
	mov r0, r5
	mov r2, #0
	emit_nops_till_bundle_end
	bl digest_init
	ldrb r2, [r4, #+8]!
	ldrb r2, [r4, #+1]
	ldrb r5, [r4, #+2]!
	ldrb r4, [r0, #+10]
	mov r5, r0
	ldrb r3, [r5, #+8]!
	ldrb r1, [r5, #+3]
	orr r4, r4, r1, lsl #8
	ldrb r1, [r5, #+1]
	orr r3, r3, r1, lsl #8
	orr r4, r3, r4, lsl #16
	bic r4, r4, #2, 24 @ 512
	strb r4, [r5]
	mov r3, r4, lsr #24
	strb r3, [r5, #+3]
	mov r3, #2, 24 @ 512
	and r2, r3, r2, lsl #8
	orr r2, r4, r2
	mov r2, r2, lsr #8
	strb r2, [r5, #+1]
	mov r2, r4, lsr #16
	strb r2, [r0, #+10]
	b .LBB145_68	@ bb118
.LBB145_23:	@ bb34
	ldr r3, .LCPI145_7
	ldr r3, [r3]
	cmp r5, r3
	beq .LBB145_72	@ bb35
.LBB145_24:	@ bb36
	ldrb r2, [r2, #+8]
	cmp r2, #18
	andne r2, r2, #255
	cmpne r2, #23
	bne .LBB145_73	@ bb36.bb41_crit_edge
.LBB145_25:	@ bb36
.LBB145_26:	@ bb40
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
.LBB145_27:	@ bb41
	mov r6, r0
	ldr r2, .LCPI145_8
	ldr r2, [r2]
	ldr r7, [r6, #+4]
	cmp r2, #0
	beq .LBB145_36	@ bb66
.LBB145_28:	@ bb42
	ldrb r2, [r5, #+8]
	cmp r2, #13
	ldreqb r2, [r7, #+8]
	cmpeq r2, #13
	beq .LBB145_30	@ bb44
	b .LBB145_36	@ bb66
.LBB145_29:	@ bb43
.LBB145_30:	@ bb44
	ldr r2, [r7, #+4]
	ldrb r2, [r2, #+9]
	tst r2, #16
	beq .LBB145_33	@ bb55
.LBB145_31:	@ bb49
	ldr r2, [r5, #+4]
	ldrb r2, [r2, #+9]
	tst r2, #16
	ldreq r0, .LCPI145_9
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB145_32:	@ bb54
.LBB145_33:	@ bb55
	ldr r2, [r7, #+4]
	ldrb r2, [r2, #+9]
	tst r2, #32
	beq .LBB145_36	@ bb66
.LBB145_34:	@ bb60
	ldr r2, [r5, #+4]
	ldrb r2, [r2, #+9]
	tst r2, #32
	ldreq r0, .LCPI145_10
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB145_35:	@ bb65
.LBB145_36:	@ bb66
	ldr r2, .LCPI145_11
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB145_43	@ bb73
.LBB145_37:	@ bb67
	ldrb r2, [r5, #+8]
	cmp r2, #13
	ldreqb r2, [r7, #+8]
	cmpeq r2, #13
	beq .LBB145_39	@ bb69
	b .LBB145_43	@ bb73
.LBB145_38:	@ bb68
.LBB145_39:	@ bb69
	ldr r2, [r7, #+4]
	ldrb r3, [r2, #+8]
	cmp r3, #6
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB145_41	@ bb71
	b .LBB145_43	@ bb73
.LBB145_40:	@ bb69
.LBB145_41:	@ bb71
	ldr r3, [r5, #+4]
	ldr r3, [r3, #+32]
	ldr r2, [r2, #+32]
	cmp r3, r2
	ldrhi r0, .LCPI145_12
	emit_nops_till_bundle_end
	blhi warning
.LBB145_42:	@ bb72
.LBB145_43:	@ bb73
	ldrb r2, [r5, #+8]
	cmp r2, #7
	ldreqb r2, [r7, #+8]
	cmpeq r2, #13
	beq .LBB145_45	@ bb75
	b .LBB145_48	@ bb82
.LBB145_44:	@ bb74
.LBB145_45:	@ bb75
	ldrb r2, [r7, #+28]
	ldrb r3, [r5, #+28]
	cmp r3, r2
	beq .LBB145_48	@ bb82
.LBB145_46:	@ bb76
	ldrb r2, [r6, #+9]
	tst r2, #2
	ldreq r0, .LCPI145_13
	emit_nops_till_bundle_end
	bleq warning
.LBB145_47:	@ bb81
.LBB145_48:	@ bb82
	ldr r2, .LCPI145_14
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB145_52	@ bb86
.LBB145_49:	@ bb83
	ldrb r2, [r6, #+8]
	cmp r2, #50
	bne .LBB145_52	@ bb86
.LBB145_50:	@ bb84
	ldrb r2, [r7, #+8]
	ldrb r3, [r5, #+8]
	cmp r3, r2
	ldrne r0, .LCPI145_15
	emit_nops_till_bundle_end
	blne warning
.LBB145_51:	@ bb85
.LBB145_52:	@ bb86
	ldrb r2, [r5, #+8]
	cmp r2, #13
	ldreqb r2, [r7, #+8]
	cmpeq r2, #7
	beq .LBB145_54	@ bb88
	b .LBB145_57	@ bb95
.LBB145_53:	@ bb87
.LBB145_54:	@ bb88
	ldrb r2, [r7, #+28]
	ldrb r3, [r5, #+28]
	cmp r3, r2
	beq .LBB145_57	@ bb95
.LBB145_55:	@ bb89
	ldrb r2, [r6, #+9]
	tst r2, #2
	ldreq r0, .LCPI145_16
	emit_nops_till_bundle_end
	bleq warning
.LBB145_56:	@ bb94
.LBB145_57:	@ bb95
	mov r0, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl convert
	ldrb r2, [r0, #+8]
	cmp r2, #25
	bne .LBB145_59	@ bb109thread-split
.LBB145_58:	@ bb96
	ldrb r2, [r6, #+8]!
	ldrb r2, [r6, #+1]
	mov r2, r6
	ldrb r3, [r2, #+2]!
	ldrb r1, [r2, #+1]
	ldrb r1, [r0, #+11]
	ldrb r12, [r0, #+10]
	orr r1, r12, r1, lsl #8
	mov r12, r0
	ldrb lr, [r12, #+8]!
	ldrb r5, [r12, #+1]
	orr lr, lr, r5, lsl #8
	orr r1, lr, r1, lsl #16
	bic r1, r1, #2, 14 @ 524288
	strb r1, [r12]
	mov lr, r1, lsr #8
	strb lr, [r12, #+1]
	mov lr, r1, lsr #24
	strb lr, [r0, #+11]
	mov lr, #2, 14 @ 524288
	and r3, lr, r3, lsl #16
	orr r3, r1, r3
	mov r1, r3, lsr #16
	strb r1, [r0, #+10]
	ldrb r1, [r2, #+1]
	ldrb r1, [r6, #+1]
	bic r3, r3, #1, 14 @ 262144
	mov r1, r3, lsr #8
	ldrb r2, [r2]
	strb r1, [r12, #+1]
	strb r3, [r12]
	mov r1, r3, lsr #24
	strb r1, [r0, #+11]
	mov r1, #1, 14 @ 262144
	and r2, r1, r2, lsl #16
	orr r2, r3, r2
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
.LBB145_59:	@ bb109thread-split
	ldr r2, .LCPI145_3
	ldr r2, [r2]
.LBB145_60:	@ bb109
	cmp r2, #0
	beq .LBB145_65	@ bb114
.LBB145_61:	@ bb110
	ldrb r3, [r0, #+8]
	cmp r3, #25
	ldreqb r3, [r4, #+8]
	cmpeq r3, #25
	beq .LBB145_63	@ bb112
	b .LBB145_65	@ bb114
.LBB145_62:	@ bb111
.LBB145_63:	@ bb112
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #7
	emit_nops_till_bundle_end
	blne non_lvalue
.LBB145_64:	@ bb113
.LBB145_65:	@ bb114
	cmp r0, r4
	bne .LBB145_68	@ bb118
.LBB145_66:	@ bb115
	ldr r3, .LCPI145_3
	ldr r3, [r3]
	cmp r3, #0
	emit_nops_till_bundle_end
	blne non_lvalue
.LBB145_67:	@ bb116
.LBB145_68:	@ bb118
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB145_69:	@ bb1
	mov r0, r3
	b .LBB145_68	@ bb118
.LBB145_70:	@ bb7.bb109_crit_edge
	mov r0, r4
	b .LBB145_60	@ bb109
.LBB145_71:	@ bb33
	ldr r0, .LCPI145_6
	emit_nops_till_bundle_end
	bl error
	ldr r2, .LCPI145_0
	ldr r0, [r2]
	b .LBB145_68	@ bb118
.LBB145_72:	@ bb35
	mov r0, #105
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	b .LBB145_68	@ bb118
.LBB145_73:	@ bb36.bb41_crit_edge
	mov r0, r4
	b .LBB145_27	@ bb41
	.align	4
.LBB145_74:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_1:
 	.long	.str114943

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_2:
 	.long	.str115944

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_3:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_4:
 	.long	.str116945

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_5:
 	.long	.str117946

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_6:
 	.long	.str119947

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_7:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_8:
 	.long	warn_cast_qual

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_9:
 	.long	.str120948

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_10:
 	.long	.str121949

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_11:
 	.long	warn_cast_align

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_12:
 	.long	.str122950

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_13:
 	.long	.str123951

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_14:
 	.long	warn_bad_function_cast

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_15:
 	.long	.str124952

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI145_16:
 	.long	.str125953

	.size build_c_cast, .-build_c_cast


	.align	4
internal_build_compound_expr:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, [r0]
	mov r5, r0
	cmp r4, #0
	bne .LBB146_5	@ bb5
.LBB146_1:	@ bb
	cmp r1, #0
	bne .LBB146_4	@ bb3
.LBB146_2:	@ bb1
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB146_4	@ bb3
.LBB146_3:	@ bb2
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl non_lvalue
	b .LBB146_19	@ bb22
.LBB146_4:	@ bb3
	ldr r0, [r5, #+16]
	b .LBB146_19	@ bb22
.LBB146_5:	@ bb5
	ldr r3, [r4]
	cmp r3, #0
	ldreq r0, [r4, #+16]
	ldreq r3, [r0, #+4]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #18
	beq .LBB146_7	@ bb7
	b .LBB146_8	@ bb8
.LBB146_6:	@ bb6
.LBB146_7:	@ bb7
	emit_nops_till_bundle_end
	bl default_conversion
	@comment
str r0, [r4, #+16]
.LBB146_8:	@ bb8
	ldr r0, [r5]
	mov r1, #0
	emit_nops_till_bundle_end
	bl internal_build_compound_expr
	ldr r3, [r5, #+16]
	ldrb r2, [r3, #+9]
	mov r4, r0
	tst r2, #1
	bne .LBB146_16	@ bb19
.LBB146_9:	@ bb12
	ldr r2, .LCPI146_0
	ldr r2, [r2]
	cmp r2, #0
	ldreq r2, .LCPI146_1
	ldreq r2, [r2]
	cmpeq r2, #0
	beq .LBB146_14	@ bb17
.LBB146_10:	@ bb13
.LBB146_11:	@ bb14
	ldrb r2, [r3, #+8]
	cmp r2, #105
	ldreq r2, .LCPI146_2
	ldreq r2, [r2]
	ldreq r3, [r3, #+4]
	cmpeq r3, r2
	beq .LBB146_14	@ bb17
.LBB146_12:	@ bb15
.LBB146_13:	@ bb16
	ldr r0, .LCPI146_3
	emit_nops_till_bundle_end
	bl warning
.LBB146_14:	@ bb17
	ldr r3, .LCPI146_4
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB146_18	@ bb21
.LBB146_15:	@ bb22
	mov r0, r4
	b .LBB146_19	@ bb22
.LBB146_16:	@ bb19
	ldr r2, .LCPI146_1
	ldr r2, [r2]
	cmp r2, #0
	movne r0, r3
	emit_nops_till_bundle_end
	blne warn_if_unused_value
.LBB146_17:	@ bb20
.LBB146_18:	@ bb21
	ldr r1, [r4, #+4]
	ldr r2, [r5, #+16]
	mov r0, #44
	mov r3, r4
	emit_nops_till_bundle_end
	bl build
.LBB146_19:	@ bb22
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB146_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI146_0:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI146_1:
 	.long	warn_unused

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI146_2:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI146_3:
 	.long	.str126954

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI146_4:
 	.long	pedantic

	.size internal_build_compound_expr, .-internal_build_compound_expr


	.globl	build_compound_expr
	.align	4
build_compound_expr:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r1, #1
	emit_nops_till_bundle_end
	bl internal_build_compound_expr
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size build_compound_expr, .-build_compound_expr


	.globl	build_conditional_expr
	.align	4
build_conditional_expr:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #4
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r1, #0
	bne .LBB148_93	@ entry.bb3_crit_edge
.LBB148_1:	@ bb
	ldr r3, .LCPI148_0
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI148_1
	emit_nops_till_bundle_end
	blne pedwarn
.LBB148_2:	@ bb1
.LBB148_3:	@ bb2
	mov r0, r6
	emit_nops_till_bundle_end
	bl save_expr
	mov r6, r0
.LBB148_4:	@ bb3
	mov r7, r0
	mov r0, r6
	emit_nops_till_bundle_end
	bl default_conversion
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	ldr r3, [r7, #+4]
	ldrb r3, [r3, #+8]
	mov r6, r0
	cmp r3, #6
	beq .LBB148_6	@ bb5
.LBB148_5:	@ bb4
	mov r0, r7
	emit_nops_till_bundle_end
	bl default_conversion
	mov r7, r0
.LBB148_6:	@ bb5
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #6
	mov r0, r4
	emit_nops_till_bundle_end
	blne default_conversion
	b .LBB148_8	@ bb7
.LBB148_7:	@ bb6
.LBB148_8:	@ bb7
	mov r8, r0
	ldrb r3, [r6, #+8]
	cmp r3, #0
	ldrne r9, [r7, #+4]
	ldrneb r3, [r9, #+8]
	cmpne r3, #0
	bne .LBB148_10	@ bb9
	b .LBB148_11	@ bb10
.LBB148_9:	@ bb8
.LBB148_10:	@ bb9
	ldr r10, [r8, #+4]
	ldrb r2, [r10, #+8]
	cmp r2, #0
	bne .LBB148_13	@ bb11
.LBB148_11:	@ bb10
	ldr r3, .LCPI148_2
	ldr r0, [r3]
.LBB148_12:	@ bb10
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB148_13:	@ bb11
	ldr r1, [r10, #+64]
	ldr r0, [r9, #+64]
	and r12, r2, #255
	cmp r0, r1
	bne .LBB148_16	@ bb15
.LBB148_14:	@ bb12
	cmp r9, r10
	movne r9, r0
	b .LBB148_77	@ bb69
.LBB148_15:	@ bb14
	mov r9, r0
	b .LBB148_77	@ bb69
.LBB148_16:	@ bb15
	and r1, r3, #255
	sub r1, r1, #7
	cmp r1, #1
	subls r1, r12, #7
	cmpls r1, #1
	bls .LBB148_95	@ bb17
.LBB148_17:	@ bb16
.LBB148_18:	@ bb18
	and r1, r2, #255
	cmp r1, #6
	andne r1, r3, #255
	cmpne r1, #6
	bne .LBB148_25	@ bb28
.LBB148_19:	@ bb18
.LBB148_20:	@ bb21
	ldr r4, .LCPI148_0
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB148_24	@ bb27
.LBB148_21:	@ bb22
	and r2, r2, #255
	cmp r2, #6
	andeq r3, r3, #255
	cmpeq r3, #6
	beq .LBB148_24	@ bb27
.LBB148_22:	@ bb22
.LBB148_23:	@ bb26
	ldr r0, .LCPI148_3
	emit_nops_till_bundle_end
	bl pedwarn
.LBB148_24:	@ bb27
	ldr r3, .LCPI148_4
	ldr r9, [r3]
	b .LBB148_77	@ bb69
.LBB148_25:	@ bb28
	and r1, r2, #255
	cmp r1, #13
	andeq r1, r3, #255
	cmpeq r1, #13
	beq .LBB148_27	@ bb32
	b .LBB148_68	@ bb53
.LBB148_26:	@ bb28
.LBB148_27:	@ bb32
	mov r11, #1
	mov r0, r9
	mov r1, r10
	mov r2, #1
	emit_nops_till_bundle_end
	bl maybe_objc_comptypes
	eor r11, r11, r0, lsr #31
	cmp r0, #0
	bge .LBB148_31	@ comp_target_types.exit
.LBB148_28:	@ bb1.i
	ldr r3, [r9, #+4]
	ldr r0, [r3, #+64]
	ldr r3, [r10, #+4]
	ldr r1, [r3, #+64]
	emit_nops_till_bundle_end
	bl comptypes
	mov r11, r0
	cmp r0, #2
	bne .LBB148_31	@ comp_target_types.exit
.LBB148_29:	@ bb2.i
	ldr r3, .LCPI148_0
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI148_5
	emit_nops_till_bundle_end
	blne pedwarn
.LBB148_30:	@ bb3.i
.LBB148_31:	@ comp_target_types.exit
	cmp r11, #0
	bne .LBB148_95	@ bb17
.LBB148_32:	@ bb34
	mov r0, r7
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB148_44	@ bb38
.LBB148_33:	@ bb35
	ldr r3, .LCPI148_4
	ldr r3, [r3]
	ldr r2, [r9, #+4]
	cmp r2, r3
	bne .LBB148_44	@ bb38
.LBB148_34:	@ bb36
	ldrb r3, [r5, #+8]
	cmp r3, #106
	beq .LBB148_44	@ bb38
.LBB148_35:	@ bb37
	ldrb r3, [r10, #+9]
	mov r2, r10
	ldrb r4, [r2, #+8]!
	orr r3, r4, r3, lsl #8
	ldrb r4, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r4, lsl #8
.LBB148_36:	@ bb37
	orr r3, r3, r2, lsl #16
	tst r3, #2, 20 @ 8192
	ldreqb r2, [r9, #+9]
	tsteq r2, #32
	beq .LBB148_38	@ bb9.i
	b .LBB148_65	@ bb37.bb10.i_crit_edge
.LBB148_37:	@ bb.i
.LBB148_38:	@ bb9.i
	mov r1, #0
.LBB148_39:	@ bb10.i
	tst r3, #1, 20 @ 4096
	ldreqb r3, [r9, #+9]
	tsteq r3, #16
	beq .LBB148_41	@ bb21.i
	b .LBB148_66	@ bb10.i.qualify_type.exit_crit_edge
.LBB148_40:	@ bb15.i
.LBB148_41:	@ bb21.i
	mov r2, #0
.LBB148_42:	@ qualify_type.exit
	mov r0, r10
.LBB148_43:	@ qualify_type.exit
	emit_nops_till_bundle_end
	bl c_build_type_variant
	b .LBB148_15	@ bb14
.LBB148_44:	@ bb38
	mov r0, r8
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB148_54	@ bb42
.LBB148_45:	@ bb39
	ldr r3, .LCPI148_4
	ldr r3, [r3]
	ldr r2, [r10, #+4]
	cmp r2, r3
	bne .LBB148_54	@ bb42
.LBB148_46:	@ bb40
	ldrb r3, [r4, #+8]
	cmp r3, #106
	beq .LBB148_54	@ bb42
.LBB148_47:	@ bb41
	ldrb r3, [r9, #+9]
	mov r2, r9
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 20 @ 8192
	ldreqb r2, [r10, #+9]
	tsteq r2, #32
	beq .LBB148_49	@ bb9.i109
	b .LBB148_58	@ bb41.bb10.i111_crit_edge
.LBB148_48:	@ bb.i108
.LBB148_49:	@ bb9.i109
	mov r1, #0
.LBB148_50:	@ bb10.i111
	tst r3, #1, 20 @ 4096
	ldreqb r3, [r10, #+9]
	tsteq r3, #16
	beq .LBB148_52	@ bb21.i113
	b .LBB148_59	@ bb10.i111.qualify_type.exit115_crit_edge
.LBB148_51:	@ bb15.i112
.LBB148_52:	@ bb21.i113
	mov r2, #0
.LBB148_53:	@ qualify_type.exit115
	mov r0, r9
	b .LBB148_43	@ qualify_type.exit
.LBB148_54:	@ bb42
	ldr r3, [r9, #+4]
	ldr r2, [r3, #+64]
	ldr r1, .LCPI148_4
	ldr r1, [r1]
	cmp r2, r1
	bne .LBB148_60	@ bb47
.LBB148_55:	@ bb43
	ldr r3, .LCPI148_0
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB148_47	@ bb41
.LBB148_56:	@ bb44
	ldr r3, [r10, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #23
	bne .LBB148_47	@ bb41
.LBB148_57:	@ bb45
	ldr r0, .LCPI148_6
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB148_47	@ bb41
.LBB148_58:	@ bb41.bb10.i111_crit_edge
	mov r1, #1
	b .LBB148_50	@ bb10.i111
.LBB148_59:	@ bb10.i111.qualify_type.exit115_crit_edge
	mov r2, #1
	b .LBB148_53	@ qualify_type.exit115
.LBB148_60:	@ bb47
	ldr r2, [r10, #+4]
	ldr r2, [r2, #+64]
	cmp r2, r1
	bne .LBB148_67	@ bb52
.LBB148_61:	@ bb48
	ldr r2, .LCPI148_0
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB148_64	@ bb51
.LBB148_62:	@ bb49
	ldrb r3, [r3, #+8]
	cmp r3, #23
	ldreq r0, .LCPI148_6
	emit_nops_till_bundle_end
	bleq pedwarn
.LBB148_63:	@ bb50
.LBB148_64:	@ bb51
	ldrb r3, [r10, #+9]
	mov r2, r10
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	b .LBB148_36	@ bb37
.LBB148_65:	@ bb37.bb10.i_crit_edge
	mov r1, #1
	b .LBB148_39	@ bb10.i
.LBB148_66:	@ bb10.i.qualify_type.exit_crit_edge
	mov r2, #1
	b .LBB148_42	@ qualify_type.exit
.LBB148_67:	@ bb52
	ldr r0, .LCPI148_7
	emit_nops_till_bundle_end
	bl pedwarn
	ldr r3, .LCPI148_4
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_pointer_type
	b .LBB148_15	@ bb14
.LBB148_68:	@ bb53
	and r1, r2, #255
	cmp r1, #7
	andeq r1, r3, #255
	cmpeq r1, #13
	beq .LBB148_70	@ bb57
	b .LBB148_73	@ bb61
.LBB148_69:	@ bb53
.LBB148_70:	@ bb57
	mov r0, r8
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB148_72	@ bb59
.LBB148_71:	@ bb58
	ldr r0, .LCPI148_8
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB148_77	@ bb69
.LBB148_72:	@ bb59
	ldr r3, .LCPI148_9
	ldr r8, [r3]
	b .LBB148_77	@ bb69
.LBB148_73:	@ bb61
	and r9, r2, #255
	cmp r9, #13
	andeq r9, r3, #255
	cmpeq r9, #7
	beq .LBB148_75	@ bb65
	b .LBB148_78	@ bb70
.LBB148_74:	@ bb61
.LBB148_75:	@ bb65
	mov r0, r7
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB148_96	@ bb66
.LBB148_76:	@ bb67
	ldr r7, .LCPI148_9
	ldr r7, [r7]
	mov r9, r10
.LBB148_77:	@ bb69
	cmp r9, #0
	bne .LBB148_80	@ bb73
.LBB148_78:	@ bb70
	ldr r9, .LCPI148_10
	ldr r9, [r9]
	cmp r9, #0
	beq .LBB148_97	@ bb72
.LBB148_79:	@ bb71
	ldr r9, .LCPI148_4
	ldr r9, [r9]
.LBB148_80:	@ bb73
	ldrb r3, [r7, #+9]
	mov r2, r7
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 20 @ 4096
	ldreqb r2, [r8, #+9]
	tsteq r2, #16
	beq .LBB148_82	@ bb83
	b .LBB148_98	@ bb73.bb84_crit_edge
.LBB148_81:	@ bb77
.LBB148_82:	@ bb83
	mov r2, #0
.LBB148_83:	@ bb84
	tst r3, #2, 20 @ 8192
	ldreqb r3, [r8, #+9]
	tsteq r3, #32
	beq .LBB148_85	@ bb95
	b .LBB148_99	@ bb84.bb96_crit_edge
.LBB148_84:	@ bb89
.LBB148_85:	@ bb95
	mov r1, #0
.LBB148_86:	@ bb96
	mov r0, r9
	emit_nops_till_bundle_end
	bl build_type_variant
	ldr r3, [r7, #+4]
	mov r4, r0
	cmp r3, r0
	beq .LBB148_88	@ bb98
.LBB148_87:	@ bb97
	mov r0, r4
	mov r1, r7
	emit_nops_till_bundle_end
	bl convert_and_check
	mov r7, r0
.LBB148_88:	@ bb98
	ldr r3, [r8, #+4]
	cmp r3, r4
	beq .LBB148_90	@ bb100
.LBB148_89:	@ bb99
	mov r0, r4
	mov r1, r8
	emit_nops_till_bundle_end
	bl convert_and_check
	mov r8, r0
.LBB148_90:	@ bb100
	ldrb r3, [r6, #+8]
	cmp r3, #25
	bne .LBB148_92	@ bb105
.LBB148_91:	@ bb101
	mov r0, r6
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	mov r0, r8
	moveq r0, r7
	emit_nops_till_bundle_end
	bl pedantic_non_lvalue
	b .LBB148_12	@ bb10
.LBB148_92:	@ bb105
	@comment
str r8, [sp]
	mov r0, #48
	mov r1, r4
	mov r2, r6
	mov r3, r7
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
	b .LBB148_12	@ bb10
.LBB148_93:	@ entry.bb3_crit_edge
	mov r0, r5
	b .LBB148_4	@ bb3
.LBB148_94:	@ bb5.bb7_crit_edge
.LBB148_95:	@ bb17
	mov r0, r9
	mov r1, r10
	emit_nops_till_bundle_end
	bl common_type
	b .LBB148_15	@ bb14
.LBB148_96:	@ bb66
	ldr r0, .LCPI148_8
	emit_nops_till_bundle_end
	bl pedwarn
	mov r9, r10
	b .LBB148_77	@ bb69
.LBB148_97:	@ bb72
	ldr r0, .LCPI148_11
	emit_nops_till_bundle_end
	bl error
	ldr r6, .LCPI148_2
	ldr r0, [r6]
	b .LBB148_12	@ bb10
.LBB148_98:	@ bb73.bb84_crit_edge
	mov r2, #1
	b .LBB148_83	@ bb84
.LBB148_99:	@ bb84.bb96_crit_edge
	mov r1, #1
	b .LBB148_86	@ bb96
	.align	4
.LBB148_100:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_1:
 	.long	.str127955

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_2:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_3:
 	.long	.str128956

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_4:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_5:
 	.long	.str34863

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_6:
 	.long	.str129957

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_7:
 	.long	.str130958

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_8:
 	.long	.str131959

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_9:
 	.long	null_pointer_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_10:
 	.long	flag_cond_mismatch

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI148_11:
 	.long	.str132960

	.size build_conditional_expr, .-build_conditional_expr


	.globl	c_expand_asm_operands
	.align	4
c_expand_asm_operands:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add r11, sp, #28
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	mov r0, r6
	emit_nops_till_bundle_end
	bl list_length
	sub r8, sp, r0, lsl #2
	mov sp, r8
	ldrb r3, [r7, #+8]
	ldr r9, [r11, #+12]
	cmp r3, #110
	ldreq r7, [r7, #+16]
.LBB149_1:	@ bb
.LBB149_2:	@ bb1
	ldrb r3, [r7, #+8]
	cmp r3, #28
	bne .LBB149_23	@ bb2
.LBB149_3:	@ bb5.preheader
	cmp r6, #0
	beq .LBB149_6	@ bb12.loopexit
.LBB149_4:	@ bb5.preheader.bb4_crit_edge
	mov r3, r8
	mov r2, r6
.LBB149_5:	@ bb4
	ldr r1, [r2, #+16]
	str r1, [r3], #+4
	ldr r2, [r2]
	cmp r2, #0
	bne .LBB149_5	@ bb4
.LBB149_6:	@ bb12.loopexit
	cmp r5, #0
	beq .LBB149_12	@ bb13
.LBB149_7:	@ bb12.loopexit.bb7_crit_edge
	mov r10, r5
.LBB149_8:	@ bb7
	ldr r0, [r10, #+16]
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB149_11	@ bb11
.LBB149_9:	@ bb7
.LBB149_10:	@ bb10
	emit_nops_till_bundle_end
	bl default_conversion
	@comment
str r0, [r10, #+16]
.LBB149_11:	@ bb11
	ldr r10, [r10]
	cmp r10, #0
	bne .LBB149_8	@ bb7
.LBB149_12:	@ bb13
	sfi_sub sp, sp, #12
	ldr r3, [r11, #+16]
	@comment
str r3, [sp, #+8]
	@comment
str r9, [sp, #+4]
	ldr r3, [r11, #+8]
	@comment
str r3, [sp]
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl expand_asm_operands
	sfi_addeq sp, sp, #12
	cmp r6, #0
	beq .LBB149_21	@ bb34
.LBB149_13:	@ bb13.bb14_crit_edge
	mov r4, #106
	mov r5, #0
.LBB149_14:	@ bb14
	ldr r2, [r6, #+16]
	ldr r0, [r8]
	cmp r0, r2
	bne .LBB149_24	@ bb15
.LBB149_15:	@ bb16
	ldrb r3, [r0, #+9]
	tst r3, #32
	ldreq r3, [r0, #+4]
	ldreqb r2, [r3, #+9]
	tsteq r2, #32
	beq .LBB149_17	@ bb25
	b .LBB149_19	@ bb31
.LBB149_16:	@ bb20
.LBB149_17:	@ bb25
	ldrb r2, [r3, #+8]
	sub r2, r2, #20
	and r2, r2, #255
	cmp r2, #1
	bhi .LBB149_20	@ bb32
.LBB149_18:	@ bb26
	ldrb r3, [r3, #+10]
	tst r3, #128
	ldrne r1, .LCPI149_1
	emit_nops_till_bundle_end
	blne readonly_warning
	b .LBB149_20	@ bb32
.LBB149_19:	@ bb31
	ldr r1, .LCPI149_1
	emit_nops_till_bundle_end
	bl readonly_warning
.LBB149_20:	@ bb32
	ldr r6, [r6]
	add r8, r8, #4
	cmp r6, #0
	bne .LBB149_14	@ bb14
.LBB149_21:	@ bb34
	emit_nops_till_bundle_end
	bl emit_queue
.LBB149_22:	@ bb34
	sub sp, r11, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB149_23:	@ bb2
	ldr r0, .LCPI149_0
	emit_nops_till_bundle_end
	bl error
	b .LBB149_22	@ bb34
.LBB149_24:	@ bb15
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_modify_expr
	mov r1, #0
	mov r2, r5
	mov r3, r5
	emit_nops_till_bundle_end
	bl expand_expr
	emit_nops_till_bundle_end
	bl free_temp_slots
	b .LBB149_20	@ bb32
	.align	4
.LBB149_25:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI149_0:
 	.long	.str134962

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI149_1:
 	.long	.str135963

	.size c_expand_asm_operands, .-c_expand_asm_operands


	.globl	build_component_ref
	.align	4
build_component_ref:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	ldrb r3, [r0, #+8]
	ldr r12, [r0, #+4]
	ldrb r4, [r12, #+8]
	mov r5, r1
	mov r6, r0
	cmp r3, #48
	beq .LBB150_3	@ bb1
.LBB150_1:	@ entry
	cmp r3, #44
	bne .LBB150_4	@ bb2
.LBB150_2:	@ bb
	ldr r0, [r6, #+20]
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_component_ref
	mov r3, r0
	ldr r1, [r3, #+4]
	ldr r2, [r6, #+16]
	mov r0, #44
	emit_nops_till_bundle_end
	bl build
	b .LBB150_44	@ bb11
.LBB150_3:	@ bb1
	ldr r0, [r6, #+24]
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_component_ref
	mov r4, r0
	ldr r0, [r6, #+20]
	mov r1, r5
	emit_nops_till_bundle_end
	bl build_component_ref
	mov r1, r0
	ldr r0, [r6, #+16]
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_conditional_expr
	b .LBB150_44	@ bb11
.LBB150_4:	@ bb2
	and r3, r4, #255
	sub r3, r3, #20
	cmp r3, #1
	bhi .LBB150_39	@ bb58
.LBB150_5:	@ bb3
	mov r3, #0
	@comment
str r3, [sp]
	ldr r3, [r12, #+16]
	cmp r3, #0
	bne .LBB150_24	@ bb5
.LBB150_6:	@ bb4
	ldrb r4, [r12, #+8]
	cmp r4, #0
	beq .LBB150_23	@ incomplete_type_error.exit
.LBB150_7:	@ retry.i
	ldrb r4, [r12, #+8]
	cmp r4, #17
	bgt .LBB150_11	@ retry.i
.LBB150_8:	@ retry.i
	cmp r4, #6
	beq .LBB150_15	@ bb6.i
.LBB150_9:	@ retry.i
	cmp r4, #10
	beq .LBB150_20	@ bb11.i.loopexit1
.LBB150_10:	@ bb10.i
	emit_nops_till_bundle_end
	bl abort
.LBB150_11:	@ retry.i
	cmp r4, #18
	beq .LBB150_16	@ bb7.i
.LBB150_12:	@ retry.i
	cmp r4, #21
	beq .LBB150_19	@ bb11.i.loopexit
.LBB150_13:	@ retry.i
	cmp r4, #20
	bne .LBB150_10	@ bb10.i
.LBB150_14:	@ retry.i.bb11.i_crit_edge
	ldr r0, .LCPI150_0
	b .LBB150_21	@ bb11.i
.LBB150_15:	@ bb6.i
	ldr r0, .LCPI150_1
	emit_nops_till_bundle_end
	bl error
	b .LBB150_23	@ incomplete_type_error.exit
.LBB150_16:	@ bb7.i
	ldr r4, [r12, #+12]
	cmp r4, #0
	beq .LBB150_18	@ bb9.i
.LBB150_17:	@ bb8.i
	ldr r12, [r12, #+4]
	b .LBB150_7	@ retry.i
.LBB150_18:	@ bb9.i
	ldr r0, .LCPI150_2
	emit_nops_till_bundle_end
	bl error
	b .LBB150_23	@ incomplete_type_error.exit
.LBB150_19:	@ bb11.i.loopexit
	ldr r0, .LCPI150_3
	b .LBB150_21	@ bb11.i
.LBB150_20:	@ bb11.i.loopexit1
	ldr r0, .LCPI150_4
.LBB150_21:	@ bb11.i
	ldr r12, [r12, #+48]
	ldrb r4, [r12, #+8]
	cmp r4, #1
	beq .LBB150_42	@ bb12.i
.LBB150_22:	@ bb13.i
	ldr r12, [r12, #+32]
	ldr r1, [r12, #+16]
	ldr r0, .LCPI150_5
	emit_nops_till_bundle_end
	bl error
.LBB150_23:	@ incomplete_type_error.exit
	ldr r12, .LCPI150_6
	ldr r0, [r12]
	b .LBB150_44	@ bb11
.LBB150_24:	@ bb5
	mov r2, sp
	mov r0, r12
	mov r1, r5
	emit_nops_till_bundle_end
	bl lookup_field
	mov r7, r0
	cmp r0, #0
	beq .LBB150_43	@ bb6
.LBB150_25:	@ bb10
	ldr r4, [r7, #+4]
	ldr r5, .LCPI150_6
	ldr r0, [r5]
	cmp r4, r0
	beq .LBB150_44	@ bb11
.LBB150_26:	@ bb12
	ldr r3, [sp]
	cmp r3, #0
	beq .LBB150_33	@ bb35
.LBB150_27:	@ bb13
	ldr r1, [r3, #+4]
	mov r0, #37
	mov r2, r6
	emit_nops_till_bundle_end
	bl build
	ldrb r4, [r6, #+9]
	tst r4, #32
	ldreq r4, [sp]
	ldreqb r4, [r4, #+9]
	tsteq r4, #32
	beq .LBB150_30	@ bb23
.LBB150_28:	@ bb17
.LBB150_29:	@ bb22
	ldrb r4, [r0, #+10]
	mov r5, r0
	ldrb r3, [r5, #+8]!
	ldrb r2, [r5, #+3]
	orr r4, r4, r2, lsl #8
	ldrb r2, [r5, #+1]
	orr r2, r3, r2, lsl #8
	orr r4, r2, r4, lsl #16
	orr r4, r4, #2, 20 @ 8192
	mov r4, r4, lsr #8
	strb r4, [r5, #+1]
	strb r3, [r5]
.LBB150_30:	@ bb23
	ldrb r4, [r6, #+9]
	tst r4, #16
	ldreq r4, [sp]
	ldreqb r4, [r4, #+9]
	tsteq r4, #16
	beq .LBB150_32	@ bb28.bb35_crit_edge
	b .LBB150_45	@ bb33
.LBB150_31:	@ bb28
.LBB150_32:	@ bb28.bb35_crit_edge
	mov r6, r0
.LBB150_33:	@ bb35
	ldr r1, [r7, #+4]
	mov r0, #37
	mov r2, r6
	mov r3, r7
	emit_nops_till_bundle_end
	bl build
	ldrb r4, [r6, #+9]
	tst r4, #32
	ldreqb r4, [r7, #+9]
	tsteq r4, #32
	beq .LBB150_36	@ bb46
.LBB150_34:	@ bb40
.LBB150_35:	@ bb45
	ldrb r4, [r0, #+10]
	mov r5, r0
	ldrb r3, [r5, #+8]!
	ldrb r2, [r5, #+3]
	orr r4, r4, r2, lsl #8
	ldrb r2, [r5, #+1]
	orr r2, r3, r2, lsl #8
	orr r4, r2, r4, lsl #16
	orr r4, r4, #2, 20 @ 8192
	mov r4, r4, lsr #8
	strb r4, [r5, #+1]
	strb r3, [r5]
.LBB150_36:	@ bb46
	ldrb r4, [r6, #+9]
	tst r4, #16
	ldreqb r4, [r7, #+9]
	tsteq r4, #16
	beq .LBB150_44	@ bb11
.LBB150_37:	@ bb51
.LBB150_38:	@ bb56
	ldrb r4, [r0, #+10]
	mov r5, r0
	ldrb r3, [r5, #+8]!
	ldrb r2, [r5, #+3]
	orr r4, r4, r2, lsl #8
	ldrb r2, [r5, #+1]
	orr r2, r3, r2, lsl #8
	orr r4, r2, r4, lsl #16
	orr r4, r4, #1, 20 @ 4096
	mov r4, r4, lsr #8
	strb r4, [r5, #+1]
	strb r3, [r5]
	b .LBB150_44	@ bb11
.LBB150_39:	@ bb58
	tst r4, #255
	ldrne r1, [r5, #+16]
	ldrne r0, .LCPI150_9
	emit_nops_till_bundle_end
	blne error
.LBB150_40:	@ bb59
.LBB150_41:	@ bb60
	ldr r3, .LCPI150_6
	ldr r0, [r3]
	b .LBB150_44	@ bb11
.LBB150_42:	@ bb12.i
	ldr r1, [r12, #+16]
	emit_nops_till_bundle_end
	bl error
	b .LBB150_23	@ incomplete_type_error.exit
.LBB150_43:	@ bb6
	ldr r1, [r5, #+16]
	and r4, r4, #255
	ldr r5, .LCPI150_7
	ldr r0, .LCPI150_8
	cmp r4, #20
	moveq r0, r5
	emit_nops_till_bundle_end
	bl error
	ldr r4, .LCPI150_6
	ldr r0, [r4]
.LBB150_44:	@ bb11
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB150_45:	@ bb33
	ldrb r4, [r0, #+10]
	mov r5, r0
	ldrb r6, [r5, #+8]!
	ldrb r3, [r5, #+3]
	orr r4, r4, r3, lsl #8
	ldrb r3, [r5, #+1]
	orr r3, r6, r3, lsl #8
	orr r4, r3, r4, lsl #16
	orr r4, r4, #1, 20 @ 4096
	mov r4, r4, lsr #8
	strb r4, [r5, #+1]
	strb r6, [r5]
	b .LBB150_32	@ bb28.bb35_crit_edge
	.align	4
.LBB150_46:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_0:
 	.long	.str19848

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_1:
 	.long	.str22851

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_2:
 	.long	.str23852

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_3:
 	.long	.str20849

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_4:
 	.long	.str21850

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_5:
 	.long	.str24853

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_6:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_7:
 	.long	.str136964

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_8:
 	.long	.str137965

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI150_9:
 	.long	.str138966

	.size build_component_ref, .-build_component_ref


	.globl	build_function_call
	.align	4
build_function_call:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #28
	@comment
str r1, [sp, #+20]
.LBB151_1:	@ bb1
	mov r4, r0
	ldrb r3, [r4, #+8]
	sub r2, r3, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB151_3	@ bb3
.LBB151_2:	@ bb2
	ldr r0, [r4, #+16]
	ldr r2, [r0, #+4]
	ldr r1, [r4, #+4]
	cmp r1, r2
	beq .LBB151_1	@ bb1
.LBB151_3:	@ bb3
	and r3, r3, #255
	cmp r3, #29
	beq .LBB151_97	@ bb4
.LBB151_4:	@ bb16
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, #0
	@comment
str r5, [sp, #+16]
	mov r4, r5
.LBB151_5:	@ bb17
	mov r3, r0
	@comment
str r3, [sp, #+12]
	ldr r3, [r3, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #13
	beq .LBB151_8	@ bb20
.LBB151_6:	@ bb17
	tst r2, #255
	bne .LBB151_9	@ bb21
.LBB151_7:	@ bb18
	ldr r3, .LCPI151_0
	ldr r0, [r3]
	b .LBB151_96	@ require_complete_type.exit
.LBB151_8:	@ bb20
	ldr r3, [r3, #+4]
	@comment
str r3, [sp, #+8]
	ldrb r3, [r3, #+8]
	cmp r3, #23
	beq .LBB151_10	@ bb22
.LBB151_9:	@ bb21
	ldr r0, .LCPI151_1
	emit_nops_till_bundle_end
	bl error
	ldr r4, .LCPI151_0
	b .LBB151_90	@ bb34
.LBB151_10:	@ bb22
	ldr r3, [sp, #+8]
	ldr r3, [r3, #+12]
	@comment
str r3, [sp, #+24]
	mov r0, #0
	mov r6, #1
	mov r7, #0
	b .LBB151_76	@ bb100.i
.LBB151_11:	@ bb.i
	ldr r3, [sp, #+24]
	cmp r3, #0
	moveq r9, #0
	ldrne r9, [sp, #+24]
	ldrne r9, [r9, #+16]
	b .LBB151_13	@ bb3.i
.LBB151_12:	@ bb1.i
.LBB151_13:	@ bb3.i
	ldr r3, .LCPI151_2
	ldr r3, [r3]
	ldr r2, [sp, #+20]
	ldr r0, [r2, #+16]
	cmp r9, r3
	bne .LBB151_17	@ bb7.i
.LBB151_14:	@ bb4.i
	cmp r5, #0
	beq .LBB151_16	@ bb6.i
.LBB151_15:	@ bb5.i
	ldr r1, [r5, #+16]
	ldr r0, .LCPI151_3
	emit_nops_till_bundle_end
	bl error
	b .LBB151_77	@ bb101.i
.LBB151_16:	@ bb6.i
	ldr r0, .LCPI151_4
	emit_nops_till_bundle_end
	bl error
	b .LBB151_77	@ bb101.i
.LBB151_17:	@ bb7.i
	ldrb r3, [r0, #+8]
	cmp r3, #107
	ldreq r0, [r0, #+16]
.LBB151_18:	@ bb8.i
.LBB151_19:	@ bb9.i
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB151_22	@ bb13.i
.LBB151_20:	@ bb9.i
.LBB151_21:	@ bb12.i
	emit_nops_till_bundle_end
	bl default_conversion
.LBB151_22:	@ bb13.i
	ldr r1, [r0, #+4]
	ldr r3, [r1, #+16]
	cmp r3, #0
	ldrne r3, .LCPI151_2
	ldrne r3, [r3]
	cmpne r1, r3
	bne .LBB151_25	@ require_complete_type.exit.i
.LBB151_23:	@ bb.i.i
.LBB151_24:	@ bb2.i.i
	emit_nops_till_bundle_end
	bl incomplete_type_error
	ldr r3, .LCPI151_0
	ldr r0, [r3]
.LBB151_25:	@ require_complete_type.exit.i
	mov r10, r0
	cmp r9, #0
	beq .LBB151_68	@ bb93.i
.LBB151_26:	@ bb14.i
	ldr r3, [r9, #+16]
	cmp r3, #0
	beq .LBB151_99	@ bb15.i
.LBB151_27:	@ bb16.i
	ldr r3, .LCPI151_6
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB151_63	@ bb86.i
.LBB151_28:	@ bb17.i
	ldrb r3, [r9, #+8]
	ldrb r11, [r9, #+28]
	cmp r3, #7
	beq .LBB151_31	@ bb23.i
.LBB151_29:	@ bb17.i
	and r2, r3, #255
	cmp r2, #9
	beq .LBB151_33	@ bb26.i
.LBB151_30:	@ bb17.i
	sub r2, r3, #10
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB151_34	@ bb28.i
.LBB151_31:	@ bb23.i
	ldr r2, [r10, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #8
	beq .LBB151_101	@ bb24.i
.LBB151_32:	@ bb25.i
	and r2, r3, #255
	cmp r2, #9
	bne .LBB151_34	@ bb28.i
.LBB151_33:	@ bb26.i
	ldr r2, [r10, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #8
	beq .LBB151_102	@ bb27.i
.LBB151_34:	@ bb28.i
	and r2, r3, #255
	cmp r2, #8
	bne .LBB151_43	@ bb43.i
.LBB151_35:	@ bb29.i
	ldr r2, [r10, #+4]
	ldrb r2, [r2, #+8]
	cmp r2, #12
	bhi .LBB151_37	@ bb36.i
.LBB151_36:	@ bb29.i
	mov r1, #114, 26 @ 7296
	mov r0, #1
	tst r1, r0, lsl r2
	bne .LBB151_103	@ bb35.i
.LBB151_37:	@ bb36.i
	and r1, r3, #255
	cmp r1, #8
	bne .LBB151_43	@ bb43.i
.LBB151_38:	@ bb37.i
	and r1, r2, #255
	cmp r1, #9
	beq .LBB151_104	@ bb38.i
.LBB151_39:	@ bb39.i
	and r1, r3, #255
	cmp r1, #8
	andeq r2, r2, #255
	cmpeq r2, #8
	beq .LBB151_41	@ bb41.i
	b .LBB151_43	@ bb43.i
.LBB151_40:	@ bb39.i
.LBB151_41:	@ bb41.i
	ldr r3, .LCPI151_11
	ldr r3, [r3]
	ldrb r3, [r3, #+28]
	and r11, r11, #255
	cmp r3, r11
	bne .LBB151_63	@ bb86.i
.LBB151_42:	@ bb42.i
	ldr r0, .LCPI151_12
	b .LBB151_62	@ bb85.i
.LBB151_43:	@ bb43.i
	and r3, r3, #255
	cmp r3, #12
	bhi .LBB151_63	@ bb86.i
.LBB151_44:	@ bb43.i
	mov r1, #114, 26 @ 7296
	mov r2, #1
	tst r1, r2, lsl r3
	beq .LBB151_63	@ bb86.i
.LBB151_45:	@ bb49.i
	ldr r3, [r10, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #12
	bhi .LBB151_63	@ bb86.i
.LBB151_46:	@ bb49.i
	mov r2, #114, 26 @ 7296
	mov r1, #1
	tst r2, r1, lsl r3
	beq .LBB151_63	@ bb86.i
.LBB151_47:	@ bb55.i
	mov r0, r10
	emit_nops_till_bundle_end
	bl default_conversion
	ldrb r3, [r9, #+8]
	ldr r2, [r0, #+4]
	cmp r3, #10
	ldreq r3, [r10, #+4]
	cmpeq r3, r9
	beq .LBB151_63	@ bb86.i
.LBB151_48:	@ bb56.i
.LBB151_49:	@ bb57.i
	and r3, r11, #255
	ldrb r1, [r2, #+28]
	cmp r1, r3
	bne .LBB151_105	@ bb58.i
.LBB151_50:	@ bb59.i
	ldrb r3, [r9, #+9]
	ldrb r2, [r2, #+9]
	eor r3, r2, r3
	mov r2, #1, 18 @ 16384
	tst r2, r3, lsl #8
	ldrneb r3, [r9, #+8]
	cmpne r3, #10
	bne .LBB151_52	@ bb68.i
	b .LBB151_63	@ bb86.i
.LBB151_51:	@ bb67.i
.LBB151_52:	@ bb68.i
	ldrb r3, [r10, #+8]
	cmp r3, #25
	bne .LBB151_55	@ bb70.i
.LBB151_53:	@ bb69.i
	mov r0, r10
	mov r1, r9
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB151_63	@ bb86.i
.LBB151_54:	@ bb70.ithread-split
	ldrb r3, [r10, #+8]
.LBB151_55:	@ bb70.i
	and r3, r3, #255
	cmp r3, #106
	ldreq r0, [r10, #+16]
	ldreqb r3, [r0, #+8]
	cmpeq r3, #25
	beq .LBB151_57	@ bb72.i
	b .LBB151_58	@ bb73.i
.LBB151_56:	@ bb71.i
.LBB151_57:	@ bb72.i
	mov r1, r9
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB151_63	@ bb86.i
.LBB151_58:	@ bb73.i
	ldr r3, [r10, #+4]
	ldrb r2, [r3, #+28]
	ldrb r1, [r9, #+28]
	cmp r2, r1
	bhs .LBB151_60	@ bb79.i
.LBB151_59:	@ bb74.i
	ldrb r3, [r3, #+9]
	tst r3, #64
	bne .LBB151_63	@ bb86.i
.LBB151_60:	@ bb79.i
	ldrb r3, [r9, #+9]
	tst r3, #64
	ldreq r0, .LCPI151_15
	ldrne r0, .LCPI151_14
	b .LBB151_62	@ bb85.i
.LBB151_61:	@ bb85.i
.LBB151_62:	@ bb85.i
	mov r1, r7
	mov r2, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl warn_for_assignment
.LBB151_63:	@ bb86.i
	stmea sp, {r5, r6}
	mov r0, r9
	mov r1, r10
	mov r2, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl convert_for_assignment
	ldrb r10, [r9, #+8]
	cmp r10, #7
	andne r10, r10, #255
	cmpne r10, #10
	bne .LBB151_67	@ bb86.i.bb92.i_crit_edge
.LBB151_64:	@ bb86.i
.LBB151_65:	@ bb90.i
	ldr r10, .LCPI151_16
	ldr r10, [r10]
	ldrb r10, [r10, #+28]
	ldrb r3, [r9, #+28]
	cmp r3, r10
	emit_nops_till_bundle_end
	bllo default_conversion
.LBB151_66:	@ bb91.i
.LBB151_67:	@ bb86.i.bb92.i_crit_edge
	mov r10, r0
	b .LBB151_100	@ bb92.i
.LBB151_68:	@ bb93.i
	ldr r3, [r10, #+4]
	ldrb r2, [r3, #+8]
	cmp r2, #8
	bne .LBB151_70	@ bb96.i
.LBB151_69:	@ bb94.i
	ldr r2, .LCPI151_17
	ldr r0, [r2]
	ldrb r2, [r0, #+28]
	ldrb r3, [r3, #+28]
	cmp r3, r2
	blo .LBB151_107	@ bb95.i
.LBB151_70:	@ bb96.i
	mov r0, r10
	emit_nops_till_bundle_end
	bl default_conversion
.LBB151_71:	@ bb96.i
	mov r1, r0
.LBB151_72:	@ bb96.i
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl tree_cons
.LBB151_73:	@ bb97.i
	ldr r8, [sp, #+24]
	cmp r8, #0
	ldrne r8, [sp, #+24]
	ldrne r8, [r8]
	@comment
strne r8, [sp, #+24]
.LBB151_74:	@ bb98.i
.LBB151_75:	@ bb99.i
	add r6, r6, #1
	ldr r8, [sp, #+20]
	ldr r8, [r8]
	@comment
str r8, [sp, #+20]
.LBB151_76:	@ bb100.i
	mov r8, r0
	ldr r3, [sp, #+20]
	cmp r3, #0
	bne .LBB151_11	@ bb.i
.LBB151_77:	@ bb101.i
	ldr r3, [sp, #+24]
	cmp r3, #0
	ldrne r3, .LCPI151_2
	ldrne r3, [r3]
	ldrne r2, [sp, #+24]
	ldrne r2, [r2, #+16]
	cmpne r2, r3
	bne .LBB151_79	@ bb103.i
	b .LBB151_81	@ convert_arguments.exit
.LBB151_78:	@ bb102.i
.LBB151_79:	@ bb103.i
	cmp r5, #0
	bne .LBB151_108	@ bb104.i
.LBB151_80:	@ bb105.i
	ldr r0, .LCPI151_19
	emit_nops_till_bundle_end
	bl error
.LBB151_81:	@ convert_arguments.exit
	mov r0, r8
	emit_nops_till_bundle_end
	bl nreverse
	ldr r3, .LCPI151_20
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	beq .LBB151_84	@ bb25
.LBB151_82:	@ bb23
	ldr r3, [sp, #+16]
	orr r3, r3, r5
	cmp r3, #0
	movne r0, r5
	ldrne r1, [sp, #+16]
	movne r2, r4
	emit_nops_till_bundle_end
	blne check_function_format
.LBB151_83:	@ bb24
.LBB151_84:	@ bb25
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+8]
	cmp r3, #110
	ldreq r3, [sp, #+12]
	ldreq r3, [r3, #+16]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #29
	beq .LBB151_86	@ bb27
	b .LBB151_91	@ bb36
.LBB151_85:	@ bb26
.LBB151_86:	@ bb27
	ldrb r2, [r3, #+29]
	tst r2, #16
	beq .LBB151_91	@ bb36
.LBB151_87:	@ bb32
	ldr r3, [r3, #+72]
	sub r3, r3, #2
	cmp r3, #2
	bhi .LBB151_91	@ bb36
.LBB151_88:	@ bb33
	cmp r4, #0
	bne .LBB151_95	@ bb35
.LBB151_89:	@ bb34
	ldr r4, .LCPI151_21
.LBB151_90:	@ bb34
	ldr r0, [r4]
	b .LBB151_96	@ require_complete_type.exit
.LBB151_91:	@ bb36
	ldr r3, [sp, #+8]
	ldr r1, [r3, #+4]
	mov r3, #0
	@comment
str r3, [sp]
	mov r0, #50
	ldr r2, [sp, #+12]
	mov r3, r4
	emit_nops_till_bundle_end
	bl build
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldr r1, [r0, #+4]
	ldr r3, .LCPI151_2
	ldr r3, [r3]
	cmp r1, r3
	beq .LBB151_96	@ require_complete_type.exit
.LBB151_92:	@ bb38
	ldr r2, [r1, #+16]
	cmp r2, #0
	cmpne r1, r3
	bne .LBB151_96	@ require_complete_type.exit
.LBB151_93:	@ bb38
.LBB151_94:	@ bb2.i
	emit_nops_till_bundle_end
	bl incomplete_type_error
	b .LBB151_7	@ bb18
.LBB151_95:	@ bb35
	ldr r1, [r4, #+16]
	mov r0, #78
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_unary_op
.LBB151_96:	@ require_complete_type.exit
	sfi_add sp, sp, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB151_97:	@ bb4
	ldrb r3, [r4, #+9]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	ldrb r2, [r2, #+2]
	ldr r0, [r4, #+4]
	ldr lr, [r4, #+56]
	@comment
str lr, [sp, #+16]
	ldr r5, [r4, #+32]
	orr r3, r1, r3, lsl #8
	orr r2, r2, r12, lsl #8
	orr r3, r3, r2, lsl #16
	mov r2, #1
	and r1, r2, r3, lsr #13
	and r2, r2, r3, lsr #12
	emit_nops_till_bundle_end
	bl build_type_variant
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r1, r0
	mov r0, #110
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	b .LBB151_5	@ bb17
.LBB151_98:	@ bb.i.bb3.i_crit_edge
.LBB151_99:	@ bb15.i
	ldr r0, .LCPI151_5
	mov r1, r6
	emit_nops_till_bundle_end
	bl error
.LBB151_100:	@ bb92.i
	mov r1, r10
	b .LBB151_72	@ bb96.i
.LBB151_101:	@ bb24.i
	ldr r0, .LCPI151_7
	b .LBB151_62	@ bb85.i
.LBB151_102:	@ bb27.i
	ldr r0, .LCPI151_8
	b .LBB151_62	@ bb85.i
.LBB151_103:	@ bb35.i
	ldr r0, .LCPI151_9
	b .LBB151_62	@ bb85.i
.LBB151_104:	@ bb38.i
	ldr r0, .LCPI151_10
	b .LBB151_62	@ bb85.i
.LBB151_105:	@ bb58.i
	ldr r0, .LCPI151_13
	b .LBB151_62	@ bb85.i
.LBB151_106:	@ bb84.i
.LBB151_107:	@ bb95.i
	mov r1, r10
	emit_nops_till_bundle_end
	bl convert
	b .LBB151_71	@ bb96.i
.LBB151_108:	@ bb104.i
	ldr r1, [r5, #+16]
	ldr r0, .LCPI151_18
	emit_nops_till_bundle_end
	bl error
	b .LBB151_81	@ convert_arguments.exit
	.align	4
.LBB151_109:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_1:
 	.long	.str152980

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_2:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_3:
 	.long	.str139967

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_4:
 	.long	.str140968

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_5:
 	.long	.str141969

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_6:
 	.long	warn_conversion

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_7:
 	.long	.str142970

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_8:
 	.long	.str143971

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_9:
 	.long	.str144972

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_10:
 	.long	.str145973

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_11:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_12:
 	.long	.str146974

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_13:
 	.long	.str147975

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_14:
 	.long	.str148976

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_15:
 	.long	.str149977

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_16:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_17:
 	.long	double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_18:
 	.long	.str150978

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_19:
 	.long	.str151979

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_20:
 	.long	warn_format

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI151_21:
 	.long	integer_zero_node

	.size build_function_call, .-build_function_call


	.globl	build_indirect_ref
	.align	4
build_indirect_ref:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	emit_nops_till_bundle_end
	bl default_conversion
	ldr r3, [r0, #+4]
	ldrb r2, [r3, #+8]
	ldrb r1, [r0, #+8]
	mov r5, r0
	cmp r2, #13
	bne .LBB152_13	@ bb40
.LBB152_1:	@ bb
	and r1, r1, #255
	cmp r1, #110
	ldreq r1, .LCPI152_0
	ldreq r1, [r1]
	cmpeq r1, #0
	beq .LBB152_3	@ bb2
	b .LBB152_4	@ bb4
.LBB152_2:	@ bb1
.LBB152_3:	@ bb2
	ldr r0, [r5, #+16]
	ldr r1, [r0, #+4]
	ldr r4, [r3, #+4]
	cmp r1, r4
	beq .LBB152_16	@ bb3
.LBB152_4:	@ bb4
	ldr r4, [r3, #+4]
	ldr r1, [r4, #+64]
	mov r0, #39
	mov r2, r5
	emit_nops_till_bundle_end
	bl build1
	ldr r1, [r4, #+16]
	mov r6, r0
	cmp r1, #0
	bne .LBB152_6	@ bb7
.LBB152_5:	@ bb5
	ldrb r1, [r4, #+8]
	cmp r1, #18
	bne .LBB152_17	@ bb6
.LBB152_6:	@ bb7
	ldrb r1, [r4, #+8]
	cmp r1, #6
	ldreq r0, .LCPI152_3
	emit_nops_till_bundle_end
	bleq warning
.LBB152_7:	@ bb8
.LBB152_8:	@ bb9
	mov r1, r4
	ldrb r3, [r1, #+8]!
	ldrb r3, [r1, #+1]
	ldrb r2, [r1, #+2]!
	ldrb r1, [r6, #+10]
	mov r2, r6
	ldrb r0, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r1, r1, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r0, r0, r12, lsl #8
	orr r1, r0, r1, lsl #16
	bic r1, r1, #2, 20 @ 8192
	strb r1, [r2]
	mov r0, r1, lsr #24
	strb r0, [r2, #+3]
	mov r0, #2, 20 @ 8192
	and r3, r0, r3, lsl #8
	orr r3, r1, r3
	mov r0, r3, lsr #8
	strb r0, [r2, #+1]
	mov r1, r1, lsr #16
	strb r1, [r6, #+10]
	ldrb r1, [r4, #+9]
	tst r1, #16
	bne .LBB152_18	@ bb9.bb27_crit_edge
.LBB152_9:	@ bb19
	ldrb r1, [r5, #+9]
	tst r1, #1
	ldreq r1, .LCPI152_0
	ldreq r1, [r1]
	cmpeq r1, #0
	beq .LBB152_11	@ bb26
	b .LBB152_18	@ bb9.bb27_crit_edge
.LBB152_10:	@ bb24
.LBB152_11:	@ bb26
	mov r1, #0
.LBB152_12:	@ bb27
	bic r3, r3, #1, 24 @ 256
	orr r1, r3, r1
	mov r3, r1, lsr #16
	strb r3, [r6, #+10]
	mov r3, r1, lsr #24
	strb r3, [r6, #+11]
	mov r3, r6
	strb r1, [r3, #+8]!
	mov r2, r1, lsr #8
	strb r2, [r3, #+1]
	bic r1, r1, #1, 20 @ 4096
	ldrb r2, [r4, #+8]!
	ldrb r4, [r4, #+1]
	strb r1, [r3]
	mov r2, #1, 20 @ 4096
	and r4, r2, r4, lsl #8
	orr r4, r1, r4
	mov r4, r4, lsr #8
	strb r4, [r3, #+1]
	mov r4, r1, lsr #24
	strb r4, [r6, #+11]
	mov r1, r1, lsr #16
	strb r1, [r6, #+10]
	mov r0, r6
	b .LBB152_16	@ bb3
.LBB152_13:	@ bb40
	tst r1, #255
	ldrne r0, .LCPI152_4
	movne r1, r4
	emit_nops_till_bundle_end
	blne error
.LBB152_14:	@ bb41
.LBB152_15:	@ bb42
	ldr r3, .LCPI152_2
	ldr r0, [r3]
.LBB152_16:	@ bb3
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB152_17:	@ bb6
	ldr r0, .LCPI152_1
	emit_nops_till_bundle_end
	bl error
	ldr r4, .LCPI152_2
	ldr r0, [r4]
	b .LBB152_16	@ bb3
.LBB152_18:	@ bb9.bb27_crit_edge
	mov r1, #1, 24 @ 256
	b .LBB152_12	@ bb27
	.align	4
.LBB152_19:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI152_0:
 	.long	flag_volatile

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI152_1:
 	.long	.str153981

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI152_2:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI152_3:
 	.long	.str154982

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI152_4:
 	.long	.str155983

	.size build_indirect_ref, .-build_indirect_ref


	.globl	parser_build_binary_op
	.align	4
parser_build_binary_op:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r3, #1
	emit_nops_till_bundle_end
	bl build_binary_op
	ldr r3, .LCPI153_0
	ldr r3, [r3]
	ldrb r2, [r5, #+8]
	ldr r2, [r3, +r2, lsl #2]
	ldrb r2, [r2]
	sub r1, r2, #49
	and r1, r1, #255
	ldrb r12, [r4, #+8]
	ldr r3, [r3, +r12, lsl #2]
	ldrb r3, [r3]
	mov r7, r0
	cmp r1, #2
	blo .LBB153_3	@ bb6
.LBB153_1:	@ entry
	and r1, r2, #255
	cmp r1, #60
	andne r2, r2, #255
	cmpne r2, #101
	bne .LBB153_62	@ entry.bb7_crit_edge
.LBB153_2:	@ entry
.LBB153_3:	@ bb6
	ldr r8, [r5, #+12]
.LBB153_4:	@ bb7
	sub r2, r3, #49
	and r2, r2, #255
	cmp r2, #2
	blo .LBB153_7	@ bb15
.LBB153_5:	@ bb7
	and r2, r3, #255
	cmp r2, #60
	andne r3, r3, #255
	cmpne r3, #101
	bne .LBB153_63	@ bb7.bb16_crit_edge
.LBB153_6:	@ bb7
.LBB153_7:	@ bb15
	ldr r9, [r4, #+12]
.LBB153_8:	@ bb16
	ldr r3, .LCPI153_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB153_51	@ bb75
.LBB153_9:	@ bb17
	sub r3, r6, #80
	cmp r3, #1
	bhi .LBB153_14	@ bb24
.LBB153_10:	@ bb18
	sub r3, r8, #56
	cmp r9, #57
	beq .LBB153_13	@ bb23
.LBB153_11:	@ bb18
	cmp r3, #2
	blo .LBB153_13	@ bb23
.LBB153_12:	@ bb18
	cmp r9, #56
	ldreq r0, .LCPI153_2
	emit_nops_till_bundle_end
	bleq warning
	b .LBB153_14	@ bb24
.LBB153_13:	@ bb23
	ldr r0, .LCPI153_2
	emit_nops_till_bundle_end
	bl warning
.LBB153_14:	@ bb24
	sub r3, r6, #84
	cmp r3, #6
	bhi .LBB153_51	@ bb75
.LBB153_15:	@ bb24
	.set PCRELV13, (.LJTI153_0_0-(.LPCRELL13+8))
.LPCRELL13:
	add r2, pc, #PCRELV13
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI153_0_0:
	.long	 .LBB153_22
	.long	 .LBB153_34
	.long	 .LBB153_44
	.long	 .LBB153_51
	.long	 .LBB153_51
	.long	 .LBB153_51
	.long	 .LBB153_16

.text
@ JUMP TABLE END



	.align	2
.LBB153_16:	@ bb25
	cmp r9, #89
	cmpne r8, #89
	bne .LBB153_19	@ bb30
.LBB153_17:	@ bb25
.LBB153_18:	@ bb29
	ldr r0, .LCPI153_3
	emit_nops_till_bundle_end
	bl warning
.LBB153_19:	@ bb30
	cmp r6, #86
	beq .LBB153_44	@ bb66
.LBB153_20:	@ bb30
	cmp r6, #85
	beq .LBB153_34	@ bb49
.LBB153_21:	@ bb30
	cmp r6, #84
	bne .LBB153_51	@ bb75
	.align	2
.LBB153_22:	@ bb31
	sub r3, r8, #85
	cmp r3, #2
	blo .LBB153_28	@ bb44
.LBB153_23:	@ bb31
	cmp r8, #56
	beq .LBB153_28	@ bb44
.LBB153_24:	@ bb35
	cmp r9, #86
	cmpne r8, #57
	bne .LBB153_26	@ bb39
	b .LBB153_28	@ bb44
.LBB153_25:	@ bb35
.LBB153_26:	@ bb39
	sub r3, r9, #56
	cmp r3, #29
	bhi .LBB153_29	@ bb45
.LBB153_27:	@ bb39
	mov r2, #1
	mov r1, #50, 4 @ 536870915
	tst r1, r2, lsl r3
	ldrne r0, .LCPI153_4
	emit_nops_till_bundle_end
	blne warning
	b .LBB153_29	@ bb45
.LBB153_28:	@ bb44
	ldr r0, .LCPI153_4
	emit_nops_till_bundle_end
	bl warning
.LBB153_29:	@ bb45
	ldr r3, .LCPI153_0
	ldr r3, [r3]
	ldr r2, [r3, +r8, lsl #2]
	ldrb r2, [r2]
	cmp r2, #60
	ldrne r3, [r3, +r9, lsl #2]
	ldrneb r3, [r3]
	cmpne r3, #60
	bne .LBB153_32	@ bb48
.LBB153_30:	@ bb46
.LBB153_31:	@ bb47
	ldr r0, .LCPI153_5
	emit_nops_till_bundle_end
	bl warning
.LBB153_32:	@ bb48
	cmp r6, #86
	beq .LBB153_44	@ bb66
.LBB153_33:	@ bb48
	cmp r6, #85
	bne .LBB153_51	@ bb75
	.align	2
.LBB153_34:	@ bb49
	cmp r8, #56
	cmpne r8, #86
	bne .LBB153_36	@ bb53
	b .LBB153_39	@ bb61
.LBB153_35:	@ bb49
.LBB153_36:	@ bb53
	cmp r9, #86
	cmpne r8, #57
	bne .LBB153_38	@ bb57
	b .LBB153_39	@ bb61
.LBB153_37:	@ bb53
.LBB153_38:	@ bb57
	sub r3, r9, #56
	cmp r3, #1
	ldrls r0, .LCPI153_6
	emit_nops_till_bundle_end
	blls warning
	b .LBB153_40	@ bb62
.LBB153_39:	@ bb61
	ldr r0, .LCPI153_6
	emit_nops_till_bundle_end
	bl warning
.LBB153_40:	@ bb62
	ldr r3, .LCPI153_0
	ldr r3, [r3]
	ldr r2, [r3, +r8, lsl #2]
	ldrb r2, [r2]
	cmp r2, #60
	ldrne r3, [r3, +r9, lsl #2]
	ldrneb r3, [r3]
	cmpne r3, #60
	bne .LBB153_43	@ bb65
.LBB153_41:	@ bb63
.LBB153_42:	@ bb64
	ldr r0, .LCPI153_7
	emit_nops_till_bundle_end
	bl warning
.LBB153_43:	@ bb65
	cmp r6, #86
	bne .LBB153_51	@ bb75
	.align	2
.LBB153_44:	@ bb66
	sub r3, r8, #56
	cmp r9, #57
	beq .LBB153_47	@ bb71
.LBB153_45:	@ bb66
	cmp r3, #2
	blo .LBB153_47	@ bb71
.LBB153_46:	@ bb66
	cmp r9, #56
	ldreq r0, .LCPI153_8
	emit_nops_till_bundle_end
	bleq warning
	b .LBB153_48	@ bb72
.LBB153_47:	@ bb71
	ldr r0, .LCPI153_8
	emit_nops_till_bundle_end
	bl warning
.LBB153_48:	@ bb72
	ldr r3, .LCPI153_0
	ldr r3, [r3]
	ldr r2, [r3, +r8, lsl #2]
	ldrb r2, [r2]
	cmp r2, #60
	ldrne r3, [r3, +r9, lsl #2]
	ldrneb r3, [r3]
	cmpne r3, #60
	bne .LBB153_51	@ bb75
.LBB153_49:	@ bb73
.LBB153_50:	@ bb74
	ldr r0, .LCPI153_9
	emit_nops_till_bundle_end
	bl warning
	.align	2
.LBB153_51:	@ bb75
	ldr r3, .LCPI153_0
	ldr r3, [r3]
	ldr r2, [r3, +r6, lsl #2]
	ldrb r2, [r2]
	cmp r2, #60
	bne .LBB153_56	@ bb80
.LBB153_52:	@ bb76
	ldr r2, .LCPI153_10
	ldr r2, [r2]
	cmp r2, #0
	beq .LBB153_56	@ bb80
.LBB153_53:	@ bb77
	ldr r2, [r3, +r8, lsl #2]
	ldrb r2, [r2]
	cmp r2, #60
	ldrne r3, [r3, +r9, lsl #2]
	ldrneb r3, [r3]
	cmpne r3, #60
	bne .LBB153_56	@ bb80
.LBB153_54:	@ bb78
.LBB153_55:	@ bb79
	ldr r0, .LCPI153_11
	emit_nops_till_bundle_end
	bl warning
.LBB153_56:	@ bb80
	mov r0, r7
	mov r1, r5
	emit_nops_till_bundle_end
	bl unsigned_conversion_warning
	mov r0, r7
	mov r1, r4
	emit_nops_till_bundle_end
	bl unsigned_conversion_warning
	mov r0, r7
	emit_nops_till_bundle_end
	bl overflow_warning
	ldr r3, .LCPI153_0
	ldr r3, [r3]
	ldrb r2, [r7, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldrb r3, [r3]
	sub r2, r3, #49
	and r2, r2, #255
	cmp r2, #2
	blo .LBB153_59	@ bb88
.LBB153_57:	@ bb80
	and r2, r3, #255
	cmp r2, #60
	andne r3, r3, #255
	cmpne r3, #101
	bne .LBB153_61	@ bb89
.LBB153_58:	@ bb80
.LBB153_59:	@ bb88
	@comment
str r6, [r7, #+12]
	mov r0, r7
.LBB153_60:	@ bb88
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB153_61:	@ bb89
	ldr r1, [r7, #+4]
	ldrb r4, [r7, #+9]
	mov r3, r7
	ldrb r2, [r3, #+8]!
	mov r0, #107
	mov r2, r7
	emit_nops_till_bundle_end
	bl build1
	@comment
str r6, [r0, #+12]
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 24 @ 512
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, #2, 24 @ 512
	and r1, r1, r4, lsl #8
	orr r1, r3, r1
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	b .LBB153_60	@ bb88
.LBB153_62:	@ entry.bb7_crit_edge
	mov r8, #0
	b .LBB153_4	@ bb7
.LBB153_63:	@ bb7.bb16_crit_edge
	mov r9, #0
	b .LBB153_8	@ bb16
	.align	4
.LBB153_64:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_1:
 	.long	warn_parentheses

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_2:
 	.long	.str160988

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_3:
 	.long	.str161989

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_4:
 	.long	.str162990

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_5:
 	.long	.str163991

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_6:
 	.long	.str164992

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_7:
 	.long	.str165993

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_8:
 	.long	.str166994

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_9:
 	.long	.str167995

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_10:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI153_11:
 	.long	.str168996

	.size parser_build_binary_op, .-parser_build_binary_op


	.globl	build_array_ref
	.align	4
build_array_ref:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	cmp r1, #0
	bne .LBB154_3	@ bb1
.LBB154_1:	@ bb
	ldr r0, .LCPI154_0
.LBB154_2:	@ bb
	emit_nops_till_bundle_end
	bl error
	b .LBB154_50	@ bb15
.LBB154_3:	@ bb1
	ldr r3, .LCPI154_1
	ldr r0, [r3]
	ldr r3, [r5, #+4]
	cmp r3, r0
	ldrne r2, [r4, #+4]
	cmpne r2, r0
	bne .LBB154_5	@ bb4
	b .LBB154_59	@ bb3
.LBB154_4:	@ bb2
.LBB154_5:	@ bb4
	ldrb r3, [r3, #+8]
	cmp r3, #18
	bne .LBB154_51	@ bb104
.LBB154_6:	@ bb5
	ldrb r3, [r5, #+8]
	cmp r3, #39
	beq .LBB154_51	@ bb104
.LBB154_7:	@ bb6
	ldr r3, .LCPI154_2
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB154_10	@ bb9
.LBB154_8:	@ bb7
	ldr r3, .LCPI154_3
	ldr r3, [r3]
	ldr r2, [r2, #+64]
	cmp r2, r3
	ldreq r0, .LCPI154_4
	emit_nops_till_bundle_end
	bleq warning
.LBB154_9:	@ bb8
.LBB154_10:	@ bb9
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	ldr r4, [r0, #+4]
	ldrb r4, [r4, #+8]
	mov r6, r0
	cmp r4, #7
	bne .LBB154_60	@ bb10
.LBB154_11:	@ bb11
	ldrb r4, [r6, #+8]
	cmp r4, #25
	bne .LBB154_14	@ bb14
.LBB154_12:	@ bb12
	ldr r4, [r5, #+4]
	ldr r4, [r4, #+4]
	ldr r4, [r4, #+16]
	cmp r4, #0
	ldrneb r4, [r4, #+8]
	cmpne r4, #25
	bne .LBB154_14	@ bb14
	b .LBB154_15	@ bb16
.LBB154_13:	@ bb13
.LBB154_14:	@ bb14
	mov r0, r5
	emit_nops_till_bundle_end
	bl mark_addressable
	cmp r0, #0
	beq .LBB154_50	@ bb15
.LBB154_15:	@ bb16
	ldrb r4, [r6, #+8]
	cmp r4, #25
	bne .LBB154_19	@ bb21
.LBB154_16:	@ bb17
	ldr r4, [r5, #+4]
	ldr r1, [r4, #+12]
	cmp r1, #0
	beq .LBB154_19	@ bb21
.LBB154_17:	@ bb18
	mov r0, r6
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB154_19	@ bb21
.LBB154_18:	@ bb19
	mov r0, r5
	emit_nops_till_bundle_end
	bl mark_addressable
	cmp r0, #0
	beq .LBB154_50	@ bb15
.LBB154_19:	@ bb21
	ldr r4, .LCPI154_6
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB154_40	@ bb29
.LBB154_20:	@ bb21.tailrecurse.i_crit_edge
	mov r4, #1
	mov r3, #142, 28 @ 2272
	orr r3, r3, #1, 18 @ 16384
	mov r2, #2, 24 @ 512
	mov r1, r5
.LBB154_21:	@ tailrecurse.i
	ldrb r0, [r1, #+8]
	cmp r0, #114
	bgt .LBB154_29	@ tailrecurse.i
.LBB154_22:	@ tailrecurse.i
	cmp r0, #27
	ble .LBB154_61	@ tailrecurse.i
.LBB154_23:	@ tailrecurse.i
	sub r0, r0, #28
	cmp r0, #14
	bhi .LBB154_27	@ bb23
.LBB154_24:	@ tailrecurse.i
	tst r3, r4, lsl r0
	bne .LBB154_62	@ bb2.i.i
.LBB154_25:	@ tailrecurse.i
	tst r4, r4, lsl r0
	bne .LBB154_39	@ bb29thread-split
.LBB154_26:	@ tailrecurse.i
	tst r2, r4, lsl r0
	bne .LBB154_30	@ bb.i
.LBB154_27:	@ bb23
	ldrb r4, [r5, #+29]
	tst r4, #4
	beq .LBB154_38	@ bb28
.LBB154_28:	@ bb27
	ldr r0, .LCPI154_7
	emit_nops_till_bundle_end
	bl pedwarn
	b .LBB154_39	@ bb29thread-split
.LBB154_29:	@ tailrecurse.i
	sub r0, r0, #115
	cmp r0, #1
	bhi .LBB154_27	@ bb23
.LBB154_30:	@ bb.i
	ldr r1, [r1, #+16]
	ldrb r0, [r1, #+8]
	cmp r0, #114
	bgt .LBB154_36	@ bb.i
.LBB154_31:	@ bb.i
	cmp r0, #27
	ble .LBB154_61	@ tailrecurse.i
.LBB154_32:	@ bb.i
	sub r0, r0, #28
	cmp r0, #14
	bhi .LBB154_27	@ bb23
.LBB154_33:	@ bb.i
	tst r3, r4, lsl r0
	bne .LBB154_62	@ bb2.i.i
.LBB154_34:	@ bb.i
	tst r4, r4, lsl r0
	bne .LBB154_39	@ bb29thread-split
.LBB154_35:	@ bb.i
	tst r2, r4, lsl r0
	beq .LBB154_27	@ bb23
	b .LBB154_37	@ bb.i.i
.LBB154_36:	@ bb.i
	sub r0, r0, #115
	cmp r0, #1
	bhi .LBB154_27	@ bb23
.LBB154_37:	@ bb.i.i
	ldr r1, [r1, #+16]
	b .LBB154_21	@ tailrecurse.i
.LBB154_38:	@ bb28
	ldr r0, .LCPI154_8
	emit_nops_till_bundle_end
	bl pedwarn
.LBB154_39:	@ bb29thread-split
	ldr r4, .LCPI154_6
	ldr r4, [r4]
.LBB154_40:	@ bb29
	cmp r4, #0
	beq .LBB154_47	@ bb40
.LBB154_41:	@ bb32.preheader
	ldrb r4, [r5, #+8]
	cmp r4, #37
	bne .LBB154_64	@ bb32.preheader.bb33_crit_edge
.LBB154_42:	@ bb32.preheader.bb31_crit_edge
	mov r4, r5
.LBB154_43:	@ bb31
	ldr r4, [r4, #+16]
	ldrb r3, [r4, #+8]
	cmp r3, #37
	beq .LBB154_43	@ bb31
.LBB154_44:	@ bb33
	ldrb r3, [r4, #+8]
	cmp r3, #33
	bne .LBB154_47	@ bb40
.LBB154_45:	@ bb34
	ldrb r4, [r4, #+29]
	tst r4, #4
	ldrne r0, .LCPI154_8
	emit_nops_till_bundle_end
	blne pedwarn
.LBB154_46:	@ bb39
.LBB154_47:	@ bb40
	ldr r4, [r5, #+4]
	ldr r4, [r4, #+4]
	ldr r1, [r4, #+64]
	mov r0, #42
	mov r2, r5
	mov r3, r6
	emit_nops_till_bundle_end
	bl build
	ldr r4, [r5, #+4]
	mov r3, r5
	ldrb r2, [r3, #+8]!
	ldrb r2, [r3, #+1]
	mov r1, r3
	ldrb r12, [r1, #+2]!
	ldr r4, [r4, #+4]
	ldrb r1, [r4, #+8]!
	ldrb r1, [r4, #+1]
	ldrb r12, [r4, #+2]!
	ldrb r4, [r0, #+11]
	ldrb r12, [r0, #+10]
	orr r4, r12, r4, lsl #8
	mov r12, r0
	ldrb lr, [r12, #+8]!
	ldrb r6, [r12, #+1]
	orr lr, lr, r6, lsl #8
	orr r4, lr, r4, lsl #16
	bic lr, r4, #2, 20 @ 8192
	strb lr, [r12]
	orr r1, r4, r1, lsl #8
	orr r2, r1, r2, lsl #8
	and r2, r2, #2, 20 @ 8192
	orr r2, lr, r2
	mov r1, r2, lsr #8
	strb r1, [r12, #+1]
	mov r1, lr, lsr #24
	strb r1, [r0, #+11]
	mov r1, lr, lsr #16
	strb r1, [r0, #+10]
	ldr r1, [r5, #+4]
	ldr r1, [r1, #+4]
	ldrb lr, [r1, #+8]!
	ldrb lr, [r1, #+1]
	ldrb r6, [r1, #+2]!
	bic r2, r2, #1, 24 @ 256
	ldrb r1, [r3, #+1]
	strb r2, [r12]
	orr r1, r4, r1, lsl #8
	orr r1, r1, lr, lsl #4
	and r1, r1, #1, 24 @ 256
	orr r1, r1, r2
	mov lr, r1, lsr #8
	strb lr, [r12, #+1]
	mov lr, r2, lsr #24
	strb lr, [r0, #+11]
	mov r2, r2, lsr #16
	strb r2, [r0, #+10]
	ldr r5, [r5, #+4]
	ldr r5, [r5, #+4]
	ldrb r2, [r5, #+8]!
	ldrb r2, [r5, #+1]
	ldrb lr, [r5, #+2]!
	bic r5, r1, #1, 20 @ 4096
	ldrb r3, [r3, #+1]
	strb r5, [r12]
	orr r4, r4, r2, lsl #8
	orr r4, r4, r3, lsl #8
	and r4, r4, #1, 20 @ 4096
	orr r4, r5, r4
	mov r4, r4, lsr #8
	strb r4, [r12, #+1]
	mov r4, r5, lsr #24
	strb r4, [r0, #+11]
	mov r4, r5, lsr #16
	strb r4, [r0, #+10]
	emit_nops_till_bundle_end
	bl fold
	ldr r1, [r0, #+4]
	ldr r4, [r1, #+16]
	cmp r4, #0
	ldrne r4, .LCPI154_9
	ldrne r4, [r4]
	cmpne r1, r4
	bne .LBB154_59	@ bb3
.LBB154_48:	@ bb.i121
.LBB154_49:	@ bb2.i122
	emit_nops_till_bundle_end
	bl incomplete_type_error
.LBB154_50:	@ bb15
	ldr r4, .LCPI154_1
	ldr r0, [r4]
	b .LBB154_59	@ bb3
.LBB154_51:	@ bb104
	mov r0, r5
	emit_nops_till_bundle_end
	bl default_conversion
	mov r5, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #7
	mov r1, r5
	moveq r1, r0
	cmp r3, #7
	mov r2, r0
	moveq r2, r5
	ldr r3, .LCPI154_1
	ldr r3, [r3]
	cmp r1, r3
	beq .LBB154_58	@ bb113
.LBB154_52:	@ bb108
	ldr r3, [r1, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #13
	beq .LBB154_55	@ bb110
.LBB154_53:	@ bb109
	ldr r0, .LCPI154_10
.LBB154_54:	@ bb109
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI154_1
	ldr r0, [r3]
	b .LBB154_59	@ bb3
.LBB154_55:	@ bb110
	ldr r3, [r2, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #7
	beq .LBB154_57	@ bb112
.LBB154_56:	@ bb111
	ldr r0, .LCPI154_5
	b .LBB154_54	@ bb109
.LBB154_57:	@ bb112
	mov r0, #56
	mov r3, #0
	emit_nops_till_bundle_end
	bl build_binary_op
	ldr r1, .LCPI154_11
	emit_nops_till_bundle_end
	bl build_indirect_ref
	b .LBB154_59	@ bb3
.LBB154_58:	@ bb113
	mov r0, r1
.LBB154_59:	@ bb3
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB154_60:	@ bb10
	ldr r0, .LCPI154_5
	b .LBB154_2	@ bb
.LBB154_61:	@ tailrecurse.i
	cmp r0, #0
	bne .LBB154_27	@ bb23
.LBB154_62:	@ bb2.i.i
	ldr r4, [r1, #+4]
	ldrb r4, [r4, #+8]
	cmp r4, #16
	beq .LBB154_27	@ bb23
.LBB154_63:	@ bb2.i
	and r4, r4, #255
	cmp r4, #23
	beq .LBB154_27	@ bb23
	b .LBB154_39	@ bb29thread-split
.LBB154_64:	@ bb32.preheader.bb33_crit_edge
	mov r4, r5
	b .LBB154_44	@ bb33
	.align	4
.LBB154_65:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_0:
 	.long	.str169997

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_1:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_2:
 	.long	warn_char_subscripts

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_3:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_4:
 	.long	.str170998

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_5:
 	.long	.str171999

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_6:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_7:
 	.long	.str1721000

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_8:
 	.long	.str1731001

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_9:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_10:
 	.long	.str1741002

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI154_11:
 	.long	.str1751003

	.size build_array_ref, .-build_array_ref


	.globl	convert
	.align	4
convert:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, [r1, #+4]
	ldrb r12, [r0, #+8]
	mov r2, r1
	mov r1, r0
	cmp r3, r0
	ldrneb r0, [r2, #+8]
	cmpne r0, #0
	bne .LBB155_2	@ bb2
	b .LBB155_17	@ bb21
.LBB155_1:	@ bb
.LBB155_2:	@ bb2
	ldr r0, [r3, #+64]
	ldr lr, [r1, #+64]
	cmp lr, r0
	bne .LBB155_5	@ bb4
.LBB155_3:	@ bb3
	mov r0, #106
	emit_nops_till_bundle_end
	bl build1
.LBB155_4:	@ bb3
	emit_nops_till_bundle_end
	bl fold
	b .LBB155_18	@ bb21
.LBB155_5:	@ bb4
	ldrb r3, [r3, #+8]
	cmp r3, #6
	beq .LBB155_8	@ bb7
.LBB155_6:	@ bb4
	tst r3, #255
	bne .LBB155_9	@ bb8
.LBB155_7:	@ bb5
	ldr r12, .LCPI155_0
	ldr r0, [r12]
	b .LBB155_18	@ bb21
.LBB155_8:	@ bb7
	ldr r0, .LCPI155_1
	emit_nops_till_bundle_end
	bl error
	b .LBB155_7	@ bb5
.LBB155_9:	@ bb8
	sub r3, r12, #6
	and r3, r3, #255
	cmp r3, #7
	bhi .LBB155_16	@ bb20
.LBB155_10:	@ bb8
	.set PCRELV14, (.LJTI155_0_0-(.LPCRELL14+8))
.LPCRELL14:
	add r0, pc, #PCRELV14
	ldr pc, [r0, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI155_0_0:
	.long	 .LBB155_11
	.long	 .LBB155_12
	.long	 .LBB155_14
	.long	 .LBB155_15
	.long	 .LBB155_12
	.long	 .LBB155_16
	.long	 .LBB155_16
	.long	 .LBB155_13

.text
@ JUMP TABLE END



	.align	2
.LBB155_11:	@ bb9
	mov r0, #105
	emit_nops_till_bundle_end
	bl build1
	b .LBB155_18	@ bb21
	.align	2
.LBB155_12:	@ bb13
	mov r0, r1
	mov r1, r2
	emit_nops_till_bundle_end
	bl convert_to_integer
	b .LBB155_4	@ bb3
	.align	2
.LBB155_13:	@ bb15
	mov r0, r1
	mov r1, r2
	emit_nops_till_bundle_end
	bl convert_to_pointer
	b .LBB155_4	@ bb3
	.align	2
.LBB155_14:	@ bb17
	mov r0, r1
	mov r1, r2
	emit_nops_till_bundle_end
	bl convert_to_real
	b .LBB155_4	@ bb3
	.align	2
.LBB155_15:	@ bb19
	mov r0, r1
	mov r1, r2
	emit_nops_till_bundle_end
	bl convert_to_complex
	b .LBB155_4	@ bb3
	.align	2
.LBB155_16:	@ bb20
	ldr r0, .LCPI155_2
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI155_0
	ldr r0, [r3]
	b .LBB155_18	@ bb21
.LBB155_17:	@ bb21
	mov r0, r2
.LBB155_18:	@ bb21
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB155_19:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI155_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI155_1:
 	.long	.str1037

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI155_2:
 	.long	.str11038

	.size convert, .-convert


	.globl	gen_aux_info_record
	.align	4
gen_aux_info_record:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #12
	ldr r12, .LCPI156_0
	ldr r12, [r12]
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r12, #0
	beq .LBB156_8	@ return
.LBB156_1:	@ bb
	ldr r3, .LCPI156_1
	ldr r2, [r3]
	add r1, r2, #1
	@comment
str r1, [r3]
	cmp r2, #0
	bne .LBB156_3	@ bb2
.LBB156_2:	@ bb1
	ldr r3, .LCPI156_2
	ldr r0, [r3]
	ldr r1, .LCPI156_3
	emit_nops_till_bundle_end
	bl fprintf
.LBB156_3:	@ bb2
	mov r2, #0
	mov r0, r7
	mov r1, r6
	emit_nops_till_bundle_end
	bl gen_decl
	mov r3, #67
	mov r1, #70
	cmp r6, #0
	moveq r1, r3
	cmp r5, #0
	bne .LBB156_9	@ bb2.bb11_crit_edge
.LBB156_4:	@ bb6
	mov r3, #79
	mov r12, #78
	cmp r4, #0
	moveq r12, r3
.LBB156_5:	@ bb11
	ldr r3, .LCPI156_2
	ldr lr, [r3]
	ldr r2, [r7, #+12]
	ldr r3, [r7, #+16]
	@comment
str r0, [sp, #+8]
	@comment
str r1, [sp, #+4]
	@comment
str r12, [sp]
	ldr r1, .LCPI156_4
	mov r0, lr
	emit_nops_till_bundle_end
	bl fprintf
	cmp r6, #0
	beq .LBB156_7	@ bb13
.LBB156_6:	@ bb12
	mov r1, #2
	mov r0, r7
	emit_nops_till_bundle_end
	bl gen_formal_list_for_func_def
	mov r4, r0
	mov r1, #1
	mov r0, r7
	emit_nops_till_bundle_end
	bl gen_formal_list_for_func_def
	mov r2, r0
	ldr r3, .LCPI156_2
	ldr r0, [r3]
	ldr r1, .LCPI156_5
	mov r3, r4
	emit_nops_till_bundle_end
	bl fprintf
.LBB156_7:	@ bb13
	ldr r3, .LCPI156_2
	ldr r0, [r3]
	ldr r1, .LCPI156_6
	emit_nops_till_bundle_end
	bl fprintf
.LBB156_8:	@ return
	sfi_add sp, sp, #12
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB156_9:	@ bb2.bb11_crit_edge
	mov r12, #73
	b .LBB156_5	@ bb11
	.align	4
.LBB156_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_0:
 	.long	flag_gen_aux_info

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_1:
 	.long	compiled_from_record.3643

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_2:
 	.long	aux_info_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_3:
 	.long	.str281068

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_4:
 	.long	.str291069

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_5:
 	.long	.str301070

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI156_6:
 	.long	.str311071

	.size gen_aux_info_record, .-gen_aux_info_record


	.align	4
affix_data_type:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	mov r4, r0
	mov r5, #9
	mov r6, #6
	mov r7, r4
.LBB157_1:	@ bb
	ldr r1, .LCPI157_0
	mov r0, r7
	mov r2, r5
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB157_7	@ bb1
.LBB157_2:	@ bb2
	ldr r1, .LCPI157_1
	mov r0, r7
	mov r2, r6
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB157_8	@ bb3
.LBB157_3:	@ bb4
	cmp r7, r4
	bne .LBB157_6	@ bb6
.LBB157_4:	@ bb5
	ldr r7, .LCPI157_2
	ldr r7, [r7]
	ldr r5, .LCPI157_3
	cmp r7, #0
	moveq r7, r5
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r8, .LCPI157_4
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	cmp r4, #0
	moveq r4, r5
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	add r5, r9, r6
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r9, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r6
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r9
.LBB157_5:	@ bb5
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB157_6:	@ bb6
	ldrb r5, [r7]
	mov r3, #0
	strb r3, [r7]
	ldr r3, .LCPI157_2
	ldr r6, [r3]
	ldr r8, .LCPI157_3
	cmp r4, #0
	moveq r4, r8
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	cmp r6, #0
	moveq r6, r8
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r10, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r10, r9
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	strb r5, [r7]
	cmp r10, #0
	moveq r10, r8
	mov r0, r10
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r5, .LCPI157_4
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	cmp r7, #0
	moveq r7, r8
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r6, r6, r4
	add r3, r6, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r10
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r8
	b .LBB157_5	@ bb5
.LBB157_7:	@ bb1
	add r7, r7, #9
	b .LBB157_1	@ bb
.LBB157_8:	@ bb3
	add r7, r7, #6
	b .LBB157_1	@ bb
	.align	4
.LBB157_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI157_0:
 	.long	.str11041

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI157_1:
 	.long	.str21042

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI157_2:
 	.long	data_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI157_3:
 	.long	.str1040

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI157_4:
 	.long	.str31043

	.size affix_data_type, .-affix_data_type


	.align	4
gen_type:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #28
	ldr r3, [r1, #+48]
	@comment
str r2, [sp, #+4]
	@comment
str r1, [sp, #+12]
	@comment
str r0, [sp, #+8]
	cmp r3, #0
	ldrne r2, [r3, #+32]
	cmpne r2, #0
	bne .LBB158_2	@ bb1
	b .LBB158_4	@ bb2
.LBB158_1:	@ bb
.LBB158_2:	@ bb1
	ldr r3, [r2, #+16]
.LBB158_3:	@ bb1
	ldr r2, .LCPI158_26
	@comment
str r3, [r2]
	b .LBB158_83	@ bb72
.LBB158_4:	@ bb2
	ldr r2, [sp, #+12]
	ldrb r2, [r2, #+8]
	cmp r2, #31
	bgt .LBB158_69	@ bb2
.LBB158_5:	@ bb2
	cmp r2, #23
	bhi .LBB158_80	@ bb71
.LBB158_6:	@ bb2
	.set PCRELV15, (.LJTI158_0_0-(.LPCRELL15+8))
.LPCRELL15:
	add r1, pc, #PCRELV15
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI158_0_0:
	.long	 .LBB158_78
	.long	 .LBB158_42
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_82
	.long	 .LBB158_73
	.long	 .LBB158_71
	.long	 .LBB158_80
	.long	 .LBB158_60
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_7
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_80
	.long	 .LBB158_15
	.long	 .LBB158_80
	.long	 .LBB158_44
	.long	 .LBB158_51
	.long	 .LBB158_80
	.long	 .LBB158_24

.text
@ JUMP TABLE END



	.align	2
.LBB158_7:	@ bb3
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+9]
	tst r3, #32
	beq .LBB158_9	@ bb8
.LBB158_8:	@ bb7
	ldr r4, .LCPI158_27
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI158_28
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r7, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r7, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r7, [sp, #+8]
.LBB158_9:	@ bb8
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+9]
	tst r3, #16
	beq .LBB158_11	@ bb14
.LBB158_10:	@ bb13
	ldr r4, .LCPI158_29
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI158_28
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r7, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r7, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r7, [sp, #+8]
.LBB158_11:	@ bb14
	ldr r4, .LCPI158_30
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI158_28
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r7, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r7, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	ldr r3, [sp, #+12]
	ldr r3, [r3, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #18
	andne r3, r3, #255
	cmpne r3, #23
	bne .LBB158_14	@ bb18
.LBB158_12:	@ bb14
.LBB158_13:	@ bb17
	ldr r4, .LCPI158_31
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI158_28
	cmp r7, #0
	moveq r7, r3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r8, .LCPI158_32
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r6, r6, r5
	add r3, r6, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r9, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r6
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r9
.LBB158_14:	@ bb18
	mov r0, r7
	ldr r3, [sp, #+12]
	ldr r1, [r3, #+4]
	ldr r2, [sp, #+4]
	emit_nops_till_bundle_end
	bl gen_type
	b .LBB158_87	@ bb85
	.align	2
.LBB158_15:	@ bb19
	ldr r3, [sp, #+12]
	ldr r3, [r3, #+16]
	cmp r3, #0
	beq .LBB158_17	@ bb21
.LBB158_16:	@ bb20
	ldrb r3, [r3, #+8]
	cmp r3, #25
	beq .LBB158_21	@ bb22
.LBB158_17:	@ bb21
	ldr r3, [sp, #+12]
	ldr r4, [r3, #+4]
	ldr r3, .LCPI158_28
	ldr r5, [sp, #+8]
	cmp r5, #0
	moveq r5, r3
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r7, .LCPI158_33
.LBB158_18:	@ bb21
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r6, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r6
	mov r1, r7
.LBB158_19:	@ bb21
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r8
	mov r1, r4
.LBB158_20:	@ bb21
	ldr r2, [sp, #+4]
	emit_nops_till_bundle_end
	bl gen_type
	@comment
str r0, [sp, #+8]
	b .LBB158_83	@ bb72
.LBB158_21:	@ bb22
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	cmp r0, #0
	bne .LBB158_23	@ bb24
.LBB158_22:	@ bb23
	ldr r3, [sp, #+12]
	ldr r4, [r3, #+4]
	ldr r3, .LCPI158_28
	ldr r5, [sp, #+8]
	cmp r5, #0
	moveq r5, r3
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r7, .LCPI158_34
	b .LBB158_18	@ bb21
.LBB158_23:	@ bb24
	ldr r4, [sp, #+12]
	mov r0, r4
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r5, r0
	ldr r0, [r4, #+4]
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r1, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl __divsi3
	mov r2, r0
	add r5, sp, #18
	ldr r1, .LCPI158_35
	mov r0, r5
	emit_nops_till_bundle_end
	bl sprintf
	ldr r4, [r4, #+4]
	ldr r3, .LCPI158_28
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	add r3, r7, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r7
	mov r1, r5
	b .LBB158_19	@ bb21
	.align	2
.LBB158_24:	@ bb27
	ldr r3, [sp, #+12]
	ldr r3, [r3, #+4]
	@comment
str r3, [sp]
	ldr r3, [sp, #+4]
	cmp r3, #0
	beq .LBB158_26	@ bb1.i
.LBB158_25:	@ bb27.gen_formal_list_for_type.exit_crit_edge
	ldr r4, .LCPI158_10
	b .LBB158_41	@ gen_formal_list_for_type.exit
.LBB158_26:	@ bb1.i
	ldr r3, [sp, #+12]
	add r4, r3, #12
	ldr r5, .LCPI158_2
	mov r6, #0
	mov r7, r4
	b .LBB158_32	@ bb8.i
.LBB158_27:	@ bb2.i
	ldrb r3, [r8]
	cmp r3, #0
	beq .LBB158_29	@ bb4.i
.LBB158_28:	@ bb3.i
	ldr r3, .LCPI158_2
	cmp r8, #0
	moveq r8, r3
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r9, .LCPI158_11
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r10, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r10, r5
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
	mov r8, r10
.LBB158_29:	@ bb4.i
	ldr r1, [r7, #+16]
	ldr r0, .LCPI158_2
	mov r2, r6
	emit_nops_till_bundle_end
	bl gen_type
	mov r5, r0
	emit_nops_till_bundle_end
	bl strlen
	cmp r0, #0
	bne .LBB158_88	@ bb5.i
.LBB158_30:	@ bb6.i
	ldr r3, .LCPI158_0
	ldr r9, [r3]
.LBB158_31:	@ bb6.i
	ldr r5, .LCPI158_2
	cmp r8, #0
	moveq r8, r5
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r10, r0
	cmp r9, #0
	moveq r9, r5
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r3, r10, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r5, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r5, r10
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
.LBB158_32:	@ bb8.i
	mov r8, r5
	ldr r7, [r7]
	cmp r7, #0
	ldrne r3, .LCPI158_12
	ldrne r3, [r3]
	ldrne r2, [r7, #+16]
	cmpne r2, r3
	bne .LBB158_27	@ bb2.i
.LBB158_33:	@ bb9.i
.LBB158_34:	@ bb10.i
	ldrb r3, [r8]
	cmp r3, #0
	bne .LBB158_38	@ bb14.i
.LBB158_35:	@ bb11.i
	ldr r3, [r4]
	cmp r3, #0
	ldreq r8, .LCPI158_14
	ldrne r8, .LCPI158_13
	b .LBB158_40	@ bb16.i
.LBB158_36:	@ bb11.i.bb16.i_crit_edge
.LBB158_37:	@ bb13.i
.LBB158_38:	@ bb14.i
	cmp r7, #0
	bne .LBB158_40	@ bb16.i
.LBB158_39:	@ bb15.i
	ldr r3, .LCPI158_2
	cmp r8, #0
	moveq r8, r3
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r5, .LCPI158_15
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	add r3, r4, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	mov r8, r6
.LBB158_40:	@ bb16.i
	ldr r5, .LCPI158_16
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r3, .LCPI158_2
	cmp r8, #0
	moveq r8, r3
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r7, .LCPI158_6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r9, r4, r6
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r4, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r6
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r9
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
.LBB158_41:	@ gen_formal_list_for_type.exit
	ldr r5, .LCPI158_2
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r5
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	cmp r4, #0
	moveq r4, r5
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	add r3, r7, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r5, r0
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r5, r7
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r5
	ldr r1, [sp]
	b .LBB158_20	@ bb21
	.align	2
.LBB158_42:	@ bb28
	ldr r3, [sp, #+12]
.LBB158_43:	@ bb28
	ldr r3, [r3, #+16]
	b .LBB158_3	@ bb1
	.align	2
.LBB158_44:	@ bb29
	cmp r3, #0
	bne .LBB158_89	@ bb30
.LBB158_45:	@ bb31
	ldr r3, .LCPI158_0
	ldr r4, .LCPI158_2
	@comment
str r4, [r3]
	ldr r3, [sp, #+12]
	ldr r4, [r3, #+12]
	cmp r4, #0
	beq .LBB158_90	@ bb31.bb34_crit_edge
.LBB158_46:	@ bb31.bb32_crit_edge
	mov r5, #0
.LBB158_47:	@ bb32
	mov r0, r4
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl gen_decl
	mov r6, r0
	ldr r7, .LCPI158_0
	ldr r8, [r7]
	ldr r9, .LCPI158_2
	cmp r8, #0
	moveq r8, r9
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r10, r0
	cmp r6, #0
	moveq r6, r9
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r10, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r11, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r11, r10
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r11, [r7]
	ldr r4, [r4]
	cmp r11, #0
	moveq r11, r9
	mov r0, r11
	emit_nops_till_bundle_end
	bl strlen
	mov r8, r0
	ldr r9, .LCPI158_17
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r3, r8, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r11
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r8
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r6, [r7]
	cmp r4, #0
	bne .LBB158_47	@ bb32
.LBB158_48:	@ bb34
	ldr r5, .LCPI158_18
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	ldr r3, .LCPI158_2
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r8, .LCPI158_19
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r9, r4, r7
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r4, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r7
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
.LBB158_49:	@ bb35
	ldr r5, .LCPI158_0
	@comment
str r4, [r5]
	ldr r6, .LCPI158_20
.LBB158_50:	@ bb35
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	ldr r3, .LCPI158_2
	cmp r4, #0
	moveq r4, r3
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	add r3, r7, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r7
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r8, [r5]
	b .LBB158_83	@ bb72
	.align	2
.LBB158_51:	@ bb36
	cmp r3, #0
	bne .LBB158_91	@ bb37
.LBB158_52:	@ bb38
	ldr r3, .LCPI158_0
	ldr r4, .LCPI158_2
	@comment
str r4, [r3]
	ldr r3, [sp, #+12]
	ldr r4, [r3, #+12]
	cmp r4, #0
	beq .LBB158_92	@ bb38.bb41_crit_edge
.LBB158_53:	@ bb38.bb39_crit_edge
	mov r5, #0
.LBB158_54:	@ bb39
	mov r0, r4
	mov r1, r5
	mov r2, r5
	emit_nops_till_bundle_end
	bl gen_decl
	mov r6, r0
	ldr r7, .LCPI158_0
	ldr r8, [r7]
	ldr r9, .LCPI158_2
	cmp r8, #0
	moveq r8, r9
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r10, r0
	cmp r6, #0
	moveq r6, r9
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r10, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r11, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r11, r10
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r11, [r7]
	ldr r4, [r4]
	cmp r11, #0
	moveq r11, r9
	mov r0, r11
	emit_nops_till_bundle_end
	bl strlen
	mov r8, r0
	ldr r9, .LCPI158_17
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r3, r8, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r11
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r8
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r6, [r7]
	cmp r4, #0
	bne .LBB158_54	@ bb39
.LBB158_55:	@ bb41
	ldr r5, .LCPI158_18
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	ldr r3, .LCPI158_2
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r8, .LCPI158_19
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r9, r4, r7
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r4, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r7
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
.LBB158_56:	@ bb42
	ldr r5, .LCPI158_0
	@comment
str r4, [r5]
	ldr r6, .LCPI158_21
	b .LBB158_50	@ bb35
	.align	4
.LBB158_57:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_26:
 	.long	data_type

.LBB158_58:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_27:
 	.long	.str21042

.LBB158_59:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_28:
 	.long	.str1040

	.align	4
.LBB158_60:	@ bb43
	cmp r3, #0
	bne .LBB158_93	@ bb44
.LBB158_61:	@ bb45
	ldr r3, .LCPI158_0
	ldr r4, .LCPI158_2
	@comment
str r4, [r3]
	ldr r3, [sp, #+12]
	ldr r4, [r3, #+12]
	cmp r4, #0
	beq .LBB158_94	@ bb45.bb49_crit_edge
.LBB158_62:	@ bb45.bb46_crit_edge
	ldr r5, .LCPI158_2
.LBB158_63:	@ bb46
	ldr r3, [r4, #+12]
	ldr r7, [r3, #+16]
	ldr r6, .LCPI158_2
	cmp r5, #0
	moveq r5, r6
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r8, r0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r8, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r8
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	ldr r3, .LCPI158_0
	@comment
str r6, [r3]
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB158_65	@ bb48.backedge
.LBB158_64:	@ bb47
	ldr r3, .LCPI158_2
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r7, .LCPI158_11
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	ldr r3, .LCPI158_0
	@comment
str r8, [r3]
	mov r6, r8
.LBB158_65:	@ bb48.backedge
	cmp r4, #0
	mov r5, r6
	bne .LBB158_63	@ bb46
.LBB158_66:	@ bb49
	ldr r5, .LCPI158_18
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	ldr r3, .LCPI158_2
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r8, .LCPI158_22
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r9, r4, r7
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r4, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r7
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r4, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
.LBB158_67:	@ bb50
	ldr r5, .LCPI158_0
	@comment
str r4, [r5]
	ldr r6, .LCPI158_23
	b .LBB158_50	@ bb35
	.align	4
.LBB158_68:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_29:
 	.long	.str11041

	.align	4
.LBB158_69:	@ bb2
	cmp r2, #32
	bne .LBB158_80	@ bb71
.LBB158_70:	@ bb51
	ldr r3, [sp, #+12]
	.align	2
.LBB158_71:	@ bb68
	ldr r3, [r3, #+32]
	b .LBB158_43	@ bb28
	.align	4
.LBB158_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_30:
 	.long	.str111051

	.align	4
.LBB158_73:	@ bb52
	ldr r3, [r3, #+32]
	ldr r4, [r3, #+16]
	ldr r3, .LCPI158_0
	@comment
str r4, [r3]
	ldr r3, [sp, #+12]
	ldrb r2, [r3, #+9]
	ldrb r1, [r3, #+8]!
	orr r2, r1, r2, lsl #8
	ldrb r1, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r1, lsl #8
	orr r3, r2, r3, lsl #16
	tst r3, #1, 18 @ 16384
	beq .LBB158_83	@ bb72
.LBB158_74:	@ bb57
	tst r3, #2, 20 @ 8192
	tsteq r3, #1, 20 @ 4096
	beq .LBB158_83	@ bb72
.LBB158_75:	@ bb62
.LBB158_76:	@ bb67
	ldr r5, .LCPI158_24
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r3, .LCPI158_2
	cmp r4, #0
	moveq r4, r3
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	add r3, r6, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r7, r0
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r7, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	ldr r3, .LCPI158_0
	@comment
str r7, [r3]
	b .LBB158_83	@ bb72
	.align	4
.LBB158_77:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_31:
 	.long	.str121052

	.align	4
.LBB158_78:	@ bb70
	ldr r3, .LCPI158_0
	ldr r2, .LCPI158_25
	@comment
str r2, [r3]
	b .LBB158_83	@ bb72
	.align	4
.LBB158_79:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_32:
 	.long	.str101050

	.align	4
.LBB158_80:	@ bb71
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB158_81:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_33:
 	.long	.str131053

	.align	4
.LBB158_82:	@ bb69
	ldr r3, .LCPI158_0
	ldr r2, .LCPI158_13
	@comment
str r2, [r3]
.LBB158_83:	@ bb72
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+9]
	tst r3, #32
	beq .LBB158_85	@ bb78
.LBB158_84:	@ bb77
	ldr r4, .LCPI158_1
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI158_2
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r7, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r7, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	@comment
str r7, [sp, #+8]
.LBB158_85:	@ bb78
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+9]
	tst r3, #16
	bne .LBB158_97	@ bb83
.LBB158_86:	@ bb85
	ldr r0, [sp, #+8]
.LBB158_87:	@ bb85
	sfi_add sp, sp, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB158_88:	@ bb5.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl affix_data_type
	mov r9, r0
	b .LBB158_31	@ bb6.i
.LBB158_89:	@ bb30
	ldr r4, [r3, #+16]
	b .LBB158_49	@ bb35
.LBB158_90:	@ bb31.bb34_crit_edge
	ldr r6, .LCPI158_2
	b .LBB158_48	@ bb34
.LBB158_91:	@ bb37
	ldr r4, [r3, #+16]
	b .LBB158_56	@ bb42
.LBB158_92:	@ bb38.bb41_crit_edge
	ldr r6, .LCPI158_2
	b .LBB158_55	@ bb41
.LBB158_93:	@ bb44
	ldr r4, [r3, #+16]
	b .LBB158_67	@ bb50
.LBB158_94:	@ bb45.bb49_crit_edge
	ldr r6, .LCPI158_2
	b .LBB158_66	@ bb49
	.align	4
.LBB158_95:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_34:
 	.long	.str141054

.LBB158_96:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_35:
 	.long	.str151055

	.align	4
.LBB158_97:	@ bb83
	ldr r4, .LCPI158_3
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI158_2
	ldr r6, [sp, #+8]
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r7, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r7, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r7
	b .LBB158_87	@ bb85
	.align	4
.LBB158_98:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_0:
 	.long	data_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_1:
 	.long	.str21042

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_2:
 	.long	.str1040

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_3:
 	.long	.str11041

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_6:
 	.long	.str101050

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_10:
 	.long	.str41044

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_11:
 	.long	.str51045

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_12:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_13:
 	.long	.str61046

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_14:
 	.long	.str71047

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_15:
 	.long	.str81048

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_16:
 	.long	.str91049

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_17:
 	.long	.str161056

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_18:
 	.long	.str171057

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_19:
 	.long	.str181058

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_20:
 	.long	.str191059

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_21:
 	.long	.str201060

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_22:
 	.long	.str211061

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_23:
 	.long	.str221062

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_24:
 	.long	.str231063

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI158_25:
 	.long	.str241064

	.size gen_type, .-gen_type


	.align	4
gen_decl:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr r3, [r0, #+32]
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r3, #0
	ldrne r7, [r3, #+16]
	ldreq r7, .LCPI159_0
	b .LBB159_2	@ bb2
.LBB159_1:	@ bb
.LBB159_2:	@ bb2
	cmp r4, #1
	beq .LBB159_21	@ bb40
.LBB159_3:	@ bb4
	ldrb r3, [r6, #+9]
	tst r3, #16
	beq .LBB159_5	@ bb9
.LBB159_4:	@ bb8
	ldr r8, .LCPI159_1
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	ldr r3, .LCPI159_0
	cmp r7, #0
	moveq r7, r3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r10, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r10, r9
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r10
.LBB159_5:	@ bb9
	ldrb r3, [r6, #+9]
	tst r3, #32
	beq .LBB159_7	@ bb15
.LBB159_6:	@ bb14
	ldr r8, .LCPI159_2
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	ldr r3, .LCPI159_0
	cmp r7, #0
	moveq r7, r3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r10, r0
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r10, r9
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r10
.LBB159_7:	@ bb15
	ldr r3, .LCPI159_3
	ldr r2, .LCPI159_0
	@comment
str r2, [r3]
	ldrb r3, [r6, #+8]
	cmp r3, #29
	bne .LBB159_9	@ bb19
.LBB159_8:	@ bb15
	cmp r5, #0
	bne .LBB159_20	@ bb18
.LBB159_9:	@ bb19
	ldr r1, [r6, #+4]
	mov r0, r7
.LBB159_10:	@ bb19
	mov r2, r4
	emit_nops_till_bundle_end
	bl gen_type
.LBB159_11:	@ bb20
	emit_nops_till_bundle_end
	bl affix_data_type
	ldrb r3, [r6, #+29]
	mov r7, r0
	tst r3, #4
	beq .LBB159_13	@ bb26
.LBB159_12:	@ bb25
	ldr r4, .LCPI159_4
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI159_0
	cmp r7, #0
	moveq r7, r3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r8
.LBB159_13:	@ bb26
	ldrb r3, [r6, #+10]
	tst r3, #8
	beq .LBB159_15	@ bb32
.LBB159_14:	@ bb31
	ldr r4, .LCPI159_5
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI159_0
	cmp r7, #0
	moveq r7, r3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r8
.LBB159_15:	@ bb32
	ldrb r3, [r6, #+8]
	cmp r3, #29
	ldreqb r3, [r6, #+10]
	tsteq r3, #8
	beq .LBB159_17	@ bb38
	b .LBB159_21	@ bb40
.LBB159_16:	@ bb33
.LBB159_17:	@ bb38
	ldr r4, .LCPI159_6
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI159_0
	cmp r7, #0
	moveq r7, r3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r5, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r6
.LBB159_18:	@ bb40
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB159_19:	@ entry.bb2_crit_edge
.LBB159_20:	@ bb18
	mov r1, #0
	mov r0, r6
	emit_nops_till_bundle_end
	bl gen_formal_list_for_func_def
	mov r5, r0
	ldr r8, .LCPI159_0
	cmp r7, #0
	moveq r7, r8
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	cmp r5, #0
	moveq r5, r8
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r9
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	ldr r7, [r6, #+4]
	ldr r1, [r7, #+4]
	mov r0, r8
	b .LBB159_10	@ bb19
.LBB159_21:	@ bb40
	mov r0, r7
	b .LBB159_18	@ bb40
	.align	4
.LBB159_22:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_0:
 	.long	.str1040

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_1:
 	.long	.str11041

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_2:
 	.long	.str21042

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_3:
 	.long	data_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_4:
 	.long	.str251065

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_5:
 	.long	.str261066

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI159_6:
 	.long	.str271067

	.size gen_decl, .-gen_decl


	.align	4
gen_formal_list_for_func_def:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #4
	ldr r4, [r0, #+40]
	mov r5, r1
	@comment
str r0, [sp]
	cmp r4, #0
	beq .LBB160_23	@ entry.bb9_crit_edge
.LBB160_1:	@ bb.nph
	cmp r5, #1
	bhi .LBB160_8	@ bb.nph.split
.LBB160_2:	@ bb.nph.split.us
	cmp r5, #2
	bne .LBB160_24	@ bb.nph.split.us.bb.us_crit_edge
.LBB160_3:	@ bb.nph.split.us.bb.us.us_crit_edge
	ldr r7, .LCPI160_0
.LBB160_4:	@ bb.us.us
	ldrb r6, [r7]
	cmp r6, #0
	bne .LBB160_6	@ bb3.us.us
.LBB160_5:	@ bb4.us.us
	mov r0, r4
	mov r6, #0
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl gen_decl
	mov r8, r0
	ldr r6, .LCPI160_0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	cmp r8, #0
	moveq r8, r6
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r10, .LCPI160_1
	mov r0, r10
	emit_nops_till_bundle_end
	bl strlen
	add r11, r6, r9
	add r6, r11, r0
	add r0, r6, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r11
	mov r1, r10
	emit_nops_till_bundle_end
	bl strcpy
	ldr r4, [r4]
	cmp r4, #0
	mov r7, r6
	bne .LBB160_4	@ bb.us.us
	b .LBB160_11	@ bb9
.LBB160_6:	@ bb3.us.us
	ldr r6, .LCPI160_0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r8, .LCPI160_2
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r3, r6, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r9, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r6
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r9
	b .LBB160_5	@ bb4.us.us
.LBB160_7:	@ bb3.us
	ldr r6, .LCPI160_0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r9, .LCPI160_2
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r3, r6, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r10, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r10, r6
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
	mov r7, r10
	b .LBB160_26	@ bb4.us
.LBB160_8:	@ bb.nph.split
	cmp r5, #2
	bne .LBB160_27	@ bb.nph.split.bb4_crit_edge
.LBB160_9:	@ bb.nph.split.bb4.us39_crit_edge
	ldr r7, .LCPI160_0
.LBB160_10:	@ bb4.us39
	mov r0, r4
	mov r6, #0
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl gen_decl
	mov r8, r0
	ldr r6, .LCPI160_0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	cmp r8, #0
	moveq r8, r6
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	ldr r10, .LCPI160_1
	mov r0, r10
	emit_nops_till_bundle_end
	bl strlen
	add r11, r6, r9
	add r6, r11, r0
	add r0, r6, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r9
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r11
	mov r1, r10
	emit_nops_till_bundle_end
	bl strcpy
	ldr r4, [r4]
	cmp r4, #0
	mov r7, r6
	bne .LBB160_10	@ bb4.us39
.LBB160_11:	@ bb9
	cmp r5, #0
	bne .LBB160_20	@ bb14
.LBB160_12:	@ bb10
	ldr r3, [sp]
	ldr r3, [r3, #+40]
	cmp r3, #0
	bne .LBB160_14	@ bb12
.LBB160_13:	@ bb11
	ldr r3, .LCPI160_0
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r7, .LCPI160_3
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r4, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r4
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r6, r8
.LBB160_14:	@ bb12
	ldr r3, .LCPI160_4
	ldr r3, [r3]
	ldr r2, [sp]
	ldr r2, [r2, #+4]
	add r2, r2, #12
	mov r1, r2
.LBB160_15:	@ bb1.i
	ldr r1, [r1]
	cmp r1, #0
	beq .LBB160_18	@ deserves_ellipsis.exit
.LBB160_16:	@ bb2.i
	ldr r0, [r1, #+16]
	cmp r0, r3
	bne .LBB160_15	@ bb1.i
.LBB160_17:	@ bb3.i
	cmp r1, #0
	bne .LBB160_20	@ bb14
.LBB160_18:	@ deserves_ellipsis.exit
	ldr r3, [r2]
	cmp r3, #0
	beq .LBB160_20	@ bb14
.LBB160_19:	@ bb13
	ldr r3, .LCPI160_0
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	ldr r7, .LCPI160_5
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	add r3, r4, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r8, r0
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r8, r4
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	mov r6, r8
.LBB160_20:	@ bb14
	cmp r5, #1
	bls .LBB160_29	@ bb15
.LBB160_21:	@ bb16
	mov r0, r6
.LBB160_22:	@ bb16
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB160_23:	@ entry.bb9_crit_edge
	ldr r6, .LCPI160_0
	b .LBB160_11	@ bb9
.LBB160_24:	@ bb.nph.split.us.bb.us_crit_edge
	ldr r7, .LCPI160_0
	mov r8, #0
.LBB160_25:	@ bb.us
	ldrb r6, [r7]
	cmp r6, #0
	bne .LBB160_7	@ bb3.us
.LBB160_26:	@ bb4.us
	mov r0, r4
	mov r1, r8
	mov r2, r5
	emit_nops_till_bundle_end
	bl gen_decl
	mov r9, r0
	ldr r6, .LCPI160_0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r10, r0
	cmp r9, #0
	moveq r9, r6
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r6, r10, r0
	add r0, r6, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r10
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
	ldr r4, [r4]
	cmp r4, #0
	mov r7, r6
	beq .LBB160_11	@ bb9
	b .LBB160_25	@ bb.us
.LBB160_27:	@ bb.nph.split.bb4_crit_edge
	ldr r7, .LCPI160_0
	mov r8, #0
.LBB160_28:	@ bb4
	mov r0, r4
	mov r1, r8
	mov r2, r5
	emit_nops_till_bundle_end
	bl gen_decl
	mov r9, r0
	ldr r6, .LCPI160_0
	cmp r7, #0
	moveq r7, r6
	mov r0, r7
	emit_nops_till_bundle_end
	bl strlen
	mov r10, r0
	cmp r9, #0
	moveq r9, r6
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	add r6, r10, r0
	add r0, r6, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r6, r0
	mov r1, r7
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r6, r10
	mov r1, r9
	emit_nops_till_bundle_end
	bl strcpy
	ldr r4, [r4]
	cmp r4, #0
	mov r7, r6
	bne .LBB160_28	@ bb4
	b .LBB160_11	@ bb9
.LBB160_29:	@ bb15
	ldr r4, .LCPI160_6
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r3, .LCPI160_0
	cmp r6, #0
	moveq r6, r3
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	ldr r8, .LCPI160_7
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r7, r7, r5
	add r3, r7, r0
	add r0, r3, #1
	emit_nops_till_bundle_end
	bl xmalloc
	mov r9, r0
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
	add r0, r9, r7
	mov r1, r8
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r9
	b .LBB160_22	@ bb16
	.align	4
.LBB160_30:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_0:
 	.long	.str1040

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_1:
 	.long	.str161056

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_2:
 	.long	.str51045

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_3:
 	.long	.str61046

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_4:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_5:
 	.long	.str81048

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_6:
 	.long	.str91049

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI160_7:
 	.long	.str101050

	.size gen_formal_list_for_func_def, .-gen_formal_list_for_func_def


	.globl	declare_function_name
	.align	4
declare_function_name:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI161_0
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB161_7	@ entry.bb7_crit_edge
.LBB161_1:	@ bb1
	ldr r4, .LCPI161_3
	@comment
str r4, [sp]
	ldr r4, [r0, #+4]
	ldrb r4, [r4, #+8]
	cmp r4, #16
	ldreq r4, .LCPI161_4
	@comment
streq r4, [sp]
.LBB161_2:	@ bb2
.LBB161_3:	@ bb3
	ldr r4, [r0, #+32]
	cmp r4, #0
	ldrne r4, [r4, #+16]
	ldreq r4, .LCPI161_2
	b .LBB161_5	@ bb6
.LBB161_4:	@ bb4
.LBB161_5:	@ bb6
	ldr r3, .LCPI161_5
	ldr r3, [r3]
	mov r1, sp
	@ implicit-def: lr
	mov lr, pc
	bx r3
.LBB161_6:	@ bb7
	mov r1, r4
	mov r4, r0
	ldr r0, .LCPI161_6
	emit_nops_till_bundle_end
	bl declare_hidden_char_array
	ldr r0, .LCPI161_7
	mov r1, r4
	emit_nops_till_bundle_end
	bl declare_hidden_char_array
	sfi_add sp, sp, #4
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB161_7:	@ entry.bb7_crit_edge
	ldr r0, .LCPI161_1
	ldr r4, .LCPI161_2
	b .LBB161_6	@ bb7
.LBB161_8:	@ bb3.bb6_crit_edge
	.align	4
.LBB161_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_0:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_1:
 	.long	.str1391212

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_2:
 	.long	.str621135

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_3:
 	.long	.str1401213

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_4:
 	.long	.str1411214

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_5:
 	.long	decl_printable_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_6:
 	.long	.str1421215

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI161_7:
 	.long	.str1431216

	.size declare_function_name, .-declare_function_name


	.globl	type_for_size
	.align	4
type_for_size:
	ldr r3, .LCPI162_0
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	bne .LBB162_3	@ bb4
.LBB162_1:	@ bb
	ldr r2, .LCPI162_1
.LBB162_2:	@ bb
	ldr r0, [r2]
	cmp r1, #0
	moveq r0, r3
	sfi_bx lr
.LBB162_3:	@ bb4
	ldr r3, .LCPI162_2
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	beq .LBB162_13	@ bb5
.LBB162_4:	@ bb9
	ldr r3, .LCPI162_4
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	beq .LBB162_14	@ bb10
.LBB162_5:	@ bb14
	ldr r3, .LCPI162_6
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	beq .LBB162_15	@ bb15
.LBB162_6:	@ bb19
	ldr r3, .LCPI162_8
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	beq .LBB162_16	@ bb20
.LBB162_7:	@ bb24
	ldr r3, .LCPI162_10
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	bhs .LBB162_17	@ bb25
.LBB162_8:	@ bb29
	ldr r3, .LCPI162_12
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	bhs .LBB162_18	@ bb30
.LBB162_9:	@ bb34
	ldr r3, .LCPI162_14
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	bhs .LBB162_19	@ bb35
.LBB162_10:	@ bb39
	ldr r3, .LCPI162_16
	ldr r3, [r3]
	ldrb r2, [r3, #+28]
	cmp r2, r0
	movlo r0, #0
	sfi_bxlo lr
.LBB162_11:	@ bb40
	ldr r2, .LCPI162_17
	b .LBB162_2	@ bb
.LBB162_12:	@ bb45
.LBB162_13:	@ bb5
	ldr r2, .LCPI162_3
	b .LBB162_2	@ bb
.LBB162_14:	@ bb10
	ldr r2, .LCPI162_5
	b .LBB162_2	@ bb
.LBB162_15:	@ bb15
	ldr r2, .LCPI162_7
	b .LBB162_2	@ bb
.LBB162_16:	@ bb20
	ldr r2, .LCPI162_9
	b .LBB162_2	@ bb
.LBB162_17:	@ bb25
	ldr r2, .LCPI162_11
	b .LBB162_2	@ bb
.LBB162_18:	@ bb30
	ldr r2, .LCPI162_13
	b .LBB162_2	@ bb
.LBB162_19:	@ bb35
	ldr r2, .LCPI162_15
	b .LBB162_2	@ bb
	.align	4
.LBB162_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_0:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_1:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_2:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_3:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_4:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_5:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_6:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_7:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_8:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_9:
 	.long	long_long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_10:
 	.long	intQI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_11:
 	.long	unsigned_intQI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_12:
 	.long	intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_13:
 	.long	unsigned_intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_14:
 	.long	intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_15:
 	.long	unsigned_intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_16:
 	.long	intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI162_17:
 	.long	unsigned_intDI_type_node

	.size type_for_size, .-type_for_size


	.globl	c_build_type_variant
	.align	4
c_build_type_variant:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldrb r3, [r0, #+8]
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r3, #18
	bne .LBB163_4	@ bb3
.LBB163_1:	@ bb
	ldr r7, [r6, #+64]
	ldr r0, [r7, #+80]
	mov r1, r0
	emit_nops_till_bundle_end
	bl push_obstacks
	ldr r0, [r6, #+4]
	ldr r6, [r6, #+12]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl c_build_type_variant
	mov r1, r6
	emit_nops_till_bundle_end
	bl build_array_type
	ldr r6, [r0, #+80]
	ldr r3, [r7, #+80]
	cmp r6, r3
	beq .LBB163_3	@ bb2
.LBB163_2:	@ bb1
	emit_nops_till_bundle_end
	bl copy_node
	mov r6, #0
	@comment
str r6, [r0, #+40]
	@comment
str r6, [r0, #+36]
.LBB163_3:	@ bb2
	mov r6, r0
	@comment
str r7, [r6, #+64]
	emit_nops_till_bundle_end
	bl pop_obstacks
.LBB163_4:	@ bb3
	mov r0, r6
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_type_variant
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.size c_build_type_variant, .-c_build_type_variant


	.globl	record_function_format
	.align	4
record_function_format:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	ldr r12, .LCPI164_0
	ldr r4, [sp, #+24]
	mov r5, r3
	mov r6, r2
	mov r7, r1
	mov r8, r0
.LBB164_1:	@ bb3
	ldr r12, [r12]
	cmp r12, #0
	beq .LBB164_5	@ bb5
.LBB164_2:	@ bb
	ldr r3, [r12, #+4]
	cmp r3, r8
	ldreq r3, [r12, #+8]
	cmpeq r3, r7
	beq .LBB164_4	@ bb4
	b .LBB164_1	@ bb3
.LBB164_3:	@ bb1
.LBB164_4:	@ bb4
	cmp r12, #0
	bne .LBB164_6	@ bb6
.LBB164_5:	@ bb5
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r12, .LCPI164_0
	ldr r3, [r12]
	@comment
str r3, [r0]
	@comment
str r0, [r12]
	@comment
str r8, [r0, #+4]
	@comment
str r7, [r0, #+8]
	mov r12, r0
.LBB164_6:	@ bb6
	@comment
str r6, [r12, #+12]
	@comment
str r5, [r12, #+16]
	@comment
str r4, [r12, #+20]
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
	.align	4
.LBB164_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI164_0:
 	.long	function_format_list

	.size record_function_format, .-record_function_format


	.globl	get_directive_line
	.align	4
get_directive_line:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	ldr r3, .LCPI165_0
	ldr r4, [r3]
	mov r5, r0
	cmp r4, #0
	bne .LBB165_2	@ bb1
.LBB165_1:	@ bb
	mov r4, #128
	mov r0, #128
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI165_1
	@comment
str r0, [r3]
	ldr r3, .LCPI165_0
	@comment
str r4, [r3]
.LBB165_2:	@ bb1
	ldr r3, .LCPI165_1
	ldr r6, [r3]
	add r4, r6, r4
	mov r7, #0
	mov r8, #1
	mov r9, r7
.LBB165_3:	@ bb2
	cmp r6, r4
	blo .LBB165_5	@ bb4
.LBB165_4:	@ bb3
	ldr r4, .LCPI165_0
	ldr r3, [r4]
	mov r1, r3, lsl #1
	ldr r10, .LCPI165_1
	ldr r11, [r10]
	@comment
str r1, [r4]
	mov r0, r11
	emit_nops_till_bundle_end
	bl xrealloc
	@comment
str r0, [r10]
	sub r6, r6, r11
	add r6, r0, r6
	ldr r4, [r4]
	add r4, r0, r4
.LBB165_5:	@ bb4
	mov r0, r5
	emit_nops_till_bundle_end
	bl getc
	cmp r0, #9
	beq .LBB165_7	@ bb7
.LBB165_6:	@ bb4
	cmp r0, #32
	bne .LBB165_8	@ bb8
.LBB165_7:	@ bb7
	ldr r3, .LCPI165_1
	ldr r3, [r3]
	cmp r6, r3
	beq .LBB165_3	@ bb2
.LBB165_8:	@ bb8
	cmp r0, #10
	cmpeq r7, #0
	beq .LBB165_19	@ bb13.thread
.LBB165_9:	@ bb8
.LBB165_10:	@ bb13
	strb r0, [r6], #+1
	cmp r0, #0
	beq .LBB165_20	@ bb14
.LBB165_11:	@ bb15
	cmp r7, #0
	beq .LBB165_15	@ bb21
.LBB165_12:	@ bb16
	cmp r7, r0
	bne .LBB165_18	@ bb26
.LBB165_13:	@ bb16
	cmp r9, #0
	moveq r7, #0
	b .LBB165_18	@ bb26
.LBB165_14:	@ bb20
.LBB165_15:	@ bb21
	cmp r0, #34
	cmpne r0, #39
	bne .LBB165_18	@ bb26
.LBB165_16:	@ bb21
.LBB165_17:	@ bb25
	mov r7, r0
.LBB165_18:	@ bb26
	cmp r9, #0
	mov r9, #0
	moveq r9, r8
	cmp r0, #92
	mov r3, #0
	moveq r3, r8
	and r9, r3, r9
	b .LBB165_3	@ bb2
.LBB165_19:	@ bb13.thread
	mov r1, r5
	emit_nops_till_bundle_end
	bl ungetc
	mov r4, #0
	strb r4, [r6]
.LBB165_20:	@ bb14
	ldr r4, .LCPI165_1
	ldr r0, [r4]
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
	.align	4
.LBB165_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI165_0:
 	.long	buffer_length.5009

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI165_1:
 	.long	directive_buffer.5008

	.size get_directive_line, .-get_directive_line


	.globl	overflow_warning
	.align	4
overflow_warning:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	beq .LBB166_3	@ bb2
.LBB166_1:	@ entry
	and r3, r3, #255
	cmp r3, #27
	ldreq r3, [r0, #+16]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #25
	beq .LBB166_3	@ bb2
	b .LBB166_7	@ bb7
.LBB166_2:	@ bb1
.LBB166_3:	@ bb2
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 14 @ 524288
	beq .LBB166_7	@ bb7
.LBB166_4:	@ bb6
	bic r3, r3, #2, 14 @ 524288
	strb r3, [r0, #+8]
	mov r2, r3, lsr #24
	strb r2, [r0, #+11]
	mov r2, r3, lsr #16
	strb r2, [r0, #+10]
	mov r3, r3, lsr #8
	strb r3, [r0, #+9]
	ldr r0, .LCPI166_0
.LBB166_5:	@ bb6
	emit_nops_till_bundle_end
	bl warning
.LBB166_6:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB166_7:	@ bb7
	ldrb r3, [r0, #+8]
	cmp r3, #26
	beq .LBB166_10	@ bb10
.LBB166_8:	@ bb7
	and r3, r3, #255
	cmp r3, #27
	ldreq r3, [r0, #+16]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #26
	beq .LBB166_10	@ bb10
	b .LBB166_6	@ return
.LBB166_9:	@ bb9
.LBB166_10:	@ bb10
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 14 @ 524288
	beq .LBB166_6	@ return
.LBB166_11:	@ bb15
	bic r3, r3, #2, 14 @ 524288
	strb r3, [r0, #+8]
	mov r2, r3, lsr #24
	strb r2, [r0, #+11]
	mov r2, r3, lsr #16
	strb r2, [r0, #+10]
	mov r3, r3, lsr #8
	strb r3, [r0, #+9]
	ldr r0, .LCPI166_1
	b .LBB166_5	@ bb6
	.align	4
.LBB166_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI166_0:
 	.long	.str1073

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI166_1:
 	.long	.str11074

	.size overflow_warning, .-overflow_warning


	.globl	truthvalue_conversion
	.align	4
truthvalue_conversion:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #4
	mov r4, r0
.LBB167_1:	@ tailrecurse
	ldrb r3, [r4, #+8]
	cmp r3, #0
	beq .LBB167_43	@ bb59
.LBB167_2:	@ bb1
	and r3, r3, #255
	cmp r3, #24
	ble .LBB167_42	@ bb1
.LBB167_3:	@ bb1
	cmp r3, #44
	bgt .LBB167_7	@ bb1
.LBB167_4:	@ bb1
	cmp r3, #25
	beq .LBB167_18	@ bb4
.LBB167_5:	@ bb1
	cmp r3, #26
	bne .LBB167_39	@ bb49
.LBB167_6:	@ bb8
	mov r0, r4
	emit_nops_till_bundle_end
	bl real_zerop
	b .LBB167_19	@ bb4
.LBB167_7:	@ bb1
	cmp r3, #72
	bgt .LBB167_15	@ bb1
.LBB167_8:	@ bb1
	cmp r3, #45
	beq .LBB167_36	@ bb46
.LBB167_9:	@ bb1
	cmp r3, #48
	beq .LBB167_27	@ bb34
.LBB167_10:	@ bb1
	cmp r3, #57
	bne .LBB167_39	@ bb49
.LBB167_11:	@ bb39
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #8
	beq .LBB167_39	@ bb49
	.align	2
.LBB167_12:	@ bb40
	ldr r2, [r4, #+20]
	ldr r3, [r2, #+4]
	ldr r1, [r4, #+16]
	ldr r12, [r1, #+4]
	cmp r12, r3
	bne .LBB167_32	@ bb42
.LBB167_13:	@ bb41
	mov r0, #100
	mov r3, #1
.LBB167_14:	@ bb41
	emit_nops_till_bundle_end
	bl build_binary_op
	b .LBB167_44	@ bb59
.LBB167_15:	@ bb1
	sub r3, r3, #73
	cmp r3, #40
	bhi .LBB167_39	@ bb49
.LBB167_16:	@ bb1
	.set PCRELV16, (.LJTI167_0_0-(.LPCRELL16+8))
.LPCRELL16:
	add r2, pc, #PCRELV16
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI167_0_0:
	.long	 .LBB167_31
	.long	 .LBB167_39
	.long	 .LBB167_31
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_31
	.long	 .LBB167_31
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_24
	.long	 .LBB167_24
	.long	 .LBB167_39
	.long	 .LBB167_12
	.long	 .LBB167_33
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_17
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_28
	.long	 .LBB167_30
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_20
	.long	 .LBB167_39
	.long	 .LBB167_39
	.long	 .LBB167_23

.text
@ JUMP TABLE END



	.align	2
.LBB167_17:	@ bb2
	ldr r3, .LCPI167_0
	ldr r3, [r3]
	@comment
str r3, [r4, #+4]
	b .LBB167_43	@ bb59
.LBB167_18:	@ bb4
	mov r0, r4
	emit_nops_till_bundle_end
	bl integer_zerop
.LBB167_19:	@ bb4
	ldr r4, .LCPI167_1
	ldr r3, .LCPI167_2
	cmp r0, #0
	moveq r3, r4
	ldr r0, [r3]
	b .LBB167_44	@ bb59
	.align	2
.LBB167_20:	@ bb12
	ldr r2, [r4, #+16]
	ldrb r3, [r2, #+9]
	ldr r4, .LCPI167_1
	ldr r4, [r4]
	tst r3, #1
	beq .LBB167_43	@ bb59
.LBB167_21:	@ bb16
	ldr r3, .LCPI167_0
	ldr r1, [r3]
	mov r0, #44
	mov r3, r4
.LBB167_22:	@ bb16
	emit_nops_till_bundle_end
	bl build
	b .LBB167_44	@ bb59
	.align	2
.LBB167_23:	@ bb18
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r5, r0
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r1, r0
	ldr r4, [r4, #+20]
	ldrb r3, [r4, #+8]!
	ldrb r3, [r4, #+1]
	ldrb r2, [r4, #+2]!
	mov r4, #1, 24 @ 256
	mov r2, #90
	mov r0, #92
	tst r4, r3, lsl #8
	moveq r0, r2
	mov r3, #0
	mov r2, r5
	b .LBB167_14	@ bb41
	.align	2
.LBB167_24:	@ bb27
	ldr r3, [r4, #+20]
	ldrb r5, [r3, #+9]
	ldrb r2, [r3, #+8]!
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r2, #1, 24 @ 256
	mov r3, r0
	tst r2, r5, lsl #8
	bne .LBB167_26	@ bb32
.LBB167_25:	@ bb27.bb59_crit_edge
	mov r4, r3
	b .LBB167_43	@ bb59
.LBB167_26:	@ bb32
	ldr r2, .LCPI167_0
	ldr r1, [r2]
	ldr r2, [r4, #+20]
	mov r0, #44
	b .LBB167_22	@ bb16
.LBB167_27:	@ bb34
	ldr r0, [r4, #+24]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r5, r0
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r3, r0
	ldr r2, .LCPI167_0
	ldr r1, [r2]
	ldr r2, [r4, #+16]
	@comment
str r5, [sp]
	mov r0, #48
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
	b .LBB167_44	@ bb59
	.align	2
.LBB167_28:	@ bb35
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #15
	ldrne r3, [r4, #+16]
	ldrne r3, [r3, #+4]
	ldrneb r3, [r3, #+8]
	cmpne r3, #15
	bne .LBB167_30	@ bb37
	b .LBB167_39	@ bb49
.LBB167_29:	@ bb36
	.align	2
.LBB167_30:	@ bb37
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+28]
	ldr r2, [r4, #+16]
	ldr r2, [r2, #+4]
	ldrb r2, [r2, #+28]
	cmp r3, r2
	blo .LBB167_39	@ bb49
	.align	2
.LBB167_31:	@ tailrecurse.backedge
	ldr r4, [r4, #+16]
	b .LBB167_1	@ tailrecurse
.LBB167_32:	@ bb42
	mov r0, #106
	mov r1, r12
	emit_nops_till_bundle_end
	bl build1
	emit_nops_till_bundle_end
	bl fold
	mov r2, r0
	ldr r1, [r4, #+16]
	b .LBB167_13	@ bb41
	.align	2
.LBB167_33:	@ bb43
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	ldrne r3, [r4, #+4]
	ldrne r2, .LCPI167_0
	ldrne r1, [r2]
	cmpne r3, r1
	bne .LBB167_35	@ bb45
	b .LBB167_39	@ bb49
.LBB167_34:	@ bb44
.LBB167_35:	@ bb45
	mov r0, #106
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	b .LBB167_44	@ bb59
.LBB167_36:	@ bb46
	ldr r3, .LCPI167_3
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB167_39	@ bb49
.LBB167_37:	@ bb47
	ldr r3, [r4, #+12]
	cmp r3, #45
	ldreq r0, .LCPI167_4
	emit_nops_till_bundle_end
	bleq warning
.LBB167_38:	@ bb48
	.align	2
.LBB167_39:	@ bb49
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #9
	bne .LBB167_41	@ bb58
.LBB167_40:	@ bb50
	mov r5, #0
	mov r0, #116
	mov r1, r4
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_unary_op
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r6, r0
	mov r0, #115
	mov r1, r4
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_unary_op
	emit_nops_till_bundle_end
	bl truthvalue_conversion
	mov r1, r0
	ldrb r3, [r4, #+8]!
	ldrb r3, [r4, #+1]
	ldrb r2, [r4, #+2]!
	mov r4, #1, 24 @ 256
	mov r2, #90
	mov r0, #92
	tst r4, r3, lsl #8
	moveq r0, r2
	mov r2, r6
	mov r3, r5
	b .LBB167_14	@ bb41
.LBB167_41:	@ bb58
	ldr r3, .LCPI167_5
	ldr r2, [r3]
	mov r0, #100
	mov r3, #1
	mov r1, r4
	b .LBB167_14	@ bb41
.LBB167_42:	@ bb1
	cmp r3, #0
	bne .LBB167_39	@ bb49
.LBB167_43:	@ bb59
	mov r0, r4
.LBB167_44:	@ bb59
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB167_45:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI167_0:
 	.long	boolean_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI167_1:
 	.long	boolean_true_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI167_2:
 	.long	boolean_false_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI167_3:
 	.long	warn_parentheses

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI167_4:
 	.long	.str21075

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI167_5:
 	.long	integer_zero_node

	.size truthvalue_conversion, .-truthvalue_conversion


	.globl	shorten_compare
	.align	4
shorten_compare:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #32
	mov r4, r3
	@comment
str r2, [sp, #+20]
	mov r3, r1
	@comment
str r3, [sp, #+8]
	mov r2, r0
	@comment
str r2, [sp, #+4]
	ldr r5, [r2]
	ldr r6, [r3]
	ldr r7, [r4]
	add r1, sp, #24
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_narrower
	mov r8, r0
	add r1, sp, #28
	mov r0, r6
	emit_nops_till_bundle_end
	bl get_narrower
	mov r9, r0
	cmp r5, r8
	bne .LBB168_3	@ bb7
.LBB168_1:	@ bb
	ldr r3, [sp, #+20]
	ldr r3, [r3]
	ldr r2, [r5, #+4]
	cmp r2, r3
	ldrneb r3, [r2, #+9]
	ldrneb r1, [r2, #+8]!
	movne r2, #1
	andne r3, r2, r3, lsr #6
	@comment
strne r3, [sp, #+24]
.LBB168_2:	@ bb1
.LBB168_3:	@ bb7
	cmp r6, r9
	bne .LBB168_6	@ bb16
.LBB168_4:	@ bb8
	ldr r3, [sp, #+20]
	ldr r3, [r3]
	ldr r2, [r6, #+4]
	cmp r2, r3
	ldrneb r3, [r2, #+9]
	ldrneb r1, [r2, #+8]!
	movne r2, #1
	andne r3, r2, r3, lsr #6
	@comment
strne r3, [sp, #+28]
.LBB168_5:	@ bb9
.LBB168_6:	@ bb16
	ldr r3, [r9, #+4]
	ldrb r3, [r3, #+8]
	mov r2, #1
	mov r10, #0
	cmp r3, #8
	mov r11, #0
	moveq r11, r2
	ldr r3, [r8, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #8
	moveq r10, r2
	ldrb r3, [r8, #+9]
	tst r3, #2
	beq .LBB168_130	@ bb16.bb29_crit_edge
.LBB168_7:	@ bb21
	mov r0, r9
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB168_130	@ bb16.bb29_crit_edge
.LBB168_8:	@ bb22
	mov r0, r9
	emit_nops_till_bundle_end
	bl real_zerop
	cmp r0, #0
	bne .LBB168_130	@ bb16.bb29_crit_edge
.LBB168_9:	@ bb23
	ldr r3, [sp, #+24]
	ldr r2, [sp, #+4]
	@comment
str r6, [r2]
	ldr r2, [sp, #+8]
	@comment
str r5, [r2]
	ldr r2, [sp, #+28]
	@comment
str r2, [sp, #+24]
	@comment
str r3, [sp, #+28]
	sub r3, r7, #95
	cmp r3, #3
	bhi .LBB168_15	@ bb28
.LBB168_10:	@ bb23
	.set PCRELV17, (.LJTI168_0_0-(.LPCRELL17+8))
.LPCRELL17:
	add r7, pc, #PCRELV17
	ldr pc, [r7, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI168_0_0:
	.long	 .LBB168_11
	.long	 .LBB168_13
	.long	 .LBB168_12
	.long	 .LBB168_14

.text
@ JUMP TABLE END



	.align	2
.LBB168_11:	@ bb24
	mov r7, #97
	b .LBB168_15	@ bb28
	.align	2
.LBB168_12:	@ bb25
	mov r7, #95
	b .LBB168_15	@ bb28
	.align	2
.LBB168_13:	@ bb26
	mov r7, #98
	b .LBB168_15	@ bb28
	.align	2
.LBB168_14:	@ bb27
	mov r7, #96
.LBB168_15:	@ bb28
	@comment
str r7, [r4]
	mov r4, r6
	mov r6, r5
	mov r5, r11
	mov r11, r10
	@comment
str r9, [sp, #+16]
	mov r9, r8
.LBB168_16:	@ bb29
	orr r3, r11, r5
	cmp r3, #0
	ldreqb r2, [r9, #+8]
	cmpeq r2, #25
	beq .LBB168_18	@ bb31
	b .LBB168_97	@ bb143
.LBB168_17:	@ bb30
.LBB168_18:	@ bb31
	ldr r2, [sp, #+20]
	ldr r2, [r2]
	ldrb r0, [r2, #+28]
	ldr r1, [sp, #+16]
	ldr r1, [r1, #+4]
	ldrb r12, [r1, #+28]
	cmp r12, r0
	bhs .LBB168_97	@ bb143
.LBB168_19:	@ bb32
	ldrb r4, [r2, #+9]
	ldrb r3, [r2, #+8]!
	ldr r0, [sp, #+24]
	emit_nops_till_bundle_end
	bl signed_or_unsigned_type
	mov r3, #1, 18 @ 16384
	and r5, r3, r4, lsl #8
	@comment
str r5, [sp]
	ldr r5, [r0, #+52]
	ldr r6, [r0, #+56]
	@comment
str r0, [sp, #+12]
	tst r3, r4, lsl #8
	beq .LBB168_22	@ bb40
.LBB168_20:	@ bb38
	ldr r3, [sp, #+24]
	cmp r3, #0
	bne .LBB168_22	@ bb40
.LBB168_21:	@ bb39
	ldr r4, [sp, #+20]
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl signed_type
	@comment
str r0, [r4]
.LBB168_22:	@ bb40
	ldr r3, [r9, #+4]
	ldr r4, [sp, #+20]
	ldr r0, [r4]
	cmp r3, r0
	beq .LBB168_24	@ bb42
.LBB168_23:	@ bb41
	mov r1, r9
	emit_nops_till_bundle_end
	bl convert
	mov r9, r0
.LBB168_24:	@ bb42
	ldr r3, [sp, #+20]
	ldr r0, [r3]
	ldr r3, [sp, #+12]
	cmp r0, r3
	beq .LBB168_26	@ bb44
.LBB168_25:	@ bb43
	mov r1, r5
	emit_nops_till_bundle_end
	bl convert
	mov r5, r0
	ldr r3, [sp, #+20]
	ldr r0, [r3]
	mov r1, r6
	emit_nops_till_bundle_end
	bl convert
	mov r6, r0
.LBB168_26:	@ bb44
	ldr r3, [sp]
	cmp r3, #0
	ldrne r3, [sp, #+24]
	cmpne r3, #0
	bne .LBB168_28	@ bb46
	b .LBB168_44	@ bb67
.LBB168_27:	@ bb45
.LBB168_28:	@ bb46
	ldr r3, [r5, #+16]
	ldr r4, [r9, #+16]
	cmp r4, r3
	blo .LBB168_131	@ bb46.bb51_crit_edge
.LBB168_29:	@ bb47
	cmp r4, r3
	bne .LBB168_31	@ bb50
.LBB168_30:	@ bb48
	ldr r11, [r5, #+12]
	ldr r2, [r9, #+12]
	cmp r2, r11
	blo .LBB168_131	@ bb46.bb51_crit_edge
.LBB168_31:	@ bb50
	mov r11, #0
.LBB168_32:	@ bb51
	ldr r2, [r6, #+16]
	cmp r4, r2
	blo .LBB168_132	@ bb51.bb56_crit_edge
.LBB168_33:	@ bb52
	cmp r4, r2
	bne .LBB168_35	@ bb55
.LBB168_34:	@ bb53
	ldr r8, [r6, #+12]
	ldr r1, [r9, #+12]
	cmp r1, r8
	blo .LBB168_132	@ bb51.bb56_crit_edge
.LBB168_35:	@ bb55
	mov r8, #0
.LBB168_36:	@ bb56
	cmp r3, r4
	blo .LBB168_133	@ bb56.bb61_crit_edge
.LBB168_37:	@ bb57
	cmp r3, r4
	bne .LBB168_39	@ bb60
.LBB168_38:	@ bb58
	ldr r3, [r9, #+12]
	ldr r5, [r5, #+12]
	cmp r5, r3
	blo .LBB168_133	@ bb56.bb61_crit_edge
.LBB168_39:	@ bb60
	mov r5, #0
.LBB168_40:	@ bb61
	cmp r2, r4
	blo .LBB168_43	@ bb61.bb88_crit_edge
.LBB168_41:	@ bb62
	cmp r2, r4
	bne .LBB168_59	@ bb86
.LBB168_42:	@ bb63
	ldr r4, [r9, #+12]
	ldr r6, [r6, #+12]
	cmp r6, r4
	bhs .LBB168_59	@ bb86
.LBB168_43:	@ bb61.bb88_crit_edge
	mov r4, #1
	b .LBB168_60	@ bb88
.LBB168_44:	@ bb67
	ldr r4, [r5, #+16]
	ldr r3, [r9, #+16]
	cmp r3, r4
	blt .LBB168_134	@ bb67.bb72_crit_edge
.LBB168_45:	@ bb68
	cmp r3, r4
	bne .LBB168_47	@ bb71
.LBB168_46:	@ bb69
	ldr r11, [r5, #+12]
	ldr r8, [r9, #+12]
	cmp r8, r11
	blo .LBB168_134	@ bb67.bb72_crit_edge
.LBB168_47:	@ bb71
	mov r11, #0
.LBB168_48:	@ bb72
	ldr r2, [r6, #+16]
	cmp r3, r2
	blt .LBB168_135	@ bb72.bb77_crit_edge
.LBB168_49:	@ bb73
	cmp r3, r2
	bne .LBB168_51	@ bb76
.LBB168_50:	@ bb74
	ldr r8, [r6, #+12]
	ldr r1, [r9, #+12]
	cmp r1, r8
	blo .LBB168_135	@ bb72.bb77_crit_edge
.LBB168_51:	@ bb76
	mov r8, #0
.LBB168_52:	@ bb77
	cmp r4, r3
	blt .LBB168_136	@ bb77.bb82_crit_edge
.LBB168_53:	@ bb78
	cmp r4, r3
	bne .LBB168_55	@ bb81
.LBB168_54:	@ bb79
	ldr r4, [r9, #+12]
	ldr r5, [r5, #+12]
	cmp r5, r4
	blo .LBB168_136	@ bb77.bb82_crit_edge
.LBB168_55:	@ bb81
	mov r5, #0
.LBB168_56:	@ bb82
	cmp r2, r3
	blt .LBB168_43	@ bb61.bb88_crit_edge
.LBB168_57:	@ bb83
	cmp r2, r3
	bne .LBB168_59	@ bb86
.LBB168_58:	@ bb84
	ldr r4, [r9, #+12]
	ldr r3, [r6, #+12]
	cmp r3, r4
	blo .LBB168_43	@ bb61.bb88_crit_edge
.LBB168_59:	@ bb86
	mov r4, #0
.LBB168_60:	@ bb88
	sub r3, r7, #95
	cmp r3, #5
	bhi .LBB168_137	@ bb88.bb114_crit_edge
.LBB168_61:	@ bb88
	.set PCRELV18, (.LJTI168_1_1-(.LPCRELL18+8))
.LPCRELL18:
	add r6, pc, #PCRELV18
	ldr pc, [r6, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI168_1_1:
	.long	 .LBB168_66
	.long	 .LBB168_68
	.long	 .LBB168_67
	.long	 .LBB168_69
	.long	 .LBB168_64
	.long	 .LBB168_62

.text
@ JUMP TABLE END



	.align	2
.LBB168_62:	@ bb89
	orr r4, r4, r11
	cmp r4, #0
	beq .LBB168_137	@ bb88.bb114_crit_edge
.LBB168_63:	@ bb90
	ldr r4, .LCPI168_0
	ldr r10, [r4]
	b .LBB168_71	@ bb114
	.align	2
.LBB168_64:	@ bb92
	orr r4, r4, r11
	cmp r4, #0
	beq .LBB168_137	@ bb88.bb114_crit_edge
.LBB168_65:	@ bb93
	ldr r4, .LCPI168_1
	ldr r10, [r4]
	b .LBB168_71	@ bb114
	.align	2
.LBB168_66:	@ bb95
	ldr r11, .LCPI168_0
	ldr r10, [r11]
	mov r11, #0
	cmp r4, #0
	moveq r10, r11
	cmp r5, #0
	beq .LBB168_65	@ bb93
	b .LBB168_71	@ bb114
	.align	2
.LBB168_67:	@ bb100
	ldr r4, .LCPI168_0
	ldr r10, [r4]
	mov r4, #0
	cmp r11, #0
	moveq r10, r4
	cmp r8, #0
	beq .LBB168_65	@ bb93
	b .LBB168_71	@ bb114
	.align	2
.LBB168_68:	@ bb105
	ldr r4, .LCPI168_0
	ldr r4, [r4]
	mov r10, #0
	cmp r8, #0
	moveq r10, r4
	cmp r11, #0
	ldrne r4, .LCPI168_1
	ldrne r10, [r4]
	b .LBB168_71	@ bb114
	.align	2
.LBB168_69:	@ bb110
	ldr r3, .LCPI168_0
	ldr r3, [r3]
	mov r10, #0
	cmp r5, #0
	moveq r10, r3
	cmp r4, #0
	ldrne r3, .LCPI168_1
	ldrne r10, [r3]
.LBB168_70:	@ bb113
.LBB168_71:	@ bb114
	ldr r3, [sp]
	cmp r3, #0
	beq .LBB168_80	@ bb121
.LBB168_72:	@ bb115
	ldr r3, [sp, #+24]
	cmp r3, #0
	bne .LBB168_80	@ bb121
.LBB168_73:	@ bb116
	cmp r10, #0
	beq .LBB168_79	@ bb120
.LBB168_74:	@ bb117
	cmp r7, #95
	beq .LBB168_77	@ bb118
.LBB168_75:	@ bb117
	sub r3, r7, #96
	cmp r3, #2
	blo .LBB168_78	@ bb119
.LBB168_76:	@ bb117
	cmp r7, #98
	bne .LBB168_79	@ bb120
.LBB168_77:	@ bb118
	ldr r3, [sp, #+12]
	ldr r9, [r3, #+52]
	mov r10, #0
	b .LBB168_79	@ bb120
.LBB168_78:	@ bb119
	ldr r3, [sp, #+12]
	ldr r9, [r3, #+56]
	mov r10, #0
.LBB168_79:	@ bb120
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl unsigned_type
	@comment
str r0, [sp, #+12]
.LBB168_80:	@ bb121
	cmp r8, #0
	ldreq r3, [sp, #+24]
	cmpeq r3, #0
	beq .LBB168_82	@ bb123
	b .LBB168_87	@ bb128
.LBB168_81:	@ bb122
.LBB168_82:	@ bb123
	ldr r3, [sp, #+16]
	ldrb r3, [r3, #+8]
	cmp r3, #25
	beq .LBB168_87	@ bb128
.LBB168_83:	@ bb124
	ldr r3, .LCPI168_1
	ldr r3, [r3]
	cmp r10, r3
	ldreq r0, .LCPI168_2
	emit_nops_till_bundle_end
	bleq warning
.LBB168_84:	@ bb125
.LBB168_85:	@ bb126
	ldr r3, .LCPI168_0
	ldr r3, [r3]
	cmp r10, r3
	ldreq r0, .LCPI168_3
	emit_nops_till_bundle_end
	bleq warning
.LBB168_86:	@ bb127
.LBB168_87:	@ bb128
	cmp r5, #0
	bne .LBB168_94	@ bb135
.LBB168_88:	@ bb129
	ldr r3, [sp, #+24]
	cmp r3, #0
	ldrne r3, [sp, #+16]
	ldrneb r3, [r3, #+8]
	cmpne r3, #25
	bne .LBB168_90	@ bb131
	b .LBB168_94	@ bb135
.LBB168_89:	@ bb130
.LBB168_90:	@ bb131
	ldr r3, .LCPI168_1
	ldr r3, [r3]
	cmp r10, r3
	ldreq r0, .LCPI168_2
	emit_nops_till_bundle_end
	bleq warning
.LBB168_91:	@ bb132
.LBB168_92:	@ bb133
	ldr r3, .LCPI168_0
	ldr r3, [r3]
	cmp r10, r3
	ldreq r0, .LCPI168_3
	emit_nops_till_bundle_end
	bleq warning
.LBB168_93:	@ bb134
.LBB168_94:	@ bb135
	cmp r10, #0
	beq .LBB168_108	@ bb203
.LBB168_95:	@ bb136
	ldr r3, [sp, #+16]
	ldrb r3, [r3, #+9]
	tst r3, #1
	beq .LBB168_128	@ bb204
.LBB168_96:	@ bb141
	ldr r1, [r10, #+4]
	mov r0, #44
	ldr r2, [sp, #+16]
	b .LBB168_122	@ bb201
.LBB168_97:	@ bb143
	cmp r11, #0
	cmpne r5, #0
	bne .LBB168_99	@ bb149
	b .LBB168_100	@ bb151
.LBB168_98:	@ bb143
.LBB168_99:	@ bb149
	ldr r10, [r9, #+4]
	ldrb r10, [r10, #+28]
	ldr r2, [sp, #+16]
	ldr r2, [r2, #+4]
	@comment
str r2, [sp, #+12]
	ldrb r2, [r2, #+28]
	cmp r2, r10
	beq .LBB168_108	@ bb203
.LBB168_100:	@ bb151
	ldr r10, [sp, #+28]
	ldr r2, [sp, #+24]
	cmp r2, r10
	cmpeq r5, r11
	beq .LBB168_102	@ bb158
	b .LBB168_109	@ bb169
.LBB168_101:	@ bb151
.LBB168_102:	@ bb158
	ldr r10, [sp, #+16]
	ldr r0, [r10, #+4]
	ldrb r10, [r0, #+28]
	ldr r2, [sp, #+20]
	ldr r2, [r2]
	ldrb r2, [r2, #+28]
	cmp r10, r2
	ldrlo r1, [r9, #+4]
	ldrlob r10, [r1, #+28]
	andlo r2, r2, #255
	cmplo r10, r2
	blo .LBB168_104	@ bb160
	b .LBB168_109	@ bb169
.LBB168_103:	@ bb159
.LBB168_104:	@ bb160
	emit_nops_till_bundle_end
	bl common_type
	ldr r3, [sp, #+24]
	mov r1, r0
	cmp r3, #0
	ldreq r3, [sp, #+20]
	ldreq r3, [r3]
	ldreqb r3, [r3, #+9]
	tsteq r3, #64
	beq .LBB168_106	@ bb167
	b .LBB168_138	@ bb160.bb168_crit_edge
.LBB168_105:	@ bb161
.LBB168_106:	@ bb167
	mov r0, #0
.LBB168_107:	@ bb168
	emit_nops_till_bundle_end
	bl signed_or_unsigned_type
	@comment
str r0, [sp, #+12]
	ldr r4, [sp, #+16]
	ldr r1, [r4, #+4]
	ldr r0, [sp, #+24]
	emit_nops_till_bundle_end
	bl signed_or_unsigned_type
	mov r1, r4
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [sp, #+16]
	ldr r1, [r9, #+4]
	ldr r0, [sp, #+28]
	emit_nops_till_bundle_end
	bl signed_or_unsigned_type
	mov r1, r9
	emit_nops_till_bundle_end
	bl convert
	mov r9, r0
.LBB168_108:	@ bb203
	ldr r1, [sp, #+16]
	ldr r10, [sp, #+12]
	mov r0, r10
	emit_nops_till_bundle_end
	bl convert
	ldr r3, [sp, #+4]
	@comment
str r0, [r3]
	mov r0, r10
	mov r1, r9
	emit_nops_till_bundle_end
	bl convert
	ldr r10, [sp, #+8]
	@comment
str r0, [r10]
	ldr r10, .LCPI168_7
	ldr r10, [r10]
	ldr r3, [sp, #+20]
	@comment
str r10, [r3]
	mov r0, #0
	b .LBB168_129	@ bb204
.LBB168_109:	@ bb169
	ldr r9, [sp, #+20]
	ldr r9, [r9]
	@comment
str r9, [sp, #+12]
	cmp r3, #0
	bne .LBB168_139	@ bb169.bb203_crit_edge
.LBB168_110:	@ bb170
	mov r0, r6
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	ldrne r9, [sp, #+20]
	ldrne r9, [r9]
	ldrneb r9, [r9, #+9]
	tstne r9, #64
	bne .LBB168_112	@ bb176
	b .LBB168_139	@ bb169.bb203_crit_edge
.LBB168_111:	@ bb171
.LBB168_112:	@ bb176
	cmp r7, #95
	beq .LBB168_123	@ bb186
.LBB168_113:	@ bb176
	cmp r7, #98
	bne .LBB168_139	@ bb169.bb203_crit_edge
.LBB168_114:	@ bb177
	ldr r9, .LCPI168_4
	ldr r9, [r9]
	cmp r9, #0
	beq .LBB168_118	@ bb177.bb195_crit_edge
.LBB168_115:	@ bb178
	ldrb r9, [r4, #+8]
	cmp r9, #25
	bne .LBB168_117	@ bb184
.LBB168_116:	@ bb179
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl signed_type
	mov r1, r4
	emit_nops_till_bundle_end
	bl convert
	ldrb r9, [r0, #+10]
	tst r9, #8
	ldrne r0, .LCPI168_5
	emit_nops_till_bundle_end
	blne warning
	b .LBB168_118	@ bb177.bb195_crit_edge
.LBB168_117:	@ bb184
	ldr r0, .LCPI168_5
	emit_nops_till_bundle_end
	bl warning
.LBB168_118:	@ bb177.bb195_crit_edge
	ldr r9, .LCPI168_0
.LBB168_119:	@ bb195
	ldr r10, [r9]
	cmp r10, #0
	beq .LBB168_139	@ bb169.bb203_crit_edge
.LBB168_120:	@ bb196
	ldrb r9, [r4, #+9]
	tst r9, #1
	beq .LBB168_128	@ bb204
.LBB168_121:	@ bb201
	ldr r1, [r10, #+4]
	mov r0, #44
	mov r2, r4
.LBB168_122:	@ bb201
	mov r3, r10
	emit_nops_till_bundle_end
	bl build
	b .LBB168_129	@ bb204
.LBB168_123:	@ bb186
	ldr r9, .LCPI168_4
	ldr r9, [r9]
	cmp r9, #0
	beq .LBB168_127	@ bb186.bb195_crit_edge
.LBB168_124:	@ bb187
	ldrb r9, [r4, #+8]
	cmp r9, #25
	bne .LBB168_126	@ bb193
.LBB168_125:	@ bb188
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl signed_type
	mov r1, r4
	emit_nops_till_bundle_end
	bl convert
	ldrb r9, [r0, #+10]
	tst r9, #8
	ldrne r0, .LCPI168_6
	emit_nops_till_bundle_end
	blne warning
	b .LBB168_127	@ bb186.bb195_crit_edge
.LBB168_126:	@ bb193
	ldr r0, .LCPI168_6
	emit_nops_till_bundle_end
	bl warning
.LBB168_127:	@ bb186.bb195_crit_edge
	ldr r9, .LCPI168_1
	b .LBB168_119	@ bb195
.LBB168_128:	@ bb204
	mov r0, r10
.LBB168_129:	@ bb204
	sfi_add sp, sp, #32
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB168_130:	@ bb16.bb29_crit_edge
	mov r4, r5
	mov r5, r10
	@comment
str r8, [sp, #+16]
	b .LBB168_16	@ bb29
.LBB168_131:	@ bb46.bb51_crit_edge
	mov r11, #1
	b .LBB168_32	@ bb51
.LBB168_132:	@ bb51.bb56_crit_edge
	mov r8, #1
	b .LBB168_36	@ bb56
.LBB168_133:	@ bb56.bb61_crit_edge
	mov r5, #1
	b .LBB168_40	@ bb61
.LBB168_134:	@ bb67.bb72_crit_edge
	mov r11, #1
	b .LBB168_48	@ bb72
.LBB168_135:	@ bb72.bb77_crit_edge
	mov r8, #1
	b .LBB168_52	@ bb77
.LBB168_136:	@ bb77.bb82_crit_edge
	mov r5, #1
	b .LBB168_56	@ bb82
.LBB168_137:	@ bb88.bb114_crit_edge
	mov r10, #0
	b .LBB168_71	@ bb114
.LBB168_138:	@ bb160.bb168_crit_edge
	mov r0, #1
	b .LBB168_107	@ bb168
.LBB168_139:	@ bb169.bb203_crit_edge
	@comment
str r4, [sp, #+16]
	mov r9, r6
	b .LBB168_108	@ bb203
	.align	4
.LBB168_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_0:
 	.long	boolean_true_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_1:
 	.long	boolean_false_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_2:
 	.long	.str31076

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_3:
 	.long	.str41077

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_4:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_5:
 	.long	.str51078

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_6:
 	.long	.str61079

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI168_7:
 	.long	boolean_type_node

	.size shorten_compare, .-shorten_compare


	.globl	binary_op_error
	.align	4
binary_op_error:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sub r3, r0, #56
	cmp r3, #50
	bhi .LBB169_2	@ entry.bb22_crit_edge
.LBB169_1:	@ entry
	.set PCRELV19, (.LJTI169_0_0-(.LPCRELL19+8))
.LPCRELL19:
	add r2, pc, #PCRELV19
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI169_0_0:
	.long	 .LBB169_5
	.long	 .LBB169_6
	.long	 .LBB169_7
	.long	 .LBB169_19
	.long	 .LBB169_2
	.long	 .LBB169_19
	.long	 .LBB169_2
	.long	 .LBB169_18
	.long	 .LBB169_2
	.long	 .LBB169_18
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_9
	.long	 .LBB169_8
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_16
	.long	 .LBB169_17
	.long	 .LBB169_25
	.long	 .LBB169_25
	.long	 .LBB169_21
	.long	 .LBB169_24
	.long	 .LBB169_20
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_22
	.long	 .LBB169_23
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_14
	.long	 .LBB169_12
	.long	 .LBB169_15
	.long	 .LBB169_13
	.long	 .LBB169_10
	.long	 .LBB169_11
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_2
	.long	 .LBB169_3

.text
@ JUMP TABLE END



	.align	2
.LBB169_2:	@ entry.bb22_crit_edge
	ldr r1, .LCPI169_0
	b .LBB169_26	@ bb22
	.align	2
.LBB169_3:	@ bb
	ldr r0, .LCPI169_1
	emit_nops_till_bundle_end
	bl error
.LBB169_4:	@ bb
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	2
.LBB169_5:	@ bb1
	ldr r1, .LCPI169_2
	b .LBB169_26	@ bb22
	.align	2
.LBB169_6:	@ bb2
	ldr r1, .LCPI169_3
	b .LBB169_26	@ bb22
	.align	2
.LBB169_7:	@ bb3
	ldr r1, .LCPI169_4
	b .LBB169_26	@ bb22
	.align	2
.LBB169_8:	@ bb4
	ldr r1, .LCPI169_5
	b .LBB169_26	@ bb22
	.align	2
.LBB169_9:	@ bb5
	ldr r1, .LCPI169_6
	b .LBB169_26	@ bb22
	.align	2
.LBB169_10:	@ bb6
	ldr r1, .LCPI169_7
	b .LBB169_26	@ bb22
	.align	2
.LBB169_11:	@ bb7
	ldr r1, .LCPI169_8
	b .LBB169_26	@ bb22
	.align	2
.LBB169_12:	@ bb8
	ldr r1, .LCPI169_9
	b .LBB169_26	@ bb22
	.align	2
.LBB169_13:	@ bb9
	ldr r1, .LCPI169_10
	b .LBB169_26	@ bb22
	.align	2
.LBB169_14:	@ bb10
	ldr r1, .LCPI169_11
	b .LBB169_26	@ bb22
	.align	2
.LBB169_15:	@ bb11
	ldr r1, .LCPI169_12
	b .LBB169_26	@ bb22
	.align	2
.LBB169_16:	@ bb12
	ldr r1, .LCPI169_13
	b .LBB169_26	@ bb22
	.align	2
.LBB169_17:	@ bb13
	ldr r1, .LCPI169_14
	b .LBB169_26	@ bb22
	.align	2
.LBB169_18:	@ bb14
	ldr r1, .LCPI169_15
	b .LBB169_26	@ bb22
	.align	2
.LBB169_19:	@ bb15
	ldr r1, .LCPI169_16
	b .LBB169_26	@ bb22
	.align	2
.LBB169_20:	@ bb16
	ldr r1, .LCPI169_17
	b .LBB169_26	@ bb22
	.align	2
.LBB169_21:	@ bb17
	ldr r1, .LCPI169_18
	b .LBB169_26	@ bb22
	.align	2
.LBB169_22:	@ bb18
	ldr r1, .LCPI169_19
	b .LBB169_26	@ bb22
	.align	2
.LBB169_23:	@ bb19
	ldr r1, .LCPI169_20
	b .LBB169_26	@ bb22
	.align	2
.LBB169_24:	@ bb20
	ldr r1, .LCPI169_21
	b .LBB169_26	@ bb22
	.align	2
.LBB169_25:	@ bb21
	ldr r1, .LCPI169_22
.LBB169_26:	@ bb22
	ldr r0, .LCPI169_23
	emit_nops_till_bundle_end
	bl error
	b .LBB169_4	@ bb
	.align	4
.LBB169_27:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_0:
 	.long	.str71080

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_1:
 	.long	.str81081

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_2:
 	.long	.str91082

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_3:
 	.long	.str101083

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_4:
 	.long	.str111084

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_5:
 	.long	.str121085

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_6:
 	.long	.str131086

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_7:
 	.long	.str141087

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_8:
 	.long	.str151088

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_9:
 	.long	.str161089

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_10:
 	.long	.str171090

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_11:
 	.long	.str181091

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_12:
 	.long	.str191092

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_13:
 	.long	.str201093

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_14:
 	.long	.str211094

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_15:
 	.long	.str221095

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_16:
 	.long	.str231096

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_17:
 	.long	.str241097

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_18:
 	.long	.str251098

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_19:
 	.long	.str261099

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_20:
 	.long	.str271100

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_21:
 	.long	.str281101

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_22:
 	.long	.str291102

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI169_23:
 	.long	.str301103

	.size binary_op_error, .-binary_op_error


	.globl	min_precision
	.align	4
min_precision:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	bge .LBB170_2	@ bb1
.LBB170_1:	@ bb
	ldr r1, [r5, #+4]
	mov r0, #88
	mov r2, r5
	emit_nops_till_bundle_end
	bl build1
	emit_nops_till_bundle_end
	bl fold
	mov r5, r0
.LBB170_2:	@ bb1
	mov r0, r5
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB170_6	@ bb1.bb6_crit_edge
.LBB170_3:	@ bb3
	ldr r0, [r5, #+16]
	cmp r0, #0
	bne .LBB170_7	@ bb4
.LBB170_4:	@ bb5
	ldr r0, [r5, #+12]
	emit_nops_till_bundle_end
	bl floor_log2_wide
.LBB170_5:	@ bb6
	mov r3, #1
	mov r2, #0
	cmp r4, #0
	moveq r2, r3
	add r3, r2, r0
	add r0, r3, #1
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB170_6:	@ bb1.bb6_crit_edge
	mov r0, #0
	b .LBB170_5	@ bb6
.LBB170_7:	@ bb4
	emit_nops_till_bundle_end
	bl floor_log2_wide
	add r0, r0, #32
	b .LBB170_5	@ bb6
	.size min_precision, .-min_precision


	.globl	type_for_mode
	.align	4
type_for_mode:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI171_0
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	mov r4, r0
	cmp r2, r0
	bne .LBB171_3	@ bb4
.LBB171_1:	@ bb
	ldr r4, .LCPI171_1
.LBB171_2:	@ bb
	ldr r0, [r4]
	cmp r1, #0
	moveq r0, r3
	b .LBB171_28	@ bb45
.LBB171_3:	@ bb4
	ldr r3, .LCPI171_2
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_19	@ bb5
.LBB171_4:	@ bb9
	ldr r3, .LCPI171_4
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_20	@ bb10
.LBB171_5:	@ bb14
	ldr r3, .LCPI171_6
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_21	@ bb15
.LBB171_6:	@ bb19
	ldr r3, .LCPI171_8
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_22	@ bb20
.LBB171_7:	@ bb24
	ldr r3, .LCPI171_10
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_23	@ bb25
.LBB171_8:	@ bb29
	ldr r3, .LCPI171_12
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_24	@ bb30
.LBB171_9:	@ bb34
	ldr r3, .LCPI171_14
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_25	@ bb35
.LBB171_10:	@ bb39
	ldr r3, .LCPI171_16
	ldr r3, [r3]
	ldrsb r2, [r3, #+29]
	cmp r2, r4
	beq .LBB171_26	@ bb40
.LBB171_11:	@ bb44
	ldr r3, .LCPI171_18
	ldr r0, [r3]
	ldrsb r3, [r0, #+29]
	cmp r3, r4
	beq .LBB171_28	@ bb45
.LBB171_12:	@ bb46
	ldr r3, .LCPI171_19
	ldr r0, [r3]
	ldrsb r3, [r0, #+29]
	cmp r3, r4
	ldrne r3, .LCPI171_20
	ldrne r0, [r3]
	ldrnesb r3, [r0, #+29]
	cmpne r3, r4
	bne .LBB171_14	@ bb50
	b .LBB171_28	@ bb45
.LBB171_13:	@ bb48
.LBB171_14:	@ bb50
	ldr r3, .LCPI171_21
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldrsb r3, [r0, #+29]
	cmp r3, r4
	bne .LBB171_17	@ bb52
.LBB171_15:	@ bb51
	ldr r4, .LCPI171_21
	ldr r0, [r4]
.LBB171_16:	@ bb51
	emit_nops_till_bundle_end
	bl build_pointer_type
	b .LBB171_28	@ bb45
.LBB171_17:	@ bb52
	ldr r3, .LCPI171_0
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl build_pointer_type
	ldrsb r3, [r0, #+29]
	cmp r3, r4
	bne .LBB171_27	@ bb55
.LBB171_18:	@ bb53
	ldr r3, .LCPI171_0
	ldr r0, [r3]
	b .LBB171_16	@ bb51
.LBB171_19:	@ bb5
	ldr r4, .LCPI171_3
	b .LBB171_2	@ bb
.LBB171_20:	@ bb10
	ldr r4, .LCPI171_5
	b .LBB171_2	@ bb
.LBB171_21:	@ bb15
	ldr r4, .LCPI171_7
	b .LBB171_2	@ bb
.LBB171_22:	@ bb20
	ldr r4, .LCPI171_9
	b .LBB171_2	@ bb
.LBB171_23:	@ bb25
	ldr r4, .LCPI171_11
	b .LBB171_2	@ bb
.LBB171_24:	@ bb30
	ldr r4, .LCPI171_13
	b .LBB171_2	@ bb
.LBB171_25:	@ bb35
	ldr r4, .LCPI171_15
	b .LBB171_2	@ bb
.LBB171_26:	@ bb40
	ldr r4, .LCPI171_17
	b .LBB171_2	@ bb
.LBB171_27:	@ bb55
	mov r0, #0
.LBB171_28:	@ bb45
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB171_29:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_0:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_1:
 	.long	unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_2:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_3:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_4:
 	.long	short_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_5:
 	.long	short_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_6:
 	.long	long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_7:
 	.long	long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_8:
 	.long	long_long_integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_9:
 	.long	long_long_unsigned_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_10:
 	.long	intQI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_11:
 	.long	unsigned_intQI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_12:
 	.long	intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_13:
 	.long	unsigned_intHI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_14:
 	.long	intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_15:
 	.long	unsigned_intSI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_16:
 	.long	intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_17:
 	.long	unsigned_intDI_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_18:
 	.long	float_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_19:
 	.long	double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_20:
 	.long	long_double_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI171_21:
 	.long	char_type_node

	.size type_for_mode, .-type_for_mode


	.globl	c_expand_expr_stmt
	.align	4
c_expand_expr_stmt:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+8]
	mov r4, r0
	cmp r3, #18
	bne .LBB172_2	@ bb1
.LBB172_1:	@ bb
	mov r0, r4
	emit_nops_till_bundle_end
	bl lvalue_p
	cmp r0, #0
	bne .LBB172_3	@ bb2
.LBB172_2:	@ bb1
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #23
	bne .LBB172_4	@ bb3
.LBB172_3:	@ bb2
	mov r0, r4
	emit_nops_till_bundle_end
	bl default_conversion
	mov r4, r0
.LBB172_4:	@ bb3
	ldr r3, .LCPI172_0
	ldr r3, [r3]
	ldr r2, [r4, #+4]
	cmp r2, r3
	beq .LBB172_8	@ bb7
.LBB172_5:	@ bb4
	ldr r3, [r2, #+16]
	cmp r3, #0
	bne .LBB172_8	@ bb7
.LBB172_6:	@ bb5
	ldrb r3, [r2, #+8]
	cmp r3, #18
	ldrne r0, .LCPI172_1
	emit_nops_till_bundle_end
	blne error
.LBB172_7:	@ bb6
.LBB172_8:	@ bb7
	mov r0, r4
	emit_nops_till_bundle_end
	bl expand_expr_stmt
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB172_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI172_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI172_1:
 	.long	.str311104

	.size c_expand_expr_stmt, .-c_expand_expr_stmt


	.globl	unsigned_conversion_warning
	.align	4
unsigned_conversion_warning:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldrb r3, [r1, #+8]
	mov r4, r1
	mov r5, r0
	cmp r3, #25
	ldreq r1, [r5, #+4]
	ldreqb r3, [r1, #+8]
	cmpeq r3, #7
	beq .LBB173_2	@ bb1
	b .LBB173_7	@ return
.LBB173_1:	@ bb
.LBB173_2:	@ bb1
	ldrb r3, [r1, #+9]
	tst r3, #64
	beq .LBB173_7	@ return
.LBB173_3:	@ bb5
	mov r0, r4
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB173_7	@ return
.LBB173_4:	@ bb6
	ldr r0, [r5, #+4]
	emit_nops_till_bundle_end
	bl signed_type
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB173_8	@ bb8
.LBB173_5:	@ bb7
	ldr r0, .LCPI173_0
.LBB173_6:	@ bb7
	emit_nops_till_bundle_end
	bl warning
.LBB173_7:	@ return
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB173_8:	@ bb8
	ldr r3, .LCPI173_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB173_7	@ return
.LBB173_9:	@ bb9
	ldr r0, .LCPI173_2
	b .LBB173_6	@ bb7
	.align	4
.LBB173_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI173_0:
 	.long	.str321105

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI173_1:
 	.long	warn_conversion

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI173_2:
 	.long	.str331106

	.size unsigned_conversion_warning, .-unsigned_conversion_warning


	.globl	convert_and_check
	.align	4
convert_and_check:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	emit_nops_till_bundle_end
	bl convert
	ldrb r3, [r0, #+8]
	mov r6, r0
	cmp r3, #25
	bne .LBB174_10	@ bb34
.LBB174_1:	@ bb
	ldrb r3, [r6, #+9]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 14 @ 524288
	beq .LBB174_9	@ bb33
.LBB174_2:	@ bb4
	bic r2, r3, #2, 14 @ 524288
	strb r2, [r6, #+8]
	mov r1, r2, lsr #24
	strb r1, [r6, #+11]
	mov r1, r2, lsr #16
	strb r1, [r6, #+10]
	mov r2, r2, lsr #8
	strb r2, [r6, #+9]
	bic r3, r3, #3, 14 @ 786432
	mov r2, r3, lsr #24
	mov r1, r4
	ldrb r0, [r1, #+8]!
	ldrb r0, [r1, #+2]!
	strb r2, [r6, #+11]
	mov r2, r3, lsr #8
	strb r2, [r6, #+9]
	strb r3, [r6, #+8]
	mov r2, #1, 14 @ 262144
	and r2, r2, r0, lsl #16
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	mov r2, #1
	and r1, r2, r3, lsr #14
	ldr r0, [r4, #+4]
	ldrb r12, [r0, #+9]
	and r2, r2, r12, lsr #6
	cmp r1, r2
	bhs .LBB174_5	@ bb25
.LBB174_3:	@ bb23
	ldrb r2, [r0, #+8]
	cmp r2, #7
	ldreqb r2, [r0, #+28]
	ldreqb r1, [r5, #+28]
	cmpeq r1, r2
	beq .LBB174_10	@ bb34
.LBB174_4:	@ bb24
.LBB174_5:	@ bb25
	ldr r2, .LCPI174_0
	ldr r2, [r2]
	cmp r2, #0
	tsteq r3, #1, 18 @ 16384
	beq .LBB174_7	@ bb31
	b .LBB174_8	@ bb32
.LBB174_6:	@ bb26
.LBB174_7:	@ bb31
	mov r0, r5
	emit_nops_till_bundle_end
	bl unsigned_type
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl int_fits_type_p
	cmp r0, #0
	bne .LBB174_10	@ bb34
.LBB174_8:	@ bb32
	ldr r0, .LCPI174_1
	emit_nops_till_bundle_end
	bl warning
	b .LBB174_10	@ bb34
.LBB174_9:	@ bb33
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl unsigned_conversion_warning
.LBB174_10:	@ bb34
	mov r0, r6
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB174_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI174_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI174_1:
 	.long	.str341107

	.size convert_and_check, .-convert_and_check


	.globl	constant_expression_warning
	.align	4
constant_expression_warning:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	sub r3, r3, #25
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB175_4	@ return
.LBB175_1:	@ bb
	ldrb r3, [r0, #+10]
	tst r3, #4
	beq .LBB175_4	@ return
.LBB175_2:	@ bb4
	ldr r3, .LCPI175_0
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI175_1
	emit_nops_till_bundle_end
	blne pedwarn
.LBB175_3:	@ bb5
.LBB175_4:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB175_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI175_0:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI175_1:
 	.long	.str351108

	.size constant_expression_warning, .-constant_expression_warning


	.globl	check_case_value
	.align	4
check_case_value:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	cmp r0, #0
	beq .LBB176_11	@ bb9
.LBB176_1:	@ bb2
	mov r3, r0
	ldrb r2, [r3, #+8]
	sub r1, r2, #105
	and r1, r1, #255
	cmp r1, #2
	bhi .LBB176_3	@ bb4
.LBB176_2:	@ bb3
	ldr r0, [r3, #+16]
	ldr r1, [r0, #+4]
	ldr r12, [r3, #+4]
	cmp r12, r1
	beq .LBB176_1	@ bb2
.LBB176_3:	@ bb4
	and r2, r2, #255
	cmp r2, #25
	ldrne r2, .LCPI176_0
	ldrne r2, [r2]
	cmpne r3, r2
	bne .LBB176_12	@ bb6
.LBB176_4:	@ bb5
.LBB176_5:	@ bb7
	mov r0, r3
	emit_nops_till_bundle_end
	bl default_conversion
.LBB176_6:	@ bb8
	mov r4, r0
	ldrb r3, [r4, #+8]
	sub r3, r3, #25
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB176_10	@ constant_expression_warning.exit
.LBB176_7:	@ bb.i
	ldrb r3, [r4, #+10]
	tst r3, #4
	beq .LBB176_10	@ constant_expression_warning.exit
.LBB176_8:	@ bb4.i
	ldr r3, .LCPI176_2
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI176_3
	emit_nops_till_bundle_end
	blne pedwarn
.LBB176_9:	@ bb5.i
.LBB176_10:	@ constant_expression_warning.exit
	mov r0, r4
.LBB176_11:	@ bb9
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB176_12:	@ bb6
	ldr r0, .LCPI176_1
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI176_0
	ldr r0, [r3]
	b .LBB176_6	@ bb8
	.align	4
.LBB176_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI176_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI176_1:
 	.long	.str361109

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI176_2:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI176_3:
 	.long	.str351108

	.size check_case_value, .-check_case_value


	.globl	check_function_format
	.align	4
check_function_format:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #48
	ldr r3, .LCPI177_43
	@comment
str r3, [sp, #+36]
.LBB177_1:	@ bb6
	ldr r3, [sp, #+36]
	ldr r3, [r3]
	@comment
str r3, [sp, #+36]
	cmp r3, #0
	beq .LBB177_13	@ check_format_info.exit
.LBB177_2:	@ bb
	ldr r3, [sp, #+36]
	ldr r12, [r3, #+8]!
	cmp r12, #0
	movne r12, r1
	ldreq r3, [sp, #+36]
	addeq r3, r3, #4
	moveq r12, r0
	b .LBB177_4	@ bb3
.LBB177_3:	@ bb2
.LBB177_4:	@ bb3
	ldr r3, [r3]
	cmp r3, r12
	bne .LBB177_1	@ bb6
.LBB177_5:	@ bb4
	mov r4, #1
.LBB177_6:	@ bb.i
	cmp r2, #0
	beq .LBB177_13	@ check_format_info.exit
.LBB177_7:	@ bb1.i
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+16]
	cmp r3, r4
	bne .LBB177_220	@ bb2.i
.LBB177_8:	@ bb3.i
	ldr r5, [r2, #+16]
	ldr r3, [r2]
	@comment
str r3, [sp, #+28]
	cmp r5, #0
	beq .LBB177_13	@ check_format_info.exit
.LBB177_9:	@ bb5.preheader.i
	ldrb r3, [r5, #+8]
	cmp r3, #106
	beq .LBB177_236	@ bb4.i
.LBB177_10:	@ bb6.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB177_14	@ bb8.i
.LBB177_11:	@ bb7.i
	ldr r0, .LCPI177_44
.LBB177_12:	@ bb7.i
	emit_nops_till_bundle_end
	bl warning
.LBB177_13:	@ check_format_info.exit
	sfi_add sp, sp, #48
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB177_14:	@ bb8.i
	ldrb r3, [r5, #+8]
	cmp r3, #110
	ldreq r3, [r5, #+16]
	@comment
streq r3, [sp, #+12]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #28
	beq .LBB177_16	@ bb10.i
	b .LBB177_13	@ check_format_info.exit
.LBB177_15:	@ bb9.i
.LBB177_16:	@ bb10.i
	ldr r3, [sp, #+12]
	ldr r5, [r3, #+16]
	ldr r6, [r3, #+20]
	cmp r5, #1
	ldrle r0, .LCPI177_45
	emit_nops_till_bundle_end
	blle warning
.LBB177_17:	@ bb11.i
.LBB177_18:	@ bb12.i
	sub r3, r5, #1
	@comment
str r3, [sp, #+8]
	ldrb r3, [r6, +r3]
	cmp r3, #0
	bne .LBB177_20	@ bb13.i
.LBB177_19:	@ bb16.preheader.i
	add r3, r4, #1
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+20]
	b .LBB177_23	@ bb16.i
.LBB177_20:	@ bb13.i
	ldr r0, .LCPI177_46
	b .LBB177_12	@ bb7.i
.LBB177_21:	@ bb14.i
	ldr r1, [sp, #+28]
	cmp r1, #0
	beq .LBB177_13	@ check_format_info.exit
.LBB177_22:	@ bb15.i
	add r3, r3, #1
	ldr r1, [sp, #+28]
	ldr r1, [r1]
	@comment
str r1, [sp, #+28]
.LBB177_23:	@ bb16.i
	cmp r3, r2
	blt .LBB177_21	@ bb14.i
.LBB177_24:	@ bb18.loopexit.i
	sub r3, r3, #1
	@comment
str r3, [sp, #+32]
	mov r3, #0
	@comment
str r3, [sp, #+4]
	ldr r4, [sp, #+28]
.LBB177_25:	@ bb18.i
	mov r3, r6
	ldrb r6, [r3]
	cmp r6, #0
	bne .LBB177_32	@ bb26.i
.LBB177_26:	@ bb19.i
	ldr r6, [sp, #+12]
	ldr r6, [r6, #+20]
	sub r6, r3, r6
	ldr r3, [sp, #+8]
	cmp r6, r3
	ldrne r0, .LCPI177_47
	emit_nops_till_bundle_end
	blne warning
.LBB177_27:	@ bb20.i
.LBB177_28:	@ bb21.i
	ldr r6, [sp, #+36]
	ldr r6, [r6, #+20]
	cmp r4, #0
	beq .LBB177_13	@ check_format_info.exit
.LBB177_29:	@ bb21.i
	ldr r3, [sp, #+4]
	cmp r3, #0
	bne .LBB177_13	@ check_format_info.exit
.LBB177_30:	@ bb21.i
	cmp r6, #0
	beq .LBB177_13	@ check_format_info.exit
.LBB177_31:	@ bb25.i
	ldr r0, .LCPI177_48
	b .LBB177_12	@ bb7.i
.LBB177_32:	@ bb26.i
	and r2, r6, #255
	add r6, r3, #1
	cmp r2, #37
	bne .LBB177_25	@ bb18.i
.LBB177_33:	@ bb28.i
	ldrb r2, [r6]
	cmp r2, #37
	beq .LBB177_36	@ bb31.i
.LBB177_34:	@ bb28.i
	tst r2, #255
	bne .LBB177_37	@ bb32.i
.LBB177_35:	@ bb29.i
	ldr r0, .LCPI177_49
	emit_nops_till_bundle_end
	bl warning
	b .LBB177_25	@ bb18.i
.LBB177_36:	@ bb31.i
	add r6, r3, #2
	b .LBB177_25	@ bb18.i
.LBB177_37:	@ bb32.i
	mov r2, #0
	strb r2, [sp, #+40]
	ldr r2, [sp, #+36]
	ldr r2, [r2, #+12]
	ldrb r1, [r6]
	cmp r2, #0
	beq .LBB177_43	@ bb37.i
.LBB177_38:	@ bb33.i
	and r1, r1, #255
	cmp r1, #42
	mov r5, #0
	mov r2, #1
	moveq r5, r2
	cmp r1, #42
	addeq r6, r3, #2
.LBB177_39:	@ bb34.i
.LBB177_40:	@ bb36.preheader.i
	ldrsb r0, [r6]
.LBB177_41:	@ bb36.preheader.i
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	beq .LBB177_221	@ bb36.preheader.i.bb92.i_crit_edge
.LBB177_42:	@ bb35.i
	ldrsb r0, [r6, #+1]!
	b .LBB177_41	@ bb36.preheader.i
.LBB177_43:	@ bb37.i
	sub r5, r1, #48
	and r5, r5, #255
	cmp r5, #9
	bhi .LBB177_60	@ bb59.i
.LBB177_44:	@ bb39.i
	ldrsb r5, [r3, #+1]
	cmp r5, #48
	blt .LBB177_46	@ bb39.i.bb42.i_crit_edge
.LBB177_45:	@ bb40.i
	mov r5, r5, lsl #24
	mov r5, r5, asr #24
	add r3, r3, #1
	cmp r5, #58
	blt .LBB177_44	@ bb39.i
.LBB177_46:	@ bb39.i.bb42.i_crit_edge
	add r5, r3, #1
.LBB177_47:	@ bb42.i
	ldrb r7, [r5]
	cmp r7, #36
	bne .LBB177_60	@ bb59.i
.LBB177_48:	@ bb43.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl atoi
	add r6, r5, #1
	cmp r0, #2
	blt .LBB177_225	@ bb43.i.bb49.i_crit_edge
.LBB177_49:	@ bb43.i
	ldr r4, [sp, #+28]
	cmp r4, #0
	beq .LBB177_225	@ bb43.i.bb49.i_crit_edge
.LBB177_50:	@ bb43.i.bb44.i_crit_edge
	mov r5, #2
	ldr r4, [sp, #+28]
.LBB177_51:	@ bb44.i
	ldr r4, [r4]
	add r7, r5, #1
	cmp r4, #0
	beq .LBB177_53	@ bb49.i
.LBB177_52:	@ bb44.i
	cmp r5, r0
	mov r5, r7
	blt .LBB177_51	@ bb44.i
.LBB177_53:	@ bb49.i
	cmp r4, #0
	cmpne r0, #0
	bne .LBB177_55	@ bb49.i.bb59.i.preheader_crit_edge
	b .LBB177_56	@ bb53.i
.LBB177_54:	@ bb49.i
.LBB177_55:	@ bb49.i.bb59.i.preheader_crit_edge
	mov r5, #1
	@comment
str r5, [sp, #+4]
	b .LBB177_60	@ bb59.i
.LBB177_56:	@ bb53.i
	ldr r0, .LCPI177_50
	b .LBB177_12	@ bb7.i
.LBB177_57:	@ bb54.i
	ldrsb r1, [r6]
	add r0, sp, #40
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	beq .LBB177_59	@ bb57.i
.LBB177_58:	@ bb56.i
	ldrsb r2, [r6]
	ldr r5, .LCPI177_51
	ldr r1, .LCPI177_52
	mov r0, r5
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning
.LBB177_59:	@ bb57.i
	add r5, sp, #40
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	ldrb r7, [r6], #+1
	strb r7, [r5, +r0]
	add r5, r5, r0
	mov r7, #0
	strb r7, [r5, #+1]
.LBB177_60:	@ bb59.i
	ldrb r5, [r6]
	cmp r5, #0
	beq .LBB177_62	@ bb61.i
.LBB177_61:	@ bb60.i
	mov r5, r5, lsl #24
	mov r1, r5, asr #24
	ldr r0, .LCPI177_53
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	bne .LBB177_57	@ bb54.i
.LBB177_62:	@ bb61.i
	add r0, sp, #40
	mov r5, #32
	mov r1, r5
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	beq .LBB177_65	@ bb66.i
.LBB177_63:	@ bb63.i
	add r0, sp, #40
	mov r5, #43
	mov r1, r5
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	ldrne r0, .LCPI177_54
	emit_nops_till_bundle_end
	blne warning
.LBB177_64:	@ bb65.i
.LBB177_65:	@ bb66.i
	add r0, sp, #40
	mov r5, #48
	mov r1, r5
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	beq .LBB177_68	@ bb71.i
.LBB177_66:	@ bb68.i
	add r0, sp, #40
	mov r5, #45
	mov r1, r5
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	ldrne r0, .LCPI177_55
	emit_nops_till_bundle_end
	blne warning
.LBB177_67:	@ bb70.i
.LBB177_68:	@ bb71.i
	ldrb r5, [r6]
	cmp r5, #42
	beq .LBB177_71	@ bb72.i
.LBB177_69:	@ bb79.preheader.i
	mov r5, r5, lsl #24
	mov r0, r5, asr #24
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	bne .LBB177_76	@ bb78.i
.LBB177_70:	@ bb79.preheader.i.bb80.i_crit_edge
	mov r7, #0
	b .LBB177_78	@ bb80.i
.LBB177_71:	@ bb72.i
	add r6, r6, #1
	cmp r4, #0
	beq .LBB177_229	@ bb73.i
.LBB177_72:	@ bb74.i
	ldr r5, [sp, #+36]
	ldr r5, [r5, #+20]
	cmp r5, #0
	beq .LBB177_77	@ bb78.i.bb80.i_crit_edge
.LBB177_73:	@ bb75.i
	ldr r5, .LCPI177_56
	ldr r5, [r5]
	ldr r7, [r4, #+16]
	ldr r7, [r7, #+4]
	ldr r7, [r7, #+64]
	ldr r3, [sp, #+32]
	add r3, r3, #1
	@comment
str r3, [sp, #+32]
	ldr r4, [r4]
	cmp r7, r5
	ldrne r5, .LCPI177_57
	ldrne r5, [r5]
	cmpne r7, r5
	bne .LBB177_75	@ bb77.i
	b .LBB177_77	@ bb78.i.bb80.i_crit_edge
.LBB177_74:	@ bb76.i
.LBB177_75:	@ bb77.i
	ldr r5, .LCPI177_51
	ldr r1, .LCPI177_58
	mov r0, r5
	ldr r2, [sp, #+32]
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning
	b .LBB177_77	@ bb78.i.bb80.i_crit_edge
.LBB177_76:	@ bb78.i
	ldrsb r0, [r6, #+1]!
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	bne .LBB177_76	@ bb78.i
.LBB177_77:	@ bb78.i.bb80.i_crit_edge
	mov r7, #1
.LBB177_78:	@ bb80.i
	ldrb r5, [r6]
	cmp r5, #46
	bne .LBB177_226	@ bb80.i.bb92.i_crit_edge
.LBB177_79:	@ bb81.i
	mov r8, r6
	ldrb r5, [r8, #+1]!
	cmp r5, #42
	beq .LBB177_83	@ bb81.i.bb84.i_crit_edge
.LBB177_80:	@ bb82.i
	mov r5, r5, lsl #24
	mov r0, r5, asr #24
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	ldreq r0, .LCPI177_59
	emit_nops_till_bundle_end
	bleq warning
.LBB177_81:	@ bb83.i
.LBB177_82:	@ bb84thread-split.i
	ldrb r5, [r8]
.LBB177_83:	@ bb81.i.bb84.i_crit_edge
	mov r3, r5
.LBB177_84:	@ bb84.i
	and r3, r3, #255
	cmp r3, #42
	bne .LBB177_227	@ bb91.preheader.i
.LBB177_85:	@ bb85.i
	ldr r5, [sp, #+36]
	ldr r5, [r5, #+20]
	cmp r5, #0
	beq .LBB177_228	@ bb91.preheader.i.bb92.i_crit_edge
.LBB177_86:	@ bb86.i
	add r6, r6, #2
	cmp r4, #0
	beq .LBB177_229	@ bb73.i
.LBB177_87:	@ bb88.i
	ldr r5, .LCPI177_56
	ldr r5, [r5]
	ldr r3, [r4, #+16]
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+64]
	ldr r2, [sp, #+32]
	add r2, r2, #1
	@comment
str r2, [sp, #+32]
	ldr r4, [r4]
	cmp r3, r5
	bne .LBB177_89	@ bb89.i
.LBB177_88:	@ bb88.i.bb92.i_crit_edge
	mov r5, #1
	@comment
str r5, [sp, #+24]
	mov r5, #0
	b .LBB177_222	@ bb92.i
.LBB177_89:	@ bb89.i
	ldr r5, .LCPI177_51
	ldr r1, .LCPI177_58
	mov r0, r5
	ldr r2, [sp, #+32]
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning
	b .LBB177_88	@ bb88.i.bb92.i_crit_edge
.LBB177_90:	@ bb90.i
	ldrsb r0, [r6, #+2]
	emit_nops_till_bundle_end
	bl isdigit
	add r6, r6, #1
	cmp r0, #0
	bne .LBB177_90	@ bb90.i
.LBB177_91:	@ bb92.i.loopexit2
	add r6, r6, #1
	b .LBB177_88	@ bb88.i.bb92.i_crit_edge
.LBB177_92:	@ bb92.i
	sub r2, r3, #104
	and r2, r2, #255
	cmp r2, #9
	bhi .LBB177_224	@ bb92.i.bb103.i_crit_edge
.LBB177_93:	@ bb92.i
	mov r0, #1
	ldr r1, .LCPI177_60
	tst r1, r0, lsl r2
	beq .LBB177_224	@ bb92.i.bb103.i_crit_edge
.LBB177_94:	@ bb100.i
	and r2, r3, #255
	mov r8, r3, lsl #24
	mov r8, r8, asr #24
	add r3, r6, #1
	cmp r2, #108
	ldreqb r2, [r3]
	cmpeq r2, #108
	beq .LBB177_96	@ bb102.i
	b .LBB177_230	@ bb100.i.bb103.i_crit_edge
.LBB177_95:	@ bb101.i
.LBB177_96:	@ bb102.i
	add r6, r6, #2
	mov r8, #113
.LBB177_97:	@ bb103.i
	ldrb r3, [r6]
	cmp r3, #97
	movne r3, #0
	addeq r6, r6, #1
	moveq r3, #1
	@comment
str r3, [sp, #+16]
	b .LBB177_99	@ bb105.i
.LBB177_98:	@ bb104.i
.LBB177_99:	@ bb105.i
	cmp r8, #0
	cmpne r5, #0
	bne .LBB177_101	@ bb109.i
	b .LBB177_102	@ bb110.i
.LBB177_100:	@ bb105.i
.LBB177_101:	@ bb109.i
	ldr r9, .LCPI177_8
	ldr r1, .LCPI177_18
	mov r0, r9
	mov r2, r8
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r9
	emit_nops_till_bundle_end
	bl warning
.LBB177_102:	@ bb110.i
	ldrb r3, [r6]
	@comment
str r3, [sp, #+20]
	mov r2, r3, lsl #24
	mov r9, r2, asr #24
	cmp r3, #0
	bne .LBB177_104	@ bb112.i
.LBB177_103:	@ bb111.i
	ldr r0, .LCPI177_19
	emit_nops_till_bundle_end
	bl warning
	b .LBB177_25	@ bb18.i
.LBB177_104:	@ bb112.i
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+12]
	ldr r2, .LCPI177_20
	ldr r10, .LCPI177_21
	cmp r3, #0
	moveq r10, r2
	add r11, r6, #1
	b .LBB177_106	@ bb117.i
.LBB177_105:	@ bb116.i
	add r10, r10, #32
.LBB177_106:	@ bb117.i
	ldr r0, [r10]
	cmp r0, #0
	beq .LBB177_109	@ bb119.i
.LBB177_107:	@ bb118.i
	mov r1, r9
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	beq .LBB177_105	@ bb116.i
.LBB177_108:	@ bb119.ithread-split
	ldr r0, [r10]
.LBB177_109:	@ bb119.i
	cmp r0, #0
	bne .LBB177_116	@ bb124.i
.LBB177_110:	@ bb120.i
	sub r5, r9, #32
	cmp r5, #94
	ldr r0, .LCPI177_8
	ldrhi r1, .LCPI177_23
	ldrls r1, .LCPI177_22
	b .LBB177_112	@ bb122.i
.LBB177_111:	@ bb122.i
.LBB177_112:	@ bb122.i
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
.LBB177_113:	@ bb123.i
	ldr r0, .LCPI177_8
.LBB177_114:	@ bb123.i
	emit_nops_till_bundle_end
	bl warning
	mov r6, r11
	b .LBB177_25	@ bb18.i
	.align	4
.LBB177_115:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_43:
 	.long	function_format_list

	.align	4
.LBB177_116:	@ bb124.i
	cmp r7, #0
	beq .LBB177_119	@ bb127.i
.LBB177_117:	@ bb125.i
	ldr r0, [r10, #+28]
	mov r3, #119
	mov r1, r3
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	bne .LBB177_119	@ bb127.i
.LBB177_118:	@ bb126.i
	ldr r7, .LCPI177_8
	ldr r1, .LCPI177_24
	mov r0, r7
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r7
	emit_nops_till_bundle_end
	bl warning
.LBB177_119:	@ bb127.i
	ldr r3, [sp, #+24]
	cmp r3, #0
	beq .LBB177_122	@ bb130.i
.LBB177_120:	@ bb128.i
	ldr r0, [r10, #+28]
	mov r3, #112
	mov r1, r3
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	bne .LBB177_122	@ bb130.i
.LBB177_121:	@ bb129.i
	ldr r7, .LCPI177_8
	ldr r1, .LCPI177_25
	mov r0, r7
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r7
	emit_nops_till_bundle_end
	bl warning
.LBB177_122:	@ bb130.i
	ldr r3, [sp, #+16]
	cmp r3, #0
	beq .LBB177_125	@ bb133.i
.LBB177_123:	@ bb131.i
	ldr r0, [r10, #+28]
	mov r3, #97
	mov r1, r3
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	bne .LBB177_125	@ bb133.i
.LBB177_124:	@ bb132.i
	ldr r7, .LCPI177_8
	ldr r1, .LCPI177_26
	mov r0, r7
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r7
	emit_nops_till_bundle_end
	bl warning
.LBB177_125:	@ bb133.i
	ldr r3, [sp, #+36]
	ldr r3, [r3, #+12]
	cmp r3, #0
	beq .LBB177_136	@ bb148.i
.LBB177_126:	@ bb133.i
	ldr r3, [sp, #+20]
	and r3, r3, #255
	cmp r3, #91
	bne .LBB177_136	@ bb148.i
.LBB177_127:	@ bb137.i
	ldrb r3, [r11]
	cmp r3, #94
	addeq r11, r6, #2
.LBB177_128:	@ bb138.i
.LBB177_129:	@ bb139.i
	ldrb r6, [r11]
	cmp r6, #93
	addeq r11, r11, #1
	b .LBB177_134	@ bb142.i
	.align	4
.LBB177_130:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_44:
 	.long	.str371110

.LBB177_131:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_45:
 	.long	.str381111

.LBB177_132:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_46:
 	.long	.str391112

	.align	4
.LBB177_133:	@ bb141.i
	add r11, r11, #1
.LBB177_134:	@ bb142.i
	ldrb r6, [r11]
	cmp r6, #0
	bne .LBB177_237	@ bb142.i
.LBB177_135:	@ bb147.i
	ldr r0, .LCPI177_27
	emit_nops_till_bundle_end
	bl warning
.LBB177_136:	@ bb148.i
	cmp r5, #0
	bne .LBB177_151	@ bb149.i
.LBB177_137:	@ bb155.preheader.i
	ldrb r6, [sp, #+40]
	cmp r6, #0
	beq .LBB177_142	@ bb156.i
.LBB177_138:	@ bb155.preheader.i.bb152.i_crit_edge
	add r6, sp, #40
.LBB177_139:	@ bb152.i
	ldr r0, [r10, #+28]
	ldrsb r1, [r6]
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	bne .LBB177_141	@ bb154.i
.LBB177_140:	@ bb153.i
	ldrsb r2, [r6]
	ldr r5, .LCPI177_8
	ldr r1, .LCPI177_29
	mov r0, r5
	mov r3, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r5
	emit_nops_till_bundle_end
	bl warning
.LBB177_141:	@ bb154.i
	ldrb r3, [r6, #+1]!
	cmp r3, #0
	bne .LBB177_139	@ bb152.i
.LBB177_142:	@ bb156.i
	ldr r6, [sp, #+24]
	cmp r6, #0
	beq .LBB177_147	@ bb169.i
.LBB177_143:	@ bb157.i
	add r0, sp, #40
	mov r6, #48
	mov r1, r6
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	beq .LBB177_147	@ bb169.i
.LBB177_144:	@ bb159.i
	ldr r6, [sp, #+20]
	sub r6, r6, #100
	and r6, r6, #255
	cmp r6, #20
	bhi .LBB177_147	@ bb169.i
.LBB177_145:	@ bb159.i
	ldr r3, .LCPI177_30
	mov r2, #1
	tst r3, r2, lsl r6
	beq .LBB177_147	@ bb169.i
.LBB177_146:	@ bb168.i
	ldr r6, .LCPI177_8
	ldr r1, .LCPI177_31
	mov r0, r6
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r6
	emit_nops_till_bundle_end
	bl warning
.LBB177_147:	@ bb169.i
	cmp r8, #103
	bgt .LBB177_154	@ bb169.i
.LBB177_148:	@ bb169.i
	cmp r8, #76
	bne .LBB177_157	@ bb170.i
.LBB177_149:	@ bb186.i
	ldr r6, [r10, #+24]
	b .LBB177_158	@ bb170.i
	.align	4
.LBB177_150:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_47:
 	.long	.str401113

	.align	4
.LBB177_151:	@ bb149.i
	ldr r0, [r10, #+28]
	mov r6, #42
	mov r1, r6
	emit_nops_till_bundle_end
	bl strchr
	cmp r0, #0
	mov r6, r11
	bne .LBB177_25	@ bb18.i
.LBB177_152:	@ bb150.i
	ldr r6, .LCPI177_8
	ldr r1, .LCPI177_28
	mov r0, r6
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r6
	b .LBB177_114	@ bb123.i
	.align	4
.LBB177_153:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_48:
 	.long	.str411114

	.align	4
.LBB177_154:	@ bb169.i
	cmp r8, #104
	beq .LBB177_160	@ bb174.i
.LBB177_155:	@ bb169.i
	cmp r8, #108
	beq .LBB177_161	@ bb178.i
.LBB177_156:	@ bb169.i
	cmp r8, #113
	beq .LBB177_163	@ bb182.i
.LBB177_157:	@ bb170.i
	ldr r6, [r10, #+8]
.LBB177_158:	@ bb170.i
	cmp r6, #0
	bne .LBB177_164	@ bb190.i
.LBB177_159:	@ bb170.i.bb191.i_crit_edge
	mov r5, #0
	b .LBB177_165	@ bb191.i
.LBB177_160:	@ bb174.i
	ldr r6, [r10, #+12]
	b .LBB177_158	@ bb170.i
.LBB177_161:	@ bb178.i
	ldr r6, [r10, #+16]
	b .LBB177_158	@ bb170.i
	.align	4
.LBB177_162:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_49:
 	.long	.str421115

	.align	4
.LBB177_163:	@ bb182.i
	ldr r6, [r10, #+20]
	b .LBB177_158	@ bb170.i
.LBB177_164:	@ bb190.i
	ldr r5, [r6]
	cmp r5, #0
	bne .LBB177_166	@ bb192.i
.LBB177_165:	@ bb191.i
	ldr r6, .LCPI177_8
	ldr r1, .LCPI177_32
	mov r0, r6
	mov r2, r8
	mov r3, r9
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r6
	emit_nops_till_bundle_end
	bl warning
.LBB177_166:	@ bb192.i
	ldr r6, [sp, #+36]
	ldr r6, [r6, #+20]
	cmp r6, #0
	mov r6, r11
	beq .LBB177_25	@ bb18.i
.LBB177_167:	@ bb193.i
	ldr r3, [r10, #+4]
	cmp r3, #0
	bne .LBB177_169	@ bb195.i
.LBB177_168:	@ bb194.i
	ldr r6, .LCPI177_33
	ldr r6, [r6]
	cmp r5, r6
	mov r6, r11
	beq .LBB177_25	@ bb18.i
.LBB177_169:	@ bb195.i
	cmp r4, #0
	beq .LBB177_229	@ bb73.i
.LBB177_170:	@ bb197.i
	ldr r6, [sp, #+32]
	add r6, r6, #1
	@comment
str r6, [sp, #+32]
	ldr r7, [r4]
	ldr r8, [r4, #+16]
	mov r4, #0
	b .LBB177_175	@ bb205.i
	.align	4
.LBB177_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_50:
 	.long	.str431116

	.align	4
.LBB177_172:	@ bb198.i
	ldrb r6, [r8, #+8]
	cmp r6, #0
	beq .LBB177_176	@ bb206.i
.LBB177_173:	@ bb198.i
	and r6, r6, #255
	cmp r6, #13
	bne .LBB177_233	@ bb201.i
.LBB177_174:	@ bb199.i
	add r4, r4, #1
.LBB177_175:	@ bb205.i
	ldr r8, [r8, #+4]
	cmp r3, r4
	bgt .LBB177_172	@ bb198.i
.LBB177_176:	@ bb206.i
	ldr r3, [r10, #+4]
	cmp r3, r4
	mov r6, r11
	mov r4, r7
	bne .LBB177_25	@ bb18.i
.LBB177_177:	@ bb206.i
	cmp r5, #0
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_178:	@ bb210.i
	ldrb r4, [r8, #+8]
	cmp r4, #0
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_179:	@ bb211.i
	ldr r2, [r8, #+64]
	cmp r2, r5
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_180:	@ bb212.i
	ldr r4, .LCPI177_33
	ldr r4, [r4]
	cmp r5, r4
	bne .LBB177_182	@ bb214.i
.LBB177_181:	@ bb212.i
	cmp r3, #0
	mov r6, r11
	mov r4, r7
	bgt .LBB177_25	@ bb18.i
.LBB177_182:	@ bb214.i
	ldrb r4, [r5, #+8]
	cmp r4, #7
	ldreqb r4, [r2, #+8]
	cmpeq r4, #7
	beq .LBB177_189	@ bb216.i
	b .LBB177_193	@ bb222.i
	.align	4
.LBB177_183:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_51:
 	.long	message.4069

.LBB177_184:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_52:
 	.long	.str441117

.LBB177_185:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_53:
 	.long	.str451118

.LBB177_186:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_54:
 	.long	.str461119

.LBB177_187:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_55:
 	.long	.str471120

.LBB177_188:	@ bb215.i
	.align	4
.LBB177_189:	@ bb216.i
	ldrb r4, [r5, #+9]
	tst r4, #64
	beq .LBB177_238	@ bb221.i
.LBB177_190:	@ bb220.i
	mov r0, r8
	emit_nops_till_bundle_end
	bl unsigned_type
.LBB177_191:	@ bb220.i
	cmp r0, r5
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_192:	@ bb221.i.bb222.i_crit_edge
	mov r8, r0
.LBB177_193:	@ bb222.i
	ldr r4, .LCPI177_37
	ldr r4, [r4]
	cmp r5, r4
	bne .LBB177_196	@ bb225.i
.LBB177_194:	@ bb223.i
	ldr r4, .LCPI177_38
	ldr r4, [r4]
	ldr r3, [r8, #+64]
	cmp r3, r4
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_195:	@ bb224.i
	ldr r4, .LCPI177_39
	ldr r4, [r4]
	cmp r3, r4
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_196:	@ bb225.i
	ldrb r4, [r8, #+8]
	ldr r6, [r5, #+48]
	ldr r6, [r6, #+32]
	ldr r9, [r6, #+16]
	cmp r4, #0
	beq .LBB177_208	@ bb237.i
.LBB177_197:	@ bb226.i
	mov r6, r8
	ldr r3, [r6, #+48]!
	cmp r3, #0
	beq .LBB177_207	@ bb235.i
.LBB177_198:	@ bb227.i
	and r2, r4, #255
	cmp r2, #7
	beq .LBB177_208	@ bb237.i
.LBB177_199:	@ bb227.i
	and r2, r4, #255
	cmp r2, #13
	ldreq r2, [r8, #+4]
	ldreqb r2, [r2, #+8]
	cmpeq r2, #7
	beq .LBB177_207	@ bb235.i
.LBB177_200:	@ bb229.i
.LBB177_201:	@ bb230.i
	ldrb r2, [r3, #+8]
	cmp r2, #32
	bne .LBB177_205	@ bb233.i
.LBB177_202:	@ bb231.i
	ldr r2, [r3, #+32]!
	cmp r2, #0
	moveq r3, r6
	b .LBB177_206	@ bb234.i
	.align	4
.LBB177_203:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_56:
 	.long	integer_type_node

.LBB177_204:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_57:
 	.long	unsigned_type_node

	.align	4
.LBB177_205:	@ bb233.i
	mov r3, r6
.LBB177_206:	@ bb234.i
	ldr r6, [r3]
	ldr r10, [r6, #+16]
	cmp r10, #0
	bne .LBB177_209	@ bb238.i
.LBB177_207:	@ bb235.i
	and r6, r4, #255
	cmp r6, #13
	beq .LBB177_235	@ bb235.i.bb238.i_crit_edge
.LBB177_208:	@ bb237.i
	ldr r10, .LCPI177_40
.LBB177_209:	@ bb238.i
	and r4, r4, #255
	cmp r4, #7
	bne .LBB177_216	@ bb244.i
.LBB177_210:	@ bb239.i
	ldrb r4, [r5, #+8]
	cmp r4, #7
	ldreqb r4, [r5, #+28]
	ldreqb r6, [r8, #+28]
	cmpeq r6, r4
	beq .LBB177_213	@ bb241.i
	b .LBB177_216	@ bb244.i
	.align	4
.LBB177_211:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_58:
 	.long	.str481121

.LBB177_212:	@ bb240.i
	.align	4
.LBB177_213:	@ bb241.i
	ldr r4, [r8, #+48]
	cmp r4, #0
	beq .LBB177_216	@ bb244.i
.LBB177_214:	@ bb242.i
	ldrb r6, [r4, #+8]
	cmp r6, #32
	ldreq r4, [r4, #+32]
	ldreq r10, [r4, #+16]
.LBB177_215:	@ bb243.i
.LBB177_216:	@ bb244.i
	mov r0, r9
	mov r1, r10
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	mov r6, r11
	mov r4, r7
	beq .LBB177_25	@ bb18.i
.LBB177_217:	@ bb245.i
	ldr r4, [sp, #+32]
	@comment
str r4, [sp]
	ldr r4, .LCPI177_8
	ldr r1, .LCPI177_41
	mov r0, r4
	mov r2, r9
	mov r3, r10
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r4
	emit_nops_till_bundle_end
	bl warning
	mov r6, r11
	mov r4, r7
	b .LBB177_25	@ bb18.i
	.align	4
.LBB177_218:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_59:
 	.long	.str491122

.LBB177_219:	@ bb.bb3_crit_edge
	.align	4
.LBB177_220:	@ bb2.i
	add r4, r4, #1
	ldr r2, [r2]
	b .LBB177_6	@ bb.i
.LBB177_221:	@ bb36.preheader.i.bb92.i_crit_edge
	mov r7, #0
	@comment
str r7, [sp, #+24]
.LBB177_222:	@ bb92.i
	ldrsb r3, [r6]
	cmp r3, #103
	bgt .LBB177_92	@ bb92.i
.LBB177_223:	@ bb92.i
	and r2, r3, #255
	cmp r2, #76
	beq .LBB177_94	@ bb100.i
.LBB177_224:	@ bb92.i.bb103.i_crit_edge
	mov r8, #0
	b .LBB177_97	@ bb103.i
.LBB177_225:	@ bb43.i.bb49.i_crit_edge
	ldr r4, [sp, #+28]
	b .LBB177_53	@ bb49.i
.LBB177_226:	@ bb80.i.bb92.i_crit_edge
	mov r5, #0
	@comment
str r5, [sp, #+24]
	b .LBB177_222	@ bb92.i
.LBB177_227:	@ bb91.preheader.i
	mov r5, r5, lsl #24
	mov r0, r5, asr #24
	emit_nops_till_bundle_end
	bl isdigit
	cmp r0, #0
	bne .LBB177_90	@ bb90.i
.LBB177_228:	@ bb91.preheader.i.bb92.i_crit_edge
	mov r5, #1
	@comment
str r5, [sp, #+24]
	mov r5, #0
	mov r6, r8
	b .LBB177_222	@ bb92.i
.LBB177_229:	@ bb73.i
	ldr r0, .LCPI177_13
	b .LBB177_12	@ bb7.i
.LBB177_230:	@ bb100.i.bb103.i_crit_edge
	mov r6, r3
	b .LBB177_97	@ bb103.i
.LBB177_231:	@ bb103.i.bb105.i_crit_edge
.LBB177_232:	@ bb121.i
.LBB177_233:	@ bb201.i
	ldr r6, .LCPI177_34
	ldr r2, .LCPI177_35
	cmp r3, #1
	moveq r2, r6
	ldr r6, .LCPI177_8
	ldr r1, .LCPI177_36
	mov r0, r6
	ldr r3, [sp, #+32]
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, r6
	emit_nops_till_bundle_end
	bl warning
	b .LBB177_176	@ bb206.i
	.align	4
.LBB177_234:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_60:
 	.long	529			@ 0x211

	.align	4
.LBB177_235:	@ bb235.i.bb238.i_crit_edge
	ldr r10, .LCPI177_34
	b .LBB177_209	@ bb238.i
.LBB177_236:	@ bb4.i
	ldr r5, [r5, #+16]
	b .LBB177_9	@ bb5.preheader.i
.LBB177_237:	@ bb142.i
	and r6, r6, #255
	cmp r6, #93
	bne .LBB177_133	@ bb141.i
	b .LBB177_136	@ bb148.i
.LBB177_238:	@ bb221.i
	mov r0, r8
	emit_nops_till_bundle_end
	bl signed_type
	b .LBB177_191	@ bb220.i
	.align	4
.LBB177_239:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_8:
 	.long	message.4069

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_13:
 	.long	tfaff

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_18:
 	.long	.str501123

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_19:
 	.long	.str511124

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_20:
 	.long	print_char_table

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_21:
 	.long	scan_char_table

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_22:
 	.long	.str761149

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_23:
 	.long	.str771150

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_24:
 	.long	.str781151

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_25:
 	.long	.str791152

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_26:
 	.long	.str801153

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_27:
 	.long	.str811154

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_28:
 	.long	.str821155

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_29:
 	.long	.str831156

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_30:
 	.long	1181729			@ 0x120821

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_31:
 	.long	.str841157

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_32:
 	.long	.str851158

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_33:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_34:
 	.long	.str861159

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_35:
 	.long	.str871160

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_36:
 	.long	.str881161

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_37:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_38:
 	.long	signed_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_39:
 	.long	unsigned_char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_40:
 	.long	.str891162

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI177_41:
 	.long	.str901163

	.size check_function_format, .-check_function_format


	.globl	init_function_format_info
	.align	4
init_function_format_info:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r0, .LCPI178_0
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_1:	@ bb3.i
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_5	@ bb5.i
.LBB178_2:	@ bb.i
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_4	@ bb4.i
	b .LBB178_1	@ bb3.i
.LBB178_3:	@ bb1.i
.LBB178_4:	@ bb4.i
	cmp r3, #0
	bne .LBB178_6	@ record_function_format.exit
.LBB178_5:	@ bb5.i
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_6:	@ record_function_format.exit
	mov r2, #0
	@comment
str r2, [r3, #+12]
	mov r2, #1
	@comment
str r2, [r3, #+16]
	mov r2, #2
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_2
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_7:	@ bb3.i76
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_11	@ bb5.i78
.LBB178_8:	@ bb.i71
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_10	@ bb4.i77
	b .LBB178_7	@ bb3.i76
.LBB178_9:	@ bb1.i72
.LBB178_10:	@ bb4.i77
	cmp r3, #0
	bne .LBB178_12	@ record_function_format.exit80
.LBB178_11:	@ bb5.i78
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_12:	@ record_function_format.exit80
	mov r2, #0
	@comment
str r2, [r3, #+12]
	mov r2, #2
	@comment
str r2, [r3, #+16]
	mov r2, #3
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_3
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_13:	@ bb3.i66
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_17	@ bb5.i68
.LBB178_14:	@ bb.i61
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_16	@ bb4.i67
	b .LBB178_13	@ bb3.i66
.LBB178_15:	@ bb1.i62
.LBB178_16:	@ bb4.i67
	cmp r3, #0
	bne .LBB178_18	@ record_function_format.exit70
.LBB178_17:	@ bb5.i68
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_18:	@ record_function_format.exit70
	mov r2, #0
	@comment
str r2, [r3, #+12]
	mov r2, #2
	@comment
str r2, [r3, #+16]
	mov r2, #3
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_4
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_19:	@ bb3.i56
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_23	@ bb5.i58
.LBB178_20:	@ bb.i51
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_22	@ bb4.i57
	b .LBB178_19	@ bb3.i56
.LBB178_21:	@ bb1.i52
.LBB178_22:	@ bb4.i57
	cmp r3, #0
	bne .LBB178_24	@ record_function_format.exit60
.LBB178_23:	@ bb5.i58
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_24:	@ record_function_format.exit60
	mov r2, #1
	@comment
str r2, [r3, #+12]
	@comment
str r2, [r3, #+16]
	mov r2, #2
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_5
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_25:	@ bb3.i46
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_29	@ bb5.i48
.LBB178_26:	@ bb.i41
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_28	@ bb4.i47
	b .LBB178_25	@ bb3.i46
.LBB178_27:	@ bb1.i42
.LBB178_28:	@ bb4.i47
	cmp r3, #0
	bne .LBB178_30	@ record_function_format.exit50
.LBB178_29:	@ bb5.i48
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_30:	@ record_function_format.exit50
	mov r2, #1
	@comment
str r2, [r3, #+12]
	mov r2, #2
	@comment
str r2, [r3, #+16]
	mov r2, #3
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_6
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_31:	@ bb3.i36
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_35	@ bb5.i38
.LBB178_32:	@ bb.i31
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_34	@ bb4.i37
	b .LBB178_31	@ bb3.i36
.LBB178_33:	@ bb1.i32
.LBB178_34:	@ bb4.i37
	cmp r3, #0
	bne .LBB178_36	@ record_function_format.exit40
.LBB178_35:	@ bb5.i38
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_36:	@ record_function_format.exit40
	mov r2, #1
	@comment
str r2, [r3, #+12]
	mov r2, #2
	@comment
str r2, [r3, #+16]
	mov r2, #3
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_7
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_37:	@ bb3.i26
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_41	@ bb5.i28
.LBB178_38:	@ bb.i21
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_40	@ bb4.i27
	b .LBB178_37	@ bb3.i26
.LBB178_39:	@ bb1.i22
.LBB178_40:	@ bb4.i27
	cmp r3, #0
	bne .LBB178_42	@ record_function_format.exit30
.LBB178_41:	@ bb5.i28
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_42:	@ record_function_format.exit30
	mov r2, #0
	@comment
str r2, [r3, #+12]
	mov r1, #1
	@comment
str r1, [r3, #+16]
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_8
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_43:	@ bb3.i16
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_47	@ bb5.i18
.LBB178_44:	@ bb.i11
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_46	@ bb4.i17
	b .LBB178_43	@ bb3.i16
.LBB178_45:	@ bb1.i12
.LBB178_46:	@ bb4.i17
	cmp r3, #0
	bne .LBB178_48	@ record_function_format.exit20
.LBB178_47:	@ bb5.i18
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_48:	@ record_function_format.exit20
	mov r2, #0
	@comment
str r2, [r3, #+12]
	mov r1, #2
	@comment
str r1, [r3, #+16]
	@comment
str r2, [r3, #+20]
	ldr r0, .LCPI178_9
	emit_nops_till_bundle_end
	bl get_identifier
	ldr r3, .LCPI178_1
	mov r4, r0
.LBB178_49:	@ bb3.i6
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB178_53	@ bb5.i8
.LBB178_50:	@ bb.i1
	ldr r2, [r3, #+4]
	cmp r2, r4
	ldreq r2, [r3, #+8]
	cmpeq r2, #0
	beq .LBB178_52	@ bb4.i7
	b .LBB178_49	@ bb3.i6
.LBB178_51:	@ bb1.i2
.LBB178_52:	@ bb4.i7
	cmp r3, #0
	bne .LBB178_54	@ record_function_format.exit10
.LBB178_53:	@ bb5.i8
	mov r0, #24
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI178_1
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r4, [r0, #+4]
	mov r3, #0
	@comment
str r3, [r0, #+8]
	mov r3, r0
.LBB178_54:	@ record_function_format.exit10
	mov r2, #0
	@comment
str r2, [r3, #+12]
	mov r1, #2
	@comment
str r1, [r3, #+16]
	@comment
str r2, [r3, #+20]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB178_55:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_0:
 	.long	.str911164

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_1:
 	.long	function_format_list

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_2:
 	.long	.str921165

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_3:
 	.long	.str931166

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_4:
 	.long	.str941167

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_5:
 	.long	.str951168

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_6:
 	.long	.str961169

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_7:
 	.long	.str971170

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_8:
 	.long	.str981171

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI178_9:
 	.long	.str991172

	.size init_function_format_info, .-init_function_format_info


	.globl	decl_attributes
	.align	4
decl_attributes:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add r11, sp, #28
	sfi_sub sp, sp, #95, 28 @ 1520
	ldr r3, .LCPI179_53
	ldr r3, [r3]
	@comment
str r2, [r11, #-1544]
	@comment
str r1, [r11, #-1548]
	@comment
str r0, [r11, #-1540]
	cmp r3, #0
	bne .LBB179_2	@ bb2
.LBB179_1:	@ bb
	mov r4, #20
	mul r3, r3, r4
	ldr r5, .LCPI179_54
	mov r6, #0
	mov r7, r5
	str r6, [r7, +r3]!
	ldr r8, .LCPI179_55
	mov r0, r8
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r7, #+4]
	ldr r7, .LCPI179_53
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	@comment
str r6, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	ldr r3, .LCPI179_56
	@comment
str r3, [r11, #-1532]
	sub r0, r11, #1, 22 @ 1024
	sub r9, r0, #126, 30 @ 504
	mov r0, r9
	mov r1, r3
	mov r2, r8
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r8, r5
	str r6, [r8, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r8, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	@comment
str r6, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, r5
	mov r2, #1
	str r2, [r8, +r3]!
	ldr r9, .LCPI179_57
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r8, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r8, r11, #128
	mov r0, r8
	ldr r1, [r11, #-1532]
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r9, r5
	mov r2, #1
	str r2, [r9, +r3]!
	mov r0, r8
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #2
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_58
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #228
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_59
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #82, 30 @ 328
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #10
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_60
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #107, 30 @ 428
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, r5
	mov r2, #3
	str r2, [r8, +r3]!
	ldr r9, .LCPI179_61
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r8, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r8, r11, #33, 28 @ 528
	mov r0, r8
	ldr r1, [r11, #-1532]
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r9, r5
	mov r2, #3
	str r2, [r9, +r3]!
	mov r0, r8
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #4
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_62
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	@comment
str r6, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #157, 30 @ 628
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	@comment
str r6, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #5
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_63
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #182, 30 @ 728
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #6
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_64
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #207, 30 @ 828
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #7
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_65
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #1
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #58, 28 @ 928
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #1
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #8
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_66
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #1
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r0, r11, #1, 22 @ 1024
	sub r9, r0, #4
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #1
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #9
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_67
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	mov r1, #1
	@comment
str r1, [r2, #+12]
	@comment
str r6, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r0, r11, #1, 22 @ 1024
	sub r9, r0, #104
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	mov r1, #1
	@comment
str r1, [r2, #+12]
	@comment
str r6, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #11
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_68
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #3
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r0, r11, #1, 22 @ 1024
	sub r9, r0, #204
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #3
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r8, #12
	mov r9, r5
	str r8, [r9, +r3]!
	ldr r10, .LCPI179_69
	mov r0, r10
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r9, r11, #83, 28 @ 1328
	mov r0, r9
	ldr r1, [r11, #-1532]
	mov r2, r10
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r10, r5
	str r8, [r10, +r3]!
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r10, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	@comment
str r6, [r2, #+8]
	@comment
str r6, [r2, #+12]
	mov r1, #1
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	mul r3, r3, r4
	mov r6, #13
	mov r8, r5
	str r6, [r8, +r3]!
	ldr r9, .LCPI179_70
	mov r0, r9
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r8, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #1
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
	sub r0, r11, #1, 22 @ 1024
	sub r8, r0, #101, 30 @ 404
	mov r0, r8
	ldr r1, [r11, #-1532]
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, [r7]
	mul r3, r3, r4
	mov r9, r5
	str r6, [r9, +r3]!
	mov r0, r8
	emit_nops_till_bundle_end
	bl get_identifier
	@comment
str r0, [r9, #+4]
	ldr r3, [r7]
	mla r2, r3, r4, r5
	mov r1, #1
	@comment
str r1, [r2, #+8]
	@comment
str r1, [r2, #+12]
	@comment
str r1, [r2, #+16]
	add r3, r3, #1
	@comment
str r3, [r7]
.LBB179_2:	@ bb2
	ldr r3, .LCPI179_71
	ldr r3, [r3]
	ldr r2, [r11, #-1540]
	ldrb r2, [r2, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldrb r3, [r3]
	cmp r3, #100
	beq .LBB179_5	@ bb3
.LBB179_3:	@ bb2
	and r2, r3, #255
	cmp r2, #116
	mov r4, #0
	moveq r5, #1
	@comment
streq r5, [r11, #-1536]
	ldreq r5, [r11, #-1540]
	b .LBB179_7	@ bb6
.LBB179_4:	@ bb2.bb6_crit_edge
.LBB179_5:	@ bb3
	and r4, r2, #255
	mov r5, #1
	cmp r4, #32
	mov r4, #0
	moveq r4, r5
	@comment
str r4, [r11, #-1536]
	ldr r4, [r11, #-1540]
	ldr r5, [r4, #+4]
	b .LBB179_7	@ bb6
.LBB179_6:	@ bb5
.LBB179_7:	@ bb6
	ldr r0, [r11, #-1544]
	ldr r1, [r11, #-1548]
	emit_nops_till_bundle_end
	bl chainon
	cmp r0, #0
	beq .LBB179_174	@ return
.LBB179_8:	@ bb.nph232
	@comment
str r0, [r11, #-1532]
.LBB179_9:	@ bb7
	ldr r3, .LCPI179_53
	ldr r3, [r3]
	ldr r2, [r11, #-1532]
	ldr r6, [r2, #+16]
	ldr r7, [r2, #+12]
	mov r2, #0
	ldr r8, .LCPI179_54
	b .LBB179_12	@ bb10
.LBB179_10:	@ bb8
	ldr r1, [r8, #+4]
	cmp r1, r7
	beq .LBB179_13	@ bb11
.LBB179_11:	@ bb9
	add r8, r8, #20
	add r2, r2, #1
.LBB179_12:	@ bb10
	cmp r2, r3
	blt .LBB179_10	@ bb8
.LBB179_13:	@ bb11
	cmp r2, r3
	bne .LBB179_16	@ bb14
.LBB179_14:	@ bb12
	mov r0, r7
	mov r1, r6
	mov r2, r4
	mov r3, r5
	emit_nops_till_bundle_end
	bl valid_machine_attribute
	cmp r0, #0
	bne .LBB179_173	@ bb200
.LBB179_15:	@ bb13
	ldr r1, [r7, #+16]
	ldr r0, .LCPI179_72
	emit_nops_till_bundle_end
	bl warning
	b .LBB179_173	@ bb200
.LBB179_16:	@ bb14
	ldr r3, [r8, #+16]
	cmp r3, #0
	beq .LBB179_18	@ bb18
.LBB179_17:	@ bb14
	cmp r4, #0
	beq .LBB179_175	@ bb17
.LBB179_18:	@ bb18
	mov r0, r6
	emit_nops_till_bundle_end
	bl list_length
	ldr r3, [r8, #+8]
	cmp r0, r3
	blt .LBB179_176	@ bb20
.LBB179_19:	@ bb19
	mov r0, r6
	emit_nops_till_bundle_end
	bl list_length
	ldr r3, [r8, #+12]
	cmp r0, r3
	bgt .LBB179_176	@ bb20
.LBB179_20:	@ bb21
	ldr r3, [r8]
	cmp r3, #13
	bhi .LBB179_173	@ bb200
.LBB179_21:	@ bb21
	.set PCRELV20, (.LJTI179_0_0-(.LPCRELL20+8))
.LPCRELL20:
	add r2, pc, #PCRELV20
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI179_0_0:
	.long	 .LBB179_22
	.long	 .LBB179_28
	.long	 .LBB179_30
	.long	 .LBB179_39
	.long	 .LBB179_47
	.long	 .LBB179_57
	.long	 .LBB179_64
	.long	 .LBB179_69
	.long	 .LBB179_92
	.long	 .LBB179_106
	.long	 .LBB179_35
	.long	 .LBB179_122
	.long	 .LBB179_164
	.long	 .LBB179_165

.text
@ JUMP TABLE END



	.align	2
.LBB179_22:	@ bb22
	ldr r6, [r11, #-1536]
	cmp r6, #0
	beq .LBB179_25	@ bb24
.LBB179_23:	@ bb23
	ldrb r6, [r5, #+30]
	ldrb r7, [r5, #+31]
	mov r3, r5
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r6, r7, lsl #8
	orr r7, r2, r1, lsl #8
	orr r6, r7, r6, lsl #16
	orr r6, r6, #1, 12 @ 1048576
.LBB179_24:	@ bb23
	mov r6, r6, lsr #16
	strb r6, [r5, #+30]
	b .LBB179_173	@ bb200
.LBB179_25:	@ bb24
	ldrb r6, [r4, #+8]
	cmp r6, #36
	bne .LBB179_180	@ bb199
.LBB179_26:	@ bb25
	ldrb r6, [r4, #+30]
	mov r7, r4
	ldrb r3, [r7, #+28]!
	ldrb r2, [r7, #+3]
	orr r6, r6, r2, lsl #8
	ldrb r2, [r7, #+1]
	orr r2, r3, r2, lsl #8
	orr r6, r2, r6, lsl #16
	orr r6, r6, #1, 22 @ 1024
.LBB179_27:	@ bb25
	mov r6, r6, lsr #8
	strb r6, [r7, #+1]
	strb r3, [r7]
	b .LBB179_173	@ bb200
	.align	2
.LBB179_28:	@ bb27
	ldrb r6, [r4, #+8]
	cmp r6, #33
	bne .LBB179_180	@ bb199
.LBB179_29:	@ bb28
	ldrb r6, [r4, #+29]
	mov r7, r4
	ldrb r3, [r7, #+28]!
	orr r6, r3, r6, lsl #8
	ldrb r3, [r7, #+3]
	ldrb r2, [r7, #+2]
	orr r3, r2, r3, lsl #8
	orr r6, r6, r3, lsl #16
	bic r6, r6, #2, 16 @ 131072
	strb r6, [r7]
	mov r3, r6, lsr #24
	strb r3, [r7, #+3]
	mov r3, r6, lsr #16
	strb r3, [r7, #+2]
	mov r6, r6, lsr #8
	strb r6, [r4, #+29]
	b .LBB179_173	@ bb200
	.align	2
.LBB179_30:	@ bb30
	ldrb r6, [r4, #+8]
	cmp r6, #29
	beq .LBB179_177	@ bb31
.LBB179_31:	@ bb32
	ldrb r6, [r5, #+8]
	cmp r6, #13
	ldreq r0, [r5, #+4]
	ldreqb r6, [r0, #+8]
	cmpeq r6, #23
	beq .LBB179_33	@ bb34
	b .LBB179_180	@ bb199
.LBB179_32:	@ bb33
.LBB179_33:	@ bb34
	ldrb r5, [r0, #+9]
	mov r6, r0
	ldrb r7, [r6, #+8]!
	mov r6, #1
	and r1, r6, r5, lsr #5
	mov r2, r6
.LBB179_34:	@ bb34
	emit_nops_till_bundle_end
	bl build_type_variant
	emit_nops_till_bundle_end
	bl build_pointer_type
	@comment
str r0, [r4, #+4]
	mov r5, r0
	b .LBB179_173	@ bb200
	.align	2
.LBB179_35:	@ bb41
	ldrb r6, [r4, #+8]
	sub r3, r6, #33
	and r3, r3, #255
	cmp r3, #2
	blo .LBB179_37	@ bb45
.LBB179_36:	@ bb41
	and r6, r6, #255
	cmp r6, #29
	bne .LBB179_180	@ bb199
.LBB179_37:	@ bb45
	ldrb r6, [r4, #+10]
	ldrb r7, [r4, #+11]
	mov r3, r4
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r6, r7, lsl #8
.LBB179_38:	@ bb45
	orr r7, r2, r1, lsl #8
	orr r6, r7, r6, lsl #16
	orr r6, r6, #1, 16 @ 65536
	mov r6, r6, lsr #16
	strb r6, [r4, #+10]
	b .LBB179_173	@ bb200
	.align	2
.LBB179_39:	@ bb47
	ldrb r6, [r4, #+8]
	cmp r6, #29
	beq .LBB179_178	@ bb48
.LBB179_40:	@ bb49
	ldrb r6, [r5, #+8]
	cmp r6, #13
	ldreq r0, [r5, #+4]
	ldreqb r6, [r0, #+8]
	cmpeq r6, #23
	beq .LBB179_43	@ bb51
	b .LBB179_180	@ bb199
	.align	4
.LBB179_41:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_53:
 	.long	attrtab_idx

.LBB179_42:	@ bb50
	.align	4
.LBB179_43:	@ bb51
	ldrb r5, [r0, #+9]
	mov r6, r0
	ldrb r7, [r6, #+8]!
	mov r6, #1
	and r2, r6, r5, lsr #4
	mov r1, r6
	b .LBB179_34	@ bb34
	.align	4
.LBB179_44:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_54:
 	.long	attrtab

.LBB179_45:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_55:
 	.long	.str1011174

.LBB179_46:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_56:
 	.long	.str1001173

	.align	4
.LBB179_47:	@ bb59
	ldr r6, [r11, #-1536]
	cmp r6, #0
	beq .LBB179_52	@ bb64
.LBB179_48:	@ bb60
	ldrb r6, [r5, #+8]
	cmp r6, #21
	bne .LBB179_52	@ bb64
.LBB179_49:	@ bb61
	cmp r4, #0
	ldrne r6, [r5, #+12]
	ldrneb r6, [r6, #+28]
	ldrneb r3, [r5, #+29]
	cmpne r3, r6
	bne .LBB179_52	@ bb64
	b .LBB179_179	@ bb63
	.align	4
.LBB179_50:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_57:
 	.long	.str1021175

.LBB179_51:	@ bb62
	.align	4
.LBB179_52:	@ bb64
	cmp r4, #0
	beq .LBB179_180	@ bb199
.LBB179_53:	@ bb65
	ldrb r6, [r4, #+8]
	cmp r6, #34
	bne .LBB179_180	@ bb199
.LBB179_54:	@ bb66
	ldrb r6, [r5, #+8]
	cmp r6, #21
	ldreq r6, [r5, #+12]
	ldreqb r6, [r6, #+28]
	ldreqb r3, [r5, #+29]
	cmpeq r3, r6
	beq .LBB179_56	@ bb68
	b .LBB179_180	@ bb199
.LBB179_55:	@ bb67
.LBB179_56:	@ bb68
	ldrb r6, [r4, #+30]
	ldrb r7, [r4, #+31]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r6, r7, lsl #8
	orr r7, r2, r1, lsl #8
	orr r6, r7, r6, lsl #16
	orr r6, r6, #2, 14 @ 524288
	mov r6, r6, lsr #16
	strb r6, [r4, #+30]
	b .LBB179_173	@ bb200
	.align	2
.LBB179_57:	@ bb70
	ldrb r6, [r4, #+8]
	cmp r6, #29
	ldreqb r6, [r5, #+8]
	cmpeq r6, #23
	beq .LBB179_60	@ bb72
	b .LBB179_180	@ bb199
	.align	4
.LBB179_58:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_58:
 	.long	.str1031176

.LBB179_59:	@ bb71
	.align	4
.LBB179_60:	@ bb72
	mov r0, r4
	emit_nops_till_bundle_end
	bl decl_function_context
	cmp r0, #0
	bne .LBB179_180	@ bb199
.LBB179_61:	@ bb73
	ldrb r6, [r4, #+30]
	ldrb r7, [r4, #+31]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r6, r7, lsl #8
	orr r7, r2, r1, lsl #8
	orr r6, r7, r6, lsl #16
	orr r6, r6, #1, 12 @ 1048576
.LBB179_62:	@ bb73
	mov r6, r6, lsr #16
	strb r6, [r4, #+30]
	ldrb r6, [r4, #+11]
	ldrb r7, [r4, #+10]
	mov r3, r4
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r7, r6, lsl #8
	b .LBB179_38	@ bb45
	.align	4
.LBB179_63:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_59:
 	.long	.str1041177

	.align	4
.LBB179_64:	@ bb75
	ldrb r6, [r4, #+8]
	cmp r6, #29
	ldreqb r6, [r5, #+8]
	cmpeq r6, #23
	beq .LBB179_66	@ bb77
	b .LBB179_180	@ bb199
.LBB179_65:	@ bb76
.LBB179_66:	@ bb77
	mov r0, r4
	emit_nops_till_bundle_end
	bl decl_function_context
	cmp r0, #0
	bne .LBB179_180	@ bb199
.LBB179_67:	@ bb78
	ldrb r6, [r4, #+30]
	ldrb r7, [r4, #+31]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r6, r7, lsl #8
	orr r7, r2, r1, lsl #8
	orr r6, r7, r6, lsl #16
	orr r6, r6, #2, 12 @ 2097152
	b .LBB179_62	@ bb73
	.align	4
.LBB179_68:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_60:
 	.long	.str1051178

	.align	4
.LBB179_69:	@ bb80
	ldr r6, [r6, #+16]
	ldrb r3, [r6, #+8]
	cmp r3, #1
	bne .LBB179_180	@ bb199
.LBB179_70:	@ bb82
	ldr r6, [r6, #+16]
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	mov r7, r0
	cmp r0, #4
	ble .LBB179_79	@ bb88
.LBB179_71:	@ bb83
	ldrb r3, [r6]
	cmp r3, #95
	ldreqb r3, [r6, #+1]
	cmpeq r3, #95
	beq .LBB179_74	@ bb85
	b .LBB179_79	@ bb88
	.align	4
.LBB179_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_61:
 	.long	.str1061179

.LBB179_73:	@ bb84
	.align	4
.LBB179_74:	@ bb85
	sub r3, r7, #1
	ldrb r2, [r6, +r3]
	cmp r2, #95
	addeq r2, r7, r6
	ldreqb r2, [r2, #-2]
	cmpeq r2, #95
	beq .LBB179_78	@ bb87
	b .LBB179_79	@ bb88
	.align	4
.LBB179_75:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_62:
 	.long	.str1071180

.LBB179_76:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_63:
 	.long	.str1081181

.LBB179_77:	@ bb86
	.align	4
.LBB179_78:	@ bb87
	add r3, r3, #3
	bic r3, r3, #3
	sub r8, sp, r3
	mov sp, r8
	add r1, r6, #2
	mov r0, r8
	emit_nops_till_bundle_end
	bl strcpy
	add r6, r7, r8
	mov r7, #0
	strb r7, [r6, #-4]
	mov r6, r8
.LBB179_79:	@ bb88
	ldr r1, .LCPI179_23
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_181	@ bb89
.LBB179_80:	@ bb90
	ldr r1, .LCPI179_25
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_182	@ bb91
.LBB179_81:	@ bb92
	ldr r1, .LCPI179_27
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_183	@ bb93
.LBB179_82:	@ bb92.bb98_crit_edge
	mov r8, #0
	ldr r9, .LCPI179_28
	mov r7, r8
.LBB179_83:	@ bb98
	ldr r1, [r9], #+4
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	moveq r7, r8
	add r8, r8, #1
	cmp r8, #29
	bne .LBB179_83	@ bb98
.LBB179_84:	@ bb99
	cmp r7, #0
	bne .LBB179_87	@ bb101
.LBB179_85:	@ bb100
	ldr r0, .LCPI179_30
.LBB179_86:	@ bb100
	mov r1, r6
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_87:	@ bb101
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	mov r2, #1
	and r1, r2, r3, lsr #6
	mov r0, r7
	emit_nops_till_bundle_end
	bl type_for_mode
	mov r7, r0
	cmp r0, #0
	bne .LBB179_90	@ bb109
.LBB179_88:	@ bb108
	ldr r0, .LCPI179_31
	b .LBB179_86	@ bb100
	.align	4
.LBB179_89:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_64:
 	.long	.str1091182

	.align	4
.LBB179_90:	@ bb109
	@comment
str r7, [r4, #+4]
	mov r5, #0
	@comment
str r5, [r4, #+20]
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl layout_decl
	mov r5, r7
	b .LBB179_173	@ bb200
	.align	4
.LBB179_91:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_65:
 	.long	.str1101183

	.align	4
.LBB179_92:	@ bb110
	ldrb r7, [r4, #+8]
	cmp r7, #29
	andne r3, r7, #255
	cmpne r3, #33
	bne .LBB179_105	@ bb125
.LBB179_93:	@ bb110
.LBB179_94:	@ bb117
	ldr r3, [r6, #+16]
	ldrb r2, [r3, #+8]
	cmp r2, #28
	bne .LBB179_105	@ bb125
.LBB179_95:	@ bb118
	and r7, r7, #255
	cmp r7, #33
	bne .LBB179_100	@ bb121
.LBB179_96:	@ bb119
	ldr r7, .LCPI179_32
	ldr r7, [r7]
	cmp r7, #0
	beq .LBB179_100	@ bb121
.LBB179_97:	@ bb120
	ldr r1, .LCPI179_33
.LBB179_98:	@ bb120
	mov r0, r4
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB179_173	@ bb200
	.align	4
.LBB179_99:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_66:
 	.long	.str1111184

	.align	4
.LBB179_100:	@ bb121
	ldr r7, [r4, #+60]
	cmp r7, #0
	beq .LBB179_104	@ bb124
.LBB179_101:	@ bb122
	ldr r0, [r7, #+20]
	ldr r1, [r3, #+20]
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_104	@ bb124
.LBB179_102:	@ bb123
	ldr r1, .LCPI179_34
.LBB179_103:	@ bb123
	ldr r0, [r11, #-1540]
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB179_173	@ bb200
.LBB179_104:	@ bb124
	ldr r6, [r6, #+16]
	@comment
str r6, [r4, #+60]
	b .LBB179_173	@ bb200
.LBB179_105:	@ bb125
	ldr r1, .LCPI179_35
	b .LBB179_103	@ bb123
	.align	2
.LBB179_106:	@ bb126
	cmp r6, #0
	ldrne r0, [r6, #+16]
	moveq r6, #64
	moveq r0, r6
	emit_nops_till_bundle_end
	bleq size_int
	b .LBB179_110	@ bb131.preheader
	.align	4
.LBB179_107:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_67:
 	.long	.str1121185

.LBB179_108:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_68:
 	.long	.str1131186

.LBB179_109:	@ bb128
	.align	4
.LBB179_110:	@ bb131.preheader
	ldrb r6, [r0, #+8]
	sub r6, r6, #105
	and r6, r6, #255
	cmp r6, #2
	bhi .LBB179_112	@ bb132
.LBB179_111:	@ bb130
	ldr r0, [r0, #+16]
	ldrb r6, [r0, #+8]
	sub r6, r6, #105
	and r6, r6, #255
	cmp r6, #3
	blo .LBB179_111	@ bb130
.LBB179_112:	@ bb132
	ldrb r6, [r0, #+8]
	cmp r6, #25
	bne .LBB179_185	@ bb133
.LBB179_113:	@ bb134
	ldr r6, [r0, #+12]
	mov r6, r6, lsl #3
	mov r0, r6
	emit_nops_till_bundle_end
	bl exact_log2_wide
	cmn r0, #1
	beq .LBB179_186	@ bb135
.LBB179_114:	@ bb136
	ldr r7, [r11, #-1536]
	cmp r7, #0
	bne .LBB179_187	@ bb137
.LBB179_115:	@ bb138
	ldrb r7, [r4, #+8]
	cmp r7, #33
	andne r7, r7, #255
	cmpne r7, #36
	bne .LBB179_117	@ bb142
	b .LBB179_118	@ bb143
.LBB179_116:	@ bb138
.LBB179_117:	@ bb142
	ldr r1, .LCPI179_38
	b .LBB179_98	@ bb120
.LBB179_118:	@ bb143
	@comment
str r6, [r4, #+72]
	b .LBB179_173	@ bb200
	.align	4
.LBB179_119:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_69:
 	.long	.str1141187

.LBB179_120:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_70:
 	.long	.str1151188

.LBB179_121:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_71:
 	.long	tree_code_type

	.align	4
.LBB179_122:	@ bb144
	ldrb r7, [r4, #+8]
	ldr r3, [r6]
	ldr r8, [r3, #+16]
	ldr r3, [r3]
	ldr r9, [r3, #+16]
	ldr r6, [r6, #+16]
	cmp r7, #29
	bne .LBB179_188	@ bb145
.LBB179_123:	@ bb146
	ldrb r7, [r6, #+8]
	cmp r7, #1
	bne .LBB179_126	@ bb150
.LBB179_124:	@ bb147
	ldr r0, [r6, #+16]
	ldr r1, .LCPI179_40
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_189	@ bb147.bb156.preheader_crit_edge
.LBB179_125:	@ bb148
	ldr r0, [r6, #+16]
	ldr r1, .LCPI179_41
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_189	@ bb147.bb156.preheader_crit_edge
.LBB179_126:	@ bb150
	ldrb r7, [r6, #+8]
	cmp r7, #1
	bne .LBB179_137	@ bb154
.LBB179_127:	@ bb151
	ldr r0, [r6, #+16]
	ldr r1, .LCPI179_42
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB179_136	@ bb152
.LBB179_128:	@ bb151.bb156.preheader_crit_edge
	mov r6, #1
.LBB179_129:	@ bb156.preheader
	ldrb r7, [r8, #+8]
	sub r7, r7, #105
	and r7, r7, #255
	cmp r7, #2
	bhi .LBB179_131	@ bb158.preheader
.LBB179_130:	@ bb155
	ldr r8, [r8, #+16]
	ldrb r7, [r8, #+8]
	sub r7, r7, #105
	and r7, r7, #255
	cmp r7, #3
	blo .LBB179_130	@ bb155
.LBB179_131:	@ bb158.preheader
	ldrb r7, [r9, #+8]
	sub r7, r7, #105
	and r7, r7, #255
	cmp r7, #2
	bhi .LBB179_133	@ bb159
.LBB179_132:	@ bb157
	ldr r9, [r9, #+16]
	ldrb r7, [r9, #+8]
	sub r7, r7, #105
	and r7, r7, #255
	cmp r7, #3
	blo .LBB179_132	@ bb157
.LBB179_133:	@ bb159
	ldrb r7, [r8, #+8]
	cmp r7, #25
	ldreqb r7, [r9, #+8]
	cmpeq r7, #25
	beq .LBB179_138	@ bb162
.LBB179_134:	@ bb160
.LBB179_135:	@ bb161
	ldr r0, .LCPI179_45
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_136:	@ bb152
	ldr r0, [r6, #+16]
	ldr r1, .LCPI179_43
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB179_128	@ bb151.bb156.preheader_crit_edge
.LBB179_137:	@ bb154
	ldr r0, .LCPI179_44
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_138:	@ bb162
	ldr r7, [r9, #+12]
	ldr r8, [r8, #+12]
	cmp r7, #0
	beq .LBB179_140	@ bb167
.LBB179_139:	@ bb162
	cmp r7, r8
	ble .LBB179_190	@ bb166
.LBB179_140:	@ bb167
	ldr r3, [r5, #+12]
	cmp r3, #0
	beq .LBB179_157	@ bb183
.LBB179_141:	@ bb169.preheader
	cmp r8, #1
	cmpne r3, #0
	bne .LBB179_144	@ bb169.preheader.bb173_crit_edge
	b .LBB179_191	@ bb169.preheader.bb174_crit_edge
	.align	4
.LBB179_142:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_72:
 	.long	.str1161189

.LBB179_143:	@ bb169.preheader
	.align	4
.LBB179_144:	@ bb169.preheader.bb173_crit_edge
	mov r2, #2
.LBB179_145:	@ bb173
	add r1, r2, #1
	ldr r3, [r3]
	cmp r2, r8
	beq .LBB179_147	@ bb174.loopexit
.LBB179_146:	@ bb173
	cmp r3, #0
	mov r2, r1
	bne .LBB179_145	@ bb173
.LBB179_147:	@ bb174.loopexit
	sub r2, r1, #1
.LBB179_148:	@ bb174
	cmp r3, #0
	beq .LBB179_192	@ bb177
.LBB179_149:	@ bb175
	ldr r1, [r3, #+16]
	ldrb r0, [r1, #+8]
	cmp r0, #13
	ldreq r0, .LCPI179_47
	ldreq r0, [r0]
	ldreq r1, [r1, #+4]
	ldreq r1, [r1, #+64]
	cmpeq r1, r0
	beq .LBB179_151	@ bb178
	b .LBB179_192	@ bb177
.LBB179_150:	@ bb176
.LBB179_151:	@ bb178
	cmp r7, #0
	beq .LBB179_157	@ bb183
.LBB179_152:	@ bb180.preheader
	cmp r3, #0
	beq .LBB179_156	@ bb181
.LBB179_153:	@ bb180.preheader.bb179_crit_edge
	mov r1, #0
.LBB179_154:	@ bb179
	ldr r3, [r3]
	add r1, r1, #1
	cmp r3, #0
	bne .LBB179_154	@ bb179
.LBB179_155:	@ bb181.loopexit
	add r2, r2, r1
.LBB179_156:	@ bb181
	cmp r2, r7
	bne .LBB179_195	@ bb182
.LBB179_157:	@ bb183
	ldr r9, [r4, #+32]
	ldr r10, [r4, #+56]
	ldr r0, .LCPI179_50
.LBB179_158:	@ bb3.i
	ldr r0, [r0]
	cmp r0, #0
	beq .LBB179_162	@ bb5.i
.LBB179_159:	@ bb.i
	ldr r3, [r0, #+4]
	cmp r3, r9
	ldreq r3, [r0, #+8]
	cmpeq r3, r10
	beq .LBB179_161	@ bb4.i
	b .LBB179_158	@ bb3.i
.LBB179_160:	@ bb1.i
.LBB179_161:	@ bb4.i
	cmp r0, #0
	bne .LBB179_163	@ record_function_format.exit
.LBB179_162:	@ bb5.i
	mov r3, #24
	mov r0, r3
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI179_50
	ldr r2, [r3]
	@comment
str r2, [r0]
	@comment
str r0, [r3]
	@comment
str r9, [r0, #+4]
	@comment
str r10, [r0, #+8]
.LBB179_163:	@ record_function_format.exit
	@comment
str r6, [r0, #+12]
	@comment
str r8, [r0, #+16]
	@comment
str r7, [r0, #+20]
	b .LBB179_173	@ bb200
	.align	2
.LBB179_164:	@ bb184
	mov r0, r4
	emit_nops_till_bundle_end
	bl declare_weak
	b .LBB179_173	@ bb200
	.align	2
.LBB179_165:	@ bb185
	ldrb r3, [r4, #+8]
	cmp r3, #29
	bne .LBB179_168	@ bb188
.LBB179_166:	@ bb186
	ldr r2, [r4, #+48]
	cmp r2, #0
	bne .LBB179_193	@ bb193
.LBB179_167:	@ bb187
	and r3, r3, #255
	cmp r3, #29
	beq .LBB179_169	@ bb194
.LBB179_168:	@ bb188
	ldrb r3, [r4, #+29]
	tst r3, #1
	beq .LBB179_193	@ bb193
.LBB179_169:	@ bb194
	mov r0, r4
	emit_nops_till_bundle_end
	bl decl_function_context
	cmp r0, #0
	bne .LBB179_180	@ bb199
.LBB179_170:	@ bb195
	ldr r7, [r6, #+16]
	ldr r0, [r7, #+20]
	emit_nops_till_bundle_end
	bl get_identifier
	ldrb r7, [r4, #+8]
	mov r1, r0
	cmp r7, #29
	beq .LBB179_194	@ bb196
.LBB179_171:	@ bb197
	ldrb r7, [r4, #+29]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	orr r7, r2, r7, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r0, [r3, #+2]
	orr r2, r0, r2, lsl #8
	orr r7, r7, r2, lsl #16
	bic r7, r7, #1, 24 @ 256
	strb r7, [r3]
	mov r2, r7, lsr #24
	strb r2, [r3, #+3]
	mov r2, r7, lsr #16
	strb r2, [r3, #+2]
	mov r7, r7, lsr #8
	strb r7, [r4, #+29]
.LBB179_172:	@ bb198
	mov r0, r4
	emit_nops_till_bundle_end
	bl assemble_alias
.LBB179_173:	@ bb200
	ldr r3, [r11, #-1532]
	ldr r3, [r3]
	@comment
str r3, [r11, #-1532]
	cmp r3, #0
	bne .LBB179_9	@ bb7
.LBB179_174:	@ return
	sub sp, r11, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB179_175:	@ bb17
	ldr r1, [r7, #+16]
	ldr r0, .LCPI179_20
	emit_nops_till_bundle_end
	bl warning
	b .LBB179_173	@ bb200
.LBB179_176:	@ bb20
	ldr r1, [r7, #+16]
	ldr r0, .LCPI179_21
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_177:	@ bb31
	ldrb r6, [r4, #+10]
	mov r7, r4
	ldrb r3, [r7, #+8]!
	ldrb r2, [r7, #+3]
	orr r6, r6, r2, lsl #8
	ldrb r2, [r7, #+1]
	orr r2, r3, r2, lsl #8
	orr r6, r2, r6, lsl #16
	orr r6, r6, #1, 20 @ 4096
	b .LBB179_27	@ bb25
.LBB179_178:	@ bb48
	ldrb r6, [r4, #+10]
	mov r7, r4
	ldrb r3, [r7, #+8]!
	ldrb r2, [r7, #+3]
	orr r6, r6, r2, lsl #8
	ldrb r2, [r7, #+1]
	orr r2, r3, r2, lsl #8
	orr r6, r2, r6, lsl #16
	orr r6, r6, #2, 20 @ 8192
	b .LBB179_27	@ bb25
.LBB179_179:	@ bb63
	ldrb r6, [r5, #+30]
	ldrb r7, [r5, #+31]
	mov r3, r5
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	strb r2, [r3]
	orr r6, r6, r7, lsl #8
	orr r7, r2, r1, lsl #8
	orr r6, r7, r6, lsl #16
	orr r6, r6, #2, 14 @ 524288
	b .LBB179_24	@ bb23
.LBB179_180:	@ bb199
	ldr r1, [r7, #+16]
	ldr r0, .LCPI179_22
	emit_nops_till_bundle_end
	bl warning
	b .LBB179_173	@ bb200
.LBB179_181:	@ bb89
	ldr r7, .LCPI179_24
	ldr r7, [r7]
	b .LBB179_84	@ bb99
.LBB179_182:	@ bb91
	ldr r7, .LCPI179_26
	ldr r7, [r7]
	b .LBB179_84	@ bb99
.LBB179_183:	@ bb93
	ldr r7, .LCPI179_29
	ldr r7, [r7]
	b .LBB179_84	@ bb99
.LBB179_184:	@ bb127
.LBB179_185:	@ bb133
	ldr r0, .LCPI179_36
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_186:	@ bb135
	ldr r0, .LCPI179_37
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_187:	@ bb137
	@comment
str r6, [r5, #+32]
	b .LBB179_173	@ bb200
.LBB179_188:	@ bb145
	ldr r1, .LCPI179_39
	b .LBB179_98	@ bb120
.LBB179_189:	@ bb147.bb156.preheader_crit_edge
	mov r6, #0
	b .LBB179_129	@ bb156.preheader
.LBB179_190:	@ bb166
	ldr r0, .LCPI179_46
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_191:	@ bb169.preheader.bb174_crit_edge
	mov r2, #1
	b .LBB179_148	@ bb174
.LBB179_192:	@ bb177
	ldr r0, .LCPI179_48
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
.LBB179_193:	@ bb193
	ldr r1, .LCPI179_51
	b .LBB179_98	@ bb120
.LBB179_194:	@ bb196
	ldr r7, .LCPI179_52
	ldr r7, [r7]
	@comment
str r7, [r4, #+48]
	b .LBB179_172	@ bb198
.LBB179_195:	@ bb182
	ldr r0, .LCPI179_49
	emit_nops_till_bundle_end
	bl error
	b .LBB179_173	@ bb200
	.align	4
.LBB179_196:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_20:
 	.long	.str1171190

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_21:
 	.long	.str1181191

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_22:
 	.long	.str1191192

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_23:
 	.long	.str1201193

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_24:
 	.long	byte_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_25:
 	.long	.str1211194

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_26:
 	.long	word_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_27:
 	.long	.str861159

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_28:
 	.long	mode_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_29:
 	.long	ptr_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_30:
 	.long	.str1221195

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_31:
 	.long	.str1231196

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_32:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_33:
 	.long	.str1241197

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_34:
 	.long	.str1251198

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_35:
 	.long	.str1261199

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_36:
 	.long	.str1271200

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_37:
 	.long	.str1281201

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_38:
 	.long	.str1291202

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_39:
 	.long	.str1301203

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_40:
 	.long	.str911164

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_41:
 	.long	.str1311204

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_42:
 	.long	.str941167

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_43:
 	.long	.str1321205

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_44:
 	.long	.str1331206

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_45:
 	.long	.str1341207

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_46:
 	.long	.str1351208

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_47:
 	.long	char_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_48:
 	.long	.str1361209

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_49:
 	.long	.str1371210

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_50:
 	.long	function_format_list

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_51:
 	.long	.str1381211

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI179_52:
 	.long	error_mark_node

	.size decl_attributes, .-decl_attributes


	.globl	combine_strings
	.align	4
combine_strings:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	ldr r3, [r0]
	ldr r2, .LCPI180_0
	ldr r2, [r2]
	ldrb r2, [r2, #+28]
	mov r4, r2, lsr #3
	mov r5, r0
	cmp r3, #0
	beq .LBB180_20	@ bb27
.LBB180_1:	@ bb6.preheader
	cmp r5, #0
	beq .LBB180_34	@ bb6.preheader.bb7_crit_edge
.LBB180_2:	@ bb.nph70
	ldr r3, .LCPI180_1
	ldr r2, [r3]
	mov r6, #0
	mov r7, #1
	mov r1, r5
	mov r3, r6
.LBB180_3:	@ bb2
	ldr r0, [r1, #+4]
	ldr r12, [r1, #+16]
	cmp r0, r2
	addne r7, r7, r12
	subne r7, r7, #1
	subeq r3, r3, r4
	addeq r3, r3, r12
	moveq r6, #1
	b .LBB180_5	@ bb5
.LBB180_4:	@ bb4
.LBB180_5:	@ bb5
	ldr r1, [r1]
	cmp r1, #0
	bne .LBB180_3	@ bb2
.LBB180_6:	@ bb7
	cmp r6, #0
	mlane r7, r7, r4, r3
.LBB180_7:	@ bb8
.LBB180_8:	@ bb9
	mov r0, r7
	emit_nops_till_bundle_end
	bl savealloc
	mov r8, r0
	cmp r5, #0
	beq .LBB180_36	@ bb9.bb21_crit_edge
.LBB180_9:	@ bb9.bb10_crit_edge
	mov r9, #0
	mov r10, #1
.LBB180_10:	@ bb10
	ldr r3, .LCPI180_1
	ldr r3, [r3]
	ldr r2, [r5, #+4]
	cmp r2, r3
	mov r1, #0
	moveq r1, r10
	cmp r2, r3
	mov r3, #1
	moveq r3, r4
	ldr r2, [r5, #+16]
	sub r11, r2, r3
	add r0, r8, r9
	cmp r1, r6
	beq .LBB180_37	@ bb14
.LBB180_11:	@ bb17.preheader
	cmp r11, #0
	ble .LBB180_14	@ bb18
.LBB180_12:	@ bb.nph61
	mov r3, #0
.LBB180_13:	@ bb16
	ldr r2, [r5, #+20]
	ldrsb r2, [r2, +r3]
	str r2, [r0], #+4
	add r3, r3, #1
	cmp r3, r11
	bne .LBB180_13	@ bb16
.LBB180_14:	@ bb18
	mul r11, r11, r4
.LBB180_15:	@ bb19
	add r9, r9, r11
	add r3, r8, r9
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB180_10	@ bb10
.LBB180_16:	@ bb21
	cmp r6, #0
	beq .LBB180_22	@ bb25
.LBB180_17:	@ bb24.preheader
	tst r4, #255
	beq .LBB180_23	@ bb29
.LBB180_18:	@ bb.nph
	mov r5, #1
	tst r4, #255
	mov r2, r4
	moveq r2, r5
	mov r5, #0
	mov r1, #0
.LBB180_19:	@ bb23
	strb r1, [r3, +r5]
	add r5, r5, #1
	cmp r5, r2
	bne .LBB180_19	@ bb23
	b .LBB180_23	@ bb29
.LBB180_20:	@ bb27
	ldr r6, .LCPI180_1
	ldr r6, [r6]
	ldr r8, [r5, #+4]
	ldr r7, [r5, #+16]
	cmp r8, r6
	beq .LBB180_26	@ bb27.bb30_crit_edge
.LBB180_21:	@ bb27.bb32_crit_edge
	mov r6, #0
	b .LBB180_28	@ bb32
.LBB180_22:	@ bb25
	mov r5, #0
	strb r5, [r3]
.LBB180_23:	@ bb29
	mov r0, #28
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r8, [r0, #+20]
	@comment
str r7, [r0, #+16]
	ldrb r5, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r5, r5, r1, lsl #8
	mov r5, r5, lsl #16
	ldrb r1, [r3, #+1]
	orr r5, r5, r1, lsl #8
	orr r5, r5, #2, 24 @ 512
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	strb r2, [r3]
	cmp r6, #0
	beq .LBB180_25	@ bb29.bb32_crit_edge
.LBB180_24:	@ bb29.bb30_crit_edge
	mov r5, r0
	b .LBB180_27	@ bb30
.LBB180_25:	@ bb29.bb32_crit_edge
	mov r5, r0
	b .LBB180_28	@ bb32
.LBB180_26:	@ bb27.bb30_crit_edge
	mov r6, #1
.LBB180_27:	@ bb30
	mov r0, r7
	mov r1, r4
	emit_nops_till_bundle_end
	bl __divsi3
	mov r7, r0
.LBB180_28:	@ bb32
	ldr r3, .LCPI180_2
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB180_31	@ bb39
.LBB180_29:	@ bb33
	ldr r3, .LCPI180_3
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI180_4
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB180_38	@ bb35
.LBB180_30:	@ bb34
.LBB180_31:	@ bb39
	sub r0, r7, #1
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	emit_nops_till_bundle_end
	bl build_index_type
	mov r1, r0
	ldr r3, .LCPI180_5
	ldr r2, .LCPI180_0
	cmp r6, #0
	moveq r2, r3
	ldr r0, [r2]
.LBB180_32:	@ bb39
	emit_nops_till_bundle_end
	bl build_array_type
	@comment
str r0, [r5, #+4]
.LBB180_33:	@ bb43
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 24 @ 512
	orr r3, r3, #1, 14 @ 262144
	mov r0, r3, lsr #8
	strb r0, [r2, #+1]
	strb r1, [r2]
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	mov r0, r5
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB180_34:	@ bb6.preheader.bb7_crit_edge
	mov r6, #0
	mov r7, #1
	mov r3, r6
	b .LBB180_6	@ bb7
.LBB180_35:	@ bb3
.LBB180_36:	@ bb9.bb21_crit_edge
	mov r3, r8
	b .LBB180_16	@ bb21
.LBB180_37:	@ bb14
	ldr r1, [r5, #+20]
	mov r2, r11
	emit_nops_till_bundle_end
	bl memcpy
	b .LBB180_15	@ bb19
.LBB180_38:	@ bb35
	ldr r3, .LCPI180_5
	ldr r2, .LCPI180_0
	cmp r6, #0
	moveq r2, r3
	ldr r0, [r2]
	mov r1, #1
	mov r2, #0
	emit_nops_till_bundle_end
	bl build_type_variant
	mov r6, r0
	sub r0, r7, #1
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	emit_nops_till_bundle_end
	bl build_index_type
	mov r1, r0
	mov r0, r6
	b .LBB180_32	@ bb39
	.align	4
.LBB180_39:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI180_0:
 	.long	wchar_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI180_1:
 	.long	wchar_array_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI180_2:
 	.long	warn_write_strings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI180_3:
 	.long	flag_traditional

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI180_4:
 	.long	flag_writable_strings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI180_5:
 	.long	char_type_node

	.size combine_strings, .-combine_strings


	.align	4
declare_hidden_char_array:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r1
	mov r5, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	ldr r3, .LCPI181_0
	ldr r6, [r3]
	ldr r3, [r6, #+4]
	ldr r3, [r3, #+56]
	ldr r3, [r3, #+12]
	add r7, r0, #1
	cmp r3, r7
	blt .LBB181_2	@ bb1
.LBB181_1:	@ bb
	ldr r3, .LCPI181_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB181_3	@ bb2
.LBB181_2:	@ bb1
	mov r1, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl build_int_2_wide
	emit_nops_till_bundle_end
	bl build_index_type
	mov r1, r0
	ldr r6, .LCPI181_2
	ldr r0, [r6]
	emit_nops_till_bundle_end
	bl build_array_type
	mov r6, r0
.LBB181_3:	@ bb2
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_identifier
	mov r1, r0
	mov r0, #33
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_decl
	mov r5, r0
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #74, 20 @ 303104
	mov r0, r3, lsr #8
	strb r0, [r2, #+1]
	strb r1, [r2]
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	mov r3, #0
	@comment
str r3, [r5, #+16]
	ldrb r3, [r5, #+31]
	ldrb r2, [r5, #+30]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #5, 18 @ 81920
	orr r3, r3, #1, 10 @ 4194304
	mov r0, r3, lsr #8
	strb r0, [r2, #+1]
	strb r1, [r2]
	mov r3, r3, lsr #16
	strb r3, [r5, #+30]
	mov r0, r7
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_string
	mov r4, r0
	@comment
str r6, [r4, #+4]
	@comment
str r4, [r5, #+48]
	mov r0, r5
	emit_nops_till_bundle_end
	bl pushdecl
	mov r1, r4
	mov r2, #0
	emit_nops_till_bundle_end
	bl finish_decl
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB181_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI181_0:
 	.long	char_array_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI181_1:
 	.long	warn_larger_than

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI181_2:
 	.long	char_type_node

	.size declare_hidden_char_array, .-declare_hidden_char_array


	.globl	pop_iterator_stack
	.align	4
pop_iterator_stack:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI182_0
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB182_6	@ bb
.LBB182_1:	@ bb1
	ldr r2, [r3]
	cmp r2, #0
	beq .LBB182_5	@ isn_append.exit
.LBB182_2:	@ bb.i
	ldr r1, .LCPI182_1
	ldr r1, [r1]
	cmp r1, #0
	ldr r1, .LCPI182_1
	@comment
streq r2, [r1]
	ldrne r0, [r1, #+4]
	@comment
strne r2, [r0, #+20]
	b .LBB182_4	@ bb2.i
.LBB182_3:	@ bb2.i
.LBB182_4:	@ bb2.i
	ldr r3, [r3, #+4]
	@comment
str r3, [r1, #+4]
.LBB182_5:	@ isn_append.exit
	ldr r3, .LCPI182_0
	ldr r2, [r3]
	ldr r2, [r2, #+8]
	@comment
str r2, [r3]
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB182_6:	@ bb
	emit_nops_till_bundle_end
	bl abort
.LBB182_7:	@ bb1.i
	.align	4
.LBB182_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI182_0:
 	.long	iter_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI182_1:
 	.long	sublevel_ixpansions

	.size pop_iterator_stack, .-pop_iterator_stack


	.globl	push_iterator_stack
	.align	4
push_iterator_stack:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI183_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	cmp r3, #11
	ldrle r0, .LCPI183_0
	movle r1, #12
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB183_1:	@ bb
.LBB183_2:	@ bb1
	ldr r3, .LCPI183_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB183_9	@ bb1.bb18_crit_edge
.LBB183_3:	@ bb5
	ldr r2, .LCPI183_0
	ldr r1, [r2, #+12]
	add r1, r1, #12
	@comment
str r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI183_0
	streqb r3, [r0, #+40]
.LBB183_4:	@ bb13
.LBB183_5:	@ bb14
	ldr r3, .LCPI183_0
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI183_0
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB183_6:	@ bb16
.LBB183_7:	@ bb17
	ldr r3, .LCPI183_0
	@comment
str r1, [r3, #+8]
.LBB183_8:	@ bb18
	mov r3, #0
	@comment
str r3, [r2]
	@comment
str r3, [r2, #+4]
	ldr r3, .LCPI183_1
	ldr r1, [r3]
	@comment
str r1, [r2, #+8]
	@comment
str r2, [r3]
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB183_9:	@ bb1.bb18_crit_edge
	mov r2, #0
	b .LBB183_8	@ bb18
	.align	4
.LBB183_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI183_0:
 	.long	ixp_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI183_1:
 	.long	iter_stack

	.size push_iterator_stack, .-push_iterator_stack


	.align	4
add_ixpansion:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	ldr r12, .LCPI184_0
	ldr r12, [r12]
	ldr r4, [sp, #+24]
	mov r5, r3
	mov r6, r2
	mov r7, r1
	mov r8, r0
	cmp r12, #0
	beq .LBB184_11	@ return
.LBB184_1:	@ bb
	ldr r3, .LCPI184_1
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	cmp r3, #23
	ldrle r0, .LCPI184_1
	movle r1, #24
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB184_2:	@ bb1
.LBB184_3:	@ bb2
	ldr r3, .LCPI184_1
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB184_12	@ bb2.bb19_crit_edge
.LBB184_4:	@ bb6
	ldr r2, .LCPI184_1
	ldr r1, [r2, #+12]
	add r1, r1, #24
	@comment
str r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI184_1
	streqb r3, [r0, #+40]
.LBB184_5:	@ bb14
.LBB184_6:	@ bb15
	ldr r3, .LCPI184_1
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI184_1
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB184_7:	@ bb17
.LBB184_8:	@ bb18
	ldr r3, .LCPI184_1
	@comment
str r1, [r3, #+8]
.LBB184_9:	@ bb19
	@comment
str r8, [r2]
	@comment
str r7, [r2, #+4]
	@comment
str r6, [r2, #+8]
	@comment
str r5, [r2, #+12]
	@comment
str r4, [r2, #+16]
	ldr r3, .LCPI184_0
	ldr r1, [r3]
	ldr r1, [r1]
	@comment
str r1, [r2, #+20]
	ldr r1, [r3]
	@comment
str r2, [r1]
	ldr r3, [r3]
	ldr r1, [r3, #+4]
	cmp r1, #0
	@comment
streq r2, [r3, #+4]
.LBB184_10:	@ bb20
.LBB184_11:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB184_12:	@ bb2.bb19_crit_edge
	mov r2, #0
	b .LBB184_9	@ bb19
	.align	4
.LBB184_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI184_0:
 	.long	iter_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI184_1:
 	.long	ixp_obstack

	.size add_ixpansion, .-add_ixpansion


	.align	4
collect_iterators:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, #0
	mov r5, r1
	mov r6, r0
.LBB185_1:	@ tailrecurse
	cmp r6, #0
	beq .LBB185_36	@ bb36
.LBB185_2:	@ bb1
	ldrb r3, [r6, #+8]
	cmp r3, #107
	bgt .LBB185_13	@ bb1
.LBB185_3:	@ bb1
	cmp r3, #3
	beq .LBB185_10	@ bb17.loopexit
.LBB185_4:	@ bb1
	cmp r3, #5
	beq .LBB185_36	@ bb36
.LBB185_5:	@ bb1
	cmp r3, #33
	bne .LBB185_17	@ bb23
.LBB185_6:	@ bb2
	ldrb r3, [r6, #+31]
	tst r3, #16
	beq .LBB185_36	@ bb36
.LBB185_7:	@ bb6
	ldrb r3, [r6, #+9]
	tst r3, #32
	bne .LBB185_36	@ bb36
.LBB185_8:	@ bb12
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl value_member
	cmp r0, #0
	bne .LBB185_36	@ bb36
.LBB185_9:	@ bb14
	mov r0, #0
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	b .LBB185_37	@ bb36
.LBB185_10:	@ bb17.loopexit
	cmp r6, #0
	beq .LBB185_36	@ bb36
.LBB185_11:	@ bb17.loopexit.bb16_crit_edge
	mov r1, r5
.LBB185_12:	@ bb16
	ldr r0, [r6, #+16]
	emit_nops_till_bundle_end
	bl collect_iterators
	ldr r6, [r6]
	cmp r6, #0
	mov r1, r0
	bne .LBB185_12	@ bb16
	b .LBB185_35	@ bb32.bb36_crit_edge
.LBB185_13:	@ bb1
	cmp r3, #108
	bne .LBB185_17	@ bb23
.LBB185_14:	@ bb19
	ldr r3, .LCPI185_0
	ldr r1, [r3]
	mov r0, r6
	emit_nops_till_bundle_end
	bl value_member
	cmp r0, #0
	bne .LBB185_36	@ bb36
.LBB185_15:	@ bb21
	ldr r7, .LCPI185_0
	ldr r2, [r7]
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r7]
.LBB185_16:	@ tailrecurse.backedge
	ldr r6, [r6, #+16]
	b .LBB185_1	@ tailrecurse
.LBB185_17:	@ bb23
	ldr r2, .LCPI185_1
	ldr r2, [r2]
	ldr r2, [r2, +r3, lsl #2]
	ldrsb r2, [r2]
	cmp r2, #113
	bgt .LBB185_38	@ bb23
.LBB185_18:	@ bb23
	cmp r2, #100
	bgt .LBB185_23	@ bb23
.LBB185_19:	@ bb23
	cmp r2, #49
	beq .LBB185_16	@ tailrecurse.backedge
.LBB185_20:	@ bb23
	cmp r2, #50
	cmpne r2, #60
	bne .LBB185_36	@ bb36
.LBB185_21:	@ bb23
.LBB185_22:	@ bb25
	ldr r0, [r6, #+20]
	mov r1, r5
	emit_nops_till_bundle_end
	bl collect_iterators
	ldr r6, [r6, #+16]
	mov r5, r0
	b .LBB185_1	@ tailrecurse
.LBB185_23:	@ bb23
	cmp r2, #101
	bne .LBB185_36	@ bb36
.LBB185_24:	@ bb26
	ldr r2, .LCPI185_2
	ldr r2, [r2]
	ldr r4, [r2, +r3, lsl #2]
	cmp r3, #108
	bgt .LBB185_29	@ bb26
.LBB185_25:	@ bb26
	cmp r3, #50
	beq .LBB185_30	@ bb27
.LBB185_26:	@ bb26
	cmp r3, #51
	beq .LBB185_31	@ bb28
.LBB185_27:	@ bb26
	cmp r3, #52
	moveq r4, #1
	b .LBB185_32	@ bb33.preheader
.LBB185_28:	@ bb29
.LBB185_29:	@ bb26
	cmp r3, #109
	bne .LBB185_32	@ bb33.preheader
	b .LBB185_36	@ bb36
.LBB185_30:	@ bb27
	mov r4, #2
	b .LBB185_32	@ bb33.preheader
.LBB185_31:	@ bb28
	mov r4, #3
.LBB185_32:	@ bb33.preheader
	cmp r4, #1
	blt .LBB185_36	@ bb36
.LBB185_33:	@ bb.nph47
	add r6, r6, #16
	mov r7, #0
	mov r1, r5
.LBB185_34:	@ bb32
	ldr r0, [r6], #+4
	emit_nops_till_bundle_end
	bl collect_iterators
	add r7, r7, #1
	cmp r7, r4
	mov r1, r0
	bne .LBB185_34	@ bb32
.LBB185_35:	@ bb32.bb36_crit_edge
	mov r5, r0
.LBB185_36:	@ bb36
	mov r0, r5
.LBB185_37:	@ bb36
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB185_38:	@ bb23
	cmp r2, #114
	beq .LBB185_24	@ bb26
	b .LBB185_36	@ bb36
	.align	4
.LBB185_39:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI185_0:
 	.long	save_exprs

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI185_1:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI185_2:
 	.long	tree_code_length

	.size collect_iterators, .-collect_iterators


	.globl	iterator_for_loop_start
	.align	4
iterator_for_loop_start:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	sfi_sub sp, sp, #4
	mov r4, r0
	ldrb r3, [r4, #+10]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #2, 20 @ 8192
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	mov r3, #0
	@comment
str r3, [sp]
	mov r1, #0
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl add_ixpansion
	ldr r3, .LCPI186_0
	ldr r1, [r3]
	ldr r0, [r4, #+48]
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl expand_expr
	ldr r3, [r4, #+68]
	cmp r3, #0
	moveq r0, r4
	emit_nops_till_bundle_end
	bleq expand_decl
.LBB186_1:	@ bb.i
.LBB186_2:	@ iterator_loop_prologue.exit
	ldr r3, .LCPI186_1
	ldr r3, [r3]
	ldr r1, [r4, #+4]
	mov r0, #45
	mov r2, r4
	emit_nops_till_bundle_end
	bl build
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldr r3, .LCPI186_0
	ldr r1, [r3]
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl expand_expr
	mov r0, #1
	emit_nops_till_bundle_end
	bl expand_start_loop_continue_elsewhere
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+8]!
	ldrb r1, [r4, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r4, #+1]
	orr r1, r2, r1, lsl #8
	orr r3, r1, r3, lsl #16
	orr r3, r3, #2, 20 @ 8192
	mov r3, r3, lsr #8
	strb r3, [r4, #+1]
	strb r2, [r4]
	sfi_add sp, sp, #4
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB186_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI186_0:
 	.long	const0_rtx

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI186_1:
 	.long	integer_zero_node

	.size iterator_for_loop_start, .-iterator_for_loop_start


	.align	4
iterator_loop_epilogue:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r1, #0
	beq .LBB187_2	@ bb1
.LBB187_1:	@ bb
	mov r0, #0
	mvn r1, #0
	emit_nops_till_bundle_end
	bl emit_note
	@comment
str r0, [r5]
.LBB187_2:	@ bb1
	emit_nops_till_bundle_end
	bl expand_loop_continue_here
	ldr r3, .LCPI187_0
	ldr r2, [r3]
	mov r5, #0
	mov r0, #56
	mov r1, r6
	mov r3, #0
	emit_nops_till_bundle_end
	bl build_binary_op
	mov r3, r0
	ldr r1, [r6, #+4]
	mov r0, #45
	mov r2, r6
	emit_nops_till_bundle_end
	bl build
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldr r3, .LCPI187_1
	ldr r1, [r3]
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl expand_expr
	ldr r2, [r6, #+48]
	mov r0, #95
	mov r1, r6
	mov r3, #0
	emit_nops_till_bundle_end
	bl build_binary_op
	mov r1, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl expand_exit_loop_if_false
	emit_nops_till_bundle_end
	bl expand_end_loop
	ldrb r3, [r6, #+9]
	mov r2, r6
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r0, [r2, #+2]
	orr r1, r0, r1, lsl #8
	orr r3, r3, r1, lsl #16
	bic r3, r3, #2, 20 @ 8192
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, r3, lsr #16
	strb r1, [r2, #+2]
	mov r3, r3, lsr #8
	strb r3, [r6, #+9]
	ldr r3, .LCPI187_2
	ldr r3, [r3]
	cmp r3, #0
	moveq r3, #0
	@comment
streq r3, [r6, #+68]
.LBB187_3:	@ bb2
.LBB187_4:	@ bb3
	cmp r4, #0
	beq .LBB187_6	@ return
.LBB187_5:	@ bb4
	mov r0, #0
	mvn r1, #0
	emit_nops_till_bundle_end
	bl emit_note
	@comment
str r0, [r4]
.LBB187_6:	@ return
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB187_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI187_0:
 	.long	integer_one_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI187_1:
 	.long	const0_rtx

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI187_2:
 	.long	iter_stack

	.size iterator_loop_epilogue, .-iterator_loop_epilogue


	.globl	iterator_for_loop_end
	.align	4
iterator_for_loop_end:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r4, r0
	mov r1, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl iterator_loop_epilogue
	ldrb r3, [r4, #+9]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r0, [r2, #+2]
	orr r1, r0, r1, lsl #8
	orr r3, r3, r1, lsl #16
	bic r3, r3, #2, 20 @ 8192
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, r3, lsr #16
	strb r1, [r2, #+2]
	mov r3, r3, lsr #8
	strb r3, [r4, #+9]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.size iterator_for_loop_end, .-iterator_for_loop_end


	.align	4
expand_stmt_with_iterators_1:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_sub sp, sp, #12
	mov r4, r0
	cmp r1, #0
	bne .LBB189_3	@ bb1
.LBB189_1:	@ bb
	mov r0, r4
	emit_nops_till_bundle_end
	bl expand_expr_stmt
.LBB189_2:	@ bb
	sfi_add sp, sp, #12
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB189_3:	@ bb1
	ldr r3, .LCPI189_0
	ldr r3, [r3]
	ldr r5, [r1, #+16]
	ldr r0, [r5, #+48]
	ldr r6, [r1]
	mov r2, #0
	mov r1, r3
	mov r3, #0
	emit_nops_till_bundle_end
	bl expand_expr
	ldr r3, [r5, #+68]
	cmp r3, #0
	moveq r0, r5
	emit_nops_till_bundle_end
	bleq expand_decl
.LBB189_4:	@ bb.i
.LBB189_5:	@ iterator_loop_prologue.exit
	mov r7, #0
	mvn r8, #0
	mov r0, #0
	mov r1, r8
	emit_nops_till_bundle_end
	bl emit_note
	mov r9, r0
	ldr r3, .LCPI189_1
	ldr r3, [r3]
	ldr r1, [r5, #+4]
	mov r0, #45
	mov r2, r5
	emit_nops_till_bundle_end
	bl build
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	ldr r3, .LCPI189_0
	ldr r1, [r3]
	mov r2, #0
	mov r3, r7
	emit_nops_till_bundle_end
	bl expand_expr
	mov r0, #1
	emit_nops_till_bundle_end
	bl expand_start_loop_continue_elsewhere
	ldrb r3, [r5, #+10]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 20 @ 8192
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	mov r0, r7
	mov r1, r8
	emit_nops_till_bundle_end
	bl emit_note
	mov r7, r0
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl expand_stmt_with_iterators_1
	add r1, sp, #4
	add r2, sp, #8
	mov r0, r5
	emit_nops_till_bundle_end
	bl iterator_loop_epilogue
	ldr r3, .LCPI189_2
	ldr r4, [r3]
	cmp r4, #0
	beq .LBB189_19	@ delete_ixpansion.exit
.LBB189_6:	@ iterator_loop_prologue.exit.bb.i3_crit_edge
	mov r6, #0
.LBB189_7:	@ bb.i3
	ldr r3, [r4]
	cmp r3, r5
	bne .LBB189_20	@ bb.i3.bb15.i_crit_edge
.LBB189_8:	@ bb1.i4
	ldr r3, [r4, #+4]
	cmp r3, #0
	beq .LBB189_21	@ bb2.i5
.LBB189_9:	@ bb3.i6
	ldr r2, [r4, #+8]
	ldr r8, [r3, #+12]
	cmp r2, r8
	beq .LBB189_11	@ bb6.i
.LBB189_10:	@ bb4.i7
	mov r0, r8
	emit_nops_till_bundle_end
	bl delete_insn
	ldr r3, [r4, #+8]
	ldr r8, [r8, #+12]
	cmp r3, r8
	bne .LBB189_10	@ bb4.i7
.LBB189_11:	@ bb6.i
	ldr r3, [r4, #+16]
	ldr r2, [r4, #+12]
	ldr r8, [r2, #+12]
	b .LBB189_13	@ bb7.i
.LBB189_12:	@ bb7.i
	mov r0, r8
	emit_nops_till_bundle_end
	bl delete_insn
	ldr r3, [r4, #+16]
	ldr r8, [r8, #+12]
.LBB189_13:	@ bb7.i
	cmp r3, r8
	bne .LBB189_12	@ bb7.i
.LBB189_14:	@ bb9.i
	ldr r3, [r4, #+20]
	cmp r6, #0
	@comment
strne r3, [r6, #+20]
	ldreq r2, .LCPI189_2
	@comment
streq r3, [r2]
	b .LBB189_16	@ bb12.i
.LBB189_15:	@ bb11.i
.LBB189_16:	@ bb12.i
	ldr r3, .LCPI189_2
	ldr r3, [r3, #+4]
	cmp r3, r4
	ldreq r3, .LCPI189_2
	@comment
streq r6, [r3, #+4]
.LBB189_17:	@ bb13.i
.LBB189_18:	@ bb15.i
	ldr r4, [r4, #+20]
	cmp r4, #0
	bne .LBB189_7	@ bb.i3
.LBB189_19:	@ delete_ixpansion.exit
	ldr r3, [sp, #+4]
	ldr r2, [sp, #+8]
	@comment
str r2, [sp]
	mov r0, r5
	mov r1, r9
	mov r2, r7
	emit_nops_till_bundle_end
	bl add_ixpansion
	b .LBB189_2	@ bb
.LBB189_20:	@ bb.i3.bb15.i_crit_edge
	mov r6, r4
	b .LBB189_18	@ bb15.i
.LBB189_21:	@ bb2.i5
	ldr r1, .LCPI189_3
	mov r0, r5
	emit_nops_till_bundle_end
	bl error_with_decl
	b .LBB189_14	@ bb9.i
.LBB189_22:	@ bb10.i
	.align	4
.LBB189_23:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI189_0:
 	.long	const0_rtx

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI189_1:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI189_2:
 	.long	sublevel_ixpansions

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI189_3:
 	.long	.str1235

	.size expand_stmt_with_iterators_1, .-expand_stmt_with_iterators_1


	.globl	iterator_expand
	.align	4
iterator_expand:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r4, r0
	mov r1, #0
	ldr r3, .LCPI190_0
	@comment
str r1, [r3]
	emit_nops_till_bundle_end
	bl collect_iterators
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl expand_stmt_with_iterators_1
	ldr r3, .LCPI190_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB190_7	@ bb2.i
.LBB190_1:	@ bb.i
	ldr r2, .LCPI190_2
	ldr r2, [r2, #+4]
	cmp r2, #0
	ldrne r2, .LCPI190_2
	ldrne r2, [r2]
	cmpne r2, #0
	bne .LBB190_3	@ bb.i.i
	b .LBB190_6	@ bb2thread-split.i
.LBB190_2:	@ bb1.i
.LBB190_3:	@ bb.i.i
	ldr r1, [r3]
	cmp r1, #0
	@comment
streq r2, [r3]
	ldrne r1, [r3, #+4]
	@comment
strne r2, [r1, #+20]
	b .LBB190_5	@ bb2.i.i
.LBB190_4:	@ bb2.i.i
.LBB190_5:	@ bb2.i.i
	ldr r2, .LCPI190_2
	ldr r2, [r2, #+4]
	@comment
str r2, [r3, #+4]
.LBB190_6:	@ bb2thread-split.i
	ldr r3, .LCPI190_1
	ldr r3, [r3]
.LBB190_7:	@ bb2.i
	cmp r3, #0
	bne .LBB190_11	@ istack_sublevel_to_current.exit
.LBB190_8:	@ bb3.i
	ldr r3, .LCPI190_3
	ldr r3, [r3, #+4]
	ldr r2, .LCPI190_4
	ldr r1, [r2]
	cmp r3, r1
	bhs .LBB190_10	@ bb6.i
.LBB190_9:	@ bb4.i
	ldr r3, .LCPI190_3
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB190_13	@ bb5.i
.LBB190_10:	@ bb6.i
	ldr r0, .LCPI190_3
	emit_nops_till_bundle_end
	bl obstack_free
.LBB190_11:	@ istack_sublevel_to_current.exit
	ldr r3, .LCPI190_2
	mov r2, #0
	@comment
str r2, [r3, #+4]
	@comment
str r2, [r3]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB190_12:	@ bb1.i.i
.LBB190_13:	@ bb5.i
	ldr r3, .LCPI190_3
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB190_11	@ istack_sublevel_to_current.exit
	.align	4
.LBB190_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI190_0:
 	.long	save_exprs

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI190_1:
 	.long	iter_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI190_2:
 	.long	sublevel_ixpansions

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI190_3:
 	.long	ixp_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI190_4:
 	.long	ixp_firstobj

	.size iterator_expand, .-iterator_expand


	.globl	init_iterators
	.align	4
init_iterators:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r4, .LCPI191_0
	mov r0, r4
	emit_nops_till_bundle_end
	bl gcc_obstack_init
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	ldrlt r0, .LCPI191_0
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB191_1:	@ bb
.LBB191_2:	@ bb1
	ldr r3, .LCPI191_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB191_9	@ bb1.bb18_crit_edge
.LBB191_3:	@ bb12
	ldr r2, .LCPI191_0
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI191_0
	streqb r3, [r0, #+40]
.LBB191_4:	@ bb13
.LBB191_5:	@ bb14
	ldr r3, .LCPI191_0
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI191_0
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB191_6:	@ bb16
.LBB191_7:	@ bb17
	ldr r3, .LCPI191_0
	@comment
str r1, [r3, #+8]
.LBB191_8:	@ bb18
	ldr r3, .LCPI191_1
	@comment
str r2, [r3]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB191_9:	@ bb1.bb18_crit_edge
	mov r2, #0
	b .LBB191_8	@ bb18
	.align	4
.LBB191_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI191_0:
 	.long	ixp_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI191_1:
 	.long	ixp_firstobj

	.size init_iterators, .-init_iterators


	.align	4
decl_name:
	ldr r3, [r0, #+32]
	ldr r0, [r3, #+16]
	sfi_bx lr
	.size decl_name, .-decl_name


	.globl	interim_eh
	.align	4
interim_eh:
	sfi_bx lr
	.size interim_eh, .-interim_eh


	.globl	exact_log2_wide
	.align	4
exact_log2_wide:
	cmp r0, #0
	beq .LBB194_6	@ entry.bb5_crit_edge
.LBB194_1:	@ bb
	rsb r3, r0, #0
	and r3, r3, r0
	cmp r3, r0
	bne .LBB194_6	@ entry.bb5_crit_edge
.LBB194_2:	@ bb3.preheader
	mov r3, r0, lsr #1
	cmp r3, #0
	beq .LBB194_7	@ bb3.preheader.bb5_crit_edge
.LBB194_3:	@ bb3.preheader.bb2_crit_edge
	mov r0, #0
.LBB194_4:	@ bb2
	mov r3, r3, lsr #1
	add r0, r0, #1
	cmp r3, #0
	bne .LBB194_4	@ bb2
.LBB194_5:	@ bb5
	sfi_bx lr
.LBB194_6:	@ entry.bb5_crit_edge
	mvn r0, #0
	b .LBB194_5	@ bb5
.LBB194_7:	@ bb3.preheader.bb5_crit_edge
	mov r0, #0
	b .LBB194_5	@ bb5
	.size exact_log2_wide, .-exact_log2_wide


	.globl	floor_log2_wide
	.align	4
floor_log2_wide:
	cmp r0, #0
	beq .LBB195_5	@ entry.bb2_crit_edge
.LBB195_1:	@ entry.bb_crit_edge
	mov r3, #0
.LBB195_2:	@ bb
	mov r0, r0, lsr #1
	add r3, r3, #1
	cmp r0, #0
	bne .LBB195_2	@ bb
.LBB195_3:	@ bb2.loopexit
	sub r0, r3, #1
.LBB195_4:	@ bb2
	sfi_bx lr
.LBB195_5:	@ entry.bb2_crit_edge
	mvn r0, #0
	b .LBB195_4	@ bb2
	.size floor_log2_wide, .-floor_log2_wide


	.globl	strip_off_ending
	.align	4
strip_off_ending:
	cmp r1, #3
	blt .LBB196_2	@ bb2
.LBB196_1:	@ bb
	add r3, r1, r0
	ldrb r2, [r3, #-2]!
	cmp r2, #46
	beq .LBB196_6	@ bb1
.LBB196_2:	@ bb2
	cmp r1, #4
	blt .LBB196_4	@ bb5
.LBB196_3:	@ bb3
	add r3, r1, r0
	ldrb r2, [r3, #-3]!
	cmp r2, #46
	beq .LBB196_6	@ bb1
.LBB196_4:	@ bb5
	cmp r1, #5
	blt .LBB196_7	@ return
.LBB196_5:	@ bb6
	add r3, r1, r0
	ldrb r2, [r3, #-4]!
	cmp r2, #46
	sfi_bxne lr
.LBB196_6:	@ bb1
	mov r2, #0
	strb r2, [r3]
	sfi_bx lr
.LBB196_7:	@ return
	sfi_bx lr
	.size strip_off_ending, .-strip_off_ending


	.globl	output_file_directive
	.align	4
output_file_directive:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	b .LBB197_3	@ bb2
.LBB197_1:	@ bb
	add r3, r4, r0
	ldrb r3, [r3, #-1]
	cmp r3, #47
	beq .LBB197_4	@ bb3
.LBB197_2:	@ bb1
	sub r0, r0, #1
.LBB197_3:	@ bb2
	cmp r0, #0
	bgt .LBB197_1	@ bb
.LBB197_4:	@ bb3
	add r3, r4, r0
	ldr r1, .LCPI197_0
	ldr r2, .LCPI197_1
	mov r0, r5
	emit_nops_till_bundle_end
	bl fprintf
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB197_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI197_0:
 	.long	.str821335

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI197_1:
 	.long	.str831336

	.size output_file_directive, .-output_file_directive


	.globl	report_error_function
	.align	4
report_error_function:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI198_0
	ldrb r3, [r3]
	mov r4, r0
	teq r3, #1
	bne .LBB198_2	@ bb1
.LBB198_1:	@ bb
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI198_1
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI198_0
	mov r2, #0
	strb r2, [r3]
.LBB198_2:	@ bb1
	ldr r3, .LCPI198_2
	ldr r3, [r3]
	mov r0, r4
	@ implicit-def: lr
	mov lr, pc
	bx r3
	ldr r3, .LCPI198_3
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB198_12	@ return
.LBB198_3:	@ bb2
	ldr r3, [r3, #+4]
	cmp r3, #0
	ldrne r3, .LCPI198_4
	ldrne r3, [r3]
	ldrne r2, .LCPI198_5
	ldrne r2, [r2]
	cmpne r2, r3
	bne .LBB198_5	@ bb4
	b .LBB198_12	@ return
.LBB198_4:	@ bb3
.LBB198_5:	@ bb4
	ldr r3, .LCPI198_6
	ldr r3, [r3]
	cmp r3, r4
	bne .LBB198_12	@ return
.LBB198_6:	@ bb5
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI198_7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI198_3
	ldr r3, [r3]
	ldr r4, [r3, #+4]
	cmp r4, #0
	beq .LBB198_11	@ bb10
.LBB198_7:	@ bb5.bb6_crit_edge
	mov r5, #2
.LBB198_8:	@ bb6
	ldr r6, [r4]
	ldr r7, [r4, #+8]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI198_8
	mov r2, r6
	mov r3, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, [r4, #+4]
	cmp r3, #0
	beq .LBB198_10	@ bb9.backedge
.LBB198_9:	@ bb7
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI198_9
	emit_nops_till_bundle_end
	bl fprintf
.LBB198_10:	@ bb9.backedge
	ldr r4, [r4, #+4]
	cmp r4, #0
	bne .LBB198_8	@ bb6
.LBB198_11:	@ bb10
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI198_10
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI198_5
	ldr r3, [r3]
	ldr r2, .LCPI198_4
	@comment
str r3, [r2]
.LBB198_12:	@ return
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB198_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_0:
 	.long	need_error_newline.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_1:
 	.long	.str811334

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_2:
 	.long	print_error_function

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_3:
 	.long	input_file_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_4:
 	.long	last_error_tick

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_5:
 	.long	input_file_stack_tick

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_6:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_7:
 	.long	.str841339

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_8:
 	.long	.str851340

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_9:
 	.long	.str861341

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI198_10:
 	.long	.str871342

	.size report_error_function, .-report_error_function


	.globl	default_print_error_function
	.align	4
default_print_error_function:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI199_0
	ldr r3, [r3]
	ldr r2, .LCPI199_1
	ldr r2, [r2]
	mov r4, r0
	cmp r3, r2
	beq .LBB199_9	@ return
.LBB199_1:	@ bb
	ldr r3, .LCPI199_2
	@comment
str r3, [sp]
	cmp r2, #0
	beq .LBB199_4	@ bb3
.LBB199_2:	@ bb1
	ldr r3, [r2, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #16
	ldreq r3, .LCPI199_3
	@comment
streq r3, [sp]
.LBB199_3:	@ bb2
.LBB199_4:	@ bb3
	cmp r4, #0
	beq .LBB199_6	@ bb5
.LBB199_5:	@ bb4
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI199_4
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
.LBB199_6:	@ bb5
	ldr r3, .LCPI199_1
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB199_10	@ bb6
.LBB199_7:	@ bb7
	ldr r3, .LCPI199_6
	ldr r3, [r3]
	mov r1, sp
	@ implicit-def: lr
	mov lr, pc
	bx r3
	mov r4, r0
	ldr r5, [sp]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI199_7
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl fprintf
.LBB199_8:	@ bb8
	ldr r3, .LCPI199_1
	ldr r3, [r3]
	ldr r2, .LCPI199_0
	@comment
str r3, [r2]
.LBB199_9:	@ return
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB199_10:	@ bb6
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI199_5
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB199_8	@ bb8
	.align	4
.LBB199_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_0:
 	.long	last_error_function

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_1:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_2:
 	.long	.str881343

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_3:
 	.long	.str891344

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_4:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_5:
 	.long	.str911346

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_6:
 	.long	decl_printable_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI199_7:
 	.long	.str921348

	.size default_print_error_function, .-default_print_error_function


	.globl	count_error
	.align	4
count_error:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	cmp r0, #0
	beq .LBB200_9	@ bb8
.LBB200_1:	@ bb
	ldr r3, .LCPI200_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB200_10	@ bb10
.LBB200_2:	@ bb2
	cmp r0, #0
	beq .LBB200_9	@ bb8
.LBB200_3:	@ bb3
	ldr r3, .LCPI200_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB200_6	@ bb5
.LBB200_4:	@ bb4
	ldr r3, .LCPI200_2
.LBB200_5:	@ bb4
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	mov r0, #1
	b .LBB200_11	@ bb10
.LBB200_6:	@ bb5
	cmp r0, #0
	beq .LBB200_9	@ bb8
.LBB200_7:	@ bb6
	ldr r3, .LCPI200_3
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB200_9	@ bb8
.LBB200_8:	@ bb7
	ldr r3, .LCPI200_4
	ldr r4, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI200_5
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI200_3
	mov r2, #1
	strb r2, [r3]
.LBB200_9:	@ bb8
	ldr r3, .LCPI200_6
	b .LBB200_5	@ bb4
.LBB200_10:	@ bb10
	mov r0, #0
.LBB200_11:	@ bb10
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB200_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_0:
 	.long	inhibit_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_1:
 	.long	warnings_are_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_2:
 	.long	warningcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_3:
 	.long	warning_message.4587.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_5:
 	.long	.str931349

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI200_6:
 	.long	errorcount

	.size count_error, .-count_error


	.globl	print_time
	.align	4
print_time:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	mov r4, r1
	mov r5, r0
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI201_0
	smull r3, r2, r4, r3
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	mul r2, r3, r2
	sub r2, r4, r2
	@comment
str r2, [sp]
	ldr r1, .LCPI201_1
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB201_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI201_0:
 	.long	1125899907			@ 0x431BDE83

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI201_1:
 	.long	.str941350

	.size print_time, .-print_time


	.globl	announce_function
	.align	4
announce_function:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI202_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB202_5	@ return
.LBB202_1:	@ bb
	ldr r3, .LCPI202_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB202_6	@ bb1
.LBB202_2:	@ bb2
	ldr r3, .LCPI202_3
	ldr r3, [r3]
	mov r1, sp
	@ implicit-def: lr
	mov lr, pc
	bx r3
	mov r4, r0
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI202_4
.LBB202_3:	@ bb2
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
.LBB202_4:	@ bb3
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI202_5
	mov r2, #1
	strb r2, [r3]
	ldr r3, .LCPI202_6
	ldr r3, [r3]
	ldr r2, .LCPI202_7
	@comment
str r3, [r2]
.LBB202_5:	@ return
	sfi_add sp, sp, #4
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB202_6:	@ bb1
	ldr r3, [r0, #+32]
	ldr r4, [r3, #+16]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI202_2
	b .LBB202_3	@ bb2
	.align	4
.LBB202_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_0:
 	.long	quiet_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_1:
 	.long	rtl_dump_and_exit

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_2:
 	.long	.str951351

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_3:
 	.long	decl_printable_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_4:
 	.long	.str961352

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_5:
 	.long	need_error_newline.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_6:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI202_7:
 	.long	last_error_function

	.size announce_function, .-announce_function


	.globl	fatal_io_error
	.align	4
fatal_io_error:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	ldr r3, .LCPI203_0
	ldr r5, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI203_1
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB203_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI203_0:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI203_1:
 	.long	.str971353

	.size fatal_io_error, .-fatal_io_error


	.globl	botch
	.align	4
botch:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	emit_nops_till_bundle_end
	bl abort
	.size botch, .-botch


	.globl	do_abort
	.align	4
do_abort:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	emit_nops_till_bundle_end
	bl abort
	.size do_abort, .-do_abort


	.globl	output_quoted_string
	.align	4
output_quoted_string:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #34
	mov r1, r5
	emit_nops_till_bundle_end
	bl putc
	mov r6, #92
	b .LBB206_3	@ bb5
.LBB206_1:	@ bb3
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl putc
.LBB206_2:	@ bb4
	mov r7, r7, lsl #24
	mov r0, r7, asr #24
	mov r1, r5
	emit_nops_till_bundle_end
	bl putc
	add r4, r4, #1
.LBB206_3:	@ bb5
	ldrb r7, [r4]
	cmp r7, #92
	andne r3, r7, #255
	cmpne r3, #34
	bne .LBB206_5	@ bb5
	b .LBB206_1	@ bb3
.LBB206_4:	@ bb5
.LBB206_5:	@ bb5
	tst r7, #255
	bne .LBB206_2	@ bb4
.LBB206_6:	@ bb7
	mov r0, #34
	mov r1, r5
	emit_nops_till_bundle_end
	bl putc
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.size output_quoted_string, .-output_quoted_string


	.globl	pop_float_handler
	.align	4
pop_float_handler:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI207_0
	@comment
str r0, [r3]
	cmp r0, #0
	beq .LBB207_2	@ return
.LBB207_1:	@ bb
	ldr r0, .LCPI207_1
	mov r2, #156
	emit_nops_till_bundle_end
	bl memcpy
.LBB207_2:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB207_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI207_0:
 	.long	float_handled

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI207_1:
 	.long	float_handler

	.size pop_float_handler, .-pop_float_handler


	.globl	push_float_handler
	.align	4
push_float_handler:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI208_0
	ldr r4, [r3]
	mov r2, #1
	@comment
str r2, [r3]
	mov r5, r0
	cmp r4, #0
	beq .LBB208_2	@ bb1
.LBB208_1:	@ bb
	ldr r3, .LCPI208_1
	mov r2, #156
	mov r0, r1
	mov r1, r3
	emit_nops_till_bundle_end
	bl memcpy
.LBB208_2:	@ bb1
	ldr r0, .LCPI208_1
	mov r2, #156
	mov r1, r5
	emit_nops_till_bundle_end
	bl memcpy
	mov r0, r4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB208_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI208_0:
 	.long	float_handled

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI208_1:
 	.long	float_handler

	.size push_float_handler, .-push_float_handler


	.globl	set_float_handler
	.align	4
set_float_handler:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r3, #1
	mov r2, #0
	cmp r0, #0
	movne r2, r3
	ldr r3, .LCPI209_0
	@comment
str r2, [r3]
	mov r1, r0
	cmp r0, #0
	beq .LBB209_2	@ return
.LBB209_1:	@ bb
	ldr r0, .LCPI209_1
	mov r2, #156
	emit_nops_till_bundle_end
	bl memcpy
.LBB209_2:	@ return
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB209_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI209_0:
 	.long	float_handled

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI209_1:
 	.long	float_handler

	.size set_float_handler, .-set_float_handler


	.globl	sorry
	.align	4
sorry:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	add r12, sp, #24
	stmia r12, {r1, r2, r3}
	add r4, sp, #24
	@comment
str r4, [sp]
	ldr r3, .LCPI210_0
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI210_1
	ldr r5, [r3]
	mov r6, r0
	cmp r5, #0
	bne .LBB210_3	@ bb.i
.LBB210_1:	@ bb1.i
	ldr r3, .LCPI210_4
	ldr r5, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI210_5
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
.LBB210_2:	@ vsorry.exit
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI210_5
	ldr r2, .LCPI210_6
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, #10
	emit_nops_till_bundle_end
	bl fputc
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB210_3:	@ bb.i
	ldr r3, .LCPI210_2
	ldr r7, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI210_3
	mov r2, r5
	mov r3, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB210_2	@ vsorry.exit
	.align	4
.LBB210_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_0:
 	.long	sorrycount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_1:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_2:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_3:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_5:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI210_6:
 	.long	.str991355

	.size sorry, .-sorry


	.align	4
v_error_with_file_and_line:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	ldr r3, .LCPI211_0
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	emit_nops_till_bundle_end
	bl report_error_function
	cmp r7, #0
	bne .LBB211_3	@ bb.i
.LBB211_1:	@ bb1.i
	ldr r3, .LCPI211_2
	ldr r6, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI211_3
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB211_2:	@ v_message_with_file_and_line.exit
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, #10
	emit_nops_till_bundle_end
	bl fputc
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB211_3:	@ bb.i
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI211_1
	mov r2, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB211_2	@ v_message_with_file_and_line.exit
	.align	4
.LBB211_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI211_0:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI211_1:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI211_2:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI211_3:
 	.long	.str901345

	.size v_error_with_file_and_line, .-v_error_with_file_and_line


	.globl	fatal
	.align	4
fatal:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	mov r12, r0
	add r0, sp, #8
	stmia r0, {r1, r2, r3}
	add r3, sp, #8
	@comment
str r3, [sp]
	ldr r2, .LCPI212_0
	ldr r0, [r2]
	ldr r2, .LCPI212_1
	ldr r1, [r2]
	mov r2, r12
	emit_nops_till_bundle_end
	bl v_error_with_file_and_line
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB212_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI212_0:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI212_1:
 	.long	lineno

	.size fatal, .-fatal


	.globl	xrealloc
	.align	4
xrealloc:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	emit_nops_till_bundle_end
	bl realloc
	mov r4, r0
	cmp r0, #0
	ldreq r0, .LCPI213_0
	emit_nops_till_bundle_end
	bleq fatal
.LBB213_1:	@ bb
.LBB213_2:	@ bb1
	mov r0, r4
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB213_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI213_0:
 	.long	.str1001356

	.size xrealloc, .-xrealloc


	.globl	xmalloc
	.align	4
xmalloc:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	emit_nops_till_bundle_end
	bl malloc
	mov r4, r0
	cmp r0, #0
	ldreq r0, .LCPI214_0
	emit_nops_till_bundle_end
	bleq fatal
.LBB214_1:	@ bb
.LBB214_2:	@ bb1
	mov r0, r4
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB214_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI214_0:
 	.long	.str1001356

	.size xmalloc, .-xmalloc


	.globl	fancy_abort
	.align	4
fancy_abort:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r0, .LCPI215_0
	emit_nops_till_bundle_end
	bl fatal
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB215_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI215_0:
 	.long	.str1011357

	.size fancy_abort, .-fancy_abort


	.globl	really_sorry
	.align	4
really_sorry:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	add r12, sp, #24
	stmia r12, {r1, r2, r3}
	add r4, sp, #24
	@comment
str r4, [sp]
	ldr r3, .LCPI216_0
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI216_1
	ldr r5, [r3]
	mov r6, r0
	cmp r5, #0
	bne .LBB216_3	@ bb.i
.LBB216_1:	@ bb1.i
	ldr r3, .LCPI216_4
	ldr r5, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI216_5
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
.LBB216_2:	@ v_really_sorry.exit
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI216_5
	ldr r2, .LCPI216_6
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
	ldr r0, .LCPI216_7
	emit_nops_till_bundle_end
	bl fatal
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB216_3:	@ bb.i
	ldr r3, .LCPI216_2
	ldr r7, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI216_3
	mov r2, r5
	mov r3, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB216_2	@ v_really_sorry.exit
	.align	4
.LBB216_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_0:
 	.long	sorrycount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_1:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_2:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_3:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_5:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_6:
 	.long	.str991355

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI216_7:
 	.long	.str1021358

	.size really_sorry, .-really_sorry


	.globl	error
	.align	4
error:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	mov r12, r0
	add r0, sp, #8
	stmia r0, {r1, r2, r3}
	add r3, sp, #8
	@comment
str r3, [sp]
	ldr r2, .LCPI217_0
	ldr r0, [r2]
	ldr r2, .LCPI217_1
	ldr r1, [r2]
	mov r2, r12
	emit_nops_till_bundle_end
	bl v_error_with_file_and_line
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB217_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI217_0:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI217_1:
 	.long	lineno

	.size error, .-error


	.globl	set_target_switch
	.align	4
set_target_switch:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, #0
	ldr r5, .LCPI218_0
	mov r6, r0
	mov r7, r4
.LBB218_1:	@ bb
	ldr r0, [r5, +r4]
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB218_5	@ bb6
.LBB218_2:	@ bb1
	add r7, r5, r4
	ldr r7, [r7, #+4]
	cmp r7, #0
	ldr r3, .LCPI218_1
	ldr r3, [r3]
	orrge r7, r3, r7
	sublt r7, r7, #1
	andlt r7, r3, r7
	b .LBB218_4	@ bb4
.LBB218_3:	@ bb3
.LBB218_4:	@ bb4
	ldr r3, .LCPI218_1
	@comment
str r7, [r3]
	mov r7, #1
.LBB218_5:	@ bb6
	add r4, r4, #8
	cmp r4, #232
	bne .LBB218_1	@ bb
.LBB218_6:	@ bb7
	cmp r7, #0
	bne .LBB218_10	@ bb13
.LBB218_7:	@ bb9.preheader
	ldr r4, .LCPI218_2
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r0, [r4]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	addeq r7, r6, r5
	ldreq r3, .LCPI218_2
	ldreq r3, [r3, #+4]
	@comment
streq r7, [r3]
	moveq r7, #1
.LBB218_8:	@ bb10
.LBB218_9:	@ bb12
	ldr r4, .LCPI218_2
	ldr r0, [r4, #+8]
	emit_nops_till_bundle_end
	bl strlen
	mov r5, r0
	ldr r0, [r4, #+8]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	addeq r7, r6, r5
	ldreq r3, .LCPI218_2
	ldreq r3, [r3, #+12]
	@comment
streq r7, [r3]
	moveq r7, #1
.LBB218_10:	@ bb13
	cmp r7, #0
	ldreq r0, .LCPI218_3
	moveq r1, r6
	emit_nops_till_bundle_end
	bleq error
.LBB218_11:	@ bb14
.LBB218_12:	@ return
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB218_13:	@ bb10.1
.LBB218_14:	@ bb2
	.align	4
.LBB218_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI218_0:
 	.long	target_switches

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI218_1:
 	.long	target_flags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI218_2:
 	.long	target_options

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI218_3:
 	.long	.str1051361

	.size set_target_switch, .-set_target_switch


	.globl	error_with_file_and_line
	.align	4
error_with_file_and_line:
	sfi_sub sp, sp, #4
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+8]
	add r3, sp, #8
	@comment
str r3, [sp]
	emit_nops_till_bundle_end
	bl v_error_with_file_and_line
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_add sp, sp, #4
	sfi_bx lr
	.size error_with_file_and_line, .-error_with_file_and_line


	.align	4
v_warning_with_file_and_line:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	ldr r12, .LCPI220_0
	ldr r12, [r12]
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r12, #0
	bne .LBB220_9	@ return
.LBB220_1:	@ bb2.i
	ldr r3, .LCPI220_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB220_10	@ bb4.i
.LBB220_2:	@ bb5.i
	ldr r3, .LCPI220_3
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB220_4	@ bb8.i
.LBB220_3:	@ bb7.i
	ldr r3, .LCPI220_4
	ldr r8, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI220_5
	mov r2, r8
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI220_3
	mov r2, #1
	strb r2, [r3]
.LBB220_4:	@ bb8.i
	ldr r3, .LCPI220_6
.LBB220_5:	@ bb8.i
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB220_6:	@ bb
	mov r0, r7
	emit_nops_till_bundle_end
	bl report_error_function
	cmp r7, #0
	bne .LBB220_11	@ bb.i
.LBB220_7:	@ bb1.i
	ldr r3, .LCPI220_4
	ldr r6, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI220_8
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB220_8:	@ v_message_with_file_and_line.exit
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI220_8
	ldr r2, .LCPI220_9
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, #10
	emit_nops_till_bundle_end
	bl fputc
.LBB220_9:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB220_10:	@ bb4.i
	ldr r3, .LCPI220_2
	b .LBB220_5	@ bb8.i
.LBB220_11:	@ bb.i
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI220_7
	mov r2, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB220_8	@ v_message_with_file_and_line.exit
	.align	4
.LBB220_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_0:
 	.long	inhibit_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_1:
 	.long	warnings_are_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_2:
 	.long	warningcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_3:
 	.long	warning_message.4587.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_5:
 	.long	.str931349

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_6:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_7:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_8:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI220_9:
 	.long	.str1061362

	.size v_warning_with_file_and_line, .-v_warning_with_file_and_line


	.globl	pedwarn_with_file_and_line
	.align	4
pedwarn_with_file_and_line:
	sfi_sub sp, sp, #4
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+8]
	add r3, sp, #8
	@comment
str r3, [sp]
	ldr r12, .LCPI221_0
	ldr r12, [r12]
	cmp r12, #0
	bne .LBB221_3	@ bb.i
.LBB221_1:	@ bb1.i
	emit_nops_till_bundle_end
	bl v_warning_with_file_and_line
.LBB221_2:	@ v_pedwarn_with_file_and_line.exit
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB221_3:	@ bb.i
	emit_nops_till_bundle_end
	bl v_error_with_file_and_line
	b .LBB221_2	@ v_pedwarn_with_file_and_line.exit
	.align	4
.LBB221_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI221_0:
 	.long	flag_pedantic_errors

	.size pedwarn_with_file_and_line, .-pedwarn_with_file_and_line


	.globl	pedwarn
	.align	4
pedwarn:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	add r12, sp, #8
	stmia r12, {r1, r2, r3}
	add r3, sp, #8
	@comment
str r3, [sp]
	ldr r2, .LCPI222_0
	ldr r12, [r2]
	ldr r2, .LCPI222_1
	ldr lr, [r2]
	ldr r2, .LCPI222_2
	ldr r1, [r2]
	mov r2, r0
	cmp r12, #0
	bne .LBB222_3	@ bb.i
.LBB222_1:	@ bb1.i
	mov r0, lr
	emit_nops_till_bundle_end
	bl v_warning_with_file_and_line
.LBB222_2:	@ vpedwarn.exit
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB222_3:	@ bb.i
	mov r0, lr
	emit_nops_till_bundle_end
	bl v_error_with_file_and_line
	b .LBB222_2	@ vpedwarn.exit
	.align	4
.LBB222_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI222_0:
 	.long	flag_pedantic_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI222_1:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI222_2:
 	.long	lineno

	.size pedwarn, .-pedwarn


	.globl	warning
	.align	4
warning:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	mov r12, r0
	add r0, sp, #8
	stmia r0, {r1, r2, r3}
	add r3, sp, #8
	@comment
str r3, [sp]
	ldr r2, .LCPI223_0
	ldr r0, [r2]
	ldr r2, .LCPI223_1
	ldr r1, [r2]
	mov r2, r12
	emit_nops_till_bundle_end
	bl v_warning_with_file_and_line
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB223_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI223_0:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI223_1:
 	.long	lineno

	.size warning, .-warning


	.globl	warning_with_file_and_line
	.align	4
warning_with_file_and_line:
	sfi_sub sp, sp, #4
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+8]
	add r3, sp, #8
	@comment
str r3, [sp]
	emit_nops_till_bundle_end
	bl v_warning_with_file_and_line
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_add sp, sp, #4
	sfi_bx lr
	.size warning_with_file_and_line, .-warning_with_file_and_line


	.globl	warning_for_asm
	.align	4
warning_for_asm:
	sfi_sub sp, sp, #8
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+28]
	@comment
str r2, [sp, #+24]
	add r4, sp, #24
	@comment
str r4, [sp]
	ldr r3, .LCPI225_0
	ldr r3, [r3]
	mov r5, r1
	mov r6, r0
	cmp r3, #0
	bne .LBB225_20	@ v_warning_for_asm.exit
.LBB225_1:	@ bb2.i.i
	ldr r3, .LCPI225_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB225_21	@ bb4.i.i
.LBB225_2:	@ bb5.i.i
	ldr r3, .LCPI225_3
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB225_4	@ bb8.i.i
.LBB225_3:	@ bb7.i.i
	ldr r3, .LCPI225_4
	ldr r7, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI225_5
	mov r2, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI225_3
	mov r2, #1
	strb r2, [r3]
.LBB225_4:	@ bb8.i.i
	ldr r3, .LCPI225_6
.LBB225_5:	@ bb8.i.i
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB225_6:	@ bb.i
	ldr r3, [r6, #+16]
	ldrh r2, [r3]
	cmp r2, #41
	ldreq r1, [r3, #+8]
	ldreqh r0, [r1]
	cmpeq r0, #36
	beq .LBB225_11	@ bb.i3.i.bb11.i.i_crit_edge
.LBB225_7:	@ bb.i
	mov r1, #255
	orr r1, r1, #255, 24 @ 65280
	and r1, r2, r1
	cmp r1, #36
	beq .LBB225_15	@ bb11.i.i
.LBB225_8:	@ bb4.i5.i
	mov r1, #255
	orr r1, r1, #255, 24 @ 65280
	and r1, r2, r1
	cmp r1, #34
	beq .LBB225_12	@ bb5.i6.i
.LBB225_9:	@ bb4.i5.i.file_and_line_for_asm.exit.i_crit_edge
	ldr r2, .LCPI225_7
	ldr r3, .LCPI225_8
	b .LBB225_17	@ file_and_line_for_asm.exit.i
.LBB225_10:	@ bb.i3.i
.LBB225_11:	@ bb.i3.i.bb11.i.i_crit_edge
	mov r3, r1
	b .LBB225_15	@ bb11.i.i
.LBB225_12:	@ bb5.i6.i
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+4]
	ldrh r1, [r3]
	cmp r1, #41
	beq .LBB225_22	@ bb6.i.i
.LBB225_13:	@ bb7.i7.i
	mov r0, #255
	orr r0, r0, #255, 24 @ 65280
	and r1, r1, r0
	cmp r1, #36
	moveq r1, #255
	orreq r1, r1, #255, 24 @ 65280
	andeq r2, r2, r1
	cmpeq r2, #34
	beq .LBB225_15	@ bb11.i.i
	b .LBB225_9	@ bb4.i5.i.file_and_line_for_asm.exit.i_crit_edge
.LBB225_14:	@ bb7.i7.i
.LBB225_15:	@ bb11.i.i
	cmp r3, #0
	beq .LBB225_9	@ bb4.i5.i.file_and_line_for_asm.exit.i_crit_edge
.LBB225_16:	@ bb12.i.i
	add r2, r3, #28
	add r3, r3, #24
.LBB225_17:	@ file_and_line_for_asm.exit.i
	ldr r6, [r3]
	ldr r7, [r2]
	mov r0, r6
	emit_nops_till_bundle_end
	bl report_error_function
	cmp r6, #0
	bne .LBB225_23	@ bb.i.i
.LBB225_18:	@ bb1.i.i
	ldr r3, .LCPI225_4
	ldr r6, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI225_10
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB225_19:	@ v_message_with_file_and_line.exit.i
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI225_10
	ldr r2, .LCPI225_11
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, #10
	emit_nops_till_bundle_end
	bl fputc
.LBB225_20:	@ v_warning_for_asm.exit
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB225_21:	@ bb4.i.i
	ldr r3, .LCPI225_2
	b .LBB225_5	@ bb8.i.i
.LBB225_22:	@ bb6.i.i
	ldr r3, [r3, #+8]
	b .LBB225_15	@ bb11.i.i
.LBB225_23:	@ bb.i.i
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI225_9
	mov r2, r6
	mov r3, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB225_19	@ v_message_with_file_and_line.exit.i
	.align	4
.LBB225_24:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_0:
 	.long	inhibit_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_1:
 	.long	warnings_are_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_2:
 	.long	warningcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_3:
 	.long	warning_message.4587.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_5:
 	.long	.str931349

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_6:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_7:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_8:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_9:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_10:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI225_11:
 	.long	.str1061362

	.size warning_for_asm, .-warning_for_asm


	.globl	error_for_asm
	.align	4
error_for_asm:
	sfi_sub sp, sp, #8
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+28]
	@comment
str r2, [sp, #+24]
	add r4, sp, #24
	@comment
str r4, [sp]
	ldr r3, .LCPI226_0
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, [r0, #+16]
	ldrh r2, [r3]
	mov r5, r1
	cmp r2, #41
	ldreq r1, [r3, #+8]
	ldreqh r0, [r1]
	cmpeq r0, #36
	beq .LBB226_5	@ bb.i1.i.bb11.i.i_crit_edge
.LBB226_1:	@ entry
	mov r1, #255
	orr r1, r1, #255, 24 @ 65280
	and r1, r2, r1
	cmp r1, #36
	beq .LBB226_9	@ bb11.i.i
.LBB226_2:	@ bb4.i.i
	mov r1, #255
	orr r1, r1, #255, 24 @ 65280
	and r1, r2, r1
	cmp r1, #34
	beq .LBB226_6	@ bb5.i.i
.LBB226_3:	@ bb4.i.i.file_and_line_for_asm.exit.i_crit_edge
	ldr r2, .LCPI226_1
	ldr r3, .LCPI226_2
	b .LBB226_11	@ file_and_line_for_asm.exit.i
.LBB226_4:	@ bb.i1.i
.LBB226_5:	@ bb.i1.i.bb11.i.i_crit_edge
	mov r3, r1
	b .LBB226_9	@ bb11.i.i
.LBB226_6:	@ bb5.i.i
	ldr r3, [r3, #+4]
	ldr r3, [r3, #+4]
	ldrh r1, [r3]
	cmp r1, #41
	beq .LBB226_14	@ bb6.i.i
.LBB226_7:	@ bb7.i.i
	mov r0, #255
	orr r0, r0, #255, 24 @ 65280
	and r1, r1, r0
	cmp r1, #36
	moveq r1, #255
	orreq r1, r1, #255, 24 @ 65280
	andeq r2, r2, r1
	cmpeq r2, #34
	beq .LBB226_9	@ bb11.i.i
	b .LBB226_3	@ bb4.i.i.file_and_line_for_asm.exit.i_crit_edge
.LBB226_8:	@ bb7.i.i
.LBB226_9:	@ bb11.i.i
	cmp r3, #0
	beq .LBB226_3	@ bb4.i.i.file_and_line_for_asm.exit.i_crit_edge
.LBB226_10:	@ bb12.i.i
	add r2, r3, #28
	add r3, r3, #24
.LBB226_11:	@ file_and_line_for_asm.exit.i
	ldr r6, [r3]
	ldr r7, [r2]
	mov r0, r6
	emit_nops_till_bundle_end
	bl report_error_function
	cmp r6, #0
	bne .LBB226_15	@ bb.i.i
.LBB226_12:	@ bb1.i.i
	ldr r3, .LCPI226_4
	ldr r6, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI226_5
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB226_13:	@ v_error_for_asm.exit
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, #10
	emit_nops_till_bundle_end
	bl fputc
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB226_14:	@ bb6.i.i
	ldr r3, [r3, #+8]
	b .LBB226_9	@ bb11.i.i
.LBB226_15:	@ bb.i.i
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI226_3
	mov r2, r6
	mov r3, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB226_13	@ v_error_for_asm.exit
	.align	4
.LBB226_16:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI226_0:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI226_1:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI226_2:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI226_3:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI226_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI226_5:
 	.long	.str901345

	.size error_for_asm, .-error_for_asm


	.align	4
v_message_with_decl:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_sub sp, sp, #12
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	ldr r8, [r7, #+12]
	ldr r9, [r7, #+16]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI227_0
	mov r2, r8
	mov r3, r9
	emit_nops_till_bundle_end
	bl fprintf
	cmp r6, #0
	bne .LBB227_2	@ bb
.LBB227_1:	@ entry.bb7_crit_edge
	mov r6, r5
	b .LBB227_5	@ bb7
.LBB227_2:	@ bb
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI227_1
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB227_1	@ entry.bb7_crit_edge
.LBB227_3:	@ bb4
	mov r3, r6
	ldrb r2, [r3, #+1]!
	cmp r2, #37
	bne .LBB227_8	@ bb8
.LBB227_4:	@ bb6
	add r6, r3, #1
.LBB227_5:	@ bb7
	ldrb r3, [r6]
	cmp r3, #0
	beq .LBB227_8	@ bb8
.LBB227_6:	@ bb7
	and r3, r3, #255
	cmp r3, #37
	beq .LBB227_3	@ bb4
.LBB227_7:	@ bb7.bb6_crit_edge
	mov r3, r6
	b .LBB227_4	@ bb6
.LBB227_8:	@ bb8
	cmp r6, r5
	bls .LBB227_10	@ bb14
.LBB227_9:	@ bb9
	sub r2, r6, r5
	mov r3, #255
	cmp r2, #255
	movgt r2, r3
	add r8, sp, #5
	ldr r1, .LCPI227_2
	mov r0, r8
	emit_nops_till_bundle_end
	bl sprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r8
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
.LBB227_10:	@ bb14
	ldrb r3, [r6]
	cmp r3, #37
	bne .LBB227_16	@ bb21
.LBB227_11:	@ bb15
	ldr r3, [r7, #+32]
	cmp r3, #0
	beq .LBB227_19	@ bb15.bb18_crit_edge
.LBB227_12:	@ bb16
	ldr r3, .LCPI227_4
	ldr r3, [r3]
	mov r1, sp
	mov r0, r7
	@ implicit-def: lr
	mov lr, pc
	bx r3
.LBB227_13:	@ bb18
	mov r5, r0
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl fputs
	b .LBB227_15	@ bb20
.LBB227_14:	@ bb19
	and r0, r3, #255
	emit_nops_till_bundle_end
	bl isalpha
	add r6, r6, #1
	cmp r0, #0
	bne .LBB227_16	@ bb21
.LBB227_15:	@ bb20
	ldrb r3, [r6]
	cmp r3, #0
	bne .LBB227_14	@ bb19
.LBB227_16:	@ bb21
	ldrb r3, [r6]
	cmp r3, #0
	beq .LBB227_18	@ bb23
.LBB227_17:	@ bb22
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl vfprintf
.LBB227_18:	@ bb23
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	mov r0, #10
	emit_nops_till_bundle_end
	bl fputc
	sfi_add sp, sp, #12
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB227_19:	@ bb15.bb18_crit_edge
	ldr r0, .LCPI227_3
	b .LBB227_13	@ bb18
	.align	4
.LBB227_20:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI227_0:
 	.long	.str981354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI227_1:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI227_2:
 	.long	.str1071364

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI227_3:
 	.long	.str1081365

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI227_4:
 	.long	decl_printable_name

	.size v_message_with_decl, .-v_message_with_decl


	.globl	error_with_decl
	.align	4
error_with_decl:
	sfi_sub sp, sp, #8
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #4
	mov r4, r1
	mov r5, r0
	@comment
str r3, [sp, #+24]
	@comment
str r2, [sp, #+20]
	add r6, sp, #20
	@comment
str r6, [sp]
	ldr r3, .LCPI228_0
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r0, [r5, #+12]
	emit_nops_till_bundle_end
	bl report_error_function
	mov r1, #0
	mov r0, r5
	mov r2, r4
	mov r3, r6
	emit_nops_till_bundle_end
	bl v_message_with_decl
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB228_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI228_0:
 	.long	errorcount

	.size error_with_decl, .-error_with_decl


	.globl	pedwarn_with_decl
	.align	4
pedwarn_with_decl:
	sfi_sub sp, sp, #8
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+28]
	@comment
str r2, [sp, #+24]
	add r4, sp, #24
	@comment
str r4, [sp]
	ldrb r3, [r0, #+30]
	mov r5, r1
	mov r6, r0
	tst r3, #1
	bne .LBB229_10	@ v_pedwarn_with_decl.exit
.LBB229_1:	@ bb.i
	ldr r3, .LCPI229_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB229_11	@ bb4.i
.LBB229_2:	@ bb5.i
	ldr r3, .LCPI229_2
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB229_10	@ v_pedwarn_with_decl.exit
.LBB229_3:	@ bb2.i.i.i
	ldr r3, .LCPI229_3
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB229_12	@ bb4.i.i.i
.LBB229_4:	@ bb5.i.i.i
	ldr r3, .LCPI229_5
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB229_6	@ bb8.i.i.i
.LBB229_5:	@ bb7.i.i.i
	ldr r3, .LCPI229_6
	ldr r7, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI229_7
	mov r2, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI229_5
	mov r2, #1
	strb r2, [r3]
.LBB229_6:	@ bb8.i.i.i
	ldr r3, .LCPI229_1
.LBB229_7:	@ bb8.i.i.i
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB229_8:	@ bb.i.i
	ldr r0, [r6, #+12]
	emit_nops_till_bundle_end
	bl report_error_function
	ldr r1, .LCPI229_8
.LBB229_9:	@ bb.i.i
	mov r0, r6
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl v_message_with_decl
.LBB229_10:	@ v_pedwarn_with_decl.exit
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB229_11:	@ bb4.i
	ldr r3, .LCPI229_1
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r0, [r6, #+12]
	emit_nops_till_bundle_end
	bl report_error_function
	mov r1, #0
	b .LBB229_9	@ bb.i.i
.LBB229_12:	@ bb4.i.i.i
	ldr r3, .LCPI229_4
	b .LBB229_7	@ bb8.i.i.i
	.align	4
.LBB229_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_0:
 	.long	flag_pedantic_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_1:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_2:
 	.long	inhibit_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_3:
 	.long	warnings_are_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_4:
 	.long	warningcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_5:
 	.long	warning_message.4587.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_6:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_7:
 	.long	.str931349

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI229_8:
 	.long	.str1061362

	.size pedwarn_with_decl, .-pedwarn_with_decl


	.globl	warning_with_decl
	.align	4
warning_with_decl:
	sfi_sub sp, sp, #8
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #4
	@comment
str r3, [sp, #+28]
	@comment
str r2, [sp, #+24]
	add r4, sp, #24
	@comment
str r4, [sp]
	ldr r3, .LCPI230_0
	ldr r3, [r3]
	mov r5, r1
	mov r6, r0
	cmp r3, #0
	bne .LBB230_7	@ v_warning_with_decl.exit
.LBB230_1:	@ bb2.i.i
	ldr r3, .LCPI230_1
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB230_8	@ bb4.i.i
.LBB230_2:	@ bb5.i.i
	ldr r3, .LCPI230_3
	ldrb r3, [r3]
	cmp r3, #0
	bne .LBB230_4	@ bb8.i.i
.LBB230_3:	@ bb7.i.i
	ldr r3, .LCPI230_4
	ldr r7, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI230_5
	mov r2, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI230_3
	mov r2, #1
	strb r2, [r3]
.LBB230_4:	@ bb8.i.i
	ldr r3, .LCPI230_6
.LBB230_5:	@ bb8.i.i
	ldr r2, [r3]
	add r2, r2, #1
	@comment
str r2, [r3]
.LBB230_6:	@ bb.i
	ldr r0, [r6, #+12]
	emit_nops_till_bundle_end
	bl report_error_function
	ldr r1, .LCPI230_7
	mov r0, r6
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl v_message_with_decl
.LBB230_7:	@ v_warning_with_decl.exit
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB230_8:	@ bb4.i.i
	ldr r3, .LCPI230_2
	b .LBB230_5	@ bb8.i.i
	.align	4
.LBB230_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_0:
 	.long	inhibit_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_1:
 	.long	warnings_are_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_2:
 	.long	warningcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_3:
 	.long	warning_message.4587.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_4:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_5:
 	.long	.str931349

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_6:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI230_7:
 	.long	.str1061362

	.size warning_with_decl, .-warning_with_decl


	.globl	fatal_insn
	.align	4
fatal_insn:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI231_0
	ldr r3, [r3]
	mov r4, r1
	cmp r3, #0
	bne .LBB231_2	@ bb1
.LBB231_1:	@ bb
	emit_nops_till_bundle_end
	bl error
	mov r0, r4
	emit_nops_till_bundle_end
	bl debug_rtx
.LBB231_2:	@ bb1
	ldr r3, .LCPI231_1
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_4	@ bb3
.LBB231_3:	@ bb2
	emit_nops_till_bundle_end
	bl fflush
.LBB231_4:	@ bb3
	ldr r3, .LCPI231_2
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_6	@ bb5
.LBB231_5:	@ bb4
	emit_nops_till_bundle_end
	bl fflush
.LBB231_6:	@ bb5
	ldr r3, .LCPI231_3
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_8	@ bb7
.LBB231_7:	@ bb6
	emit_nops_till_bundle_end
	bl fflush
.LBB231_8:	@ bb7
	ldr r3, .LCPI231_4
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_10	@ bb9
.LBB231_9:	@ bb8
	emit_nops_till_bundle_end
	bl fflush
.LBB231_10:	@ bb9
	ldr r3, .LCPI231_5
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_12	@ bb11
.LBB231_11:	@ bb10
	emit_nops_till_bundle_end
	bl fflush
.LBB231_12:	@ bb11
	ldr r3, .LCPI231_6
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_14	@ bb13
.LBB231_13:	@ bb12
	emit_nops_till_bundle_end
	bl fflush
.LBB231_14:	@ bb13
	ldr r3, .LCPI231_7
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_16	@ bb15
.LBB231_15:	@ bb14
	emit_nops_till_bundle_end
	bl fflush
.LBB231_16:	@ bb15
	ldr r3, .LCPI231_8
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_18	@ bb17
.LBB231_17:	@ bb16
	emit_nops_till_bundle_end
	bl fflush
.LBB231_18:	@ bb17
	ldr r3, .LCPI231_9
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_20	@ bb19
.LBB231_19:	@ bb18
	emit_nops_till_bundle_end
	bl fflush
.LBB231_20:	@ bb19
	ldr r3, .LCPI231_10
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_22	@ bb21
.LBB231_21:	@ bb20
	emit_nops_till_bundle_end
	bl fflush
.LBB231_22:	@ bb21
	ldr r3, .LCPI231_11
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_24	@ bb23
.LBB231_23:	@ bb22
	emit_nops_till_bundle_end
	bl fflush
.LBB231_24:	@ bb23
	ldr r3, .LCPI231_12
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_26	@ bb25
.LBB231_25:	@ bb24
	emit_nops_till_bundle_end
	bl fflush
.LBB231_26:	@ bb25
	ldr r3, .LCPI231_13
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_28	@ bb27
.LBB231_27:	@ bb26
	emit_nops_till_bundle_end
	bl fflush
.LBB231_28:	@ bb27
	ldr r3, .LCPI231_14
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_30	@ bb29
.LBB231_29:	@ bb28
	emit_nops_till_bundle_end
	bl fflush
.LBB231_30:	@ bb29
	ldr r3, .LCPI231_15
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_32	@ bb31
.LBB231_31:	@ bb30
	emit_nops_till_bundle_end
	bl fflush
.LBB231_32:	@ bb31
	ldr r3, .LCPI231_16
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB231_34	@ bb33
.LBB231_33:	@ bb32
	emit_nops_till_bundle_end
	bl fflush
.LBB231_34:	@ bb33
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB231_35:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_0:
 	.long	output_bytecode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_1:
 	.long	asm_out_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_2:
 	.long	aux_info_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_3:
 	.long	rtl_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_4:
 	.long	jump_opt_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_5:
 	.long	cse_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_6:
 	.long	loop_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_7:
 	.long	cse2_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_8:
 	.long	flow_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_9:
 	.long	combine_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_10:
 	.long	sched_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_11:
 	.long	local_reg_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_12:
 	.long	global_reg_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_13:
 	.long	sched2_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_14:
 	.long	jump2_opt_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_15:
 	.long	dbr_sched_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI231_16:
 	.long	stack_reg_dump_file

	.size fatal_insn, .-fatal_insn


	.globl	fatal_insn_not_found
	.align	4
fatal_insn_not_found:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, [r0, #+20]
	mov r1, r0
	cmp r3, #0
	ldrlt r0, .LCPI232_0
	ldrge r0, .LCPI232_1
	b .LBB232_2	@ bb
.LBB232_1:	@ bb
.LBB232_2:	@ bb
	emit_nops_till_bundle_end
	bl fatal_insn
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB232_3:	@ bb1
	.align	4
.LBB232_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI232_0:
 	.long	.str1091368

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI232_1:
 	.long	.str1101369

	.size fatal_insn_not_found, .-fatal_insn_not_found


	.globl	pfatal_with_name
	.align	4
pfatal_with_name:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	ldr r3, .LCPI233_0
	ldr r5, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI233_1
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r4
	emit_nops_till_bundle_end
	bl perror
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB233_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI233_0:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI233_1:
 	.long	.str901345

	.size pfatal_with_name, .-pfatal_with_name


	.align	4
open_dump_file:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r11, lr}
	add r11, sp, #12
	mov r4, r1
	mov r5, r0
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	add r3, r6, r0
	add r3, r3, #4
	bic r3, r3, #3
	sub r6, sp, r3
	mov sp, r6
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl strcpy
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl strcat
	ldr r1, .LCPI234_0
	mov r0, r6
	emit_nops_till_bundle_end
	bl fopen
	cmp r0, #0
	subne sp, r11, #12
	ldmnefd sp, {r4, r5, r6, r11, lr}
	sfi_addne sp, sp, #20
	sfi_bxne lr
.LBB234_1:	@ bb1
.LBB234_2:	@ bb
	ldr r3, .LCPI234_1
	ldr r4, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI234_2
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r6
	emit_nops_till_bundle_end
	bl perror
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB234_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI234_0:
 	.long	.str1111370

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI234_1:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI234_2:
 	.long	.str901345

	.size open_dump_file, .-open_dump_file


	.globl	get_run_time
	.align	4
get_run_time:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #76
	ldr r3, .LCPI235_0
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB235_3	@ bb1
.LBB235_1:	@ bb2
	mov r0, #0
.LBB235_2:	@ bb2
	sfi_add sp, sp, #76
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB235_3:	@ bb1
	mov r0, #0
	mov r1, sp
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+4]
	ldr r2, [sp, #+12]
	add r3, r2, r3
	ldr r2, [sp]
	ldr r1, [sp, #+8]
	add r2, r1, r2
	mov r1, #9, 26 @ 576
	orr r1, r1, #61, 18 @ 999424
	mla r0, r2, r1, r3
	b .LBB235_2	@ bb2
	.align	4
.LBB235_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI235_0:
 	.long	quiet_flag

	.size get_run_time, .-get_run_time


	.globl	rest_of_compilation
	.align	4
rest_of_compilation:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #65, 30 @ 260
	sfi_sub sp, sp, #7, 22 @ 7168
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	bne .LBB236_389	@ entry.get_run_time.exit_crit_edge
.LBB236_1:	@ bb1.i
	mov r0, #0
	add r1, sp, #8
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+8]
	ldr r2, [sp, #+16]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+12]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+20]
	add r3, r3, r2
	@comment
str r3, [sp, #+4]
.LBB236_2:	@ get_run_time.exit
	ldr r3, .LCPI236_69
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_388	@ return
.LBB236_3:	@ bb
	ldr r3, [r4, #+76]
	cmp r3, #0
	bne .LBB236_391	@ bb.bb130_crit_edge
.LBB236_4:	@ bb51
	ldrb r5, [r4, #+29]
	mov r6, #2, 22 @ 2048
	and r7, r6, r5, lsl #8
	tst r5, #8
	ldreq r5, .LCPI236_70
	ldreq r5, [r5]
	cmpeq r5, #0
	beq .LBB236_20	@ bb71
.LBB236_5:	@ bb56
.LBB236_6:	@ bb57
	ldr r5, .LCPI236_68
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB236_405	@ bb57.get_run_time.exit651_crit_edge
.LBB236_7:	@ bb1.i649
	mov r0, #0
	add r1, sp, #7, 22 @ 7168
	add r1, r1, #184
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r5, [r0, #+3256]
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+3264]
	add r5, r6, r5
	mov r6, #9, 26 @ 576
	orr r6, r6, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3260]
	mla r5, r5, r6, r3
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+3268]
	add r5, r5, r6
.LBB236_8:	@ get_run_time.exit651
	mov r0, r4
	emit_nops_till_bundle_end
	bl function_cannot_inline_p
	mov r1, r0
	cmp r0, #0
	bne .LBB236_10	@ bb59
.LBB236_9:	@ bb58
	ldr r6, .LCPI236_71
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB236_16	@ bb69
.LBB236_10:	@ bb59
	ldr r6, .LCPI236_72
	ldr r6, [r6]
	cmp r6, #0
	beq .LBB236_14	@ bb63
.LBB236_11:	@ bb60
	cmp r7, #0
	ldreq r6, .LCPI236_70
	ldreq r6, [r6]
	cmpeq r6, #0
	beq .LBB236_14	@ bb63
.LBB236_12:	@ bb61
.LBB236_13:	@ bb62
	mov r0, r4
	emit_nops_till_bundle_end
	bl warning_with_decl
.LBB236_14:	@ bb63
	ldrb r6, [r4, #+29]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	orr r6, r2, r6, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r1, [r3, #+2]
	orr r2, r1, r2, lsl #8
	orr r6, r6, r2, lsl #16
	bic r2, r6, #2, 22 @ 2048
	strb r2, [r3]
	mov r1, r2, lsr #24
	strb r1, [r3, #+3]
	mov r1, r2, lsr #16
	strb r1, [r3, #+2]
	mov r3, r2, lsr #8
	strb r3, [r4, #+29]
	mov r3, #0
	@comment
str r3, [r4, #+52]
	tst r6, #1, 24 @ 256
	beq .LBB236_17	@ bb70
.LBB236_15:	@ bb68
	mov r5, #0
	@comment
str r5, [r4, #+48]
	mov r6, r5
	b .LBB236_378	@ exit_rest_of_compilationthread-split
.LBB236_16:	@ bb69
	ldrb r6, [r4, #+30]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+3]
	orr r6, r6, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r1, r2, r1, lsl #8
	orr r6, r1, r6, lsl #16
	orr r6, r6, #2, 22 @ 2048
	mov r6, r6, lsr #8
	strb r6, [r3, #+1]
	strb r2, [r3]
.LBB236_17:	@ bb70
	ldr r6, .LCPI236_68
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB236_407	@ bb70.get_run_time.exit647_crit_edge
.LBB236_18:	@ bb1.i645
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #199, 28 @ 3184
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+3184]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3192]
	add r6, r3, r6
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+3188]
	mla r6, r6, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3196]
	add r6, r6, r3
.LBB236_19:	@ get_run_time.exit647
	sub r5, r6, r5
	ldr r6, .LCPI236_73
	ldr r3, [r6]
	add r5, r5, r3
	@comment
str r5, [r6]
.LBB236_20:	@ bb71
	emit_nops_till_bundle_end
	bl get_insns
	ldr r5, .LCPI236_74
	ldr r5, [r5]
	mov r6, r0
	cmp r5, #0
	beq .LBB236_28	@ bb75
.LBB236_21:	@ bb72
	ldr r5, .LCPI236_68
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB236_408	@ bb72.get_run_time.exit643_crit_edge
.LBB236_22:	@ bb1.i641
	mov r0, #0
	add r1, sp, #7, 22 @ 7168
	add r1, r1, #40
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r5, [r0, #+3112]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3120]
	add r5, r3, r5
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+3116]
	mla r5, r5, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3124]
	add r5, r5, r3
.LBB236_23:	@ get_run_time.exit643
	ldr r3, .LCPI236_75
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_76
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, [r4, #+76]
	cmp r3, #0
	beq .LBB236_25	@ bb74
.LBB236_24:	@ bb73
	ldr r3, .LCPI236_75
	ldr r0, [r3]
	ldr r1, .LCPI236_77
	emit_nops_till_bundle_end
	bl fprintf
.LBB236_25:	@ bb74
	ldr r8, .LCPI236_75
	ldr r0, [r8]
	mov r1, r6
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r8]
	emit_nops_till_bundle_end
	bl fflush
	ldr r6, .LCPI236_68
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB236_409	@ bb74.get_run_time.exit639_crit_edge
.LBB236_26:	@ bb1.i637
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #190, 28 @ 3040
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+3040]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3048]
	add r6, r3, r6
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+3044]
	mla r6, r6, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+3052]
	add r6, r6, r3
.LBB236_27:	@ get_run_time.exit639
	sub r5, r6, r5
	ldr r6, .LCPI236_78
	ldr r3, [r6]
	add r5, r5, r3
	@comment
str r5, [r6]
.LBB236_28:	@ bb75
	ldrb r5, [r4, #+29]
	mov r6, r4
	ldrb r3, [r6, #+28]!
	orr r5, r3, r5, lsl #8
	ldrb r3, [r6, #+3]
	ldrb r6, [r6, #+2]
	orr r6, r6, r3, lsl #8
	orr r5, r5, r6, lsl #16
	tst r5, #1, 14 @ 262144
	bne .LBB236_35	@ bb102
.LBB236_29:	@ bb80
	cmp r7, #0
	tsteq r5, #2, 22 @ 2048
	beq .LBB236_411	@ bb106
.LBB236_30:	@ bb81
.LBB236_31:	@ bb86
	ldrb r6, [r4, #+9]
	mov r3, r4
	ldrb r2, [r3, #+8]!
	orr r6, r2, r6, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r2, lsl #8
	orr r6, r6, r3, lsl #16
	tst r6, #2, 14 @ 524288
	tsteq r6, #2, 22 @ 2048
	beq .LBB236_33	@ bb96
	b .LBB236_34	@ bb97
.LBB236_32:	@ bb91
.LBB236_33:	@ bb96
	ldr r6, .LCPI236_79
	ldr r6, [r6]
	cmp r6, #0
	beq .LBB236_35	@ bb102
.LBB236_34:	@ bb97
	tst r5, #1, 24 @ 256
	beq .LBB236_411	@ bb106
.LBB236_35:	@ bb102
	mov r6, r5, lsr #24
	strb r6, [r4, #+31]
	mov r6, r5, lsr #8
	strb r6, [r4, #+29]
	orr r6, r5, #1, 14 @ 262144
	mov r3, r6, lsr #16
	strb r3, [r4, #+30]
	strb r5, [r4, #+28]
	ldr r5, .LCPI236_80
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB236_410	@ bb102.bb106_crit_edge
.LBB236_36:	@ bb103
	ldr r5, .LCPI236_81
	ldr r5, [r5]
	cmp r5, #3
	bne .LBB236_42	@ bb105
.LBB236_37:	@ bb104
	mov r1, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl set_decl_abstract_flags
	ldr r5, .LCPI236_68
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB236_417	@ bb104.get_run_time.exit635_crit_edge
.LBB236_38:	@ bb1.i633
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #230, 30 @ 920
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r5, [r0, #+2968]
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2976]
	add r5, r6, r5
	mov r6, #9, 26 @ 576
	orr r6, r6, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r7, [r0, #+2972]
	mla r5, r5, r6, r7
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2980]
	add r5, r5, r6
.LBB236_39:	@ get_run_time.exit635
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl dwarfout_file_scope_decl
	ldr r6, .LCPI236_68
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB236_418	@ get_run_time.exit635.get_run_time.exit631_crit_edge
.LBB236_40:	@ bb1.i629
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #181, 28 @ 2896
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2896]
	add r0, sp, #1, 20 @ 4096
	ldr r7, [r0, #+2904]
	add r6, r7, r6
	mov r7, #9, 26 @ 576
	orr r7, r7, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2900]
	mla r6, r6, r7, r3
	add r0, sp, #1, 20 @ 4096
	ldr r7, [r0, #+2908]
	add r6, r6, r7
.LBB236_41:	@ get_run_time.exit631
	sub r5, r6, r5
	ldr r6, .LCPI236_82
	ldr r7, [r6]
	add r5, r5, r7
	@comment
str r5, [r6]
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl set_decl_abstract_flags
.LBB236_42:	@ bb105
	ldr r5, .LCPI236_68
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB236_419	@ bb105.get_run_time.exit627_crit_edge
.LBB236_43:	@ bb1.i625
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #194, 30 @ 776
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r5, [r0, #+2824]
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2832]
	add r5, r6, r5
	mov r6, #9, 26 @ 576
	orr r6, r6, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r7, [r0, #+2828]
	mla r5, r5, r6, r7
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2836]
	add r5, r5, r6
.LBB236_44:	@ get_run_time.exit627
	mov r0, r4
	emit_nops_till_bundle_end
	bl save_for_inline_nocopy
	ldr r6, .LCPI236_68
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB236_420	@ get_run_time.exit627.get_run_time.exit623_crit_edge
.LBB236_45:	@ bb1.i621
	mov r0, #0
	add r1, sp, #107, 26 @ 6848
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2752]
	add r0, sp, #1, 20 @ 4096
	ldr r7, [r0, #+2760]
	add r6, r7, r6
	mov r7, #9, 26 @ 576
	orr r7, r7, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2756]
	mla r6, r6, r7, r3
	add r0, sp, #1, 20 @ 4096
	ldr r7, [r0, #+2764]
	add r6, r6, r7
.LBB236_46:	@ get_run_time.exit623
	sub r5, r6, r5
	ldr r6, .LCPI236_73
	ldr r7, [r6]
	add r5, r5, r7
	@comment
str r5, [r6]
	mov r5, #0
	mov r6, r5
	b .LBB236_378	@ exit_rest_of_compilationthread-split
.LBB236_47:	@ bb116
	ldr r5, .LCPI236_81
	ldr r5, [r5]
	cmp r5, #3
	bne .LBB236_53	@ bb118
.LBB236_48:	@ bb117
	mov r1, #1
	mov r0, r4
	emit_nops_till_bundle_end
	bl set_decl_abstract_flags
	ldr r5, .LCPI236_68
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB236_422	@ bb117.get_run_time.exit619_crit_edge
.LBB236_49:	@ bb1.i617
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #158, 30 @ 632
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r5, [r0, #+2680]
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2688]
	add r5, r6, r5
	mov r6, #9, 26 @ 576
	orr r6, r6, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2684]
	mla r5, r5, r6, r3
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2692]
	add r5, r5, r6
.LBB236_50:	@ get_run_time.exit619
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl dwarfout_file_scope_decl
	ldr r6, .LCPI236_68
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB236_423	@ get_run_time.exit619.get_run_time.exit615_crit_edge
.LBB236_51:	@ bb1.i613
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #163, 28 @ 2608
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r6, [r0, #+2608]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2616]
	add r6, r3, r6
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2612]
	mla r6, r6, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2620]
	add r6, r6, r3
.LBB236_52:	@ get_run_time.exit615
	sub r5, r6, r5
	ldr r6, .LCPI236_82
	ldr r3, [r6]
	add r5, r5, r3
	@comment
str r5, [r6]
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl set_decl_abstract_flags
.LBB236_53:	@ bb118
	ldr r5, .LCPI236_68
	ldr r3, [r5]
	ldr r5, [r4, #+40]
	ldr r6, [r4, #+48]
	cmp r3, #0
	bne .LBB236_424	@ bb118.get_run_time.exit611_crit_edge
.LBB236_54:	@ bb1.i609
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #122, 30 @ 488
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+2536]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2544]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2540]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2548]
	add r8, r8, r3
.LBB236_55:	@ get_run_time.exit611
	mov r0, r4
	emit_nops_till_bundle_end
	bl save_for_inline_copying
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_425	@ get_run_time.exit611.get_run_time.exit607_crit_edge
.LBB236_56:	@ bb1.i605
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #154, 28 @ 2464
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2464]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2472]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+2468]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2476]
	add r3, r3, r2
.LBB236_57:	@ get_run_time.exit607
	sub r3, r3, r8
	ldr r2, .LCPI236_73
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_58:	@ bb119
	cmp r7, #0
	ldreqb r3, [r4, #+29]
	tsteq r3, #8
	beq .LBB236_392	@ bb130
.LBB236_59:	@ bb120
.LBB236_60:	@ bb125
	ldrb r3, [r4, #+29]
	tst r3, #1
	bne .LBB236_378	@ exit_rest_of_compilationthread-split
	b .LBB236_392	@ bb130
.LBB236_61:	@ bb1.i601
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #86, 30 @ 344
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+2392]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2400]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2396]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2404]
	add r8, r8, r3
.LBB236_62:	@ get_run_time.exit603
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl reg_scan
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_426	@ get_run_time.exit603.get_run_time.exit599_crit_edge
.LBB236_63:	@ bb1.i597
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #145, 28 @ 2320
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2320]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2328]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+2324]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2332]
	add r3, r3, r2
.LBB236_64:	@ get_run_time.exit599
	sub r3, r3, r8
	ldr r2, .LCPI236_83
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_427	@ get_run_time.exit599.get_run_time.exit595_crit_edge
.LBB236_65:	@ bb1.i593
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #200
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+2248]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2256]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2252]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2260]
	add r8, r8, r3
.LBB236_66:	@ get_run_time.exit595
	mov r1, #0
	mov r3, #1
	mov r0, r7
	mov r2, #0
	emit_nops_till_bundle_end
	bl jump_optimize
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_428	@ get_run_time.exit595.get_run_time.exit591_crit_edge
.LBB236_67:	@ bb1.i589
	mov r0, #0
	add r1, sp, #98, 26 @ 6272
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2176]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2184]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+2180]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2188]
	add r3, r3, r2
.LBB236_68:	@ get_run_time.exit591
	sub r3, r3, r8
	ldr r2, .LCPI236_83
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_69:	@ bb148
	ldr r3, .LCPI236_84
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_378	@ exit_rest_of_compilationthread-split
.LBB236_70:	@ bb149
	ldr r3, .LCPI236_85
	ldr r3, [r3]
	cmp r3, #0
	ldreqb r3, [r4, #+30]
	tsteq r3, #4
	beq .LBB236_98	@ bb155
	b .LBB236_378	@ exit_rest_of_compilationthread-split
	.align	4
.LBB236_71:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_68:
 	.long	quiet_flag

.LBB236_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_69:
 	.long	output_bytecode

.LBB236_73:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_70:
 	.long	flag_inline_functions

.LBB236_74:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_71:
 	.long	optimize

.LBB236_75:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_72:
 	.long	warn_inline

.LBB236_76:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_73:
 	.long	integration_time

.LBB236_77:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_74:
 	.long	rtl_dump

.LBB236_78:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_75:
 	.long	rtl_dump_file

.LBB236_79:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_76:
 	.long	.str1121372

.LBB236_80:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_77:
 	.long	.str1131373

.LBB236_81:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_78:
 	.long	dump_time

.LBB236_82:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_79:
 	.long	flag_keep_inline_functions

.LBB236_83:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_80:
 	.long	warn_return_type

.LBB236_84:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_81:
 	.long	write_symbols

.LBB236_85:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_82:
 	.long	symout_time

.LBB236_86:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_83:
 	.long	jump_time

.LBB236_87:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_84:
 	.long	rtl_dump_and_exit

.LBB236_88:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_85:
 	.long	flag_syntax_only

.LBB236_89:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_86:
 	.long	jump_opt_dump

.LBB236_90:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_87:
 	.long	jump_opt_dump_file

.LBB236_91:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_88:
 	.long	cse_dump

.LBB236_92:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_89:
 	.long	cse_dump_file

.LBB236_93:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_90:
 	.long	cse_time

.LBB236_94:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_91:
 	.long	flag_thread_jumps

.LBB236_95:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_92:
 	.long	loop_dump

.LBB236_96:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_93:
 	.long	loop_dump_file

.LBB236_97:	@ bb150
	.align	4
.LBB236_98:	@ bb155
	ldr r3, .LCPI236_86
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_104	@ bb157
.LBB236_99:	@ bb156
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_429	@ bb156.get_run_time.exit587_crit_edge
.LBB236_100:	@ bb1.i585
	mov r0, #0
	add r1, sp, #6, 22 @ 6144
	add r1, r1, #56
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+2104]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2112]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2108]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2116]
	add r8, r8, r3
.LBB236_101:	@ get_run_time.exit587
	ldr r9, .LCPI236_87
	ldr r0, [r9]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_76
	emit_nops_till_bundle_end
	bl fprintf
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_430	@ get_run_time.exit587.get_run_time.exit583_crit_edge
.LBB236_102:	@ bb1.i581
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #127, 28 @ 2032
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+2032]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2040]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+2036]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+2044]
	add r3, r3, r2
.LBB236_103:	@ get_run_time.exit583
	sub r3, r3, r8
	ldr r2, .LCPI236_78
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_104:	@ bb157
	ldr r3, .LCPI236_88
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_110	@ bb159
.LBB236_105:	@ bb158
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_431	@ bb158.get_run_time.exit579_crit_edge
.LBB236_106:	@ bb1.i577
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #234, 30 @ 936
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1960]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1968]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1964]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1972]
	add r8, r8, r3
.LBB236_107:	@ get_run_time.exit579
	ldr r3, .LCPI236_89
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_76
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_433	@ get_run_time.exit579.get_run_time.exit575_crit_edge
.LBB236_108:	@ bb1.i573
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #118, 28 @ 1888
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1888]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1896]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1892]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1900]
	add r3, r3, r2
.LBB236_109:	@ get_run_time.exit575
	sub r3, r3, r8
	ldr r2, .LCPI236_78
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_110:	@ bb159
	ldr r3, .LCPI236_71
	ldr r3, [r3]
	cmp r3, #1
	blt .LBB236_136	@ bb165
.LBB236_111:	@ bb160
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_434	@ bb160.get_run_time.exit571_crit_edge
.LBB236_112:	@ bb1.i569
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #198, 30 @ 792
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1816]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1824]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1820]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1828]
	add r8, r8, r3
.LBB236_113:	@ get_run_time.exit571
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #1
	mov r0, r7
	emit_nops_till_bundle_end
	bl reg_scan
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_435	@ get_run_time.exit571.get_run_time.exit567_crit_edge
.LBB236_114:	@ bb1.i565
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #109, 28 @ 1744
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1744]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1752]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1748]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1756]
	add r3, r3, r2
.LBB236_115:	@ get_run_time.exit567
	sub r3, r3, r8
	ldr r2, .LCPI236_90
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_91
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_121	@ bb162
.LBB236_116:	@ bb161
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_436	@ bb161.get_run_time.exit563_crit_edge
.LBB236_117:	@ bb1.i561
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #162, 30 @ 648
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1672]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1680]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1676]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1684]
	add r8, r8, r3
.LBB236_118:	@ get_run_time.exit563
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #1
	mov r0, r7
	emit_nops_till_bundle_end
	bl thread_jumps
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_437	@ get_run_time.exit563.get_run_time.exit559_crit_edge
.LBB236_119:	@ bb1.i557
	mov r0, #0
	add r1, sp, #89, 26 @ 5696
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1600]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1608]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1604]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1612]
	add r3, r3, r2
.LBB236_120:	@ get_run_time.exit559
	sub r3, r3, r8
	ldr r2, .LCPI236_83
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_121:	@ bb162
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_438	@ bb162.get_run_time.exit555_crit_edge
.LBB236_122:	@ bb1.i553
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #126, 30 @ 504
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1528]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1536]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1532]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1540]
	add r8, r8, r3
.LBB236_123:	@ get_run_time.exit555
	ldr r3, .LCPI236_89
	ldr r9, [r3]
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #0
	mov r0, r7
	mov r3, r9
	emit_nops_till_bundle_end
	bl cse_main
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	mov r9, r0
	cmp r3, #0
	bne .LBB236_439	@ get_run_time.exit555.get_run_time.exit551_crit_edge
.LBB236_124:	@ bb1.i549
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #91, 28 @ 1456
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1456]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1464]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1460]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1468]
	add r3, r3, r2
.LBB236_125:	@ get_run_time.exit551
	sub r3, r3, r8
	ldr r2, .LCPI236_90
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_440	@ get_run_time.exit551.get_run_time.exit547_crit_edge
.LBB236_126:	@ bb1.i545
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #90, 30 @ 360
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1384]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1392]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1388]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1396]
	add r8, r8, r3
.LBB236_127:	@ get_run_time.exit547
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl delete_dead_from_cse
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_441	@ get_run_time.exit547.get_run_time.exit543_crit_edge
.LBB236_128:	@ bb1.i541
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #82, 28 @ 1312
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1312]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1320]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1316]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1324]
	add r3, r3, r2
.LBB236_129:	@ get_run_time.exit543
	sub r3, r3, r8
	ldr r2, .LCPI236_90
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	cmp r9, #0
	bne .LBB236_131	@ bb164
.LBB236_130:	@ bb163
	ldr r3, .LCPI236_71
	ldr r3, [r3]
	cmp r3, #2
	blt .LBB236_136	@ bb165
.LBB236_131:	@ bb164
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_442	@ bb164.get_run_time.exit539_crit_edge
.LBB236_132:	@ bb1.i537
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #216
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1240]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1248]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1244]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1252]
	add r8, r8, r3
.LBB236_133:	@ get_run_time.exit539
	mov r1, #0
	mov r0, r7
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl jump_optimize
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_443	@ get_run_time.exit539.get_run_time.exit535_crit_edge
.LBB236_134:	@ bb1.i533
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #73, 28 @ 1168
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1168]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1176]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1172]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1180]
	add r3, r3, r2
.LBB236_135:	@ get_run_time.exit535
	sub r3, r3, r8
	ldr r2, .LCPI236_83
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_136:	@ bb165
	ldr r3, .LCPI236_88
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_142	@ bb167
.LBB236_137:	@ bb166
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_444	@ bb166.get_run_time.exit531_crit_edge
.LBB236_138:	@ bb1.i529
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	add r1, r1, #72
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+1096]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1104]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1100]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1108]
	add r8, r8, r3
.LBB236_139:	@ get_run_time.exit531
	ldr r9, .LCPI236_89
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_445	@ get_run_time.exit531.get_run_time.exit527_crit_edge
.LBB236_140:	@ bb1.i525
	mov r0, #0
	add r1, sp, #5, 22 @ 5120
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+1024]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1032]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+1028]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+1036]
	add r3, r3, r2
.LBB236_141:	@ get_run_time.exit527
	sub r3, r3, r8
	ldr r2, .LCPI236_78
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_142:	@ bb167
	ldr r3, .LCPI236_92
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_148	@ bb169
.LBB236_143:	@ bb168
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_447	@ bb168.get_run_time.exit523_crit_edge
.LBB236_144:	@ bb1.i521
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #238, 30 @ 952
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+952]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+960]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+956]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+964]
	add r8, r8, r3
.LBB236_145:	@ get_run_time.exit523
	ldr r3, .LCPI236_93
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_76
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_448	@ get_run_time.exit523.get_run_time.exit519_crit_edge
.LBB236_146:	@ bb1.i517
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #55, 28 @ 880
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+880]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+888]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+884]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+892]
	add r3, r3, r2
.LBB236_147:	@ get_run_time.exit519
	sub r3, r3, r8
	ldr r2, .LCPI236_78
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_148:	@ bb169
	ldr r3, .LCPI236_71
	ldr r3, [r3]
	cmp r3, #1
	blt .LBB236_154	@ bb171
.LBB236_149:	@ bb170
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_449	@ bb170.get_run_time.exit515_crit_edge
.LBB236_150:	@ bb1.i513
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #202, 30 @ 808
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+808]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+816]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+812]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+820]
	add r8, r8, r3
.LBB236_151:	@ get_run_time.exit515
	ldr r3, .LCPI236_93
	ldr r1, [r3]
	mov r0, r7
	emit_nops_till_bundle_end
	bl loop_optimize
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_450	@ get_run_time.exit515.get_run_time.exit511_crit_edge
.LBB236_152:	@ bb1.i509
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #46, 28 @ 736
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+736]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+744]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+740]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+748]
	add r3, r3, r2
.LBB236_153:	@ get_run_time.exit511
	sub r3, r3, r8
	ldr r2, .LCPI236_94
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_154:	@ bb171
	ldr r3, .LCPI236_92
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_160	@ bb173
.LBB236_155:	@ bb172
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_451	@ bb172.get_run_time.exit507_crit_edge
.LBB236_156:	@ bb1.i505
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #166, 30 @ 664
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+664]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+672]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+668]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+676]
	add r8, r8, r3
.LBB236_157:	@ get_run_time.exit507
	ldr r9, .LCPI236_93
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_452	@ get_run_time.exit507.get_run_time.exit503_crit_edge
.LBB236_158:	@ bb1.i501
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #37, 28 @ 592
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+592]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+600]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+596]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+604]
	add r3, r3, r2
.LBB236_159:	@ get_run_time.exit503
	sub r3, r3, r8
	ldr r2, .LCPI236_78
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_160:	@ bb173
	ldr r3, .LCPI236_95
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_166	@ bb175
.LBB236_161:	@ bb174
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_453	@ bb174.get_run_time.exit499_crit_edge
.LBB236_162:	@ bb1.i497
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #130, 30 @ 520
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+520]
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+528]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+524]
	mla r8, r8, r3, r2
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+532]
	add r8, r8, r3
.LBB236_163:	@ get_run_time.exit499
	ldr r3, .LCPI236_96
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_76
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_68
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_454	@ get_run_time.exit499.get_run_time.exit495_crit_edge
.LBB236_164:	@ bb1.i493
	mov r0, #0
	add r1, sp, #71, 26 @ 4544
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+448]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+456]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+452]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+460]
	add r3, r3, r2
.LBB236_165:	@ get_run_time.exit495
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_166:	@ bb175
	ldr r3, .LCPI236_98
	ldr r3, [r3]
	cmp r3, #0
	ble .LBB236_191	@ bb179
.LBB236_167:	@ bb176
	ldr r3, .LCPI236_99
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_190	@ bb179thread-split
.LBB236_168:	@ bb177
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_455	@ bb177.get_run_time.exit491_crit_edge
.LBB236_169:	@ bb1.i489
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #94, 30 @ 376
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+376]
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+384]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+380]
	mla r3, r3, r8, r2
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+388]
	add r8, r3, r8
.LBB236_170:	@ get_run_time.exit491
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl reg_scan
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_456	@ get_run_time.exit491.get_run_time.exit487_crit_edge
.LBB236_171:	@ bb1.i485
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #19, 28 @ 304
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+304]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+312]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+308]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+316]
	add r3, r3, r2
.LBB236_172:	@ get_run_time.exit487
	sub r3, r3, r8
	ldr r2, .LCPI236_101
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_457	@ get_run_time.exit487.get_run_time.exit483_crit_edge
.LBB236_173:	@ bb1.i481
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #232
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+232]
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+240]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+236]
	mla r3, r3, r8, r2
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+244]
	add r8, r3, r8
.LBB236_174:	@ get_run_time.exit483
	mov r1, #0
	mov r3, #1
	mov r0, r7
	mov r2, #0
	emit_nops_till_bundle_end
	bl jump_optimize
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_458	@ get_run_time.exit483.get_run_time.exit479_crit_edge
.LBB236_175:	@ bb1.i477
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #160
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+160]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+168]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+164]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+172]
	add r3, r3, r2
.LBB236_176:	@ get_run_time.exit479
	sub r3, r3, r8
	ldr r2, .LCPI236_101
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_460	@ get_run_time.exit479.get_run_time.exit475_crit_edge
.LBB236_177:	@ bb1.i473
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #88
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+88]
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+96]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+92]
	mla r3, r3, r8, r2
	add r0, sp, #1, 20 @ 4096
	ldr r8, [r0, #+100]
	add r8, r3, r8
.LBB236_178:	@ get_run_time.exit475
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl reg_scan
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_462	@ get_run_time.exit475.get_run_time.exit471_crit_edge
.LBB236_179:	@ bb1.i469
	mov r0, #0
	add r1, sp, #1, 20 @ 4096
	add r1, r1, #16
	emit_nops_till_bundle_end
	bl getrusage
	add r0, sp, #1, 20 @ 4096
	ldr r3, [r0, #+16]
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+24]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	add r0, sp, #1, 20 @ 4096
	ldr r1, [r0, #+20]
	mla r3, r3, r2, r1
	add r0, sp, #1, 20 @ 4096
	ldr r2, [r0, #+28]
	add r3, r3, r2
.LBB236_180:	@ get_run_time.exit471
	sub r3, r3, r8
	ldr r2, .LCPI236_102
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_463	@ get_run_time.exit471.get_run_time.exit467_crit_edge
.LBB236_181:	@ bb1.i465
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #242, 30 @ 968
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+4040]
	ldr r8, [sp, #+4048]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	ldr r2, [sp, #+4044]
	mla r3, r3, r8, r2
	ldr r8, [sp, #+4052]
	add r8, r3, r8
.LBB236_182:	@ get_run_time.exit467
	ldr r3, .LCPI236_96
	ldr r9, [r3]
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #1
	mov r0, r7
	mov r3, r9
	emit_nops_till_bundle_end
	bl cse_main
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	mov r9, r0
	cmp r3, #0
	bne .LBB236_464	@ get_run_time.exit467.get_run_time.exit463_crit_edge
.LBB236_183:	@ bb1.i461
	mov r0, #0
	add r1, sp, #62, 26 @ 3968
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3968]
	ldr r2, [sp, #+3976]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3972]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3980]
	add r3, r3, r2
.LBB236_184:	@ get_run_time.exit463
	sub r3, r3, r8
	ldr r2, .LCPI236_102
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	cmp r9, #0
	beq .LBB236_190	@ bb179thread-split
.LBB236_185:	@ bb178
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_465	@ bb178.get_run_time.exit459_crit_edge
.LBB236_186:	@ bb1.i457
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #206, 30 @ 824
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3896]
	ldr r8, [sp, #+3904]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	ldr r2, [sp, #+3900]
	mla r3, r3, r8, r2
	ldr r8, [sp, #+3908]
	add r8, r3, r8
.LBB236_187:	@ get_run_time.exit459
	mov r1, #0
	mov r0, r7
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl jump_optimize
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_466	@ get_run_time.exit459.get_run_time.exit455_crit_edge
.LBB236_188:	@ bb1.i453
	mov r0, #0
	add r1, sp, #239, 28 @ 3824
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3824]
	ldr r2, [sp, #+3832]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3828]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3836]
	add r3, r3, r2
.LBB236_189:	@ get_run_time.exit455
	sub r3, r3, r8
	ldr r2, .LCPI236_101
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_190:	@ bb179thread-split
	ldr r3, .LCPI236_98
	ldr r3, [r3]
.LBB236_191:	@ bb179
	cmp r3, #1
	blt .LBB236_198	@ bb182
.LBB236_192:	@ bb180
	ldr r3, .LCPI236_103
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_198	@ bb182
.LBB236_193:	@ bb181
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_468	@ bb181.get_run_time.exit451_crit_edge
.LBB236_194:	@ bb1.i449
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #170, 30 @ 680
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+3752]
	ldr r3, [sp, #+3760]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+3756]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+3764]
	add r8, r8, r3
.LBB236_195:	@ get_run_time.exit451
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r2, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl thread_jumps
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_469	@ get_run_time.exit451.get_run_time.exit447_crit_edge
.LBB236_196:	@ bb1.i445
	mov r0, #0
	add r1, sp, #230, 28 @ 3680
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3680]
	ldr r2, [sp, #+3688]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3684]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3692]
	add r3, r3, r2
.LBB236_197:	@ get_run_time.exit447
	sub r3, r3, r8
	ldr r2, .LCPI236_101
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_198:	@ bb182
	ldr r3, .LCPI236_95
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_204	@ bb184
.LBB236_199:	@ bb183
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_470	@ bb183.get_run_time.exit443_crit_edge
.LBB236_200:	@ bb1.i441
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #134, 30 @ 536
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+3608]
	ldr r3, [sp, #+3616]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+3612]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+3620]
	add r8, r8, r3
.LBB236_201:	@ get_run_time.exit443
	ldr r9, .LCPI236_96
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_471	@ get_run_time.exit443.get_run_time.exit439_crit_edge
.LBB236_202:	@ bb1.i437
	mov r0, #0
	add r1, sp, #221, 28 @ 3536
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3536]
	ldr r2, [sp, #+3544]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3540]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3548]
	add r3, r3, r2
.LBB236_203:	@ get_run_time.exit439
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_204:	@ bb184
	ldr r3, .LCPI236_104
	mov r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI236_98
	ldr r3, [r3]
	cmp r3, #1
	ldrge r3, .LCPI236_105
	movge r2, #0
	@comment
strge r2, [r3]
.LBB236_205:	@ bb185
.LBB236_206:	@ bb186
	emit_nops_till_bundle_end
	bl regclass_init
	ldr r3, .LCPI236_106
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_212	@ bb188
.LBB236_207:	@ bb187
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_472	@ bb187.get_run_time.exit435_crit_edge
.LBB236_208:	@ bb1.i433
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #98, 30 @ 392
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+3464]
	ldr r3, [sp, #+3472]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+3468]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+3476]
	add r8, r8, r3
.LBB236_209:	@ get_run_time.exit435
	ldr r3, .LCPI236_107
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_108
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_473	@ get_run_time.exit435.get_run_time.exit431_crit_edge
.LBB236_210:	@ bb1.i429
	mov r0, #0
	add r1, sp, #53, 26 @ 3392
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3392]
	ldr r2, [sp, #+3400]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3396]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3404]
	add r3, r3, r2
.LBB236_211:	@ get_run_time.exit431
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_212:	@ bb188
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	ldr r2, .LCPI236_105
	ldr r8, [r2]
	cmp r3, #0
	bne .LBB236_474	@ bb188.get_run_time.exit427_crit_edge
.LBB236_213:	@ bb1.i425
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #248
	emit_nops_till_bundle_end
	bl getrusage
	ldr r9, [sp, #+3320]
	ldr r3, [sp, #+3328]
	add r9, r3, r9
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+3324]
	mla r9, r9, r3, r2
	ldr r3, [sp, #+3332]
	add r9, r9, r3
.LBB236_214:	@ get_run_time.exit427
	cmp r8, #0
	beq .LBB236_242	@ bb190
.LBB236_215:	@ bb189
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl regclass
	ldr r3, .LCPI236_107
	ldr r8, [r3]
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl stupid_life_analysis
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_475	@ bb189.get_run_time.exit423_crit_edge
.LBB236_216:	@ bb1.i421
	mov r0, #0
	add r1, sp, #203, 28 @ 3248
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3248]
	ldr r2, [sp, #+3256]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3252]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3260]
	add r3, r3, r2
.LBB236_217:	@ get_run_time.exit423
	sub r9, r3, r9
	ldr r3, .LCPI236_109
	ldr r2, [r3]
	add r9, r9, r2
	@comment
str r9, [r3]
	b .LBB236_246	@ bb192
	.align	4
.LBB236_218:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_94:
 	.long	loop_time

.LBB236_219:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_95:
 	.long	cse2_dump

.LBB236_220:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_96:
 	.long	cse2_dump_file

.LBB236_221:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_97:
 	.long	dump_time

.LBB236_222:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_98:
 	.long	optimize

.LBB236_223:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_99:
 	.long	flag_rerun_cse_after_loop

.LBB236_224:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_100:
 	.long	quiet_flag

.LBB236_225:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_101:
 	.long	jump_time

.LBB236_226:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_102:
 	.long	cse2_time

.LBB236_227:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_103:
 	.long	flag_thread_jumps

.LBB236_228:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_104:
 	.long	cse_not_expected

.LBB236_229:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_105:
 	.long	obey_regdecls

.LBB236_230:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_106:
 	.long	flow_dump

.LBB236_231:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_107:
 	.long	flow_dump_file

.LBB236_232:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_108:
 	.long	.str1121372

.LBB236_233:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_109:
 	.long	flow_time

.LBB236_234:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_110:
 	.long	warn_uninitialized

.LBB236_235:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_111:
 	.long	combine_time

.LBB236_236:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_112:
 	.long	combine_dump

.LBB236_237:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_113:
 	.long	combine_dump_file

.LBB236_238:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_114:
 	.long	sched_dump

.LBB236_239:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_115:
 	.long	sched_dump_file

.LBB236_240:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_116:
 	.long	flag_schedule_insns

.LBB236_241:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_117:
 	.long	sched_time

	.align	4
.LBB236_242:	@ bb190
	ldr r3, .LCPI236_107
	ldr r8, [r3]
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl flow_analysis
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_476	@ bb190.get_run_time.exit419_crit_edge
.LBB236_243:	@ bb1.i417
	mov r0, #0
	add r1, sp, #3, 22 @ 3072
	add r1, r1, #104
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3176]
	ldr r2, [sp, #+3184]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3180]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3188]
	add r3, r3, r2
.LBB236_244:	@ get_run_time.exit419
	sub r3, r3, r9
	ldr r2, .LCPI236_109
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_110
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_246	@ bb192
.LBB236_245:	@ bb191
	ldr r0, [r4, #+48]
	emit_nops_till_bundle_end
	bl uninitialized_vars_warning
	emit_nops_till_bundle_end
	bl setjmp_args_warning
.LBB236_246:	@ bb192
	ldr r3, .LCPI236_106
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_252	@ bb194
.LBB236_247:	@ bb193
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_477	@ bb193.get_run_time.exit415_crit_edge
.LBB236_248:	@ bb1.i413
	mov r0, #0
	add r1, sp, #194, 28 @ 3104
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+3104]
	ldr r3, [sp, #+3112]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+3108]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+3116]
	add r8, r8, r3
.LBB236_249:	@ get_run_time.exit415
	ldr r9, .LCPI236_107
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_479	@ get_run_time.exit415.get_run_time.exit411_crit_edge
.LBB236_250:	@ bb1.i409
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #246, 30 @ 984
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+3032]
	ldr r2, [sp, #+3040]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+3036]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+3044]
	add r3, r3, r2
.LBB236_251:	@ get_run_time.exit411
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_252:	@ bb194
	ldr r3, .LCPI236_98
	ldr r3, [r3]
	cmp r3, #1
	blt .LBB236_258	@ bb196
.LBB236_253:	@ bb195
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_480	@ bb195.get_run_time.exit407_crit_edge
.LBB236_254:	@ bb1.i405
	mov r0, #0
	add r1, sp, #185, 28 @ 2960
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2960]
	ldr r3, [sp, #+2968]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2964]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2972]
	add r8, r8, r3
.LBB236_255:	@ get_run_time.exit407
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl combine_instructions
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_481	@ get_run_time.exit407.get_run_time.exit403_crit_edge
.LBB236_256:	@ bb1.i401
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #210, 30 @ 840
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2888]
	ldr r2, [sp, #+2896]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2892]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2900]
	add r3, r3, r2
.LBB236_257:	@ get_run_time.exit403
	sub r3, r3, r8
	ldr r2, .LCPI236_111
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_258:	@ bb196
	ldr r3, .LCPI236_112
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_264	@ bb198
.LBB236_259:	@ bb197
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_482	@ bb197.get_run_time.exit399_crit_edge
.LBB236_260:	@ bb1.i397
	mov r0, #0
	add r1, sp, #11, 24 @ 2816
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2816]
	ldr r3, [sp, #+2824]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2820]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2828]
	add r8, r8, r3
.LBB236_261:	@ get_run_time.exit399
	ldr r9, .LCPI236_113
	ldr r0, [r9]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_108
	emit_nops_till_bundle_end
	bl fprintf
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl dump_combine_stats
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_483	@ get_run_time.exit399.get_run_time.exit395_crit_edge
.LBB236_262:	@ bb1.i393
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #174, 30 @ 696
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2744]
	ldr r2, [sp, #+2752]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2748]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2756]
	add r3, r3, r2
.LBB236_263:	@ get_run_time.exit395
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_264:	@ bb198
	ldr r3, .LCPI236_114
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_270	@ bb200
.LBB236_265:	@ bb199
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_485	@ bb199.get_run_time.exit391_crit_edge
.LBB236_266:	@ bb1.i389
	mov r0, #0
	add r1, sp, #167, 28 @ 2672
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2672]
	ldr r3, [sp, #+2680]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2676]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2684]
	add r8, r8, r3
.LBB236_267:	@ get_run_time.exit391
	ldr r3, .LCPI236_115
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_108
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_486	@ get_run_time.exit391.get_run_time.exit387_crit_edge
.LBB236_268:	@ bb1.i385
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #138, 30 @ 552
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2600]
	ldr r2, [sp, #+2608]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2604]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2612]
	add r3, r3, r2
.LBB236_269:	@ get_run_time.exit387
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_270:	@ bb200
	ldr r3, .LCPI236_98
	ldr r3, [r3]
	cmp r3, #1
	blt .LBB236_277	@ bb203
.LBB236_271:	@ bb201
	ldr r3, .LCPI236_116
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_277	@ bb203
.LBB236_272:	@ bb202
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_487	@ bb202.get_run_time.exit383_crit_edge
.LBB236_273:	@ bb1.i381
	mov r0, #0
	add r1, sp, #158, 28 @ 2528
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2528]
	ldr r3, [sp, #+2536]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2532]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2540]
	add r8, r8, r3
.LBB236_274:	@ get_run_time.exit383
	ldr r3, .LCPI236_115
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl schedule_insns
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_488	@ get_run_time.exit383.get_run_time.exit379_crit_edge
.LBB236_275:	@ bb1.i377
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #102, 30 @ 408
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2456]
	ldr r2, [sp, #+2464]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2460]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2468]
	add r3, r3, r2
.LBB236_276:	@ get_run_time.exit379
	sub r3, r3, r8
	ldr r2, .LCPI236_117
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_277:	@ bb203
	ldr r3, .LCPI236_114
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_283	@ bb205
.LBB236_278:	@ bb204
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_489	@ bb204.get_run_time.exit375_crit_edge
.LBB236_279:	@ bb1.i373
	mov r0, #0
	add r1, sp, #149, 28 @ 2384
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2384]
	ldr r3, [sp, #+2392]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2388]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2396]
	add r8, r8, r3
.LBB236_280:	@ get_run_time.exit375
	ldr r9, .LCPI236_115
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_492	@ get_run_time.exit375.get_run_time.exit371_crit_edge
.LBB236_281:	@ bb1.i369
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #66, 30 @ 264
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2312]
	ldr r2, [sp, #+2320]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2316]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2324]
	add r3, r3, r2
.LBB236_282:	@ get_run_time.exit371
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_283:	@ bb205
	ldr r3, .LCPI236_105
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_289	@ bb207
.LBB236_284:	@ bb206
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_493	@ bb206.get_run_time.exit367_crit_edge
.LBB236_285:	@ bb1.i365
	mov r0, #0
	add r1, sp, #35, 26 @ 2240
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2240]
	ldr r3, [sp, #+2248]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2244]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2252]
	add r8, r8, r3
.LBB236_286:	@ get_run_time.exit367
	emit_nops_till_bundle_end
	bl max_reg_num
	mov r1, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl regclass
	emit_nops_till_bundle_end
	bl local_alloc
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_494	@ get_run_time.exit367.get_run_time.exit363_crit_edge
.LBB236_287:	@ bb1.i361
	mov r0, #0
	add r1, sp, #2, 22 @ 2048
	add r1, r1, #120
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2168]
	ldr r2, [sp, #+2176]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2172]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2180]
	add r3, r3, r2
.LBB236_288:	@ get_run_time.exit363
	sub r3, r3, r8
	ldr r2, .LCPI236_118
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_289:	@ bb207
	ldr r3, .LCPI236_119
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_295	@ bb209
.LBB236_290:	@ bb208
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_495	@ bb208.get_run_time.exit359_crit_edge
.LBB236_291:	@ bb1.i357
	mov r0, #0
	add r1, sp, #131, 28 @ 2096
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+2096]
	ldr r3, [sp, #+2104]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+2100]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+2108]
	add r8, r8, r3
.LBB236_292:	@ get_run_time.exit359
	ldr r9, .LCPI236_120
	ldr r0, [r9]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_108
	emit_nops_till_bundle_end
	bl fprintf
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl dump_flow_info
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl dump_local_alloc
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_496	@ get_run_time.exit359.get_run_time.exit355_crit_edge
.LBB236_293:	@ bb1.i353
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #250, 30 @ 1000
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+2024]
	ldr r2, [sp, #+2032]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+2028]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+2036]
	add r3, r3, r2
.LBB236_294:	@ get_run_time.exit355
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_295:	@ bb209
	ldr r3, .LCPI236_121
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_301	@ bb211
.LBB236_296:	@ bb210
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_497	@ bb210.get_run_time.exit351_crit_edge
.LBB236_297:	@ bb1.i349
	mov r0, #0
	add r1, sp, #122, 28 @ 1952
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+1952]
	ldr r3, [sp, #+1960]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+1956]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+1964]
	add r8, r8, r3
.LBB236_298:	@ get_run_time.exit351
	ldr r3, .LCPI236_122
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_108
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_498	@ get_run_time.exit351.get_run_time.exit347_crit_edge
.LBB236_299:	@ bb1.i345
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #214, 30 @ 856
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1880]
	ldr r2, [sp, #+1888]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1884]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1892]
	add r3, r3, r2
.LBB236_300:	@ get_run_time.exit347
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_301:	@ bb211
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_499	@ bb211.get_run_time.exit343_crit_edge
.LBB236_302:	@ bb1.i341
	mov r0, #0
	add r1, sp, #113, 28 @ 1808
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+1808]
	ldr r3, [sp, #+1816]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+1812]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+1820]
	add r8, r8, r3
.LBB236_303:	@ get_run_time.exit343
	ldr r3, .LCPI236_105
	ldr r3, [r3]
	ldr r2, .LCPI236_122
	ldr r2, [r2]
	cmp r3, #0
	beq .LBB236_500	@ bb212
.LBB236_304:	@ bb213
	mov r1, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl reload
.LBB236_305:	@ bb214
	mov r9, r0
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_501	@ bb214.get_run_time.exit339_crit_edge
.LBB236_306:	@ bb1.i337
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #178, 30 @ 712
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1736]
	ldr r2, [sp, #+1744]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1740]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1748]
	add r3, r3, r2
.LBB236_307:	@ get_run_time.exit339
	sub r3, r3, r8
	ldr r2, .LCPI236_123
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_121
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_313	@ bb216
.LBB236_308:	@ bb215
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_502	@ bb215.get_run_time.exit335_crit_edge
.LBB236_309:	@ bb1.i333
	mov r0, #0
	add r1, sp, #26, 26 @ 1664
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+1664]
	ldr r3, [sp, #+1672]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+1668]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+1676]
	add r8, r8, r3
.LBB236_310:	@ get_run_time.exit335
	ldr r10, .LCPI236_122
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl dump_global_regs
	ldr r0, [r10]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_503	@ get_run_time.exit335.get_run_time.exit331_crit_edge
.LBB236_311:	@ bb1.i329
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #142, 30 @ 568
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1592]
	ldr r2, [sp, #+1600]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1596]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1604]
	add r3, r3, r2
.LBB236_312:	@ get_run_time.exit331
	sub r3, r3, r8
	ldr r2, .LCPI236_97
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_313:	@ bb216
	cmp r9, #0
	bne .LBB236_378	@ exit_rest_of_compilationthread-split
.LBB236_314:	@ bb217
	ldr r3, .LCPI236_124
	mov r2, #1
	@comment
str r2, [r3]
	mov r0, r7
	emit_nops_till_bundle_end
	bl thread_prologue_and_epilogue_insns
	ldr r3, .LCPI236_98
	ldr r3, [r3]
	cmp r3, #0
	ble .LBB236_333	@ bb223
.LBB236_315:	@ bb218
	ldr r3, .LCPI236_125
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_332	@ bb223thread-split
.LBB236_316:	@ bb219
	ldr r3, .LCPI236_126
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_322	@ bb221
.LBB236_317:	@ bb220
	ldr r3, .LCPI236_100
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_504	@ bb220.get_run_time.exit327_crit_edge
.LBB236_318:	@ bb1.i325
	mov r0, #0
	add r1, sp, #95, 28 @ 1520
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1520]
	ldr r8, [sp, #+1528]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	ldr r2, [sp, #+1524]
	mla r3, r3, r8, r2
	ldr r8, [sp, #+1532]
	add r8, r3, r8
.LBB236_319:	@ get_run_time.exit327
	ldr r3, .LCPI236_127
	ldr r0, [r3]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_128
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_505	@ get_run_time.exit327.get_run_time.exit323_crit_edge
.LBB236_320:	@ bb1.i321
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #106, 30 @ 424
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1448]
	ldr r2, [sp, #+1456]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1452]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1460]
	add r3, r3, r2
.LBB236_321:	@ get_run_time.exit323
	sub r3, r3, r8
	ldr r2, .LCPI236_130
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_322:	@ bb221
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_506	@ bb221.get_run_time.exit319_crit_edge
.LBB236_323:	@ bb1.i317
	mov r0, #0
	add r1, sp, #86, 28 @ 1376
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1376]
	ldr r8, [sp, #+1384]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	ldr r2, [sp, #+1380]
	mla r3, r3, r8, r2
	ldr r8, [sp, #+1388]
	add r8, r3, r8
.LBB236_324:	@ get_run_time.exit319
	ldr r3, .LCPI236_127
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl schedule_insns
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_507	@ get_run_time.exit319.get_run_time.exit315_crit_edge
.LBB236_325:	@ bb1.i313
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #70, 30 @ 280
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1304]
	ldr r2, [sp, #+1312]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1308]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1316]
	add r3, r3, r2
.LBB236_326:	@ get_run_time.exit315
	sub r3, r3, r8
	ldr r2, .LCPI236_131
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_126
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_332	@ bb223thread-split
.LBB236_327:	@ bb222
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_508	@ bb222.get_run_time.exit311_crit_edge
.LBB236_328:	@ bb1.i309
	mov r0, #0
	add r1, sp, #77, 28 @ 1232
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1232]
	ldr r8, [sp, #+1240]
	add r3, r8, r3
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
	ldr r2, [sp, #+1236]
	mla r3, r3, r8, r2
	ldr r8, [sp, #+1244]
	add r8, r3, r8
.LBB236_329:	@ get_run_time.exit311
	ldr r9, .LCPI236_127
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_509	@ get_run_time.exit311.get_run_time.exit307_crit_edge
.LBB236_330:	@ bb1.i305
	mov r0, #0
	add r1, sp, #1, 22 @ 1024
	add r1, r1, #136
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1160]
	ldr r2, [sp, #+1168]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1164]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1172]
	add r3, r3, r2
.LBB236_331:	@ get_run_time.exit307
	sub r3, r3, r8
	ldr r2, .LCPI236_130
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_332:	@ bb223thread-split
	ldr r3, .LCPI236_132
	ldr r3, [r3]
.LBB236_333:	@ bb223
	cmp r3, #1
	blt .LBB236_339	@ bb225
.LBB236_334:	@ bb224
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_510	@ bb224.get_run_time.exit303_crit_edge
.LBB236_335:	@ bb1.i301
	mov r0, #0
	add r1, sp, #17, 26 @ 1088
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+1088]
	ldr r3, [sp, #+1096]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+1092]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+1100]
	add r8, r8, r3
.LBB236_336:	@ get_run_time.exit303
	mov r1, #1
	mov r3, #0
	mov r0, r7
	mov r2, #1
	emit_nops_till_bundle_end
	bl jump_optimize
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_511	@ get_run_time.exit303.get_run_time.exit299_crit_edge
.LBB236_337:	@ bb1.i297
	mov r0, #0
	add r1, sp, #254, 30 @ 1016
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+1016]
	ldr r2, [sp, #+1024]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+1020]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+1028]
	add r3, r3, r2
.LBB236_338:	@ get_run_time.exit299
	sub r3, r3, r8
	ldr r2, .LCPI236_133
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_339:	@ bb225
	ldr r3, .LCPI236_134
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_345	@ bb227
.LBB236_340:	@ bb226
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_512	@ bb226.get_run_time.exit295_crit_edge
.LBB236_341:	@ bb1.i293
	mov r0, #0
	add r1, sp, #59, 28 @ 944
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+944]
	ldr r3, [sp, #+952]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+948]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+956]
	add r8, r8, r3
.LBB236_342:	@ get_run_time.exit295
	ldr r9, .LCPI236_135
	ldr r0, [r9]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_128
	emit_nops_till_bundle_end
	bl fprintf
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_513	@ get_run_time.exit295.get_run_time.exit291_crit_edge
.LBB236_343:	@ bb1.i289
	mov r0, #0
	add r1, sp, #218, 30 @ 872
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+872]
	ldr r2, [sp, #+880]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+876]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+884]
	add r3, r3, r2
.LBB236_344:	@ get_run_time.exit291
	sub r3, r3, r8
	ldr r2, .LCPI236_130
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_345:	@ bb227
	ldr r3, .LCPI236_132
	ldr r3, [r3]
	cmp r3, #1
	blt .LBB236_357	@ bb231
.LBB236_346:	@ bb228
	ldr r3, .LCPI236_136
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_357	@ bb231
.LBB236_347:	@ bb229
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_514	@ bb229.get_run_time.exit287_crit_edge
.LBB236_348:	@ bb1.i285
	mov r0, #0
	add r1, sp, #50, 28 @ 800
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+800]
	ldr r3, [sp, #+808]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+804]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+812]
	add r8, r8, r3
.LBB236_349:	@ get_run_time.exit287
	ldr r3, .LCPI236_137
	ldr r1, [r3]
	mov r0, r7
	emit_nops_till_bundle_end
	bl dbr_schedule
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_516	@ get_run_time.exit287.get_run_time.exit283_crit_edge
.LBB236_350:	@ bb1.i281
	mov r0, #0
	add r1, sp, #182, 30 @ 728
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+728]
	ldr r2, [sp, #+736]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+732]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+740]
	add r3, r3, r2
.LBB236_351:	@ get_run_time.exit283
	sub r3, r3, r8
	ldr r2, .LCPI236_138
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_139
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_357	@ bb231
.LBB236_352:	@ bb230
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_517	@ bb230.get_run_time.exit279_crit_edge
.LBB236_353:	@ bb1.i277
	mov r0, #0
	add r1, sp, #41, 28 @ 656
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+656]
	ldr r3, [sp, #+664]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+660]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+668]
	add r8, r8, r3
.LBB236_354:	@ get_run_time.exit279
	ldr r9, .LCPI236_137
	ldr r0, [r9]
	ldr r3, [r4, #+32]
	ldr r2, [r3, #+16]
	ldr r1, .LCPI236_128
	emit_nops_till_bundle_end
	bl fprintf
	ldr r0, [r9]
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_rtl
	ldr r0, [r9]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_518	@ get_run_time.exit279.get_run_time.exit275_crit_edge
.LBB236_355:	@ bb1.i273
	mov r0, #0
	add r1, sp, #146, 30 @ 584
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+584]
	ldr r2, [sp, #+592]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+588]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+596]
	add r3, r3, r2
.LBB236_356:	@ get_run_time.exit275
	sub r3, r3, r8
	ldr r2, .LCPI236_130
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_357:	@ bb231
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_519	@ bb231.get_run_time.exit271_crit_edge
.LBB236_358:	@ bb1.i269
	mov r0, #0
	add r1, sp, #2, 24 @ 512
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+512]
	ldr r3, [sp, #+520]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+516]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+524]
	add r8, r8, r3
.LBB236_359:	@ get_run_time.exit271
	emit_nops_till_bundle_end
	bl get_insns
	emit_nops_till_bundle_end
	bl shorten_branches
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_520	@ get_run_time.exit271.get_run_time.exit267_crit_edge
.LBB236_360:	@ bb1.i265
	mov r0, #0
	add r1, sp, #110, 30 @ 440
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+440]
	ldr r2, [sp, #+448]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+444]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+452]
	add r3, r3, r2
.LBB236_361:	@ get_run_time.exit267
	sub r3, r3, r8
	ldr r2, .LCPI236_140
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_129
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_521	@ get_run_time.exit267.get_run_time.exit263_crit_edge
.LBB236_362:	@ bb1.i261
	mov r0, #0
	add r1, sp, #23, 28 @ 368
	emit_nops_till_bundle_end
	bl getrusage
	ldr r8, [sp, #+368]
	ldr r3, [sp, #+376]
	add r8, r3, r8
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+372]
	mla r8, r8, r3, r2
	ldr r3, [sp, #+380]
	add r8, r8, r3
.LBB236_363:	@ get_run_time.exit263
	ldr r3, [r4, #+68]
	ldrh r2, [r3]
	cmp r2, #57
	ldreq r3, [r3, #+4]
	ldreqh r2, [r3]
	cmpeq r2, #59
	beq .LBB236_370	@ bb235
	b .LBB236_522	@ bb232
	.align	4
.LBB236_364:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_118:
 	.long	local_alloc_time

.LBB236_365:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_119:
 	.long	local_reg_dump

.LBB236_366:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_120:
 	.long	local_reg_dump_file

.LBB236_367:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_121:
 	.long	global_reg_dump

.LBB236_368:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_122:
 	.long	global_reg_dump_file

.LBB236_369:	@ bb233
	.align	4
.LBB236_370:	@ bb235
	ldr r9, [r3, #+4]
	mov r0, r4
	mov r1, r9
	emit_nops_till_bundle_end
	bl assemble_start_function
	ldr r10, .LCPI236_141
	ldr r1, [r10]
	ldr r11, .LCPI236_132
	ldr r2, [r11]
	mov r0, r7
	emit_nops_till_bundle_end
	bl final_start_function
	ldr r1, [r10]
	ldr r2, [r11]
	mov r3, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl final
	ldr r1, [r10]
	ldr r2, [r11]
	mov r0, r7
	emit_nops_till_bundle_end
	bl final_end_function
	mov r0, r4
	mov r1, r9
	emit_nops_till_bundle_end
	bl assemble_end_function
	ldr r0, [r10]
	emit_nops_till_bundle_end
	bl fflush
	ldr r3, .LCPI236_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_523	@ bb235.get_run_time.exit259_crit_edge
.LBB236_371:	@ bb1.i257
	mov r0, #0
	add r1, sp, #74, 30 @ 296
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+296]
	ldr r2, [sp, #+304]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+300]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+308]
	add r3, r3, r2
.LBB236_372:	@ get_run_time.exit259
	sub r3, r3, r8
	ldr r2, .LCPI236_66
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI236_13
	ldr r3, [r3]
	cmp r3, #3
	bne .LBB236_379	@ exit_rest_of_compilation
.LBB236_373:	@ bb236
	ldr r3, .LCPI236_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_524	@ bb236.get_run_time.exit255_crit_edge
.LBB236_374:	@ bb1.i253
	mov r0, #0
	add r1, sp, #224
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+224]
	ldr r7, [sp, #+232]
	add r3, r7, r3
	mov r7, #9, 26 @ 576
	orr r7, r7, #61, 18 @ 999424
	ldr r2, [sp, #+228]
	mla r3, r3, r7, r2
	ldr r7, [sp, #+236]
	add r7, r3, r7
.LBB236_375:	@ get_run_time.exit255
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl dwarfout_file_scope_decl
	ldr r3, .LCPI236_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB236_526	@ get_run_time.exit255.get_run_time.exit251_crit_edge
.LBB236_376:	@ bb1.i249
	mov r0, #0
	add r1, sp, #152
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+152]
	ldr r2, [sp, #+160]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+156]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+164]
	add r3, r3, r2
.LBB236_377:	@ get_run_time.exit251
	sub r3, r3, r7
	ldr r2, .LCPI236_14
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB236_378:	@ exit_rest_of_compilationthread-split
	ldr r3, .LCPI236_13
	ldr r3, [r3]
.LBB236_379:	@ exit_rest_of_compilation
	cmp r3, #2
	moveq r0, #0
	emit_nops_till_bundle_end
	bleq sdbout_types
.LBB236_380:	@ bb237
.LBB236_381:	@ bb238
	cmp r6, #0
	@comment
strne r6, [r4, #+48]
.LBB236_382:	@ bb239
.LBB236_383:	@ bb240
	cmp r5, #0
	@comment
strne r5, [r4, #+40]
.LBB236_384:	@ bb241
.LBB236_385:	@ bb242
	ldr r3, .LCPI236_53
	mov r2, #0
	@comment
str r2, [r3]
	emit_nops_till_bundle_end
	bl init_insn_lengths
	emit_nops_till_bundle_end
	bl clear_const_double_mem
	emit_nops_till_bundle_end
	bl resume_temporary_allocation
	ldr r3, .LCPI236_0
	ldr r3, [r3]
	ldr r2, .LCPI236_67
	ldr r4, [r2]
	cmp r3, #0
	bne .LBB236_527	@ bb242.get_run_time.exit247_crit_edge
.LBB236_386:	@ bb1.i245
	mov r0, #0
	add r1, sp, #80
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+80]
	ldr r2, [sp, #+88]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+84]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+92]
	add r3, r3, r2
.LBB236_387:	@ get_run_time.exit247
	ldr r2, [sp, #+4]
	add r2, r4, r2
	sub r3, r2, r3
	ldr r2, .LCPI236_67
	@comment
str r3, [r2]
.LBB236_388:	@ return
	sfi_add sp, sp, #65, 30 @ 260
	sfi_add sp, sp, #7, 22 @ 7168
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB236_389:	@ entry.get_run_time.exit_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+4]
	b .LBB236_2	@ get_run_time.exit
	.align	4
.LBB236_390:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_123:
 	.long	global_alloc_time

	.align	4
.LBB236_391:	@ bb.bb130_crit_edge
	mov r5, #0
	mov r6, r5
.LBB236_392:	@ bb130
	ldrb r3, [r4, #+30]
	tst r3, #4
	bne .LBB236_394	@ bb136
.LBB236_393:	@ bb135
	ldrb r3, [r4, #+10]
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+3]
	orr r3, r3, r0, lsl #8
	ldrb r0, [r2, #+1]
	orr r0, r1, r0, lsl #8
	orr r3, r0, r3, lsl #16
	orr r3, r3, #2, 18 @ 32768
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB236_394:	@ bb136
	ldr r3, .LCPI236_15
	mov r2, #0
	@comment
str r2, [r3]
	ldr r3, .LCPI236_16
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI236_17
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB236_397	@ bb139
.LBB236_395:	@ bb137
.LBB236_396:	@ bb138
	ldr r3, .LCPI236_12
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_378	@ exit_rest_of_compilationthread-split
.LBB236_397:	@ bb139
	emit_nops_till_bundle_end
	bl rtl_in_current_obstack
	emit_nops_till_bundle_end
	bl get_insns
	mov r7, r0
	emit_nops_till_bundle_end
	bl unshare_all_rtl
	emit_nops_till_bundle_end
	bl get_insns
	mov r1, r0
	ldr r3, .LCPI236_18
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl instantiate_virtual_regs
	ldr r3, .LCPI236_3
	ldr r3, [r3]
	cmp r3, #0
	bgt .LBB236_402	@ bb147
.LBB236_398:	@ bb140
	ldr r3, .LCPI236_19
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI236_12
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB236_401	@ bb142
	b .LBB236_402	@ bb147
	.align	4
.LBB236_399:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_124:
 	.long	reload_completed

.LBB236_400:	@ bb141
	.align	4
.LBB236_401:	@ bb142
	ldrb r3, [r4, #+9]
	tst r3, #16
	beq .LBB236_69	@ bb148
.LBB236_402:	@ bb147
	ldr r3, .LCPI236_0
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB236_61	@ bb1.i601
.LBB236_403:	@ bb147.get_run_time.exit603_crit_edge
	mov r8, #0
	b .LBB236_62	@ get_run_time.exit603
	.align	4
.LBB236_404:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_125:
 	.long	flag_schedule_insns_after_reload

	.align	4
.LBB236_405:	@ bb57.get_run_time.exit651_crit_edge
	mov r5, #0
	b .LBB236_8	@ get_run_time.exit651
	.align	4
.LBB236_406:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_126:
 	.long	sched2_dump

	.align	4
.LBB236_407:	@ bb70.get_run_time.exit647_crit_edge
	mov r6, #0
	b .LBB236_19	@ get_run_time.exit647
.LBB236_408:	@ bb72.get_run_time.exit643_crit_edge
	mov r5, #0
	b .LBB236_23	@ get_run_time.exit643
.LBB236_409:	@ bb74.get_run_time.exit639_crit_edge
	mov r6, #0
	b .LBB236_27	@ get_run_time.exit639
.LBB236_410:	@ bb102.bb106_crit_edge
	mov r5, r6
.LBB236_411:	@ bb106
	tst r5, #2, 22 @ 2048
	tsteq r5, #1, 14 @ 262144
	beq .LBB236_416	@ bb111.bb119_crit_edge
	b .LBB236_47	@ bb116
	.align	4
.LBB236_412:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_127:
 	.long	sched2_dump_file

.LBB236_413:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_128:
 	.long	.str1121372

.LBB236_414:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_129:
 	.long	quiet_flag

.LBB236_415:	@ bb111
	.align	4
.LBB236_416:	@ bb111.bb119_crit_edge
	mov r5, #0
	mov r6, r5
	b .LBB236_58	@ bb119
.LBB236_417:	@ bb104.get_run_time.exit635_crit_edge
	mov r5, #0
	b .LBB236_39	@ get_run_time.exit635
.LBB236_418:	@ get_run_time.exit635.get_run_time.exit631_crit_edge
	mov r6, #0
	b .LBB236_41	@ get_run_time.exit631
.LBB236_419:	@ bb105.get_run_time.exit627_crit_edge
	mov r5, #0
	b .LBB236_44	@ get_run_time.exit627
.LBB236_420:	@ get_run_time.exit627.get_run_time.exit623_crit_edge
	mov r6, #0
	b .LBB236_46	@ get_run_time.exit623
	.align	4
.LBB236_421:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_130:
 	.long	dump_time

	.align	4
.LBB236_422:	@ bb117.get_run_time.exit619_crit_edge
	mov r5, #0
	b .LBB236_50	@ get_run_time.exit619
.LBB236_423:	@ get_run_time.exit619.get_run_time.exit615_crit_edge
	mov r6, #0
	b .LBB236_52	@ get_run_time.exit615
.LBB236_424:	@ bb118.get_run_time.exit611_crit_edge
	mov r8, #0
	b .LBB236_55	@ get_run_time.exit611
.LBB236_425:	@ get_run_time.exit611.get_run_time.exit607_crit_edge
	mov r3, #0
	b .LBB236_57	@ get_run_time.exit607
.LBB236_426:	@ get_run_time.exit603.get_run_time.exit599_crit_edge
	mov r3, #0
	b .LBB236_64	@ get_run_time.exit599
.LBB236_427:	@ get_run_time.exit599.get_run_time.exit595_crit_edge
	mov r8, #0
	b .LBB236_66	@ get_run_time.exit595
.LBB236_428:	@ get_run_time.exit595.get_run_time.exit591_crit_edge
	mov r3, #0
	b .LBB236_68	@ get_run_time.exit591
.LBB236_429:	@ bb156.get_run_time.exit587_crit_edge
	mov r8, #0
	b .LBB236_101	@ get_run_time.exit587
.LBB236_430:	@ get_run_time.exit587.get_run_time.exit583_crit_edge
	mov r3, #0
	b .LBB236_103	@ get_run_time.exit583
.LBB236_431:	@ bb158.get_run_time.exit579_crit_edge
	mov r8, #0
	b .LBB236_107	@ get_run_time.exit579
	.align	4
.LBB236_432:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_131:
 	.long	sched2_time

	.align	4
.LBB236_433:	@ get_run_time.exit579.get_run_time.exit575_crit_edge
	mov r3, #0
	b .LBB236_109	@ get_run_time.exit575
.LBB236_434:	@ bb160.get_run_time.exit571_crit_edge
	mov r8, #0
	b .LBB236_113	@ get_run_time.exit571
.LBB236_435:	@ get_run_time.exit571.get_run_time.exit567_crit_edge
	mov r3, #0
	b .LBB236_115	@ get_run_time.exit567
.LBB236_436:	@ bb161.get_run_time.exit563_crit_edge
	mov r8, #0
	b .LBB236_118	@ get_run_time.exit563
.LBB236_437:	@ get_run_time.exit563.get_run_time.exit559_crit_edge
	mov r3, #0
	b .LBB236_120	@ get_run_time.exit559
.LBB236_438:	@ bb162.get_run_time.exit555_crit_edge
	mov r8, #0
	b .LBB236_123	@ get_run_time.exit555
.LBB236_439:	@ get_run_time.exit555.get_run_time.exit551_crit_edge
	mov r3, #0
	b .LBB236_125	@ get_run_time.exit551
.LBB236_440:	@ get_run_time.exit551.get_run_time.exit547_crit_edge
	mov r8, #0
	b .LBB236_127	@ get_run_time.exit547
.LBB236_441:	@ get_run_time.exit547.get_run_time.exit543_crit_edge
	mov r3, #0
	b .LBB236_129	@ get_run_time.exit543
.LBB236_442:	@ bb164.get_run_time.exit539_crit_edge
	mov r8, #0
	b .LBB236_133	@ get_run_time.exit539
.LBB236_443:	@ get_run_time.exit539.get_run_time.exit535_crit_edge
	mov r3, #0
	b .LBB236_135	@ get_run_time.exit535
.LBB236_444:	@ bb166.get_run_time.exit531_crit_edge
	mov r8, #0
	b .LBB236_139	@ get_run_time.exit531
.LBB236_445:	@ get_run_time.exit531.get_run_time.exit527_crit_edge
	mov r3, #0
	b .LBB236_141	@ get_run_time.exit527
	.align	4
.LBB236_446:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_132:
 	.long	optimize

	.align	4
.LBB236_447:	@ bb168.get_run_time.exit523_crit_edge
	mov r8, #0
	b .LBB236_145	@ get_run_time.exit523
.LBB236_448:	@ get_run_time.exit523.get_run_time.exit519_crit_edge
	mov r3, #0
	b .LBB236_147	@ get_run_time.exit519
.LBB236_449:	@ bb170.get_run_time.exit515_crit_edge
	mov r8, #0
	b .LBB236_151	@ get_run_time.exit515
.LBB236_450:	@ get_run_time.exit515.get_run_time.exit511_crit_edge
	mov r3, #0
	b .LBB236_153	@ get_run_time.exit511
.LBB236_451:	@ bb172.get_run_time.exit507_crit_edge
	mov r8, #0
	b .LBB236_157	@ get_run_time.exit507
.LBB236_452:	@ get_run_time.exit507.get_run_time.exit503_crit_edge
	mov r3, #0
	b .LBB236_159	@ get_run_time.exit503
.LBB236_453:	@ bb174.get_run_time.exit499_crit_edge
	mov r8, #0
	b .LBB236_163	@ get_run_time.exit499
.LBB236_454:	@ get_run_time.exit499.get_run_time.exit495_crit_edge
	mov r3, #0
	b .LBB236_165	@ get_run_time.exit495
.LBB236_455:	@ bb177.get_run_time.exit491_crit_edge
	mov r8, #0
	b .LBB236_170	@ get_run_time.exit491
.LBB236_456:	@ get_run_time.exit491.get_run_time.exit487_crit_edge
	mov r3, #0
	b .LBB236_172	@ get_run_time.exit487
.LBB236_457:	@ get_run_time.exit487.get_run_time.exit483_crit_edge
	mov r8, #0
	b .LBB236_174	@ get_run_time.exit483
.LBB236_458:	@ get_run_time.exit483.get_run_time.exit479_crit_edge
	mov r3, #0
	b .LBB236_176	@ get_run_time.exit479
	.align	4
.LBB236_459:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_133:
 	.long	jump_time

	.align	4
.LBB236_460:	@ get_run_time.exit479.get_run_time.exit475_crit_edge
	mov r8, #0
	b .LBB236_178	@ get_run_time.exit475
	.align	4
.LBB236_461:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_134:
 	.long	jump2_opt_dump

	.align	4
.LBB236_462:	@ get_run_time.exit475.get_run_time.exit471_crit_edge
	mov r3, #0
	b .LBB236_180	@ get_run_time.exit471
.LBB236_463:	@ get_run_time.exit471.get_run_time.exit467_crit_edge
	mov r8, #0
	b .LBB236_182	@ get_run_time.exit467
.LBB236_464:	@ get_run_time.exit467.get_run_time.exit463_crit_edge
	mov r3, #0
	b .LBB236_184	@ get_run_time.exit463
.LBB236_465:	@ bb178.get_run_time.exit459_crit_edge
	mov r8, #0
	b .LBB236_187	@ get_run_time.exit459
.LBB236_466:	@ get_run_time.exit459.get_run_time.exit455_crit_edge
	mov r3, #0
	b .LBB236_189	@ get_run_time.exit455
	.align	4
.LBB236_467:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_135:
 	.long	jump2_opt_dump_file

	.align	4
.LBB236_468:	@ bb181.get_run_time.exit451_crit_edge
	mov r8, #0
	b .LBB236_195	@ get_run_time.exit451
.LBB236_469:	@ get_run_time.exit451.get_run_time.exit447_crit_edge
	mov r3, #0
	b .LBB236_197	@ get_run_time.exit447
.LBB236_470:	@ bb183.get_run_time.exit443_crit_edge
	mov r8, #0
	b .LBB236_201	@ get_run_time.exit443
.LBB236_471:	@ get_run_time.exit443.get_run_time.exit439_crit_edge
	mov r3, #0
	b .LBB236_203	@ get_run_time.exit439
.LBB236_472:	@ bb187.get_run_time.exit435_crit_edge
	mov r8, #0
	b .LBB236_209	@ get_run_time.exit435
.LBB236_473:	@ get_run_time.exit435.get_run_time.exit431_crit_edge
	mov r3, #0
	b .LBB236_211	@ get_run_time.exit431
.LBB236_474:	@ bb188.get_run_time.exit427_crit_edge
	mov r9, #0
	b .LBB236_214	@ get_run_time.exit427
.LBB236_475:	@ bb189.get_run_time.exit423_crit_edge
	mov r3, #0
	b .LBB236_217	@ get_run_time.exit423
.LBB236_476:	@ bb190.get_run_time.exit419_crit_edge
	mov r3, #0
	b .LBB236_244	@ get_run_time.exit419
.LBB236_477:	@ bb193.get_run_time.exit415_crit_edge
	mov r8, #0
	b .LBB236_249	@ get_run_time.exit415
	.align	4
.LBB236_478:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_136:
 	.long	flag_delayed_branch

	.align	4
.LBB236_479:	@ get_run_time.exit415.get_run_time.exit411_crit_edge
	mov r3, #0
	b .LBB236_251	@ get_run_time.exit411
.LBB236_480:	@ bb195.get_run_time.exit407_crit_edge
	mov r8, #0
	b .LBB236_255	@ get_run_time.exit407
.LBB236_481:	@ get_run_time.exit407.get_run_time.exit403_crit_edge
	mov r3, #0
	b .LBB236_257	@ get_run_time.exit403
.LBB236_482:	@ bb197.get_run_time.exit399_crit_edge
	mov r8, #0
	b .LBB236_261	@ get_run_time.exit399
.LBB236_483:	@ get_run_time.exit399.get_run_time.exit395_crit_edge
	mov r3, #0
	b .LBB236_263	@ get_run_time.exit395
	.align	4
.LBB236_484:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_137:
 	.long	dbr_sched_dump_file

	.align	4
.LBB236_485:	@ bb199.get_run_time.exit391_crit_edge
	mov r8, #0
	b .LBB236_267	@ get_run_time.exit391
.LBB236_486:	@ get_run_time.exit391.get_run_time.exit387_crit_edge
	mov r3, #0
	b .LBB236_269	@ get_run_time.exit387
.LBB236_487:	@ bb202.get_run_time.exit383_crit_edge
	mov r8, #0
	b .LBB236_274	@ get_run_time.exit383
.LBB236_488:	@ get_run_time.exit383.get_run_time.exit379_crit_edge
	mov r3, #0
	b .LBB236_276	@ get_run_time.exit379
.LBB236_489:	@ bb204.get_run_time.exit375_crit_edge
	mov r8, #0
	b .LBB236_280	@ get_run_time.exit375
	.align	4
.LBB236_490:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_138:
 	.long	dbr_sched_time

.LBB236_491:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_139:
 	.long	dbr_sched_dump

	.align	4
.LBB236_492:	@ get_run_time.exit375.get_run_time.exit371_crit_edge
	mov r3, #0
	b .LBB236_282	@ get_run_time.exit371
.LBB236_493:	@ bb206.get_run_time.exit367_crit_edge
	mov r8, #0
	b .LBB236_286	@ get_run_time.exit367
.LBB236_494:	@ get_run_time.exit367.get_run_time.exit363_crit_edge
	mov r3, #0
	b .LBB236_288	@ get_run_time.exit363
.LBB236_495:	@ bb208.get_run_time.exit359_crit_edge
	mov r8, #0
	b .LBB236_292	@ get_run_time.exit359
.LBB236_496:	@ get_run_time.exit359.get_run_time.exit355_crit_edge
	mov r3, #0
	b .LBB236_294	@ get_run_time.exit355
.LBB236_497:	@ bb210.get_run_time.exit351_crit_edge
	mov r8, #0
	b .LBB236_298	@ get_run_time.exit351
.LBB236_498:	@ get_run_time.exit351.get_run_time.exit347_crit_edge
	mov r3, #0
	b .LBB236_300	@ get_run_time.exit347
.LBB236_499:	@ bb211.get_run_time.exit343_crit_edge
	mov r8, #0
	b .LBB236_303	@ get_run_time.exit343
.LBB236_500:	@ bb212
	mov r0, r2
	emit_nops_till_bundle_end
	bl global_alloc
	b .LBB236_305	@ bb214
.LBB236_501:	@ bb214.get_run_time.exit339_crit_edge
	mov r3, #0
	b .LBB236_307	@ get_run_time.exit339
.LBB236_502:	@ bb215.get_run_time.exit335_crit_edge
	mov r8, #0
	b .LBB236_310	@ get_run_time.exit335
.LBB236_503:	@ get_run_time.exit335.get_run_time.exit331_crit_edge
	mov r3, #0
	b .LBB236_312	@ get_run_time.exit331
.LBB236_504:	@ bb220.get_run_time.exit327_crit_edge
	mov r8, #0
	b .LBB236_319	@ get_run_time.exit327
.LBB236_505:	@ get_run_time.exit327.get_run_time.exit323_crit_edge
	mov r3, #0
	b .LBB236_321	@ get_run_time.exit323
.LBB236_506:	@ bb221.get_run_time.exit319_crit_edge
	mov r8, #0
	b .LBB236_324	@ get_run_time.exit319
.LBB236_507:	@ get_run_time.exit319.get_run_time.exit315_crit_edge
	mov r3, #0
	b .LBB236_326	@ get_run_time.exit315
.LBB236_508:	@ bb222.get_run_time.exit311_crit_edge
	mov r8, #0
	b .LBB236_329	@ get_run_time.exit311
.LBB236_509:	@ get_run_time.exit311.get_run_time.exit307_crit_edge
	mov r3, #0
	b .LBB236_331	@ get_run_time.exit307
.LBB236_510:	@ bb224.get_run_time.exit303_crit_edge
	mov r8, #0
	b .LBB236_336	@ get_run_time.exit303
.LBB236_511:	@ get_run_time.exit303.get_run_time.exit299_crit_edge
	mov r3, #0
	b .LBB236_338	@ get_run_time.exit299
.LBB236_512:	@ bb226.get_run_time.exit295_crit_edge
	mov r8, #0
	b .LBB236_342	@ get_run_time.exit295
.LBB236_513:	@ get_run_time.exit295.get_run_time.exit291_crit_edge
	mov r3, #0
	b .LBB236_344	@ get_run_time.exit291
.LBB236_514:	@ bb229.get_run_time.exit287_crit_edge
	mov r8, #0
	b .LBB236_349	@ get_run_time.exit287
	.align	4
.LBB236_515:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_140:
 	.long	shorten_branch_time

	.align	4
.LBB236_516:	@ get_run_time.exit287.get_run_time.exit283_crit_edge
	mov r3, #0
	b .LBB236_351	@ get_run_time.exit283
.LBB236_517:	@ bb230.get_run_time.exit279_crit_edge
	mov r8, #0
	b .LBB236_354	@ get_run_time.exit279
.LBB236_518:	@ get_run_time.exit279.get_run_time.exit275_crit_edge
	mov r3, #0
	b .LBB236_356	@ get_run_time.exit275
.LBB236_519:	@ bb231.get_run_time.exit271_crit_edge
	mov r8, #0
	b .LBB236_359	@ get_run_time.exit271
.LBB236_520:	@ get_run_time.exit271.get_run_time.exit267_crit_edge
	mov r3, #0
	b .LBB236_361	@ get_run_time.exit267
.LBB236_521:	@ get_run_time.exit267.get_run_time.exit263_crit_edge
	mov r8, #0
	b .LBB236_363	@ get_run_time.exit263
.LBB236_522:	@ bb232
	emit_nops_till_bundle_end
	bl abort
.LBB236_523:	@ bb235.get_run_time.exit259_crit_edge
	mov r3, #0
	b .LBB236_372	@ get_run_time.exit259
.LBB236_524:	@ bb236.get_run_time.exit255_crit_edge
	mov r7, #0
	b .LBB236_375	@ get_run_time.exit255
	.align	4
.LBB236_525:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_141:
 	.long	asm_out_file

	.align	4
.LBB236_526:	@ get_run_time.exit255.get_run_time.exit251_crit_edge
	mov r3, #0
	b .LBB236_377	@ get_run_time.exit251
.LBB236_527:	@ bb242.get_run_time.exit247_crit_edge
	mov r3, #0
	b .LBB236_387	@ get_run_time.exit247
	.align	4
.LBB236_528:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_0:
 	.long	quiet_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_3:
 	.long	optimize

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_12:
 	.long	warn_return_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_13:
 	.long	write_symbols

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_14:
 	.long	symout_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_15:
 	.long	rtx_equal_function_value_matters

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_16:
 	.long	rtl_dump_and_exit

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_17:
 	.long	flag_syntax_only

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_18:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_19:
 	.long	extra_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_53:
 	.long	reload_completed

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_66:
 	.long	final_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI236_67:
 	.long	parse_time

	.size rest_of_compilation, .-rest_of_compilation


	.globl	rest_of_type_compilation
	.align	4
rest_of_type_compilation:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #144
	ldr r3, .LCPI237_0
	ldr r3, [r3]
	mov r4, r1
	mov r5, r0
	cmp r3, #2
	bne .LBB237_6	@ return
.LBB237_1:	@ bb
	ldr r3, .LCPI237_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB237_7	@ bb.get_run_time.exit_crit_edge
.LBB237_2:	@ bb1.i
	mov r0, #0
	mov r1, sp
	emit_nops_till_bundle_end
	bl getrusage
	ldr r6, [sp]
	ldr r3, [sp, #+8]
	add r6, r3, r6
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+4]
	mla r6, r6, r3, r2
	ldr r3, [sp, #+12]
	add r6, r6, r3
.LBB237_3:	@ get_run_time.exit
	ldr r0, [r5]
	mov r3, #1
	mov r1, #0
	cmp r4, #0
	moveq r1, r3
	emit_nops_till_bundle_end
	bl sdbout_symbol
	ldr r3, .LCPI237_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB237_8	@ get_run_time.exit.get_run_time.exit5_crit_edge
.LBB237_4:	@ bb1.i3
	mov r0, #0
	add r1, sp, #72
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+72]
	ldr r2, [sp, #+80]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+76]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+84]
	add r3, r3, r2
.LBB237_5:	@ get_run_time.exit5
	sub r3, r3, r6
	ldr r2, .LCPI237_2
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB237_6:	@ return
	sfi_add sp, sp, #144
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB237_7:	@ bb.get_run_time.exit_crit_edge
	mov r6, #0
	b .LBB237_3	@ get_run_time.exit
.LBB237_8:	@ get_run_time.exit.get_run_time.exit5_crit_edge
	mov r3, #0
	b .LBB237_5	@ get_run_time.exit5
	.align	4
.LBB237_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI237_0:
 	.long	write_symbols

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI237_1:
 	.long	quiet_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI237_2:
 	.long	symout_time

	.size rest_of_type_compilation, .-rest_of_type_compilation


	.globl	rest_of_decl_compilation
	.align	4
rest_of_decl_compilation:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	sfi_sub sp, sp, #18, 28 @ 288
	ldrb r12, [r0, #+10]
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	tst r12, #4
	ldreqb r3, [r7, #+29]
	moveq r2, r7
	ldreqb r1, [r2, #+28]!
	orreq r3, r1, r3, lsl #8
	ldreqb r1, [r2, #+3]
	ldreqb r2, [r2, #+2]
	orreq r2, r2, r1, lsl #8
	orreq r3, r3, r2, lsl #16
	tsteq r3, #1, 24 @ 256
	beq .LBB238_2	@ bb9
	b .LBB238_3	@ bb10
.LBB238_1:	@ bb
.LBB238_2:	@ bb9
	ldrb r2, [r7, #+8]
	cmp r2, #29
	bne .LBB238_27	@ bb41
.LBB238_3:	@ bb10
	ldr r3, .LCPI238_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB238_41	@ bb10.get_run_time.exit_crit_edge
.LBB238_4:	@ bb1.i
	mov r0, #0
	mov r1, sp
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp]
	ldr r2, [sp, #+8]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r8, [sp, #+4]
	mla r3, r3, r2, r8
	ldr r2, [sp, #+12]
	add r8, r3, r2
.LBB238_5:	@ get_run_time.exit
	mov r0, r7
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl make_decl_rtl
	ldrb r3, [r7, #+8]
	cmp r3, #33
	bne .LBB238_10	@ bb23
.LBB238_6:	@ bb11
	ldrb r3, [r7, #+29]
	tst r3, #1
	beq .LBB238_10	@ bb23
.LBB238_7:	@ bb16
	ldrb r3, [r7, #+9]
	tst r3, #32
	ldrne r3, [r7, #+48]
	cmpne r3, #0
	bne .LBB238_9	@ bb22
	b .LBB238_10	@ bb23
.LBB238_8:	@ bb21
.LBB238_9:	@ bb22
	ldr r2, .LCPI238_1
	ldr r2, [r2]
	cmp r3, r2
	bne .LBB238_15	@ bb29
.LBB238_10:	@ bb23
	cmp r4, #0
	bne .LBB238_14	@ bb28
.LBB238_11:	@ bb23
	cmp r5, #0
	beq .LBB238_14	@ bb28
.LBB238_12:	@ bb26
	ldr r3, [r7, #+48]
	cmp r3, #0
	ldrne r2, .LCPI238_1
	ldrne r2, [r2]
	cmpne r3, r2
	bne .LBB238_14	@ bb28
	b .LBB238_15	@ bb29
.LBB238_13:	@ bb27
.LBB238_14:	@ bb28
	mov r3, #0
	mov r0, r7
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl assemble_variable
.LBB238_15:	@ bb29
	ldr r3, .LCPI238_2
	ldr r3, [r3]
	cmp r3, r7
	ldreq r3, .LCPI238_3
	ldreq r3, [r3]
	ldreq r2, [r7, #+68]
	ldreq r2, [r2, #+4]
	ldreq r6, [r2, #+4]
	cmpeq r3, #0
	beq .LBB238_17	@ bb31
	b .LBB238_23	@ bb40
.LBB238_16:	@ bb30
.LBB238_17:	@ bb31
	ldr r3, [r7, #+20]
	cmp r3, #0
	beq .LBB238_23	@ bb40
.LBB238_18:	@ bb32
	ldr r3, .LCPI238_4
	ldrb r3, [r3]
	mov r2, #1
	mov r1, #0
	tst r3, #16
	mov r3, #0
	moveq r3, r2
	cmp r4, #0
	movne r1, r2
	orr r3, r3, r1
	cmp r5, #0
	beq .LBB238_23	@ bb40
.LBB238_19:	@ bb32
	cmp r3, #0
	bne .LBB238_23	@ bb40
.LBB238_20:	@ bb37
	ldr r3, .LCPI238_1
	ldr r3, [r3]
	ldr r2, [r7, #+48]
	cmp r2, r3
	ldreq r3, .LCPI238_5
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB238_22	@ bb39
	b .LBB238_23	@ bb40
.LBB238_21:	@ bb38
.LBB238_22:	@ bb39
	ldr r3, .LCPI238_5
	mov r2, #1
	@comment
str r2, [r3]
	ldr r5, .LCPI238_6
	ldr r0, [r5]
	ldr r1, .LCPI238_7
	ldr r2, .LCPI238_8
	emit_nops_till_bundle_end
	bl fprintf
	ldr r0, [r5]
	mov r1, r6
	emit_nops_till_bundle_end
	bl assemble_name
	ldr r0, [r7, #+4]
	emit_nops_till_bundle_end
	bl int_size_in_bytes
	mov r2, r0
	ldr r0, [r5]
	ldr r1, .LCPI238_9
	emit_nops_till_bundle_end
	bl fprintf
.LBB238_23:	@ bb40
	ldr r3, .LCPI238_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB238_42	@ bb40.get_run_time.exit70_crit_edge
.LBB238_24:	@ bb1.i68
	mov r0, #0
	add r1, sp, #216
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+216]
	ldr r2, [sp, #+224]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r5, [sp, #+220]
	mla r3, r3, r2, r5
	ldr r2, [sp, #+228]
	add r3, r3, r2
.LBB238_25:	@ get_run_time.exit70
	sub r3, r3, r8
	ldr r2, .LCPI238_10
	ldr r5, [r2]
	add r3, r3, r5
.LBB238_26:	@ get_run_time.exit70
	@comment
str r3, [r2]
	b .LBB238_40	@ return
.LBB238_27:	@ bb41
	tst r3, #1, 22 @ 1024
	cmpne r6, #0
	bne .LBB238_29	@ bb49
	b .LBB238_31	@ bb52
.LBB238_28:	@ bb41
.LBB238_29:	@ bb49
	mov r0, r6
	emit_nops_till_bundle_end
	bl decode_reg_name
	cmp r0, #0
	blt .LBB238_39	@ bb51
.LBB238_30:	@ bb50
	mov r2, #0
	@comment
str r2, [r7, #+68]
	mov r0, r7
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl make_decl_rtl
	b .LBB238_40	@ return
.LBB238_31:	@ bb52
	ldr r3, .LCPI238_12
	ldr r3, [r3]
	cmp r3, #2
	bne .LBB238_40	@ return
.LBB238_32:	@ bb52
	cmp r5, #0
	beq .LBB238_40	@ return
.LBB238_33:	@ bb52
	and r3, r2, #255
	cmp r3, #32
	bne .LBB238_40	@ return
.LBB238_34:	@ bb57
	ldr r3, .LCPI238_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB238_43	@ bb57.get_run_time.exit66_crit_edge
.LBB238_35:	@ bb1.i64
	mov r0, #0
	add r1, sp, #144
	emit_nops_till_bundle_end
	bl getrusage
	ldr r4, [sp, #+144]
	ldr r3, [sp, #+152]
	add r4, r3, r4
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [sp, #+148]
	mla r4, r4, r3, r2
	ldr r3, [sp, #+156]
	add r4, r4, r3
.LBB238_36:	@ get_run_time.exit66
	mov r1, #0
	mov r0, r7
	emit_nops_till_bundle_end
	bl sdbout_symbol
	ldr r3, .LCPI238_0
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB238_44	@ get_run_time.exit66.get_run_time.exit62_crit_edge
.LBB238_37:	@ bb1.i60
	mov r0, #0
	add r1, sp, #72
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [sp, #+72]
	ldr r2, [sp, #+80]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [sp, #+76]
	mla r3, r3, r2, r1
	ldr r2, [sp, #+84]
	add r3, r3, r2
.LBB238_38:	@ get_run_time.exit62
	sub r3, r3, r4
	ldr r2, .LCPI238_13
	ldr r1, [r2]
	add r3, r3, r1
	b .LBB238_26	@ get_run_time.exit70
.LBB238_39:	@ bb51
	ldr r0, .LCPI238_11
	mov r1, r6
	emit_nops_till_bundle_end
	bl error
.LBB238_40:	@ return
	sfi_add sp, sp, #18, 28 @ 288
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB238_41:	@ bb10.get_run_time.exit_crit_edge
	mov r8, #0
	b .LBB238_5	@ get_run_time.exit
.LBB238_42:	@ bb40.get_run_time.exit70_crit_edge
	mov r3, #0
	b .LBB238_25	@ get_run_time.exit70
.LBB238_43:	@ bb57.get_run_time.exit66_crit_edge
	mov r4, #0
	b .LBB238_36	@ get_run_time.exit66
.LBB238_44:	@ get_run_time.exit66.get_run_time.exit62_crit_edge
	mov r3, #0
	b .LBB238_38	@ get_run_time.exit62
	.align	4
.LBB238_45:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_0:
 	.long	quiet_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_1:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_2:
 	.long	last_assemble_variable_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_3:
 	.long	flag_inhibit_size_directive

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_4:
 	.long	target_flags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_5:
 	.long	size_directive_output

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_6:
 	.long	asm_out_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_7:
 	.long	.str1141377

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_8:
 	.long	.str1151378

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_9:
 	.long	.str1161379

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_10:
 	.long	varconst_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_11:
 	.long	.str1171380

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_12:
 	.long	write_symbols

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI238_13:
 	.long	symout_time

	.size rest_of_decl_compilation, .-rest_of_decl_compilation


	.align	4
compile_file:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add r11, sp, #28
	sfi_sub sp, sp, #253, 30 @ 1012
	ldr r3, .LCPI239_120
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	bne .LBB239_2	@ bb10
.LBB239_1:	@ bb
	ldr r3, .LCPI239_121
	cmp r4, #0
	mov r2, r4
	moveq r2, r3
	ldr r3, .LCPI239_120
	@comment
str r2, [r3]
.LBB239_2:	@ bb10
	mov r3, #0
	ldr r2, .LCPI239_122
	@comment
str r3, [r2]
	ldr r2, .LCPI239_123
	@comment
str r3, [r2]
	ldr r2, .LCPI239_124
	@comment
str r3, [r2]
	ldr r2, .LCPI239_125
	@comment
str r3, [r2]
	ldr r2, .LCPI239_126
	@comment
str r3, [r2]
	ldr r2, .LCPI239_127
	@comment
str r3, [r2]
	ldr r2, .LCPI239_128
	@comment
str r3, [r2]
	ldr r2, .LCPI239_129
	@comment
str r3, [r2]
	ldr r2, .LCPI239_130
	@comment
str r3, [r2]
	ldr r2, .LCPI239_131
	@comment
str r3, [r2]
	ldr r2, .LCPI239_132
	@comment
str r3, [r2]
	ldr r2, .LCPI239_133
	@comment
str r3, [r2]
	ldr r2, .LCPI239_134
	@comment
str r3, [r2]
	ldr r2, .LCPI239_135
	@comment
str r3, [r2]
	ldr r2, .LCPI239_136
	@comment
str r3, [r2]
	ldr r2, .LCPI239_137
	@comment
str r3, [r2]
	ldr r2, .LCPI239_138
	@comment
str r3, [r2]
	ldr r2, .LCPI239_139
	@comment
str r3, [r2]
	ldr r2, .LCPI239_140
	@comment
str r3, [r2]
	cmp r4, #0
	beq .LBB239_322	@ bb12
.LBB239_3:	@ bb11
	ldr r1, .LCPI239_141
	mov r0, r4
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB239_322	@ bb12
.LBB239_4:	@ bb13
	ldr r1, .LCPI239_142
	mov r0, r4
	emit_nops_till_bundle_end
	bl fopen
	mov r5, r4
.LBB239_5:	@ bb14
	ldr r3, .LCPI239_143
	@comment
str r0, [r3]
	cmp r0, #0
	bne .LBB239_9	@ bb16
.LBB239_6:	@ bb15
	ldr r4, .LCPI239_144
	ldr r4, [r4]
.LBB239_7:	@ bb15
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI239_145
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r5
.LBB239_8:	@ bb15
	emit_nops_till_bundle_end
	bl perror
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
.LBB239_9:	@ bb16
	emit_nops_till_bundle_end
	bl init_obstacks
	emit_nops_till_bundle_end
	bl init_tree_codes
	emit_nops_till_bundle_end
	bl init_lex
	emit_nops_till_bundle_end
	bl init_rtl
	ldr r3, .LCPI239_146
	ldr r3, [r3]
	sub r3, r3, #2
	mov r2, #1
	mov r0, #0
	cmp r3, #2
	movlo r0, r2
	emit_nops_till_bundle_end
	bl init_emit_once
	emit_nops_till_bundle_end
	bl init_regs
	emit_nops_till_bundle_end
	bl init_decl_processing
	emit_nops_till_bundle_end
	bl init_optabs
	emit_nops_till_bundle_end
	bl init_stmt
	emit_nops_till_bundle_end
	bl init_expmed
	emit_nops_till_bundle_end
	bl init_expr_once
	emit_nops_till_bundle_end
	bl init_loop
	emit_nops_till_bundle_end
	bl init_reload
	ldr r3, .LCPI239_147
	ldr r3, [r3]
	cmp r3, #0
	emit_nops_till_bundle_end
	blne init_caller_save
.LBB239_10:	@ bb17
.LBB239_11:	@ bb18
	ldr r3, .LCPI239_148
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_13	@ bb21
.LBB239_12:	@ bb19
	ldr r3, .LCPI239_149
	ldr r0, [r3]
	ldr r1, .LCPI239_150
	emit_nops_till_bundle_end
	bl fopen
	ldr r3, .LCPI239_151
	@comment
str r0, [r3]
	cmp r0, #0
	beq .LBB239_323	@ bb20
.LBB239_13:	@ bb21
	ldr r3, .LCPI239_152
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_15	@ bb23
.LBB239_14:	@ bb22
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_153
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_154
	@comment
str r0, [r3]
.LBB239_15:	@ bb23
	ldr r3, .LCPI239_155
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_17	@ bb25
.LBB239_16:	@ bb24
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_156
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_157
	@comment
str r0, [r3]
.LBB239_17:	@ bb25
	ldr r3, .LCPI239_158
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_19	@ bb27
.LBB239_18:	@ bb26
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_159
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_160
	@comment
str r0, [r3]
.LBB239_19:	@ bb27
	ldr r3, .LCPI239_161
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_21	@ bb29
.LBB239_20:	@ bb28
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_162
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_163
	@comment
str r0, [r3]
.LBB239_21:	@ bb29
	ldr r3, .LCPI239_164
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_23	@ bb31
.LBB239_22:	@ bb30
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_165
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_166
	@comment
str r0, [r3]
.LBB239_23:	@ bb31
	ldr r3, .LCPI239_167
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_25	@ bb33
.LBB239_24:	@ bb32
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_168
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_169
	@comment
str r0, [r3]
.LBB239_25:	@ bb33
	ldr r3, .LCPI239_170
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_27	@ bb35
.LBB239_26:	@ bb34
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_171
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_172
	@comment
str r0, [r3]
.LBB239_27:	@ bb35
	ldr r3, .LCPI239_173
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_29	@ bb37
.LBB239_28:	@ bb36
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_174
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_175
	@comment
str r0, [r3]
.LBB239_29:	@ bb37
	ldr r3, .LCPI239_176
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_31	@ bb39
.LBB239_30:	@ bb38
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_177
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_178
	@comment
str r0, [r3]
.LBB239_31:	@ bb39
	ldr r3, .LCPI239_179
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_33	@ bb41
.LBB239_32:	@ bb40
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_180
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_181
	@comment
str r0, [r3]
.LBB239_33:	@ bb41
	ldr r3, .LCPI239_182
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_35	@ bb43
.LBB239_34:	@ bb42
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_183
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_184
	@comment
str r0, [r3]
.LBB239_35:	@ bb43
	ldr r3, .LCPI239_185
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_37	@ bb45
.LBB239_36:	@ bb44
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_186
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_187
	@comment
str r0, [r3]
.LBB239_37:	@ bb45
	ldr r3, .LCPI239_188
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_39	@ bb47
.LBB239_38:	@ bb46
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	ldr r1, .LCPI239_189
	emit_nops_till_bundle_end
	bl open_dump_file
	ldr r3, .LCPI239_190
	@comment
str r0, [r3]
.LBB239_39:	@ bb47
	cmp r4, #0
	ldreq r3, .LCPI239_191
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB239_324	@ bb49
.LBB239_40:	@ bb48
.LBB239_41:	@ bb50
	ldr r3, .LCPI239_120
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl strlen
	mov r4, r0
	add r0, r4, #6
	emit_nops_till_bundle_end
	bl malloc
	mov r6, r0
	cmp r0, #0
	ldreq r0, .LCPI239_192
	emit_nops_till_bundle_end
	bleq fatal
.LBB239_42:	@ bb.i
.LBB239_43:	@ xmalloc.exit
	ldr r3, .LCPI239_120
	ldr r1, [r3]
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcpy
	cmp r4, #3
	blt .LBB239_45	@ bb2.i322
.LBB239_44:	@ bb.i320
	add r3, r4, r6
	ldrb r2, [r3, #-2]!
	cmp r2, #46
	beq .LBB239_325	@ bb1.i321
.LBB239_45:	@ bb2.i322
	cmp r4, #4
	blt .LBB239_47	@ bb5.i
.LBB239_46:	@ bb3.i
	add r3, r4, r6
	ldrb r2, [r3, #-3]!
	cmp r2, #46
	beq .LBB239_325	@ bb1.i321
.LBB239_47:	@ bb5.i
	cmp r4, #5
	blt .LBB239_50	@ strip_off_ending.exit
.LBB239_48:	@ bb6.i
	add r3, r4, r6
	ldrb r2, [r3, #-4]!
	cmp r2, #46
	moveq r2, #0
	streqb r2, [r3]
.LBB239_49:	@ bb7.i
.LBB239_50:	@ strip_off_ending.exit
	ldr r1, .LCPI239_193
	mov r0, r6
	emit_nops_till_bundle_end
	bl strcat
	ldr r3, .LCPI239_191
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_54	@ bb52
.LBB239_51:	@ bb51
	mov r0, r6
	emit_nops_till_bundle_end
	bl strlen
	add r0, r0, #1
	emit_nops_till_bundle_end
	bl malloc
	mov r4, r0
	cmp r0, #0
	ldreq r0, .LCPI239_192
	emit_nops_till_bundle_end
	bleq fatal
.LBB239_52:	@ bb.i323
.LBB239_53:	@ xmalloc.exit325
	ldr r3, .LCPI239_191
	@comment
str r4, [r3]
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl strcpy
.LBB239_54:	@ bb52
	ldr r3, .LCPI239_191
	ldr r0, [r3]
	ldr r1, .LCPI239_141
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB239_326	@ bb53
.LBB239_55:	@ bb54
	ldr r3, .LCPI239_191
	ldr r0, [r3]
	ldr r1, .LCPI239_150
	emit_nops_till_bundle_end
	bl fopen
.LBB239_56:	@ bb55
	ldr r3, .LCPI239_194
	@comment
str r0, [r3]
	cmp r0, #0
	beq .LBB239_327	@ bb56
.LBB239_57:	@ bb57
	ldr r3, .LCPI239_195
	@comment
str r5, [r3]
	mov r0, #12
	emit_nops_till_bundle_end
	bl malloc
	mov r4, r0
	cmp r0, #0
	ldreq r0, .LCPI239_192
	emit_nops_till_bundle_end
	bleq fatal
.LBB239_58:	@ bb.i351
.LBB239_59:	@ xmalloc.exit353
	ldr r3, .LCPI239_196
	@comment
str r4, [r3]
	mov r3, #0
	@comment
str r3, [r4, #+4]
	ldr r3, .LCPI239_195
	ldr r3, [r3]
	@comment
str r3, [r4]
	emit_nops_till_bundle_end
	bl lang_init
	ldr r3, .LCPI239_197
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI239_197
	@comment
streq r5, [r3]
.LBB239_60:	@ bb58
.LBB239_61:	@ bb59
	ldr r3, .LCPI239_198
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_63	@ bb61
.LBB239_62:	@ bb60
	ldr r3, .LCPI239_194
	ldr r0, [r3]
	sfi_sub sp, sp, #4
	mov r3, #8
	@comment
str r3, [sp]
	ldr r1, .LCPI239_199
	mov r2, #39
	ldr r3, .LCPI239_200
	emit_nops_till_bundle_end
	bl output_file_start
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_198
	ldr r3, [r3]
.LBB239_63:	@ bb61
	cmp r3, #0
	bne .LBB239_328	@ bb62
.LBB239_64:	@ bb63
	ldr r3, .LCPI239_201
	ldr r3, [r3]
	cmp r3, #1
	beq .LBB239_66	@ bb65
.LBB239_65:	@ bb64
	ldr r3, .LCPI239_194
	ldr r1, [r3]
	ldr r0, .LCPI239_202
	emit_nops_till_bundle_end
	bl fputs
.LBB239_66:	@ bb65
	ldr r3, .LCPI239_198
	ldr r3, [r3]
	ldr r2, .LCPI239_203
	ldr r2, [r2]
	cmp r3, #0
	beq .LBB239_95	@ bb69
.LBB239_67:	@ bb66
	cmp r2, #0
	ldreq r2, .LCPI239_204
	ldreq r2, [r2]
	cmpeq r2, #0
	beq .LBB239_98	@ bb72
.LBB239_68:	@ bb67
.LBB239_69:	@ bb68
	ldr r0, .LCPI239_205
	emit_nops_till_bundle_end
	bl error
	b .LBB239_98	@ bb72
	.align	4
.LBB239_70:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_120:
 	.long	dump_base_name

.LBB239_71:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_121:
 	.long	.str1181381

.LBB239_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_122:
 	.long	parse_time

.LBB239_73:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_123:
 	.long	varconst_time

.LBB239_74:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_124:
 	.long	integration_time

.LBB239_75:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_125:
 	.long	jump_time

.LBB239_76:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_126:
 	.long	cse_time

.LBB239_77:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_127:
 	.long	loop_time

.LBB239_78:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_128:
 	.long	cse2_time

.LBB239_79:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_129:
 	.long	flow_time

.LBB239_80:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_130:
 	.long	combine_time

.LBB239_81:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_131:
 	.long	sched_time

.LBB239_82:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_132:
 	.long	local_alloc_time

.LBB239_83:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_133:
 	.long	global_alloc_time

.LBB239_84:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_134:
 	.long	sched2_time

.LBB239_85:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_135:
 	.long	dbr_sched_time

.LBB239_86:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_136:
 	.long	shorten_branch_time

.LBB239_87:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_137:
 	.long	stack_reg_time

.LBB239_88:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_138:
 	.long	final_time

.LBB239_89:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_139:
 	.long	symout_time

.LBB239_90:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_140:
 	.long	dump_time

.LBB239_91:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_141:
 	.long	.str1191382

.LBB239_92:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_142:
 	.long	.str1211385

.LBB239_93:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_143:
 	.long	finput

.LBB239_94:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_144:
 	.long	progname

	.align	4
.LBB239_95:	@ bb69
	cmp r2, #0
	ldreq r3, .LCPI239_204
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB239_98	@ bb72
.LBB239_96:	@ bb70
.LBB239_97:	@ bb71
	mov r0, #4
	emit_nops_till_bundle_end
	bl assemble_zeros
.LBB239_98:	@ bb72
	ldr r3, .LCPI239_201
	ldr r3, [r3]
	cmp r3, #2
	bne .LBB239_104	@ bb74
.LBB239_99:	@ bb73
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_329	@ bb73.get_run_time.exit349_crit_edge
.LBB239_100:	@ bb1.i347
	mov r0, #0
	sub r1, r11, #104
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-104]
	ldr r4, [r11, #-96]
	add r3, r4, r3
	mov r4, #9, 26 @ 576
	orr r4, r4, #61, 18 @ 999424
	ldr r2, [r11, #-100]
	mla r3, r3, r4, r2
	ldr r4, [r11, #-92]
	add r4, r3, r4
.LBB239_101:	@ get_run_time.exit349
	emit_nops_till_bundle_end
	bl getdecls
	mov r2, r0
	ldr r3, .LCPI239_194
	ldr r0, [r3]
	ldr r3, .LCPI239_197
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl sdbout_init
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_330	@ get_run_time.exit349.get_run_time.exit345_crit_edge
.LBB239_102:	@ bb1.i343
	mov r0, #0
	sub r1, r11, #176
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-176]
	ldr r2, [r11, #-168]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [r11, #-172]
	mla r3, r3, r2, r1
	ldr r2, [r11, #-164]
	add r3, r3, r2
.LBB239_103:	@ get_run_time.exit345
	sub r3, r3, r4
	ldr r2, .LCPI239_139
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
	ldr r3, .LCPI239_201
	ldr r3, [r3]
.LBB239_104:	@ bb74
	cmp r3, #3
	bne .LBB239_110	@ bb76
.LBB239_105:	@ bb75
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_331	@ bb75.get_run_time.exit341_crit_edge
.LBB239_106:	@ bb1.i339
	mov r0, #0
	sub r1, r11, #248
	emit_nops_till_bundle_end
	bl getrusage
	ldr r4, [r11, #-248]
	ldr r3, [r11, #-240]
	add r4, r3, r4
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [r11, #-244]
	mla r4, r4, r3, r2
	ldr r3, [r11, #-236]
	add r4, r4, r3
.LBB239_107:	@ get_run_time.exit341
	ldr r3, .LCPI239_194
	ldr r0, [r3]
	ldr r3, .LCPI239_197
	ldr r1, [r3]
	emit_nops_till_bundle_end
	bl dwarfout_init
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_332	@ get_run_time.exit341.get_run_time.exit337_crit_edge
.LBB239_108:	@ bb1.i335
	mov r0, #0
	sub r1, r11, #5, 26 @ 320
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-320]
	ldr r2, [r11, #-312]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [r11, #-316]
	mla r3, r3, r2, r1
	ldr r2, [r11, #-308]
	add r3, r3, r2
.LBB239_109:	@ get_run_time.exit337
	sub r3, r3, r4
	ldr r2, .LCPI239_139
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB239_110:	@ bb76
	ldr r3, .LCPI239_198
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI239_197
	ldreq r0, [r3]
	emit_nops_till_bundle_end
	bleq init_final
.LBB239_111:	@ bb77
.LBB239_112:	@ bb78
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_333	@ bb78.get_run_time.exit333_crit_edge
.LBB239_113:	@ bb1.i331
	mov r0, #0
	sub r1, r11, #98, 30 @ 392
	emit_nops_till_bundle_end
	bl getrusage
	ldr r4, [r11, #-392]
	ldr r3, [r11, #-384]
	add r4, r3, r4
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [r11, #-388]
	mla r4, r4, r3, r2
	ldr r3, [r11, #-380]
	add r4, r4, r3
.LBB239_114:	@ get_run_time.exit333
	emit_nops_till_bundle_end
	bl yyparse
	cmp r0, #0
	beq .LBB239_118	@ bb83
.LBB239_115:	@ bb79
	ldr r3, .LCPI239_207
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_117	@ bb82.preheader
.LBB239_116:	@ bb80
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI239_208
	emit_nops_till_bundle_end
	bl fprintf
.LBB239_117:	@ bb82.preheader
	emit_nops_till_bundle_end
	bl global_bindings_p
	cmp r0, #0
	beq .LBB239_335	@ bb81
.LBB239_118:	@ bb83
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_336	@ bb83.get_run_time.exit329_crit_edge
.LBB239_119:	@ bb1.i327
	mov r0, #0
	sub r1, r11, #29, 28 @ 464
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-464]
	ldr r2, [r11, #-456]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [r11, #-460]
	mla r3, r3, r2, r1
	ldr r2, [r11, #-452]
	add r3, r3, r2
.LBB239_120:	@ get_run_time.exit329
	sub r3, r3, r4
	ldr r2, .LCPI239_122
	ldr r1, [r2]
	add r3, r3, r1
	ldr r1, .LCPI239_124
	ldr r1, [r1]
	sub r3, r3, r1
	ldr r1, .LCPI239_123
	ldr r1, [r1]
	sub r3, r3, r1
	@comment
str r3, [r2]
	emit_nops_till_bundle_end
	bl getdecls
	mov r4, r0
	emit_nops_till_bundle_end
	bl list_length
	sub r5, sp, r0, lsl #2
	mov sp, r5
	mov r6, r0
	cmp r0, #0
	ble .LBB239_132	@ get_run_time.exit329.bb137_crit_edge
.LBB239_121:	@ bb.nph367
	add r7, r5, r6, lsl #2
	sub r7, r7, #4
	mov r8, #0
.LBB239_122:	@ bb84
	str r4, [r7], #-4
	add r8, r8, #1
	ldr r4, [r4]
	cmp r8, r6
	bne .LBB239_122	@ bb84
.LBB239_123:	@ bb92.loopexit
	cmp r6, #1
	blt .LBB239_132	@ get_run_time.exit329.bb137_crit_edge
.LBB239_124:	@ bb92.loopexit.bb87_crit_edge
	mov r4, #0
	mov r7, r5
.LBB239_125:	@ bb87
	ldr r0, [r7]
	ldrb r8, [r0, #+29]
	mov r3, r0
	ldrb r2, [r3, #+28]!
	orr r8, r2, r8, lsl #8
	ldrb r2, [r3, #+3]
	ldrb r1, [r3, #+2]
	orr r2, r1, r2, lsl #8
	orr r8, r8, r2, lsl #16
	bic r8, r8, #1, 14 @ 262144
	strb r8, [r3]
	mov r2, r8, lsr #24
	strb r2, [r3, #+3]
	mov r2, r8, lsr #16
	strb r2, [r3, #+2]
	mov r8, r8, lsr #8
	strb r8, [r0, #+29]
	ldrb r8, [r0, #+8]
	cmp r8, #33
	ldreq r8, [r0, #+20]
	cmpeq r8, #0
	beq .LBB239_129	@ bb89
	b .LBB239_131	@ bb91
	.align	4
.LBB239_126:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_145:
 	.long	.str901345

.LBB239_127:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_146:
 	.long	debug_info_level

.LBB239_128:	@ bb88
	.align	4
.LBB239_129:	@ bb89
	ldr r8, .LCPI239_209
	ldr r8, [r8]
	cmp r8, #0
	beq .LBB239_131	@ bb91
.LBB239_130:	@ bb90
	@ implicit-def: lr
	mov lr, pc
	bx r8
.LBB239_131:	@ bb91
	add r4, r4, #1
	add r7, r7, #4
	cmp r4, r6
	bne .LBB239_125	@ bb87
.LBB239_132:	@ get_run_time.exit329.bb137_crit_edge
	mov r4, #0
	mov r7, #0
	mov r8, r4
	b .LBB239_195	@ bb137
.LBB239_133:	@ bb94
	ldr r9, [r5, +r8, lsl #2]
	ldrb r3, [r9, #+9]
	tst r3, #128
	ldreqb r3, [r9, #+29]
	tsteq r3, #1
	beq .LBB239_147	@ bb103
	b .LBB239_194	@ bb136
	.align	4
.LBB239_134:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_147:
 	.long	flag_caller_saves

.LBB239_135:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_148:
 	.long	flag_gen_aux_info

.LBB239_136:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_149:
 	.long	aux_info_file_name

.LBB239_137:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_150:
 	.long	.str1111370

.LBB239_138:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_151:
 	.long	aux_info_file

.LBB239_139:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_152:
 	.long	rtl_dump

.LBB239_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_153:
 	.long	.str1221388

.LBB239_141:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_154:
 	.long	rtl_dump_file

.LBB239_142:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_155:
 	.long	jump_opt_dump

.LBB239_143:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_156:
 	.long	.str1231389

.LBB239_144:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_157:
 	.long	jump_opt_dump_file

.LBB239_145:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_158:
 	.long	cse_dump

.LBB239_146:	@ bb98
	.align	4
.LBB239_147:	@ bb103
	ldrb r3, [r9, #+8]
	cmp r3, #33
	bne .LBB239_154	@ bb126
.LBB239_148:	@ bb104
	ldrb r3, [r9, #+9]
	mov r2, r9
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 14 @ 262144
	beq .LBB239_154	@ bb126
.LBB239_149:	@ bb109
	tst r3, #2, 20 @ 8192
	beq .LBB239_153	@ bb125
.LBB239_150:	@ bb114
	tst r3, #2, 14 @ 524288
	bne .LBB239_153	@ bb125
.LBB239_151:	@ bb119
	ldr r3, .LCPI239_210
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_153	@ bb125
.LBB239_152:	@ bb120
	ldr r3, [r9, #+56]
	ldrb r3, [r3, #+10]
	tst r3, #4
	beq .LBB239_154	@ bb126
.LBB239_153:	@ bb125
	mov r4, #1
	mov r0, r9
	mov r1, r7
	mov r2, #1
	mov r3, #1
	emit_nops_till_bundle_end
	bl rest_of_decl_compilation
.LBB239_154:	@ bb126
	ldrb r3, [r9, #+8]
	cmp r3, #29
	bne .LBB239_194	@ bb136
.LBB239_155:	@ bb127
	ldr r3, [r9, #+48]
	cmp r3, #0
	ldrne r3, [r9, #+76]
	cmpne r3, #0
	bne .LBB239_191	@ bb129
	b .LBB239_194	@ bb136
	.align	4
.LBB239_156:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_159:
 	.long	.str1241390

.LBB239_157:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_160:
 	.long	cse_dump_file

.LBB239_158:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_161:
 	.long	loop_dump

.LBB239_159:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_162:
 	.long	.str1251391

.LBB239_160:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_163:
 	.long	loop_dump_file

.LBB239_161:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_164:
 	.long	cse2_dump

.LBB239_162:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_165:
 	.long	.str1261392

.LBB239_163:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_166:
 	.long	cse2_dump_file

.LBB239_164:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_167:
 	.long	flow_dump

.LBB239_165:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_168:
 	.long	.str1271393

.LBB239_166:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_169:
 	.long	flow_dump_file

.LBB239_167:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_170:
 	.long	combine_dump

.LBB239_168:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_171:
 	.long	.str1281394

.LBB239_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_172:
 	.long	combine_dump_file

.LBB239_170:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_173:
 	.long	sched_dump

.LBB239_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_174:
 	.long	.str1291395

.LBB239_172:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_175:
 	.long	sched_dump_file

.LBB239_173:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_176:
 	.long	local_reg_dump

.LBB239_174:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_177:
 	.long	.str1301396

.LBB239_175:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_178:
 	.long	local_reg_dump_file

.LBB239_176:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_179:
 	.long	global_reg_dump

.LBB239_177:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_180:
 	.long	.str1311397

.LBB239_178:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_181:
 	.long	global_reg_dump_file

.LBB239_179:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_182:
 	.long	sched2_dump

.LBB239_180:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_183:
 	.long	.str1321398

.LBB239_181:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_184:
 	.long	sched2_dump_file

.LBB239_182:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_185:
 	.long	jump2_opt_dump

.LBB239_183:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_186:
 	.long	.str1331399

.LBB239_184:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_187:
 	.long	jump2_opt_dump_file

.LBB239_185:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_188:
 	.long	dbr_sched_dump

.LBB239_186:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_189:
 	.long	.str1341400

.LBB239_187:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_190:
 	.long	dbr_sched_dump_file

.LBB239_188:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_191:
 	.long	asm_file_name

.LBB239_189:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_192:
 	.long	.str1001356

.LBB239_190:	@ bb128
	.align	4
.LBB239_191:	@ bb129
	ldr r3, .LCPI239_211
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, [r9, #+56]
	ldreqb r3, [r3, #+10]
	tsteq r3, #4
	beq .LBB239_194	@ bb136
.LBB239_192:	@ bb130
.LBB239_193:	@ bb135
	emit_nops_till_bundle_end
	bl temporary_allocation
	mov r0, r9
	emit_nops_till_bundle_end
	bl output_inline_function
	mov r4, #1
	mov r0, #1
	emit_nops_till_bundle_end
	bl permanent_allocation
.LBB239_194:	@ bb136
	add r8, r8, #1
.LBB239_195:	@ bb137
	cmp r8, r6
	blt .LBB239_133	@ bb94
.LBB239_196:	@ bb138
	mov r8, #0
	cmp r4, #0
	mov r4, #0
	bne .LBB239_195	@ bb137
.LBB239_197:	@ bb246.loopexit
	cmp r6, #0
	ble .LBB239_277	@ bb247
.LBB239_198:	@ bb.nph362
	mov r4, #0
	mov r7, #0
	mov r8, #9, 26 @ 576
	orr r8, r8, #61, 18 @ 999424
.LBB239_199:	@ bb140
	ldr r9, [r5]
	ldrb r3, [r9, #+8]
	cmp r3, #33
	bne .LBB239_203	@ bb152
.LBB239_200:	@ bb141
	ldrb r3, [r9, #+9]
	mov r2, r9
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 14 @ 262144
	beq .LBB239_203	@ bb152
.LBB239_201:	@ bb146
	tst r3, #2, 18 @ 32768
	@comment
streq r7, [r9, #+68]
.LBB239_202:	@ bb151
.LBB239_203:	@ bb152
	ldrb r3, [r9, #+8]
	cmp r3, #29
	bne .LBB239_210	@ bb171
.LBB239_204:	@ bb153
	ldr r3, .LCPI239_212
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, [r9, #+56]
	ldreqb r3, [r3, #+10]
	tsteq r3, #4
	beq .LBB239_210	@ bb171
.LBB239_205:	@ bb154
.LBB239_206:	@ bb159
	ldr r3, [r9, #+48]
	cmp r3, #0
	bne .LBB239_210	@ bb171
.LBB239_207:	@ bb160
	ldrb r3, [r9, #+29]
	tst r3, #1
	beq .LBB239_210	@ bb171
.LBB239_208:	@ bb165
	ldrb r3, [r9, #+10]
	tst r3, #8
	bne .LBB239_210	@ bb171
.LBB239_209:	@ bb170
	ldr r1, .LCPI239_213
	mov r0, r9
	emit_nops_till_bundle_end
	bl pedwarn_with_decl
	ldrb r3, [r9, #+10]
	ldrb r2, [r9, #+11]
	mov r1, r9
	ldrb r0, [r1, #+8]!
	ldrb r12, [r1, #+1]
	strb r0, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r0, r12, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 14 @ 524288
	mov r3, r3, lsr #16
	strb r3, [r9, #+10]
	mov r0, r9
	emit_nops_till_bundle_end
	bl assemble_external
.LBB239_210:	@ bb171
	ldr r3, .LCPI239_212
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_224	@ bb215
.LBB239_211:	@ bb172
	ldrb r3, [r9, #+8]
	cmp r3, #33
	beq .LBB239_215	@ bb179
.LBB239_212:	@ bb172
	and r2, r3, #255
	cmp r2, #29
	bne .LBB239_224	@ bb215
.LBB239_213:	@ bb173
	ldrb r2, [r9, #+29]
	tst r2, #8
	beq .LBB239_216	@ bb184
.LBB239_214:	@ bb178
	and r3, r3, #255
	cmp r3, #33
	bne .LBB239_224	@ bb215
.LBB239_215:	@ bb179
	ldrb r3, [r9, #+9]
	tst r3, #32
	bne .LBB239_224	@ bb215
.LBB239_216:	@ bb184
	ldrb r3, [r9, #+29]
	mov r2, r9
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #1, 16 @ 65536
	bne .LBB239_224	@ bb215
.LBB239_217:	@ bb189
	tst r3, #1, 24 @ 256
	ldreqb r2, [r9, #+9]
	moveq r1, r9
	ldreqb r0, [r1, #+8]!
	orreq r2, r0, r2, lsl #8
	ldreqb r0, [r1, #+3]
	ldreqb r1, [r1, #+2]
	orreq r1, r1, r0, lsl #8
	orreq r2, r2, r1, lsl #16
	tsteq r2, #2, 14 @ 524288
	beq .LBB239_219	@ bb199
	b .LBB239_224	@ bb215
.LBB239_218:	@ bb194
.LBB239_219:	@ bb199
	tst r2, #1, 16 @ 65536
	tsteq r3, #1, 22 @ 1024
	beq .LBB239_222	@ bb209
	b .LBB239_224	@ bb215
	.align	4
.LBB239_220:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_193:
 	.long	.str1351401

.LBB239_221:	@ bb204
	.align	4
.LBB239_222:	@ bb209
	ldr r3, [r9, #+32]
	ldrb r3, [r3, #+10]
	tst r3, #1
	ldreq r1, .LCPI239_214
	moveq r0, r9
	emit_nops_till_bundle_end
	bleq warning_with_decl
.LBB239_223:	@ bb214
.LBB239_224:	@ bb215
	ldr r3, .LCPI239_201
	ldr r3, [r3]
	cmp r3, #2
	bne .LBB239_243	@ bb230
.LBB239_225:	@ bb216
	ldrb r3, [r9, #+8]
	cmp r3, #33
	bne .LBB239_242	@ bb230thread-split
.LBB239_226:	@ bb217
	ldrb r3, [r9, #+10]
	tst r3, #8
	ldrne r3, [r9, #+48]
	cmpne r3, #0
	bne .LBB239_235	@ bb223
	b .LBB239_242	@ bb230thread-split
	.align	4
.LBB239_227:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_194:
 	.long	asm_out_file

.LBB239_228:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_195:
 	.long	input_filename

.LBB239_229:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_196:
 	.long	input_file_stack

.LBB239_230:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_197:
 	.long	main_input_filename

.LBB239_231:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_198:
 	.long	output_bytecode

.LBB239_232:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_199:
 	.long	f_options

.LBB239_233:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_200:
 	.long	W_options

.LBB239_234:	@ bb222
	.align	4
.LBB239_235:	@ bb223
	ldrb r3, [r9, #+29]
	tst r3, #1
	bne .LBB239_242	@ bb230thread-split
.LBB239_236:	@ bb228
	ldr r3, [r9, #+68]
	cmp r3, #0
	beq .LBB239_242	@ bb230thread-split
.LBB239_237:	@ bb229
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_337	@ bb229.get_run_time.exit317_crit_edge
.LBB239_238:	@ bb1.i315
	sub r1, r11, #134, 30 @ 536
	mov r0, r7
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-536]
	ldr r10, [r11, #-528]
	add r3, r10, r3
	ldr r10, [r11, #-532]
	mla r3, r3, r8, r10
	ldr r10, [r11, #-524]
	add r10, r3, r10
.LBB239_239:	@ get_run_time.exit317
	mov r0, r9
	mov r1, r7
	emit_nops_till_bundle_end
	bl sdbout_symbol
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_338	@ get_run_time.exit317.get_run_time.exit313_crit_edge
.LBB239_240:	@ bb1.i311
	sub r1, r11, #38, 28 @ 608
	mov r0, r7
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-608]
	ldr r2, [r11, #-600]
	add r3, r2, r3
	ldr r2, [r11, #-604]
	mla r3, r3, r8, r2
	ldr r2, [r11, #-596]
	add r3, r3, r2
.LBB239_241:	@ get_run_time.exit313
	sub r3, r3, r10
	ldr r2, .LCPI239_139
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB239_242:	@ bb230thread-split
	ldr r3, .LCPI239_201
	ldr r3, [r3]
.LBB239_243:	@ bb230
	cmp r3, #2
	ldreqb r3, [r9, #+8]
	cmpeq r3, #33
	beq .LBB239_259	@ bb232
	b .LBB239_268	@ bb241
	.align	4
.LBB239_244:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_201:
 	.long	write_symbols

.LBB239_245:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_202:
 	.long	.str1371404

.LBB239_246:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_203:
 	.long	profile_flag

.LBB239_247:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_204:
 	.long	profile_block_flag

.LBB239_248:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_205:
 	.long	.str1381405

.LBB239_249:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_206:
 	.long	quiet_flag

.LBB239_250:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_207:
 	.long	errorcount

.LBB239_251:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_208:
 	.long	.str1391406

.LBB239_252:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_209:
 	.long	incomplete_decl_finalize_hook

.LBB239_253:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_210:
 	.long	optimize

.LBB239_254:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_211:
 	.long	flag_keep_inline_functions

.LBB239_255:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_212:
 	.long	warn_unused

.LBB239_256:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_213:
 	.long	.str1401408

.LBB239_257:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_214:
 	.long	.str1411409

.LBB239_258:	@ bb231
	.align	4
.LBB239_259:	@ bb232
	ldr r3, [r9, #+48]
	cmp r3, #0
	beq .LBB239_268	@ bb241
.LBB239_260:	@ bb233
	ldrb r3, [r9, #+29]
	tst r3, #1
	bne .LBB239_268	@ bb241
.LBB239_261:	@ bb238
	ldr r3, [r9, #+68]
	cmp r3, #0
	beq .LBB239_268	@ bb241
.LBB239_262:	@ bb239
	ldrh r3, [r3]
	cmp r3, #57
	bne .LBB239_268	@ bb241
.LBB239_263:	@ bb240
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_339	@ bb240.get_run_time.exit309_crit_edge
.LBB239_264:	@ bb1.i307
	sub r1, r11, #170, 30 @ 680
	mov r0, r7
	emit_nops_till_bundle_end
	bl getrusage
	ldr r10, [r11, #-680]
	ldr r3, [r11, #-672]
	add r10, r3, r10
	ldr r3, [r11, #-676]
	mla r10, r10, r8, r3
	ldr r3, [r11, #-668]
	add r10, r10, r3
.LBB239_265:	@ get_run_time.exit309
	mov r0, r9
	emit_nops_till_bundle_end
	bl sdbout_toplevel_data
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_340	@ get_run_time.exit309.get_run_time.exit305_crit_edge
.LBB239_266:	@ bb1.i303
	sub r1, r11, #47, 28 @ 752
	mov r0, r7
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-752]
	ldr r2, [r11, #-744]
	add r3, r2, r3
	ldr r2, [r11, #-748]
	mla r3, r3, r8, r2
	ldr r2, [r11, #-740]
	add r3, r3, r2
.LBB239_267:	@ get_run_time.exit305
	sub r3, r3, r10
	ldr r2, .LCPI239_215
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB239_268:	@ bb241
	ldr r3, .LCPI239_201
	ldr r3, [r3]
	cmp r3, #3
	bne .LBB239_276	@ bb245
.LBB239_269:	@ bb242
	ldrb r3, [r9, #+8]
	cmp r3, #29
	bne .LBB239_271	@ bb244
.LBB239_270:	@ bb243
	ldr r3, [r9, #+48]
	cmp r3, #0
	bne .LBB239_276	@ bb245
.LBB239_271:	@ bb244
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_341	@ bb244.get_run_time.exit301_crit_edge
.LBB239_272:	@ bb1.i299
	sub r1, r11, #206, 30 @ 824
	mov r0, r7
	emit_nops_till_bundle_end
	bl getrusage
	ldr r10, [r11, #-824]
	ldr r3, [r11, #-816]
	add r10, r3, r10
	ldr r3, [r11, #-820]
	mla r10, r10, r8, r3
	ldr r3, [r11, #-812]
	add r10, r10, r3
.LBB239_273:	@ get_run_time.exit301
	mov r0, r9
	mov r3, #1
	mov r1, r3
	emit_nops_till_bundle_end
	bl dwarfout_file_scope_decl
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_342	@ get_run_time.exit301.get_run_time.exit297_crit_edge
.LBB239_274:	@ bb1.i295
	sub r1, r11, #14, 26 @ 896
	mov r0, r7
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-896]
	ldr r2, [r11, #-888]
	add r3, r2, r3
	ldr r2, [r11, #-892]
	mla r3, r3, r8, r2
	ldr r2, [r11, #-884]
	add r3, r3, r2
.LBB239_275:	@ get_run_time.exit297
	sub r3, r3, r10
	ldr r2, .LCPI239_215
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB239_276:	@ bb245
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, r6
	bne .LBB239_199	@ bb140
.LBB239_277:	@ bb247
	emit_nops_till_bundle_end
	bl weak_finish
	ldr r3, .LCPI239_201
	ldr r3, [r3]
	cmp r3, #3
	bne .LBB239_283	@ bb249
.LBB239_278:	@ bb248
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_343	@ bb248.get_run_time.exit293_crit_edge
.LBB239_279:	@ bb1.i291
	mov r0, #0
	sub r1, r11, #242, 30 @ 968
	emit_nops_till_bundle_end
	bl getrusage
	ldr r4, [r11, #-968]
	ldr r3, [r11, #-960]
	add r4, r3, r4
	mov r3, #9, 26 @ 576
	orr r3, r3, #61, 18 @ 999424
	ldr r2, [r11, #-964]
	mla r4, r4, r3, r2
	ldr r3, [r11, #-956]
	add r4, r4, r3
.LBB239_280:	@ get_run_time.exit293
	emit_nops_till_bundle_end
	bl dwarfout_finish
	ldr r3, .LCPI239_206
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_344	@ get_run_time.exit293.get_run_time.exit_crit_edge
.LBB239_281:	@ bb1.i
	mov r0, #0
	sub r1, r11, #65, 28 @ 1040
	emit_nops_till_bundle_end
	bl getrusage
	ldr r3, [r11, #-1040]
	ldr r2, [r11, #-1032]
	add r3, r2, r3
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	ldr r1, [r11, #-1036]
	mla r3, r3, r2, r1
	ldr r2, [r11, #-1028]
	add r3, r3, r2
.LBB239_282:	@ get_run_time.exit
	sub r3, r3, r4
	ldr r2, .LCPI239_19
	ldr r1, [r2]
	add r3, r3, r1
	@comment
str r3, [r2]
.LBB239_283:	@ bb249
	ldr r3, .LCPI239_79
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI239_78
	ldreq r0, [r3]
	emit_nops_till_bundle_end
	bleq end_final
.LBB239_284:	@ bb250
.LBB239_285:	@ bb251
	emit_nops_till_bundle_end
	bl lang_finish
	ldr r3, .LCPI239_79
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI239_73
	ldrne r0, [r3]
	emit_nops_till_bundle_end
	blne bc_write_file
.LBB239_286:	@ bb252
.LBB239_287:	@ bb253
	ldr r3, .LCPI239_29
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_290	@ bb256
.LBB239_288:	@ bb254
	ldr r3, .LCPI239_32
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
	ldr r3, .LCPI239_89
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_290	@ bb256
.LBB239_289:	@ bb255
	ldr r3, .LCPI239_30
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl unlink
.LBB239_290:	@ bb256
	ldr r3, .LCPI239_33
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_292	@ bb258
.LBB239_291:	@ bb257
	ldr r3, .LCPI239_35
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_292:	@ bb258
	ldr r3, .LCPI239_36
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_294	@ bb260
.LBB239_293:	@ bb259
	ldr r3, .LCPI239_38
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_294:	@ bb260
	ldr r3, .LCPI239_39
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_296	@ bb262
.LBB239_295:	@ bb261
	ldr r3, .LCPI239_41
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_296:	@ bb262
	ldr r3, .LCPI239_42
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_298	@ bb264
.LBB239_297:	@ bb263
	ldr r3, .LCPI239_44
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_298:	@ bb264
	ldr r3, .LCPI239_45
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_300	@ bb266
.LBB239_299:	@ bb265
	ldr r3, .LCPI239_47
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_300:	@ bb266
	ldr r3, .LCPI239_48
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_302	@ bb268
.LBB239_301:	@ bb267
	ldr r3, .LCPI239_50
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_302:	@ bb268
	ldr r3, .LCPI239_51
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_304	@ bb270
.LBB239_303:	@ bb269
	ldr r4, .LCPI239_53
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl dump_combine_total_stats
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_304:	@ bb270
	ldr r3, .LCPI239_54
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_306	@ bb272
.LBB239_305:	@ bb271
	ldr r3, .LCPI239_56
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_306:	@ bb272
	ldr r3, .LCPI239_57
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_308	@ bb274
.LBB239_307:	@ bb273
	ldr r3, .LCPI239_59
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_308:	@ bb274
	ldr r3, .LCPI239_60
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_310	@ bb276
.LBB239_309:	@ bb275
	ldr r3, .LCPI239_62
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_310:	@ bb276
	ldr r3, .LCPI239_63
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_312	@ bb278
.LBB239_311:	@ bb277
	ldr r3, .LCPI239_65
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_312:	@ bb278
	ldr r3, .LCPI239_66
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_314	@ bb280
.LBB239_313:	@ bb279
	ldr r3, .LCPI239_68
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_314:	@ bb280
	ldr r3, .LCPI239_69
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB239_316	@ bb282
.LBB239_315:	@ bb281
	ldr r3, .LCPI239_71
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
.LBB239_316:	@ bb282
	ldr r3, .LCPI239_24
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
	ldr r3, .LCPI239_73
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl ferror
	cmp r0, #0
	bne .LBB239_345	@ bb284
.LBB239_317:	@ bb283
	ldr r3, .LCPI239_73
	ldr r0, [r3]
	emit_nops_till_bundle_end
	bl fclose
	cmp r0, #0
	bne .LBB239_345	@ bb284
.LBB239_318:	@ bb285
	ldr r3, .LCPI239_88
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_321	@ return
.LBB239_319:	@ bb286
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI239_98
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI239_2
	ldr r4, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	ldr r3, .LCPI239_99
	smull r3, r2, r4, r3
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mov r2, #9, 26 @ 576
	orr r2, r2, #61, 18 @ 999424
	mul r2, r3, r2
	sub r2, r4, r2
	@comment
str r2, [sp]
	ldr r1, .LCPI239_100
	ldr r2, .LCPI239_101
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_79
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB239_321	@ return
.LBB239_320:	@ bb287
	ldr r3, .LCPI239_4
	ldr r4, [r3]
	mov r5, #2
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	ldr r6, .LCPI239_99
	smull r2, r3, r4, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mov r7, #9, 26 @ 576
	orr r7, r7, #61, 18 @ 999424
	mul r2, r3, r7
	sub r2, r4, r2
	@comment
str r2, [sp]
	ldr r4, .LCPI239_100
	ldr r2, .LCPI239_102
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_5
	ldr r8, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_103
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_6
	ldr r8, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_104
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_7
	ldr r8, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_105
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_8
	ldr r8, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_106
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_9
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_107
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_10
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_108
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_11
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_109
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_12
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_110
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_13
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_111
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_14
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_112
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_15
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_113
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_16
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_114
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_17
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_115
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_18
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_116
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_3
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r2, r3, r8, r6
	mov r2, r3, asr #18
	add r3, r2, r3, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_117
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_19
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_118
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
	ldr r3, .LCPI239_20
	ldr r8, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl fileptr
	sfi_sub sp, sp, #4
	smull r3, r2, r8, r6
	mov r3, r2, asr #18
	add r3, r3, r2, lsr #31
	mul r2, r3, r7
	sub r2, r8, r2
	@comment
str r2, [sp]
	ldr r2, .LCPI239_119
	mov r1, r4
	emit_nops_till_bundle_end
	bl fprintf
	sfi_addeq sp, sp, #4
.LBB239_321:	@ return
	sub sp, r11, #28
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB239_322:	@ bb12
	mov r0, #0
	emit_nops_till_bundle_end
	bl fileptr
	ldr r5, .LCPI239_22
	b .LBB239_5	@ bb14
.LBB239_323:	@ bb20
	ldr r4, .LCPI239_25
	ldr r4, [r4]
	ldr r5, .LCPI239_30
	ldr r5, [r5]
	b .LBB239_7	@ bb15
.LBB239_324:	@ bb49
	mov r0, #1
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI239_73
	@comment
str r0, [r3]
	b .LBB239_57	@ bb57
.LBB239_325:	@ bb1.i321
	mov r4, #0
	strb r4, [r3]
	b .LBB239_50	@ strip_off_ending.exit
.LBB239_326:	@ bb53
	mov r0, #1
	emit_nops_till_bundle_end
	bl fileptr
	b .LBB239_56	@ bb55
.LBB239_327:	@ bb56
	ldr r5, .LCPI239_25
	ldr r5, [r5]
	ldr r3, .LCPI239_72
	ldr r4, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI239_26
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r4
	b .LBB239_8	@ bb15
.LBB239_328:	@ bb62
	ldr r3, .LCPI239_73
	ldr r0, [r3]
	ldr r1, .LCPI239_82
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB239_66	@ bb65
.LBB239_329:	@ bb73.get_run_time.exit349_crit_edge
	mov r4, #0
	b .LBB239_101	@ get_run_time.exit349
.LBB239_330:	@ get_run_time.exit349.get_run_time.exit345_crit_edge
	mov r3, #0
	b .LBB239_103	@ get_run_time.exit345
.LBB239_331:	@ bb75.get_run_time.exit341_crit_edge
	mov r4, #0
	b .LBB239_107	@ get_run_time.exit341
.LBB239_332:	@ get_run_time.exit341.get_run_time.exit337_crit_edge
	mov r3, #0
	b .LBB239_109	@ get_run_time.exit337
.LBB239_333:	@ bb78.get_run_time.exit333_crit_edge
	mov r4, #0
	b .LBB239_114	@ get_run_time.exit333
	.align	4
.LBB239_334:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_215:
 	.long	symout_time

	.align	4
.LBB239_335:	@ bb81
	mov r0, #0
	mov r1, #0
	mov r2, #0
	emit_nops_till_bundle_end
	bl poplevel
	b .LBB239_117	@ bb82.preheader
.LBB239_336:	@ bb83.get_run_time.exit329_crit_edge
	mov r3, #0
	b .LBB239_120	@ get_run_time.exit329
.LBB239_337:	@ bb229.get_run_time.exit317_crit_edge
	mov r10, #0
	b .LBB239_239	@ get_run_time.exit317
.LBB239_338:	@ get_run_time.exit317.get_run_time.exit313_crit_edge
	mov r3, #0
	b .LBB239_241	@ get_run_time.exit313
.LBB239_339:	@ bb240.get_run_time.exit309_crit_edge
	mov r10, #0
	b .LBB239_265	@ get_run_time.exit309
.LBB239_340:	@ get_run_time.exit309.get_run_time.exit305_crit_edge
	mov r3, #0
	b .LBB239_267	@ get_run_time.exit305
.LBB239_341:	@ bb244.get_run_time.exit301_crit_edge
	mov r10, #0
	b .LBB239_273	@ get_run_time.exit301
.LBB239_342:	@ get_run_time.exit301.get_run_time.exit297_crit_edge
	mov r3, #0
	b .LBB239_275	@ get_run_time.exit297
.LBB239_343:	@ bb248.get_run_time.exit293_crit_edge
	mov r4, #0
	b .LBB239_280	@ get_run_time.exit293
.LBB239_344:	@ get_run_time.exit293.get_run_time.exit_crit_edge
	mov r3, #0
	b .LBB239_282	@ get_run_time.exit
.LBB239_345:	@ bb284
	ldr r3, .LCPI239_25
	ldr r4, [r3]
	ldr r3, .LCPI239_72
	ldr r5, [r3]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI239_97
	mov r2, r4
	mov r3, r5
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB239_346:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_2:
 	.long	parse_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_3:
 	.long	varconst_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_4:
 	.long	integration_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_5:
 	.long	jump_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_6:
 	.long	cse_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_7:
 	.long	loop_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_8:
 	.long	cse2_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_9:
 	.long	flow_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_10:
 	.long	combine_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_11:
 	.long	sched_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_12:
 	.long	local_alloc_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_13:
 	.long	global_alloc_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_14:
 	.long	sched2_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_15:
 	.long	dbr_sched_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_16:
 	.long	shorten_branch_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_17:
 	.long	stack_reg_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_18:
 	.long	final_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_19:
 	.long	symout_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_20:
 	.long	dump_time

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_22:
 	.long	.str1201384

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_24:
 	.long	finput

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_25:
 	.long	progname

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_26:
 	.long	.str901345

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_29:
 	.long	flag_gen_aux_info

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_30:
 	.long	aux_info_file_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_32:
 	.long	aux_info_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_33:
 	.long	rtl_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_35:
 	.long	rtl_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_36:
 	.long	jump_opt_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_38:
 	.long	jump_opt_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_39:
 	.long	cse_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_41:
 	.long	cse_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_42:
 	.long	loop_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_44:
 	.long	loop_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_45:
 	.long	cse2_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_47:
 	.long	cse2_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_48:
 	.long	flow_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_50:
 	.long	flow_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_51:
 	.long	combine_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_53:
 	.long	combine_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_54:
 	.long	sched_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_56:
 	.long	sched_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_57:
 	.long	local_reg_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_59:
 	.long	local_reg_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_60:
 	.long	global_reg_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_62:
 	.long	global_reg_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_63:
 	.long	sched2_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_65:
 	.long	sched2_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_66:
 	.long	jump2_opt_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_68:
 	.long	jump2_opt_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_69:
 	.long	dbr_sched_dump

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_71:
 	.long	dbr_sched_dump_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_72:
 	.long	asm_file_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_73:
 	.long	asm_out_file

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_78:
 	.long	main_input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_79:
 	.long	output_bytecode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_82:
 	.long	.str1361403

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_88:
 	.long	quiet_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_89:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_97:
 	.long	.str971353

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_98:
 	.long	.str811334

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_99:
 	.long	1125899907			@ 0x431BDE83

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_100:
 	.long	.str941350

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_101:
 	.long	.str1421410

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_102:
 	.long	.str1431411

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_103:
 	.long	.str1441412

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_104:
 	.long	.str1451413

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_105:
 	.long	.str1461414

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_106:
 	.long	.str1471415

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_107:
 	.long	.str1481416

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_108:
 	.long	.str1491417

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_109:
 	.long	.str1501418

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_110:
 	.long	.str1511419

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_111:
 	.long	.str1521420

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_112:
 	.long	.str1531421

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_113:
 	.long	.str1541422

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_114:
 	.long	.str1551423

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_115:
 	.long	.str1561424

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_116:
 	.long	.str1571425

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_117:
 	.long	.str1581426

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_118:
 	.long	.str1591427

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI239_119:
 	.long	.str1601428

	.size compile_file, .-compile_file


	.globl	main
	.align	4
main:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #36
	mov r4, r1
	@comment
str r4, [sp, #+16]
	mov r3, r0
	@comment
str r3, [sp, #+12]
	ldr r2, .LCPI240_134
	@comment
str r3, [r2]
	ldr r3, .LCPI240_135
	@comment
str r4, [r3]
	ldr r3, .LCPI240_136
	mov r2, #1
	@comment
str r2, [r3]
	ldr r5, [r4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	add r3, r0, r5
	ldr r2, [r4]
	b .LBB240_2	@ bb9
.LBB240_1:	@ bb
	sub r3, r3, #1
.LBB240_2:	@ bb9
	cmp r2, r3
	ldrneb r1, [r3, #-1]
	cmpne r1, #47
	bne .LBB240_1	@ bb
.LBB240_3:	@ bb10
.LBB240_4:	@ bb11
	ldr r2, .LCPI240_137
	@comment
str r3, [r2]
	add r4, sp, #24
	mov r0, #3
	mov r1, r4
	emit_nops_till_bundle_end
	bl getrlimit
	ldr r3, [sp, #+28]
	@comment
str r3, [sp, #+24]
	mov r0, #3
	mov r1, r4
	emit_nops_till_bundle_end
	bl setrlimit
	ldr r3, .LCPI240_138
	ldr r2, .LCPI240_139
	@comment
str r2, [r3]
	ldr r3, .LCPI240_140
	ldr r2, .LCPI240_141
	@comment
str r2, [r3]
	ldr r3, .LCPI240_142
	ldr r2, .LCPI240_143
	@comment
str r2, [r3]
	ldr r3, .LCPI240_144
	mov r2, #1
	@comment
str r2, [r3]
	ldr r3, [sp, #+12]
	cmp r3, #2
	blt .LBB240_15	@ bb29
.LBB240_5:	@ bb.nph277
	ldr r3, [sp, #+12]
	sub r4, r3, #1
	mov r5, #0
	mov r6, #1
	mvn r7, #47
	ldr r8, [sp, #+16]
.LBB240_6:	@ bb12
	ldr r0, [r8, #+4]
	ldr r1, .LCPI240_145
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_285	@ bb13
.LBB240_7:	@ bb14
	ldr r3, [r8, #+4]
	ldrb r2, [r3]
	cmp r2, #45
	ldreqb r2, [r3, #+1]
	cmpeq r2, #79
	beq .LBB240_9	@ bb18.preheader
	b .LBB240_14	@ bb21
.LBB240_8:	@ bb15
.LBB240_9:	@ bb18.preheader
	add r2, r3, #2
.LBB240_10:	@ bb18
	ldrb r1, [r2]
	cmp r1, #0
	beq .LBB240_13	@ bb20
.LBB240_11:	@ bb17
	mov r0, r1, lsl #24
	add r0, r7, r0, asr #24
	add r2, r2, #1
	cmp r0, #9
	bls .LBB240_10	@ bb18
.LBB240_12:	@ bb19
	tst r1, #255
	bne .LBB240_14	@ bb21
.LBB240_13:	@ bb20
	add r0, r3, #2
	emit_nops_till_bundle_end
	bl atoi
	ldr r3, .LCPI240_146
	@comment
str r0, [r3]
.LBB240_14:	@ bb21
	add r5, r5, #1
	add r8, r8, #4
	cmp r5, r4
	bne .LBB240_6	@ bb12
.LBB240_15:	@ bb29
	ldr r3, .LCPI240_146
	mov r2, #3
	@comment
str r2, [r3]
	mov r4, #0
	ldr r3, .LCPI240_147
	@comment
str r4, [r3]
	mov r3, #1
	ldr r2, .LCPI240_148
	@comment
str r3, [r2]
	ldr r2, .LCPI240_149
	@comment
str r3, [r2]
	ldr r2, .LCPI240_150
	@comment
str r3, [r2]
	ldr r2, .LCPI240_136
	@comment
str r3, [r2]
	ldr r2, .LCPI240_151
	@comment
str r3, [r2]
	ldr r2, .LCPI240_152
	@comment
str r3, [r2]
	ldr r2, .LCPI240_153
	@comment
str r3, [r2]
	ldr r2, .LCPI240_154
	@comment
str r3, [r2]
	ldr r2, .LCPI240_155
	@comment
str r3, [r2]
	ldr r2, .LCPI240_156
	@comment
str r3, [r2]
	ldr r2, .LCPI240_157
	@comment
str r3, [r2]
	ldr r2, .LCPI240_158
	@comment
str r3, [r2]
	ldr r2, .LCPI240_159
	@comment
str r3, [r2]
	emit_nops_till_bundle_end
	bl init_reg_sets
	ldr r3, .LCPI240_160
	@comment
str r4, [r3]
	ldr r0, .LCPI240_161
	emit_nops_till_bundle_end
	bl set_target_switch
	ldr r3, [sp, #+12]
	cmp r3, #1
	bgt .LBB240_216	@ bb29.bb35.preheader_crit_edge
.LBB240_16:	@ bb29.bb197_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+8]
	@comment
str r3, [sp]
	@comment
str r3, [sp, #+4]
.LBB240_17:	@ bb197
	ldr r3, .LCPI240_162
	ldr r3, [r3]
	cmp r3, #0
	ldrne r0, .LCPI240_163
	emit_nops_till_bundle_end
	blne fatal
.LBB240_18:	@ bb198
.LBB240_19:	@ bb199
	ldr r3, .LCPI240_146
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB240_22	@ bb202
.LBB240_20:	@ bb200
	ldr r3, .LCPI240_164
	mov r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI240_165
	mov r2, #0
	@comment
str r2, [r3]
	ldr r3, .LCPI240_166
	ldr r3, [r3]
	cmp r3, #1
	ldreq r0, .LCPI240_167
	emit_nops_till_bundle_end
	bleq warning
.LBB240_21:	@ bb201
.LBB240_22:	@ bb202
	ldr r3, .LCPI240_168
	ldr r3, [r3]
	cmp r3, #3
	bne .LBB240_25	@ bb205
.LBB240_23:	@ bb203
	ldr r3, .LCPI240_169
	ldr r0, [r3]
	ldr r1, .LCPI240_170
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB240_25	@ bb205
.LBB240_24:	@ bb204
	ldr r0, .LCPI240_171
	emit_nops_till_bundle_end
	bl warning
	ldr r3, .LCPI240_168
	mov r2, #0
	@comment
str r2, [r3]
.LBB240_25:	@ bb205
	ldr r3, .LCPI240_160
	ldr r3, [r3]
	tst r3, #3
	orreq r3, r3, #3
	ldreq r2, .LCPI240_160
	@comment
streq r3, [r2]
.LBB240_26:	@ bb206
.LBB240_27:	@ bb207
	and r2, r3, #3
	cmp r2, #2
	orreq r3, r3, #2, 22 @ 2048
	biceq r3, r3, #1, 22 @ 1024
	ldreq r2, .LCPI240_160
	@comment
streq r3, [r2]
.LBB240_28:	@ bb208
.LBB240_29:	@ bb209
	and r2, r3, #3
	mov r1, #2
	mov r0, #0
	cmp r2, #3
	moveq r0, r1
	ldr r2, .LCPI240_172
	@comment
str r0, [r2]
	tst r3, #128
	ldrne r2, .LCPI240_173
	movne r1, #2
	@comment
strne r1, [r2]
.LBB240_30:	@ bb213
.LBB240_31:	@ bb214
	and r3, r3, #3, 24 @ 768
	cmp r3, #3, 24 @ 768
	ldreq r0, .LCPI240_174
	emit_nops_till_bundle_end
	bleq error
.LBB240_32:	@ bb215
.LBB240_33:	@ bb216
	ldr r3, .LCPI240_160
	ldr r3, [r3]
	tst r3, #16
	beq .LBB240_218	@ bb221
.LBB240_34:	@ bb219.preheader
	mov r3, #0
	ldr r2, .LCPI240_175
.LBB240_35:	@ bb219
	ldr r1, [r2, +r3]
	sub r1, r1, #1
	@comment
str r1, [r2, +r3]
	add r3, r3, #4
	cmp r3, #1, 24 @ 256
	bne .LBB240_35	@ bb219
.LBB240_36:	@ bb220
	ldr r3, .LCPI240_176
	ldr r2, .LCPI240_177
	@comment
str r2, [r3]
	b .LBB240_219	@ bb222
.LBB240_37:	@ bb33
	emit_nops_till_bundle_end
	bl strlen
	mov r2, r0
	ldr r0, [r6]
	ldr r1, [r5]
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_40	@ bb36
.LBB240_38:	@ bb34
	add r5, r5, #4
.LBB240_39:	@ bb35
	ldr r0, [r5]
	cmp r0, #0
	bne .LBB240_37	@ bb33
.LBB240_40:	@ bb36
	ldr r5, [r5]
	ldr r1, [r6]
	cmp r5, #0
	bne .LBB240_287	@ bb37
.LBB240_41:	@ bb38
	ldrb r5, [r1]
	cmp r5, #43
	beq .LBB240_214	@ bb193
.LBB240_42:	@ bb38
	and r3, r5, #255
	cmp r3, #45
	bne .LBB240_288	@ bb38.bb195_crit_edge
.LBB240_43:	@ bb39
	mov r7, r1
	ldrb r3, [r7, #+1]!
	cmp r3, #0
	beq .LBB240_213	@ bb192
.LBB240_44:	@ bb39
	and r5, r3, #255
	cmp r5, #89
	addeq r7, r1, #2
.LBB240_45:	@ bb41
.LBB240_46:	@ bb42
	ldrb r5, [r7]
	cmp r5, #109
	beq .LBB240_290	@ bb43
.LBB240_47:	@ bb44
	ldr r1, .LCPI240_178
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_291	@ bb45
.LBB240_48:	@ bb46
	ldrb r5, [r7]
	cmp r5, #79
	beq .LBB240_80	@ bb73.preheader
.LBB240_49:	@ bb46
	and r3, r5, #255
	cmp r3, #100
	beq .LBB240_53	@ bb47
.LBB240_50:	@ bb46
	and r5, r5, #255
	cmp r5, #102
	beq .LBB240_215	@ bb195
.LBB240_51:	@ bb76
	ldr r1, .LCPI240_179
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB240_84	@ bb78
.LBB240_52:	@ bb77
	ldr r5, .LCPI240_180
	@comment
str r4, [r5]
	b .LBB240_215	@ bb195
.LBB240_53:	@ bb47
	ldrb r5, [r7, #+1]
.LBB240_54:	@ bb47
	cmp r5, #0
	beq .LBB240_215	@ bb195
.LBB240_55:	@ bb48
	ldrsb r5, [r7, #+1]
	cmp r5, #96
	bgt .LBB240_59	@ bb48
.LBB240_56:	@ bb48
	sub r5, r5, #74
	cmp r5, #9
	bhi .LBB240_58	@ bb68.backedge
.LBB240_57:	@ bb48
	.set PCRELV21, (.LJTI240_1_1-(.LPCRELL21+8))
.LPCRELL21:
	add r6, pc, #PCRELV21
	ldr pc, [r6, +r5, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI240_1_1:
	.long	 .LBB240_68
	.long	 .LBB240_58
	.long	 .LBB240_70
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_77
	.long	 .LBB240_76

.text
@ JUMP TABLE END



	.align	2
.LBB240_58:	@ bb68.backedge
	ldrb r5, [r7, #+2]
	add r7, r7, #1
	b .LBB240_54	@ bb47
.LBB240_59:	@ bb48
	sub r5, r5, #97
	cmp r5, #24
	bhi .LBB240_58	@ bb68.backedge
.LBB240_60:	@ bb48
	.set PCRELV22, (.LJTI240_0_0-(.LPCRELL22+8))
.LPCRELL22:
	add r6, pc, #PCRELV22
	ldr pc, [r6, +r5, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI240_0_0:
	.long	 .LBB240_61
	.long	 .LBB240_58
	.long	 .LBB240_63
	.long	 .LBB240_64
	.long	 .LBB240_58
	.long	 .LBB240_65
	.long	 .LBB240_66
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_67
	.long	 .LBB240_62
	.long	 .LBB240_69
	.long	 .LBB240_71
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_72
	.long	 .LBB240_58
	.long	 .LBB240_73
	.long	 .LBB240_74
	.long	 .LBB240_75
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_58
	.long	 .LBB240_79
	.long	 .LBB240_78

.text
@ JUMP TABLE END



	.align	2
.LBB240_61:	@ bb49
	ldr r5, .LCPI240_181
	@comment
str r4, [r5]
	ldr r5, .LCPI240_182
	@comment
str r4, [r5]
	ldr r5, .LCPI240_183
	@comment
str r4, [r5]
	ldr r5, .LCPI240_184
	@comment
str r4, [r5]
	ldr r5, .LCPI240_185
	@comment
str r4, [r5]
	ldr r5, .LCPI240_186
	@comment
str r4, [r5]
	ldr r5, .LCPI240_187
	@comment
str r4, [r5]
	ldr r5, .LCPI240_188
	@comment
str r4, [r5]
	ldr r5, .LCPI240_189
	@comment
str r4, [r5]
	ldr r5, .LCPI240_190
	@comment
str r4, [r5]
	ldr r5, .LCPI240_191
	@comment
str r4, [r5]
	ldr r5, .LCPI240_192
	@comment
str r4, [r5]
	ldr r5, .LCPI240_193
	@comment
str r4, [r5]
	.align	2
.LBB240_62:	@ bb50
	ldr r5, .LCPI240_194
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_63:	@ bb51
	ldr r5, .LCPI240_181
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_64:	@ bb52
	ldr r5, .LCPI240_182
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_65:	@ bb53
	ldr r5, .LCPI240_183
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_66:	@ bb54
	ldr r5, .LCPI240_184
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_67:	@ bb55
	ldr r5, .LCPI240_185
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_68:	@ bb56
	ldr r5, .LCPI240_186
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_69:	@ bb57
	ldr r5, .LCPI240_187
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_70:	@ bb58
	ldr r5, .LCPI240_188
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_71:	@ bb59
	mov r5, #1
	@comment
str r5, [sp]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_72:	@ bb60
	ldr r5, .LCPI240_195
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_73:	@ bb61
	ldr r5, .LCPI240_189
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_74:	@ bb62
	ldr r5, .LCPI240_190
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_75:	@ bb63
	ldr r5, .LCPI240_191
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_76:	@ bb64
	ldr r5, .LCPI240_192
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_77:	@ bb65
	ldr r5, .LCPI240_193
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_78:	@ bb66
	mov r0, #1
	emit_nops_till_bundle_end
	bl set_yydebug
	b .LBB240_58	@ bb68.backedge
	.align	2
.LBB240_79:	@ bb67
	ldr r5, .LCPI240_196
	@comment
str r4, [r5]
	b .LBB240_58	@ bb68.backedge
.LBB240_80:	@ bb73.preheader
	add r5, r7, #1
.LBB240_81:	@ bb73
	ldrb r7, [r5], #+1
	sub r3, r7, #48
	and r3, r3, #255
	cmp r3, #10
	blo .LBB240_81	@ bb73
.LBB240_82:	@ bb74
	tst r7, #255
	beq .LBB240_215	@ bb195
.LBB240_83:	@ bb75
	ldr r1, [r6]
	b .LBB240_214	@ bb193
.LBB240_84:	@ bb78
	ldr r1, .LCPI240_197
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_293	@ bb79
.LBB240_85:	@ bb80
	ldr r1, .LCPI240_198
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_294	@ bb81
.LBB240_86:	@ bb82
	ldr r1, .LCPI240_199
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_295	@ bb82.bb195_crit_edge
.LBB240_87:	@ bb84
	ldr r1, .LCPI240_200
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_296	@ bb85
.LBB240_88:	@ bb86
	ldr r1, .LCPI240_201
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB240_91	@ bb89
.LBB240_89:	@ bb87
	ldr r5, .LCPI240_202
	@comment
str r4, [r5]
	ldr r5, .LCPI240_166
	ldr r5, [r5]
	cmp r5, #1
	ldrne r5, .LCPI240_166
	movne r6, #2
	@comment
strne r6, [r5]
	b .LBB240_215	@ bb195
.LBB240_90:	@ bb88
.LBB240_91:	@ bb89
	ldrb r5, [r7]
	cmp r5, #87
	bne .LBB240_119	@ bb119
.LBB240_92:	@ bb90
	add r5, r7, #4
	add r8, r7, #1
	mov r9, #0
	mov r10, #1
	ldr r11, .LCPI240_203
.LBB240_93:	@ bb91
	ldr r1, [r11]
	mov r0, r8
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	ldmeqib r11, {r3, r9}
	@comment
streq r9, [r3]
	moveq r9, #1
.LBB240_94:	@ bb92
.LBB240_95:	@ bb93
	ldrb r3, [r8]
	cmp r3, #110
	bne .LBB240_100	@ bb98
.LBB240_96:	@ bb94
	ldrb r3, [r7, #+2]
	cmp r3, #111
	ldreqb r3, [r7, #+3]
	cmpeq r3, #45
	beq .LBB240_98	@ bb96
	b .LBB240_100	@ bb98
.LBB240_97:	@ bb95
.LBB240_98:	@ bb96
	ldr r1, [r11]
	mov r0, r5
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB240_100	@ bb98
.LBB240_99:	@ bb97
	ldr r3, [r11, #+8]
	mov r9, #1
	cmp r3, #0
	mov r3, #0
	moveq r3, r9
	ldr r2, [r11, #+4]
	@comment
str r3, [r2]
.LBB240_100:	@ bb98
	add r11, r11, #12
	add r3, r10, #1
	cmp r9, #0
	bne .LBB240_102	@ bb103
.LBB240_101:	@ bb98
	cmp r10, #8
	mov r10, r3
	blo .LBB240_93	@ bb91
.LBB240_102:	@ bb103
	cmp r9, #0
	bne .LBB240_215	@ bb195
.LBB240_103:	@ bb104
	ldr r1, .LCPI240_204
	mov r0, r8
	mov r5, #9
	mov r2, r5
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	bne .LBB240_109	@ bb111
.LBB240_104:	@ bb109.preheader
	add r5, r7, #10
	b .LBB240_107	@ bb109
.LBB240_105:	@ bb106
	sub r8, r8, #48
	and r8, r8, #255
	cmp r8, #9
	bhi .LBB240_83	@ bb75
.LBB240_106:	@ bb107
	add r5, r5, #1
.LBB240_107:	@ bb109
	ldrb r8, [r5]
	cmp r8, #0
	bne .LBB240_105	@ bb106
.LBB240_108:	@ bb110
	ldr r5, .LCPI240_205
	@comment
str r4, [r5]
	add r0, r7, #10
	emit_nops_till_bundle_end
	bl atoi
	ldr r5, .LCPI240_206
	@comment
str r0, [r5]
	b .LBB240_215	@ bb195
.LBB240_109:	@ bb111
	ldr r1, .LCPI240_207
	mov r0, r8
	mov r5, #12
	mov r2, r5
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	bne .LBB240_83	@ bb75
.LBB240_110:	@ bb116.preheader
	add r5, r7, #13
	b .LBB240_116	@ bb116
	.align	4
.LBB240_111:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_134:
 	.long	save_argc

.LBB240_112:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_135:
 	.long	save_argv

.LBB240_113:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_136:
 	.long	flag_omit_frame_pointer

	.align	4
.LBB240_114:	@ bb113
	sub r3, r3, #48
	and r3, r3, #255
	cmp r3, #9
	bhi .LBB240_83	@ bb75
.LBB240_115:	@ bb114
	add r5, r5, #1
.LBB240_116:	@ bb116
	ldrb r3, [r5]
	cmp r3, #0
	bne .LBB240_114	@ bb113
.LBB240_117:	@ bb117
	ldr r5, .LCPI240_208
	@comment
str r4, [r5]
	add r0, r7, #13
	emit_nops_till_bundle_end
	bl atoi
	ldr r5, .LCPI240_209
	@comment
str r0, [r5]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_118:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_137:
 	.long	progname

	.align	4
.LBB240_119:	@ bb119
	ldr r1, .LCPI240_210
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	bne .LBB240_163	@ bb123
.LBB240_120:	@ bb120
	ldr r5, .LCPI240_162
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB240_129	@ bb122
.LBB240_121:	@ bb121
	ldr r5, .LCPI240_211
	@comment
str r4, [r5]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_122:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_138:
 	.long	decl_printable_name

.LBB240_123:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_139:
 	.long	decl_name

.LBB240_124:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_140:
 	.long	lang_expand_expr

.LBB240_125:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_141:
 	.long	do_abort

.LBB240_126:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_142:
 	.long	interim_eh_hook

.LBB240_127:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_143:
 	.long	interim_eh

.LBB240_128:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_144:
 	.long	flag_signed_char

	.align	4
.LBB240_129:	@ bb122
	ldr r0, .LCPI240_212
	emit_nops_till_bundle_end
	bl error
	b .LBB240_215	@ bb195
	.align	4
.LBB240_130:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_145:
 	.long	.str1611430

.LBB240_131:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_146:
 	.long	optimize

.LBB240_132:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_147:
 	.long	obey_regdecls

.LBB240_133:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_148:
 	.long	flag_defer_pop

.LBB240_134:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_149:
 	.long	flag_thread_jumps

.LBB240_135:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_150:
 	.long	flag_delayed_branch

.LBB240_136:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_151:
 	.long	flag_cse_follow_jumps

.LBB240_137:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_152:
 	.long	flag_cse_skip_blocks

.LBB240_138:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_153:
 	.long	flag_expensive_optimizations

.LBB240_139:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_154:
 	.long	flag_strength_reduce

.LBB240_140:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_155:
 	.long	flag_rerun_cse_after_loop

.LBB240_141:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_156:
 	.long	flag_force_mem

.LBB240_142:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_157:
 	.long	flag_schedule_insns

.LBB240_143:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_158:
 	.long	flag_schedule_insns_after_reload

.LBB240_144:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_159:
 	.long	flag_inline_functions

.LBB240_145:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_160:
 	.long	target_flags

.LBB240_146:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_161:
 	.long	.str791332

.LBB240_147:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_162:
 	.long	output_bytecode

.LBB240_148:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_163:
 	.long	.str345

.LBB240_149:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_164:
 	.long	flag_no_inline

.LBB240_150:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_165:
 	.long	warn_inline

.LBB240_151:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_166:
 	.long	warn_uninitialized

.LBB240_152:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_167:
 	.long	.str346

.LBB240_153:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_168:
 	.long	write_symbols

.LBB240_154:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_169:
 	.long	language_string

.LBB240_155:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_170:
 	.long	.str347

.LBB240_156:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_171:
 	.long	.str348

.LBB240_157:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_172:
 	.long	m88k_cpu

.LBB240_158:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_173:
 	.long	flag_pic

.LBB240_159:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_174:
 	.long	.str349

.LBB240_160:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_175:
 	.long	reg_names

.LBB240_161:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_176:
 	.long	m88k_pound_sign

.LBB240_162:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_177:
 	.long	.str350

	.align	4
.LBB240_163:	@ bb123
	ldr r1, .LCPI240_213
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_297	@ bb124
.LBB240_164:	@ bb125
	ldrb r5, [r7]
	cmp r5, #103
	bne .LBB240_202	@ bb179
.LBB240_165:	@ bb125.bb128_crit_edge
	mov r0, r7
.LBB240_166:	@ bb128
	ldrb r5, [r0, #+1]!
	sub r6, r5, #48
	and r3, r6, #255
	cmp r3, #10
	blo .LBB240_168	@ bb132
.LBB240_167:	@ bb128
	tst r5, #255
	bne .LBB240_166	@ bb128
.LBB240_168:	@ bb132
	sub r8, r0, r7
	and r6, r6, #255
	cmp r6, #9
	bhi .LBB240_299	@ bb132.bb135_crit_edge
.LBB240_169:	@ bb132.bb133_crit_edge
	mov r6, #1
	mov r3, #0
.LBB240_170:	@ bb133
	add r9, r0, r3
	ldrb r9, [r9, #+1]
	sub r2, r9, #48
	and r2, r2, #255
	add r3, r3, #1
	add r6, r6, #1
	cmp r2, #10
	blo .LBB240_170	@ bb133
.LBB240_171:	@ bb135
	tst r5, #255
	beq .LBB240_300	@ bb135.bb138_crit_edge
.LBB240_172:	@ bb136
	emit_nops_till_bundle_end
	bl atoi
.LBB240_173:	@ bb138
	tst r9, #255
	bne .LBB240_175	@ bb142
.LBB240_174:	@ bb138
	cmp r0, #3
	bls .LBB240_176	@ bb143
.LBB240_175:	@ bb142
	ldr r0, .LCPI240_214
	mov r1, r7
	emit_nops_till_bundle_end
	bl warning
	ldr r0, .LCPI240_215
	emit_nops_till_bundle_end
	bl warning
	mov r0, #0
.LBB240_176:	@ bb143
	mov r5, r0
	ldr r1, .LCPI240_216
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_301	@ bb144
.LBB240_177:	@ bb148thread-split
	ldr r6, .LCPI240_168
	ldr r6, [r6]
.LBB240_178:	@ bb148
	cmp r6, #0
	bne .LBB240_182	@ bb155
.LBB240_179:	@ bb149
	ldr r1, .LCPI240_76
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_302	@ bb150
.LBB240_180:	@ bb151
	ldr r1, .LCPI240_74
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_302	@ bb150
.LBB240_181:	@ bb153
	ldr r1, .LCPI240_77
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_302	@ bb150
.LBB240_182:	@ bb155
	ldr r6, .LCPI240_75
	ldr r6, [r6]
	cmp r6, #3
	bne .LBB240_186	@ bb159
.LBB240_183:	@ bb156
	ldr r1, .LCPI240_74
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	bne .LBB240_185	@ bb159thread-split
.LBB240_184:	@ bb156
	cmp r8, #2
	bhs .LBB240_191	@ bb166
.LBB240_185:	@ bb159thread-split
	ldr r6, .LCPI240_75
	ldr r6, [r6]
.LBB240_186:	@ bb159
	cmp r6, #3
	bne .LBB240_188	@ bb162
.LBB240_187:	@ bb160
	ldr r1, .LCPI240_79
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_191	@ bb166
.LBB240_188:	@ bb162
	ldr r6, .LCPI240_75
	ldr r6, [r6]
	cmp r6, #3
	bne .LBB240_191	@ bb166
.LBB240_189:	@ bb163
	ldr r1, .LCPI240_77
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	bne .LBB240_191	@ bb166
.LBB240_190:	@ bb163
	cmp r8, #2
	bhs .LBB240_303	@ bb165
.LBB240_191:	@ bb166
	ldr r6, .LCPI240_78
	@comment
str r4, [r6]
.LBB240_192:	@ bb167
	ldr r6, .LCPI240_75
	ldr r6, [r6]
	cmp r6, #0
	bne .LBB240_197	@ bb174
.LBB240_193:	@ bb168
	ldr r1, .LCPI240_76
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_304	@ bb169
.LBB240_194:	@ bb170
	ldr r1, .LCPI240_80
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_304	@ bb169
.LBB240_195:	@ bb172
	ldr r1, .LCPI240_81
	mov r0, r7
	mov r2, r8
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	beq .LBB240_304	@ bb169
.LBB240_196:	@ bb174thread-split
	ldr r6, .LCPI240_75
	ldr r6, [r6]
.LBB240_197:	@ bb174
	cmp r6, #0
	beq .LBB240_305	@ bb175
.LBB240_198:	@ bb176
	cmp r5, #0
	ldrne r6, .LCPI240_83
	@comment
strne r5, [r6]
	ldreq r5, .LCPI240_75
	moveq r6, #0
	@comment
streq r6, [r5]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_199:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_178:
 	.long	.str324

.LBB240_200:	@ bb177
.LBB240_201:	@ bb178
	.align	4
.LBB240_202:	@ bb179
	ldr r1, .LCPI240_84
	mov r0, r7
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB240_306	@ bb180
.LBB240_203:	@ bb181
	ldrb r5, [r7]
	cmp r5, #71
	bne .LBB240_209	@ bb186
.LBB240_204:	@ bb182
	ldr r5, .LCPI240_86
	@comment
str r4, [r5]
	ldrb r5, [r7, #+1]!
	cmp r5, #0
	ldreq r5, [sp, #+20]
	addeq r5, r5, #1
	@comment
streq r5, [sp, #+20]
	ldreq r6, [sp, #+16]
	ldreq r7, [r6, +r5, lsl #2]
.LBB240_205:	@ bb184
.LBB240_206:	@ bb185
	mov r0, r7
	emit_nops_till_bundle_end
	bl atoi
	ldr r5, .LCPI240_87
	@comment
str r0, [r5]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_207:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_179:
 	.long	.str325

.LBB240_208:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_180:
 	.long	pedantic

	.align	4
.LBB240_209:	@ bb186
	ldr r1, .LCPI240_88
	mov r0, r7
	mov r5, #8
	mov r2, r5
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	bne .LBB240_83	@ bb75
.LBB240_210:	@ bb187
	ldr r5, .LCPI240_89
	@comment
str r4, [r5]
	ldrb r5, [r7, #+8]!
	cmp r5, #0
	ldreq r5, [sp, #+20]
	addeq r5, r5, #1
	@comment
streq r5, [sp, #+20]
	ldreq r6, [sp, #+16]
	ldreq r7, [r6, +r5, lsl #2]
.LBB240_211:	@ bb189
.LBB240_212:	@ bb190
	ldr r5, .LCPI240_90
	@comment
str r7, [r5]
	b .LBB240_215	@ bb195
.LBB240_213:	@ bb192
	and r5, r5, #255
	cmp r5, #43
	bne .LBB240_288	@ bb38.bb195_crit_edge
.LBB240_214:	@ bb193
	ldr r0, .LCPI240_46
	emit_nops_till_bundle_end
	bl error
.LBB240_215:	@ bb195
	ldr r5, [sp, #+20]
	add r5, r5, #1
	@comment
str r5, [sp, #+20]
	ldr r6, [sp, #+12]
	cmp r5, r6
	bge .LBB240_17	@ bb197
	b .LBB240_217	@ bb35.preheader
.LBB240_216:	@ bb29.bb35.preheader_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+8]
	mov r2, #1
	@comment
str r2, [sp, #+20]
	mov r4, #1
	@comment
str r3, [sp]
	@comment
str r3, [sp, #+4]
.LBB240_217:	@ bb35.preheader
	ldr r6, [sp, #+20]
	ldr r5, [sp, #+16]
	add r6, r5, r6, lsl #2
	ldr r5, .LCPI240_91
	b .LBB240_39	@ bb35
.LBB240_218:	@ bb221
	orr r3, r3, #32
	bic r3, r3, #16
	ldr r2, .LCPI240_26
	@comment
str r3, [r2]
.LBB240_219:	@ bb222
	ldr r3, .LCPI240_105
	ldr r1, [r3]
	cmp r1, #0
	beq .LBB240_255	@ bb232
.LBB240_220:	@ bb222.bb227_crit_edge
	mov r3, r1
	b .LBB240_250	@ bb227
	.align	4
.LBB240_221:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_181:
 	.long	combine_dump

.LBB240_222:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_182:
 	.long	dbr_sched_dump

.LBB240_223:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_183:
 	.long	flow_dump

.LBB240_224:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_184:
 	.long	global_reg_dump

.LBB240_225:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_185:
 	.long	jump_opt_dump

.LBB240_226:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_186:
 	.long	jump2_opt_dump

.LBB240_227:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_187:
 	.long	local_reg_dump

.LBB240_228:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_188:
 	.long	loop_dump

.LBB240_229:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_189:
 	.long	rtl_dump

.LBB240_230:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_190:
 	.long	cse_dump

.LBB240_231:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_191:
 	.long	cse2_dump

.LBB240_232:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_192:
 	.long	sched_dump

.LBB240_233:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_193:
 	.long	sched2_dump

.LBB240_234:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_194:
 	.long	stack_reg_dump

.LBB240_235:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_195:
 	.long	flag_print_asm_name

.LBB240_236:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_196:
 	.long	rtl_dump_and_exit

.LBB240_237:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_197:
 	.long	.str326

.LBB240_238:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_198:
 	.long	.str327

.LBB240_239:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_199:
 	.long	.str328

.LBB240_240:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_200:
 	.long	.str1111370

.LBB240_241:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_201:
 	.long	.str329

.LBB240_242:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_202:
 	.long	extra_warnings

.LBB240_243:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_203:
 	.long	W_options

.LBB240_244:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_204:
 	.long	.str330

.LBB240_245:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_205:
 	.long	warn_id_clash

.LBB240_246:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_206:
 	.long	id_clash_len

.LBB240_247:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_207:
 	.long	.str331

	.align	4
.LBB240_248:	@ bb224
	sub r2, r2, #48
	and r2, r2, #255
	cmp r2, #9
	bhi .LBB240_307	@ bb226
.LBB240_249:	@ bb225
	add r3, r3, #1
.LBB240_250:	@ bb227
	ldrb r2, [r3]
	cmp r2, #0
	bne .LBB240_248	@ bb224
.LBB240_251:	@ bb228
	ldr r3, .LCPI240_105
	ldr r4, [r3]
	mov r0, r4
	emit_nops_till_bundle_end
	bl atoi
	ldr r3, .LCPI240_107
	@comment
str r0, [r3]
	cmp r0, #0
	ldrlt r0, .LCPI240_108
	movlt r1, r4
	emit_nops_till_bundle_end
	bllt error
.LBB240_252:	@ bb229
.LBB240_253:	@ bb230
	ldr r3, .LCPI240_100
	ldr r3, [r3]
	cmp r3, #0
	ldrne r3, .LCPI240_105
	ldrne r1, [r3]
	ldrne r0, .LCPI240_109
	emit_nops_till_bundle_end
	blne error
.LBB240_254:	@ bb231
.LBB240_255:	@ bb232
	ldr r3, .LCPI240_110
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB240_308	@ bb234.thread
.LBB240_256:	@ bb234
	ldr r3, .LCPI240_111
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB240_258	@ bb236
.LBB240_257:	@ bb235
	mov r3, #1
	ldr r2, .LCPI240_20
	@comment
str r3, [r2]
	ldr r2, .LCPI240_21
	@comment
str r3, [r2]
.LBB240_258:	@ bb236
	ldr r3, [sp, #+4]
	cmp r3, #0
	beq .LBB240_278	@ bb239
.LBB240_259:	@ bb237
	ldr r3, .LCPI240_96
	ldr r4, [r3]
	ldr r3, .LCPI240_112
	ldr r5, [r3]
	mov r6, #2
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_113
	mov r2, r4
	mov r3, r5
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_114
	ldr r2, .LCPI240_115
	ldr r3, .LCPI240_116
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_117
	ldr r2, .LCPI240_118
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI240_52
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB240_278	@ bb239
.LBB240_260:	@ bb238
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_119
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI240_120
	mov r2, #8
	@comment
str r2, [r3]
	mov r4, #0
	ldr r5, .LCPI240_121
	mov r6, #2
	mov r7, #8
.LBB240_261:	@ bb.i
	add r3, r5, r4
	ldr r2, [r3, #+8]
	ldr r3, [r3, #+4]
	ldr r3, [r3]
	cmp r3, r2
	bne .LBB240_264	@ bb3.i
.LBB240_262:	@ bb1.i
	ldr r8, [r5, +r4]
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r9, .LCPI240_122
	ldr r1, .LCPI240_123
	mov r2, r9
	mov r3, r8
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	ldr r2, .LCPI240_120
	ldr r1, [r2]
	add r3, r3, r1
	add r3, r3, #1
	@comment
str r3, [r2]
	cmp r3, #66
	blt .LBB240_264	@ bb3.i
.LBB240_263:	@ bb.i.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_124
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI240_120
	@comment
str r7, [r3]
.LBB240_264:	@ bb3.i
	add r4, r4, #12
	cmp r4, #117, 30 @ 468
	bne .LBB240_261	@ bb.i
.LBB240_265:	@ bb5.i.loopexit
	mov r4, #0
	ldr r5, .LCPI240_59
	mov r6, #2
	mov r7, #8
.LBB240_266:	@ bb5.i
	add r3, r5, r4
	ldr r2, [r3, #+8]
	ldr r3, [r3, #+4]
	ldr r3, [r3]
	cmp r3, r2
	bne .LBB240_269	@ bb8.i
.LBB240_267:	@ bb6.i
	ldr r8, [r5, +r4]
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r9, .LCPI240_125
	ldr r1, .LCPI240_123
	mov r2, r9
	mov r3, r8
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	ldr r2, .LCPI240_120
	ldr r1, [r2]
	add r3, r3, r1
	add r3, r3, #1
	@comment
str r3, [r2]
	cmp r3, #66
	blt .LBB240_269	@ bb8.i
.LBB240_268:	@ bb.i20.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_124
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI240_120
	@comment
str r7, [r3]
.LBB240_269:	@ bb8.i
	add r4, r4, #12
	cmp r4, #96
	bne .LBB240_266	@ bb5.i
.LBB240_270:	@ bb10.i.loopexit
	mov r4, #0
	ldr r5, .LCPI240_126
	mov r6, #2
	mov r7, #8
.LBB240_271:	@ bb10.i
	ldr r8, [r5, +r4]
	ldrb r3, [r8]
	cmp r3, #0
	beq .LBB240_276	@ bb15.i
.LBB240_272:	@ bb11.i
	add r3, r5, r4
	ldr r3, [r3, #+4]
	cmp r3, #1
	blt .LBB240_276	@ bb15.i
.LBB240_273:	@ bb12.i
	ldr r2, .LCPI240_26
	ldr r2, [r2]
	and r2, r2, r3
	cmp r2, r3
	bne .LBB240_276	@ bb15.i
.LBB240_274:	@ bb13.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r9, .LCPI240_127
	ldr r1, .LCPI240_123
	mov r2, r9
	mov r3, r8
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, r9
	emit_nops_till_bundle_end
	bl strlen
	mov r9, r0
	mov r0, r8
	emit_nops_till_bundle_end
	bl strlen
	add r3, r9, r0
	ldr r2, .LCPI240_120
	ldr r1, [r2]
	add r3, r3, r1
	add r3, r3, #1
	@comment
str r3, [r2]
	cmp r3, #66
	blt .LBB240_276	@ bb15.i
.LBB240_275:	@ bb.i17.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_124
	emit_nops_till_bundle_end
	bl fprintf
	ldr r3, .LCPI240_120
	@comment
str r7, [r3]
.LBB240_276:	@ bb15.i
	add r4, r4, #8
	cmp r4, #232
	bne .LBB240_271	@ bb10.i
.LBB240_277:	@ print_switch_values.exit
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI240_128
	emit_nops_till_bundle_end
	bl fprintf
.LBB240_278:	@ bb239
	ldr r0, [sp, #+8]
	emit_nops_till_bundle_end
	bl compile_file
	ldr r3, [sp]
	cmp r3, #0
	beq .LBB240_280	@ bb241
.LBB240_279:	@ bb240
	mov r0, #0
	emit_nops_till_bundle_end
	bl sbrk
	mov r4, r0
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r3, .LCPI240_129
	sub r2, r4, r3
	ldr r1, .LCPI240_130
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	emit_nops_till_bundle_end
	bl fflush
	ldr r0, .LCPI240_131
	emit_nops_till_bundle_end
	bl system
.LBB240_280:	@ bb241
	ldr r3, .LCPI240_132
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI240_133
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB240_282	@ bb245
	b .LBB240_311	@ bb242
.LBB240_281:	@ bb243
.LBB240_282:	@ bb245
	mov r0, #0
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB240_283:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_208:
 	.long	warn_larger_than

.LBB240_284:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_209:
 	.long	larger_than_size

	.align	4
.LBB240_285:	@ bb13
	ldr r3, .LCPI240_12
	@comment
str r6, [r3]
	b .LBB240_14	@ bb21
	.align	4
.LBB240_286:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_210:
 	.long	.str332

	.align	4
.LBB240_287:	@ bb37
	mov r0, r1
	emit_nops_till_bundle_end
	bl lang_decode_option
	b .LBB240_215	@ bb195
.LBB240_288:	@ bb38.bb195_crit_edge
	@comment
str r1, [sp, #+8]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_289:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_211:
 	.long	profile_flag

	.align	4
.LBB240_290:	@ bb43
	add r0, r7, #1
	emit_nops_till_bundle_end
	bl set_target_switch
	b .LBB240_215	@ bb195
.LBB240_291:	@ bb45
	ldr r5, [sp, #+20]
	add r5, r5, #1
	@comment
str r5, [sp, #+20]
	ldr r6, [sp, #+16]
	ldr r5, [r6, +r5, lsl #2]
	ldr r6, .LCPI240_29
	@comment
str r5, [r6]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_292:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_212:
 	.long	.str1381405

	.align	4
.LBB240_293:	@ bb79
	ldr r5, .LCPI240_48
	@comment
str r4, [r5]
	ldr r5, .LCPI240_50
	@comment
str r4, [r5]
	b .LBB240_215	@ bb195
.LBB240_294:	@ bb81
	ldr r5, .LCPI240_52
	@comment
str r4, [r5]
	b .LBB240_215	@ bb195
.LBB240_295:	@ bb82.bb195_crit_edge
	mov r5, #1
	@comment
str r5, [sp, #+4]
	b .LBB240_215	@ bb195
.LBB240_296:	@ bb85
	ldr r5, .LCPI240_55
	@comment
str r4, [r5]
	b .LBB240_215	@ bb195
.LBB240_297:	@ bb124
	ldr r5, .LCPI240_71
	@comment
str r4, [r5]
	b .LBB240_215	@ bb195
	.align	4
.LBB240_298:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_213:
 	.long	.str333

	.align	4
.LBB240_299:	@ bb132.bb135_crit_edge
	mov r9, r5
	b .LBB240_171	@ bb135
.LBB240_300:	@ bb135.bb138_crit_edge
	mov r0, #2
	b .LBB240_173	@ bb138
.LBB240_301:	@ bb144
	ldr r6, .LCPI240_26
	ldr r6, [r6]
	tst r6, #16
	mov r6, #3
	mov r3, #2
	moveq r6, r3
	ldr r3, .LCPI240_75
	@comment
str r6, [r3]
	b .LBB240_178	@ bb148
.LBB240_302:	@ bb150
	ldr r6, .LCPI240_75
	mov r3, #3
	@comment
str r3, [r6]
	b .LBB240_183	@ bb156
.LBB240_303:	@ bb165
	ldr r6, .LCPI240_78
	mov r3, #0
	@comment
str r3, [r6]
	b .LBB240_192	@ bb167
.LBB240_304:	@ bb169
	ldr r6, .LCPI240_75
	mov r7, #2
	@comment
str r7, [r6]
	b .LBB240_198	@ bb176
.LBB240_305:	@ bb175
	ldr r0, .LCPI240_82
	mov r1, r7
	emit_nops_till_bundle_end
	bl warning
	b .LBB240_215	@ bb195
.LBB240_306:	@ bb180
	ldr r5, [sp, #+20]
	add r5, r5, #1
	@comment
str r5, [sp, #+20]
	ldr r6, [sp, #+16]
	ldr r5, [r6, +r5, lsl #2]
	ldr r6, .LCPI240_85
	@comment
str r5, [r6]
	b .LBB240_215	@ bb195
.LBB240_307:	@ bb226
	ldr r0, .LCPI240_106
	emit_nops_till_bundle_end
	bl error
	b .LBB240_251	@ bb228
.LBB240_308:	@ bb234.thread
	ldr r3, .LCPI240_111
	mov r2, #1
	@comment
str r2, [r3]
	b .LBB240_257	@ bb235
	.align	4
.LBB240_309:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_214:
 	.long	.str334

.LBB240_310:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_215:
 	.long	.str335

	.align	4
.LBB240_311:	@ bb242
	mov r0, #33
	emit_nops_till_bundle_end
	bl exit
	.align	4
.LBB240_312:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_216:
 	.long	.str336

.LBB240_313:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_12:
 	.long	optimize

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_20:
 	.long	flag_strength_reduce

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_21:
 	.long	flag_rerun_cse_after_loop

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_26:
 	.long	target_flags

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_29:
 	.long	dump_base_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_46:
 	.long	.str1051361

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_48:
 	.long	pedantic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_50:
 	.long	flag_pedantic_errors

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_52:
 	.long	quiet_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_55:
 	.long	inhibit_warnings

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_59:
 	.long	W_options

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_71:
 	.long	profile_block_flag

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_74:
 	.long	.str336

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_75:
 	.long	write_symbols

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_76:
 	.long	.str337

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_77:
 	.long	.str338

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_78:
 	.long	use_gnu_debug_info_extensions

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_79:
 	.long	.str339

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_80:
 	.long	.str340

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_81:
 	.long	.str341

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_82:
 	.long	.str342

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_83:
 	.long	debug_info_level

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_84:
 	.long	.str343

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_85:
 	.long	asm_file_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_86:
 	.long	g_switch_set

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_87:
 	.long	g_switch_value

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_88:
 	.long	.str344

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_89:
 	.long	flag_gen_aux_info

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_90:
 	.long	aux_info_file_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_91:
 	.long	lang_options

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_96:
 	.long	language_string

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_100:
 	.long	flag_pic

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_105:
 	.long	m88k_short_data

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_106:
 	.long	.str351

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_107:
 	.long	m88k_gp_threshold

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_108:
 	.long	.str352

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_109:
 	.long	.str353

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_110:
 	.long	flag_unroll_all_loops

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_111:
 	.long	flag_unroll_loops

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_112:
 	.long	version_string

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_113:
 	.long	.str354

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_114:
 	.long	.str355

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_115:
 	.long	.str356

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_116:
 	.long	.str357

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_117:
 	.long	.str358

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_118:
 	.long	.str359

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_119:
 	.long	.str21246

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_120:
 	.long	line_position

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_121:
 	.long	f_options

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_122:
 	.long	.str421290

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_123:
 	.long	.str1244

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_124:
 	.long	.str11245

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_125:
 	.long	.str501303

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_126:
 	.long	target_switches

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_127:
 	.long	.str801333

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_128:
 	.long	.str811334

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_129:
 	.long	environ

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_130:
 	.long	.str360

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_131:
 	.long	.str361

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_132:
 	.long	errorcount

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI240_133:
 	.long	sorrycount

	.size main, .-main


	.globl	temporary_allocation
	.align	4
temporary_allocation:
	ldr r3, .LCPI241_0
	ldr r3, [r3]
	ldr r2, .LCPI241_1
	@comment
str r3, [r2]
	ldr r2, .LCPI241_2
	@comment
str r3, [r2]
	ldr r3, .LCPI241_3
	ldr r3, [r3]
	ldr r2, .LCPI241_4
	@comment
str r3, [r2]
	ldr r2, .LCPI241_5
	@comment
str r3, [r2]
	mov r3, #0
	ldr r2, .LCPI241_6
	@comment
str r3, [r2]
	ldr r2, .LCPI241_7
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB241_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_0:
 	.long	function_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_2:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_3:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_4:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_5:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_6:
 	.long	momentary_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI241_7:
 	.long	inline_obstacks

	.size temporary_allocation, .-temporary_allocation


	.globl	end_temporary_allocation
	.align	4
end_temporary_allocation:
	ldr r3, .LCPI242_0
	ldr r2, .LCPI242_1
	@comment
str r3, [r2]
	ldr r2, .LCPI242_2
	@comment
str r3, [r2]
	ldr r2, .LCPI242_3
	@comment
str r3, [r2]
	ldr r2, .LCPI242_4
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB242_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI242_0:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI242_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI242_2:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI242_3:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI242_4:
 	.long	rtl_obstack

	.size end_temporary_allocation, .-end_temporary_allocation


	.globl	resume_temporary_allocation
	.align	4
resume_temporary_allocation:
	ldr r3, .LCPI243_0
	ldr r3, [r3]
	ldr r2, .LCPI243_1
	@comment
str r3, [r2]
	ldr r2, .LCPI243_2
	@comment
str r3, [r2]
	ldr r3, .LCPI243_3
	ldr r3, [r3]
	ldr r2, .LCPI243_4
	@comment
str r3, [r2]
	ldr r2, .LCPI243_5
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB243_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI243_0:
 	.long	function_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI243_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI243_2:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI243_3:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI243_4:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI243_5:
 	.long	rtl_obstack

	.size resume_temporary_allocation, .-resume_temporary_allocation


	.globl	saveable_allocation
	.align	4
saveable_allocation:
	ldr r3, .LCPI244_0
	ldr r3, [r3]
	ldr r2, .LCPI244_1
	@comment
str r3, [r2]
	ldr r2, .LCPI244_2
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB244_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI244_0:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI244_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI244_2:
 	.long	expression_obstack

	.size saveable_allocation, .-saveable_allocation


	.globl	allocation_temporary_p
	.align	4
allocation_temporary_p:
	ldr r3, .LCPI245_0
	ldr r3, [r3]
	ldr r2, .LCPI245_1
	mov r1, #1
	mov r0, #0
	cmp r3, r2
	movne r0, r1
	sfi_bx lr
	.align	4
.LBB245_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI245_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI245_1:
 	.long	permanent_obstack

	.size allocation_temporary_p, .-allocation_temporary_p


	.globl	rtl_in_current_obstack
	.align	4
rtl_in_current_obstack:
	ldr r3, .LCPI246_0
	ldr r3, [r3]
	ldr r2, .LCPI246_1
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB246_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI246_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI246_1:
 	.long	rtl_obstack

	.size rtl_in_current_obstack, .-rtl_in_current_obstack


	.globl	rtl_in_saveable_obstack
	.align	4
rtl_in_saveable_obstack:
	ldr r3, .LCPI247_0
	ldr r3, [r3]
	ldr r2, .LCPI247_1
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB247_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI247_0:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI247_1:
 	.long	rtl_obstack

	.size rtl_in_saveable_obstack, .-rtl_in_saveable_obstack


	.globl	preserve_momentary
	.align	4
preserve_momentary:
	ldr r3, .LCPI248_0
	ldrb r2, [r3, #+40]
	ldr r3, [r3, #+8]
	mov r1, #0
	tst r2, #4
	moveq r1, r3
	ldr r3, .LCPI248_1
	ldr r3, [r3]
	@comment
str r1, [r3, #+4]
	sfi_bx lr
	.align	4
.LBB248_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI248_0:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI248_1:
 	.long	momentary_stack

	.size preserve_momentary, .-preserve_momentary


	.globl	pop_momentary_nofree
	.align	4
pop_momentary_nofree:
	ldr r3, .LCPI249_0
	ldr r2, [r3]
	ldr r1, [r2]
	@comment
str r1, [r3]
	ldr r3, [r2, #+8]
	ldr r2, .LCPI249_1
	@comment
str r3, [r2]
	sfi_bx lr
	.align	4
.LBB249_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI249_0:
 	.long	momentary_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI249_1:
 	.long	expression_obstack

	.size pop_momentary_nofree, .-pop_momentary_nofree


	.globl	suspend_momentary
	.align	4
suspend_momentary:
	ldr r3, .LCPI250_0
	ldr r3, [r3]
	ldr r2, .LCPI250_1
	ldr r1, [r2]
	@comment
str r3, [r2]
	ldr r3, .LCPI250_2
	mov r2, #1
	mov r0, #0
	cmp r1, r3
	moveq r0, r2
	sfi_bx lr
	.align	4
.LBB250_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI250_0:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI250_1:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI250_2:
 	.long	momentary_obstack

	.size suspend_momentary, .-suspend_momentary


	.globl	resume_momentary
	.align	4
resume_momentary:
	cmp r0, #0
	sfi_bxeq lr
	ldrne r3, .LCPI251_0
	ldrne r2, .LCPI251_1
	@comment
strne r2, [r3]
	sfi_bxne lr
.LBB251_1:	@ bb
.LBB251_2:	@ return
	.align	4
.LBB251_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI251_0:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI251_1:
 	.long	momentary_obstack

	.size resume_momentary, .-resume_momentary


	.globl	start_identifier_warnings
	.align	4
start_identifier_warnings:
	ldr r3, .LCPI252_0
	mov r2, #1
	strb r2, [r3]
	sfi_bx lr
	.align	4
.LBB252_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI252_0:
 	.long	do_identifier_warnings.b

	.size start_identifier_warnings, .-start_identifier_warnings


	.globl	set_identifier_size
	.align	4
set_identifier_size:
	ldr r3, .LCPI253_0
	ldr r3, [r3]
	sub r2, r0, #12
	mov r2, r2, lsr #2
	@comment
str r2, [r3, #+4]
	sfi_bx lr
	.align	4
.LBB253_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI253_0:
 	.long	tree_code_length

	.size set_identifier_size, .-set_identifier_size


	.globl	real_value_from_int_cst
	.align	4
real_value_from_int_cst:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, [r0, #+16]
	mov r4, r0
	cmp r3, #0
	bge .LBB254_2	@ bb11
.LBB254_1:	@ bb
	ldr r2, [r4, #+4]
	ldrb r2, [r2, #+9]
	tst r2, #64
	beq .LBB254_4	@ bb4
.LBB254_2:	@ bb11
	mov r0, r3
	emit_nops_till_bundle_end
	bl __floatunsidf
	mov r2, #0
	mov r3, #31, 12 @ 32505856
	orr r3, r3, #1, 2 @ 1073741824
	emit_nops_till_bundle_end
	bl __muldf3
	mov r5, r0
	mov r6, r1
	ldr r0, [r4, #+12]
	emit_nops_till_bundle_end
	bl __floatunsidf
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl __adddf3
.LBB254_3:	@ bb11
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB254_4:	@ bb4
	mvn r0, r3
	emit_nops_till_bundle_end
	bl __floatsidf
	mov r5, #0
	mov r3, #31, 12 @ 32505856
	orr r3, r3, #1, 2 @ 1073741824
	mov r2, #0
	emit_nops_till_bundle_end
	bl __muldf3
	mov r6, r0
	mov r7, r1
	ldr r3, [r4, #+12]
	mvn r0, r3
	emit_nops_till_bundle_end
	bl __floatunsidf
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl __adddf3
	mov r2, r0
	mov r3, r1
	mov r1, #255, 12 @ 267386880
	orr r1, r1, #11, 4 @ -1342177280
	mov r0, r5
	emit_nops_till_bundle_end
	bl __subdf3
	b .LBB254_3	@ bb11
	.size real_value_from_int_cst, .-real_value_from_int_cst


	.globl	integer_zerop
	.align	4
integer_zerop:
	sfi_sub sp, sp, #8
	@comment
str lr, [sp, #+4]
	@comment
str r4, [sp]
.LBB255_1:	@ bb1
	mov r4, r0
	ldrb r3, [r4, #+8]
	sub r2, r3, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB255_3	@ bb3
.LBB255_2:	@ bb2
	ldr r2, [r4, #+4]
	ldrb r2, [r2, #+29]
	ldr r0, [r4, #+16]
	ldr r1, [r0, #+4]
	ldrb r1, [r1, #+29]
	cmp r2, r1
	beq .LBB255_1	@ bb1
.LBB255_3:	@ bb3
	and r2, r3, #255
	cmp r2, #27
	beq .LBB255_8	@ bb7
.LBB255_4:	@ bb3
	and r2, r3, #255
	cmp r2, #25
	bne .LBB255_9	@ bb10
.LBB255_5:	@ bb4
	ldr r2, [r4, #+12]
	cmp r2, #0
	ldreq r2, [r4, #+16]
	cmpeq r2, #0
	beq .LBB255_11	@ bb11
.LBB255_6:	@ bb5
.LBB255_7:	@ bb6
	and r3, r3, #255
	cmp r3, #27
	bne .LBB255_9	@ bb10
.LBB255_8:	@ bb7
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB255_12	@ bb8
.LBB255_9:	@ bb10
	mov r0, #0
.LBB255_10:	@ bb10
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB255_11:	@ bb11
	mov r0, #1
	b .LBB255_10	@ bb10
.LBB255_12:	@ bb8
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_zerop
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB255_10	@ bb10
	.size integer_zerop, .-integer_zerop


	.globl	integer_onep
	.align	4
integer_onep:
	sfi_sub sp, sp, #8
	@comment
str lr, [sp, #+4]
	@comment
str r4, [sp]
.LBB256_1:	@ bb1
	mov r4, r0
	ldrb r3, [r4, #+8]
	sub r2, r3, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB256_3	@ bb3
.LBB256_2:	@ bb2
	ldr r2, [r4, #+4]
	ldrb r2, [r2, #+29]
	ldr r0, [r4, #+16]
	ldr r1, [r0, #+4]
	ldrb r1, [r1, #+29]
	cmp r2, r1
	beq .LBB256_1	@ bb1
.LBB256_3:	@ bb3
	and r2, r3, #255
	cmp r2, #27
	beq .LBB256_8	@ bb7
.LBB256_4:	@ bb3
	and r2, r3, #255
	cmp r2, #25
	bne .LBB256_9	@ bb10
.LBB256_5:	@ bb4
	ldr r2, [r4, #+12]
	cmp r2, #1
	ldreq r2, [r4, #+16]
	cmpeq r2, #0
	beq .LBB256_11	@ bb11
.LBB256_6:	@ bb5
.LBB256_7:	@ bb6
	and r3, r3, #255
	cmp r3, #27
	bne .LBB256_9	@ bb10
.LBB256_8:	@ bb7
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	bne .LBB256_12	@ bb8
.LBB256_9:	@ bb10
	mov r0, #0
.LBB256_10:	@ bb10
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB256_11:	@ bb11
	mov r0, #1
	b .LBB256_10	@ bb10
.LBB256_12:	@ bb8
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_zerop
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB256_10	@ bb10
	.size integer_onep, .-integer_onep


	.globl	integer_pow2p
	.align	4
integer_pow2p:
	sfi_sub sp, sp, #12
	@comment
str lr, [sp, #+8]
	@comment
str r5, [sp, #+4]
	@comment
str r4, [sp]
.LBB257_1:	@ bb1
	mov r4, r0
	ldrb r5, [r4, #+8]
	sub r3, r5, #105
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB257_3	@ bb3
.LBB257_2:	@ bb2
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+29]
	ldr r0, [r4, #+16]
	ldr r2, [r0, #+4]
	ldrb r2, [r2, #+29]
	cmp r3, r2
	beq .LBB257_1	@ bb1
.LBB257_3:	@ bb3
	and r3, r5, #255
	cmp r3, #25
	beq .LBB257_8	@ bb9
.LBB257_4:	@ bb3
	and r3, r5, #255
	cmp r3, #27
	bne .LBB257_12	@ bb16
.LBB257_5:	@ bb4
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl integer_pow2p
	cmp r0, #0
	beq .LBB257_7	@ bb7
.LBB257_6:	@ bb5
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB257_14	@ bb5.bb18_crit_edge
.LBB257_7:	@ bb7
	and r3, r5, #255
	cmp r3, #25
	bne .LBB257_12	@ bb16
.LBB257_8:	@ bb9
	ldr r3, [r4, #+16]
	ldr r2, [r4, #+12]
	orr r1, r2, r3
	cmp r1, #0
	beq .LBB257_12	@ bb16
.LBB257_9:	@ bb11
	cmp r3, #0
	subeq r1, r2, #1
	tsteq r1, r2
	beq .LBB257_14	@ bb5.bb18_crit_edge
.LBB257_10:	@ bb12
.LBB257_11:	@ bb13
	cmp r2, #0
	beq .LBB257_15	@ bb14
.LBB257_12:	@ bb16
	mov r0, #0
.LBB257_13:	@ bb18
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB257_14:	@ bb5.bb18_crit_edge
	mov r0, #1
	b .LBB257_13	@ bb18
.LBB257_15:	@ bb14
	sub r2, r3, #1
	mov r1, #1
	mov r0, #0
	tst r2, r3
	moveq r0, r1
	b .LBB257_13	@ bb18
	.size integer_pow2p, .-integer_pow2p


	.globl	real_zerop
	.align	4
real_zerop:
	sfi_sub sp, sp, #12
	@comment
str lr, [sp, #+8]
	@comment
str r5, [sp, #+4]
	@comment
str r4, [sp]
.LBB258_1:	@ bb1
	mov r4, r0
	ldrb r5, [r4, #+8]
	sub r3, r5, #105
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB258_3	@ bb3
.LBB258_2:	@ bb2
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+29]
	ldr r0, [r4, #+16]
	ldr r2, [r0, #+4]
	ldrb r2, [r2, #+29]
	cmp r3, r2
	beq .LBB258_1	@ bb1
.LBB258_3:	@ bb3
	and r3, r5, #255
	cmp r3, #27
	beq .LBB258_7	@ bb6
.LBB258_4:	@ bb3
	and r3, r5, #255
	cmp r3, #26
	bne .LBB258_8	@ bb9
.LBB258_5:	@ bb4
	ldr r3, .LCPI258_0
	ldmia r3, {r2, r3}
	ldr r0, [r4, #+16]
	ldr r1, [r4, #+20]
	emit_nops_till_bundle_end
	bl __eqdf2
	cmp r0, #0
	beq .LBB258_10	@ bb10
.LBB258_6:	@ bb5
	and r3, r5, #255
	cmp r3, #27
	bne .LBB258_8	@ bb9
.LBB258_7:	@ bb6
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl real_zerop
	cmp r0, #0
	bne .LBB258_11	@ bb7
.LBB258_8:	@ bb9
	mov r0, #0
.LBB258_9:	@ bb9
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB258_10:	@ bb10
	mov r0, #1
	b .LBB258_9	@ bb9
.LBB258_11:	@ bb7
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl real_zerop
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB258_9	@ bb9
	.align	4
.LBB258_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI258_0:
 	.long	dconst0

	.size real_zerop, .-real_zerop


	.globl	real_onep
	.align	4
real_onep:
	sfi_sub sp, sp, #12
	@comment
str lr, [sp, #+8]
	@comment
str r5, [sp, #+4]
	@comment
str r4, [sp]
.LBB259_1:	@ bb1
	mov r4, r0
	ldrb r5, [r4, #+8]
	sub r3, r5, #105
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB259_3	@ bb3
.LBB259_2:	@ bb2
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+29]
	ldr r0, [r4, #+16]
	ldr r2, [r0, #+4]
	ldrb r2, [r2, #+29]
	cmp r3, r2
	beq .LBB259_1	@ bb1
.LBB259_3:	@ bb3
	and r3, r5, #255
	cmp r3, #27
	beq .LBB259_7	@ bb6
.LBB259_4:	@ bb3
	and r3, r5, #255
	cmp r3, #26
	bne .LBB259_8	@ bb9
.LBB259_5:	@ bb4
	ldr r3, .LCPI259_0
	ldmia r3, {r2, r3}
	ldr r0, [r4, #+16]
	ldr r1, [r4, #+20]
	emit_nops_till_bundle_end
	bl __eqdf2
	cmp r0, #0
	beq .LBB259_10	@ bb10
.LBB259_6:	@ bb5
	and r3, r5, #255
	cmp r3, #27
	bne .LBB259_8	@ bb9
.LBB259_7:	@ bb6
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl real_onep
	cmp r0, #0
	bne .LBB259_11	@ bb7
.LBB259_8:	@ bb9
	mov r0, #0
.LBB259_9:	@ bb9
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB259_10:	@ bb10
	mov r0, #1
	b .LBB259_9	@ bb9
.LBB259_11:	@ bb7
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl real_zerop
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB259_9	@ bb9
	.align	4
.LBB259_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI259_0:
 	.long	dconst1

	.size real_onep, .-real_onep


	.globl	real_twop
	.align	4
real_twop:
	sfi_sub sp, sp, #12
	@comment
str lr, [sp, #+8]
	@comment
str r5, [sp, #+4]
	@comment
str r4, [sp]
.LBB260_1:	@ bb1
	mov r4, r0
	ldrb r5, [r4, #+8]
	sub r3, r5, #105
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB260_3	@ bb3
.LBB260_2:	@ bb2
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+29]
	ldr r0, [r4, #+16]
	ldr r2, [r0, #+4]
	ldrb r2, [r2, #+29]
	cmp r3, r2
	beq .LBB260_1	@ bb1
.LBB260_3:	@ bb3
	and r3, r5, #255
	cmp r3, #27
	beq .LBB260_7	@ bb6
.LBB260_4:	@ bb3
	and r3, r5, #255
	cmp r3, #26
	bne .LBB260_8	@ bb9
.LBB260_5:	@ bb4
	ldr r3, .LCPI260_0
	ldmia r3, {r2, r3}
	ldr r0, [r4, #+16]
	ldr r1, [r4, #+20]
	emit_nops_till_bundle_end
	bl __eqdf2
	cmp r0, #0
	beq .LBB260_10	@ bb10
.LBB260_6:	@ bb5
	and r3, r5, #255
	cmp r3, #27
	bne .LBB260_8	@ bb9
.LBB260_7:	@ bb6
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl real_twop
	cmp r0, #0
	bne .LBB260_11	@ bb7
.LBB260_8:	@ bb9
	mov r0, #0
.LBB260_9:	@ bb9
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB260_10:	@ bb10
	mov r0, #1
	b .LBB260_9	@ bb9
.LBB260_11:	@ bb7
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl real_zerop
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB260_9	@ bb9
	.align	4
.LBB260_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI260_0:
 	.long	dconst2

	.size real_twop, .-real_twop


	.globl	really_constant_p
	.align	4
really_constant_p:
	ldrb r3, [r0, #+8]
	sub r3, r3, #105
	and r3, r3, #255
	cmp r3, #2
	bhi .LBB261_2	@ bb2
.LBB261_1:	@ bb
	ldr r0, [r0, #+16]
	ldrb r3, [r0, #+8]
	sub r3, r3, #105
	and r3, r3, #255
	cmp r3, #3
	blo .LBB261_1	@ bb
.LBB261_2:	@ bb2
	ldrb r3, [r0, #+9]
	mov r2, #1
	and r0, r2, r3, lsr #1
	sfi_bx lr
	.size really_constant_p, .-really_constant_p


	.globl	value_member
	.align	4
value_member:
	b .LBB262_3	@ bb3
.LBB262_1:	@ bb
	ldr r3, [r1, #+16]
	cmp r3, r0
	moveq r0, r1
	sfi_bxeq lr
.LBB262_2:	@ bb2
	ldr r1, [r1]
.LBB262_3:	@ bb3
	cmp r1, #0
	bne .LBB262_1	@ bb
.LBB262_4:	@ bb3.bb5_crit_edge
	mov r1, #0
.LBB262_5:	@ bb5
	mov r0, r1
	sfi_bx lr
	.size value_member, .-value_member


	.globl	purpose_member
	.align	4
purpose_member:
	b .LBB263_3	@ bb3
.LBB263_1:	@ bb
	ldr r3, [r1, #+12]
	cmp r3, r0
	moveq r0, r1
	sfi_bxeq lr
.LBB263_2:	@ bb2
	ldr r1, [r1]
.LBB263_3:	@ bb3
	cmp r1, #0
	bne .LBB263_1	@ bb
.LBB263_4:	@ bb3.bb5_crit_edge
	mov r1, #0
.LBB263_5:	@ bb5
	mov r0, r1
	sfi_bx lr
	.size purpose_member, .-purpose_member


	.globl	binfo_member
	.align	4
binfo_member:
	b .LBB264_3	@ bb3
.LBB264_1:	@ bb
	ldr r3, [r1, #+4]
	cmp r3, r0
	moveq r0, r1
	sfi_bxeq lr
.LBB264_2:	@ bb2
	ldr r1, [r1]
.LBB264_3:	@ bb3
	cmp r1, #0
	bne .LBB264_1	@ bb
.LBB264_4:	@ bb3.bb5_crit_edge
	mov r1, #0
.LBB264_5:	@ bb5
	mov r0, r1
	sfi_bx lr
	.size binfo_member, .-binfo_member


	.globl	chain_member
	.align	4
chain_member:
	b .LBB265_3	@ bb3
.LBB265_1:	@ bb
	cmp r1, r0
	beq .LBB265_6	@ bb.bb5_crit_edge
.LBB265_2:	@ bb2
	ldr r1, [r1]
.LBB265_3:	@ bb3
	cmp r1, #0
	bne .LBB265_1	@ bb
.LBB265_4:	@ bb3.bb5_crit_edge
	mov r0, #0
.LBB265_5:	@ bb5
	sfi_bx lr
.LBB265_6:	@ bb.bb5_crit_edge
	mov r0, #1
	b .LBB265_5	@ bb5
	.size chain_member, .-chain_member


	.globl	chain_member_value
	.align	4
chain_member_value:
	b .LBB266_3	@ bb3
.LBB266_1:	@ bb
	ldr r3, [r1, #+16]
	cmp r3, r0
	beq .LBB266_6	@ bb.bb5_crit_edge
.LBB266_2:	@ bb2
	ldr r1, [r1]
.LBB266_3:	@ bb3
	cmp r1, #0
	bne .LBB266_1	@ bb
.LBB266_4:	@ bb3.bb5_crit_edge
	mov r0, #0
.LBB266_5:	@ bb5
	sfi_bx lr
.LBB266_6:	@ bb.bb5_crit_edge
	mov r0, #1
	b .LBB266_5	@ bb5
	.size chain_member_value, .-chain_member_value


	.globl	chain_member_purpose
	.align	4
chain_member_purpose:
	b .LBB267_3	@ bb3
.LBB267_1:	@ bb
	ldr r3, [r1, #+12]
	cmp r3, r0
	beq .LBB267_6	@ bb.bb5_crit_edge
.LBB267_2:	@ bb2
	ldr r1, [r1]
.LBB267_3:	@ bb3
	cmp r1, #0
	bne .LBB267_1	@ bb
.LBB267_4:	@ bb3.bb5_crit_edge
	mov r0, #0
.LBB267_5:	@ bb5
	sfi_bx lr
.LBB267_6:	@ bb.bb5_crit_edge
	mov r0, #1
	b .LBB267_5	@ bb5
	.size chain_member_purpose, .-chain_member_purpose


	.globl	list_length
	.align	4
list_length:
	cmp r0, #0
	beq .LBB268_4	@ entry.bb2_crit_edge
.LBB268_1:	@ entry.bb_crit_edge
	mov r3, #0
.LBB268_2:	@ bb
	ldr r0, [r0]
	add r3, r3, #1
	cmp r0, #0
	bne .LBB268_2	@ bb
.LBB268_3:	@ bb2
	mov r0, r3
	sfi_bx lr
.LBB268_4:	@ entry.bb2_crit_edge
	mov r3, #0
	b .LBB268_3	@ bb2
	.size list_length, .-list_length


	.globl	tree_last
	.align	4
tree_last:
	cmp r0, #0
	sfi_bxeq lr
.LBB269_1:	@ bb1
	mov r3, r0
	ldr r0, [r3]
	cmp r0, #0
	bne .LBB269_1	@ bb1
.LBB269_2:	@ bb1.bb2_crit_edge
	mov r0, r3
.LBB269_3:	@ bb2
	sfi_bx lr
	.size tree_last, .-tree_last


	.globl	nreverse
	.align	4
nreverse:
	cmp r0, #0
	beq .LBB270_4	@ entry.bb2_crit_edge
.LBB270_1:	@ entry.bb_crit_edge
	mov r3, #0
.LBB270_2:	@ bb
	mov r2, r0
	ldr r0, [r2]
	@comment
str r3, [r2]
	cmp r0, #0
	mov r3, r2
	bne .LBB270_2	@ bb
.LBB270_3:	@ bb2
	mov r0, r2
	sfi_bx lr
.LBB270_4:	@ entry.bb2_crit_edge
	mov r2, #0
	b .LBB270_3	@ bb2
	.size nreverse, .-nreverse


	.globl	contains_placeholder_p
	.align	4
contains_placeholder_p:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI271_0
	ldr r3, [r3]
	ldr r2, .LCPI271_1
	ldr r2, [r2]
	mov r4, r0
.LBB271_1:	@ tailrecurse
	ldrb r1, [r4, #+8]
	cmp r1, #55
	beq .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_2:	@ bb1
	ldr r0, [r2, +r1, lsl #2]
	ldrsb r0, [r0]
	cmp r0, #113
	bgt .LBB271_10	@ bb1
.LBB271_3:	@ bb1
	sub r12, r0, #49
	cmp r12, #2
	blo .LBB271_6	@ bb6
.LBB271_4:	@ bb1
	cmp r0, #60
	cmpne r0, #101
	bne .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_5:	@ bb1
.LBB271_6:	@ bb6
	ldr r0, [r3, +r1, lsl #2]
	cmp r0, #3
	beq .LBB271_22	@ bb22
.LBB271_7:	@ bb6
	cmp r0, #2
	beq .LBB271_13	@ bb8
.LBB271_8:	@ bb6
	cmp r0, #1
	bne .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_9:	@ bb7
	ldr r4, [r4, #+16]
	b .LBB271_1	@ tailrecurse
.LBB271_10:	@ bb1
	cmp r0, #114
	bne .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_11:	@ bb4
	ldr r4, [r4, #+16]
	ldrb r3, [r4, #+8]
	ldr r1, [r2, +r3, lsl #2]
	ldrb r1, [r1]
	cmp r1, #114
	beq .LBB271_11	@ bb4
.LBB271_12:	@ bb5
	and r3, r3, #255
	mov r2, #1
	mov r0, #0
	cmp r3, #54
	moveq r0, r2
	b .LBB271_27	@ bb30
.LBB271_13:	@ bb8
	mov r3, r1, lsl #24
	mov r3, r3, asr #24
	cmp r3, #107
	bgt .LBB271_16	@ bb8
.LBB271_14:	@ bb8
	and r3, r1, #255
	cmp r3, #43
	bne .LBB271_19	@ bb15
.LBB271_15:	@ tailrecurse.bb30_crit_edge
	mov r0, #0
	b .LBB271_27	@ bb30
.LBB271_16:	@ bb8
	and r3, r1, #255
	cmp r3, #109
	beq .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_17:	@ bb8
	and r3, r1, #255
	cmp r3, #108
	bne .LBB271_20	@ bb17
.LBB271_18:	@ bb15
	ldr r3, [r4, #+24]
	cmp r3, #0
	bne .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_19:	@ bb15
	and r1, r1, #255
	cmp r1, #55
	beq .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_20:	@ bb17
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	beq .LBB271_26	@ bb18
.LBB271_21:	@ bb17.bb30_crit_edge
	mov r0, #1
	b .LBB271_27	@ bb30
.LBB271_22:	@ bb22
	and r3, r1, #255
	cmp r3, #48
	bne .LBB271_15	@ tailrecurse.bb30_crit_edge
.LBB271_23:	@ bb23
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	bne .LBB271_21	@ bb17.bb30_crit_edge
.LBB271_24:	@ bb24
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	bne .LBB271_21	@ bb17.bb30_crit_edge
.LBB271_25:	@ bb25
	ldr r0, [r4, #+24]
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB271_27	@ bb30
.LBB271_26:	@ bb18
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	mov r1, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r1
.LBB271_27:	@ bb30
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB271_28:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI271_0:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI271_1:
 	.long	tree_code_type

	.size contains_placeholder_p, .-contains_placeholder_p


	.globl	build_decl_attribute_variant
	.align	4
build_decl_attribute_variant:
	@comment
str r1, [r0, #+64]
	sfi_bx lr
	.size build_decl_attribute_variant, .-build_decl_attribute_variant


	.globl	change_main_variant
	.align	4
change_main_variant:
	ldr r3, [r0, #+64]
	ldr r2, [r3, #+60]
.LBB273_1:	@ bb2
	cmp r2, r0
	beq .LBB273_6	@ bb
.LBB273_2:	@ bb5
	ldr r3, [r3, #+60]
	cmp r3, #0
	ldrne r2, [r3, #+60]
	cmpne r2, #0
	bne .LBB273_1	@ bb2
.LBB273_3:	@ bb6
.LBB273_4:	@ bb7.loopexit
	add r2, r0, #60
.LBB273_5:	@ bb7
	@comment
str r1, [r0, #+64]
	ldr r3, [r1, #+60]
	@comment
str r3, [r2]
	@comment
str r0, [r1, #+60]
	sfi_bx lr
.LBB273_6:	@ bb
	mov r2, r0
	ldr r12, [r2, #+60]!
	@comment
str r12, [r3, #+60]
	b .LBB273_5	@ bb7
	.size change_main_variant, .-change_main_variant


	.globl	type_hash_list
	.align	4
type_hash_list:
	cmp r0, #0
	beq .LBB274_4	@ entry.bb2_crit_edge
.LBB274_1:	@ entry.bb_crit_edge
	mov r3, #0
.LBB274_2:	@ bb
	ldr r2, [r0, #+16]
	ldr r1, .LCPI274_0
	and r2, r2, r1
	add r3, r2, r3
	ldr r0, [r0]
	cmp r0, #0
	bne .LBB274_2	@ bb
.LBB274_3:	@ bb2
	mov r0, r3
	sfi_bx lr
.LBB274_4:	@ entry.bb2_crit_edge
	mov r3, #0
	b .LBB274_3	@ bb2
	.align	4
.LBB274_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI274_0:
 	.long	262143			@ 0x3FFFF

	.size type_hash_list, .-type_hash_list


	.globl	attribute_hash_list
	.align	4
attribute_hash_list:
	cmp r0, #0
	beq .LBB275_4	@ entry.bb2_crit_edge
.LBB275_1:	@ entry.bb_crit_edge
	mov r3, #0
.LBB275_2:	@ bb
	ldr r2, [r0, #+12]
	ldr r1, .LCPI275_0
	and r2, r2, r1
	add r3, r2, r3
	ldr r0, [r0]
	cmp r0, #0
	bne .LBB275_2	@ bb
.LBB275_3:	@ bb2
	mov r0, r3
	sfi_bx lr
.LBB275_4:	@ entry.bb2_crit_edge
	mov r3, #0
	b .LBB275_3	@ bb2
	.align	4
.LBB275_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI275_0:
 	.long	262143			@ 0x3FFFF

	.size attribute_hash_list, .-attribute_hash_list


	.globl	tree_int_cst_equal
	.align	4
tree_int_cst_equal:
	cmp r0, r1
	beq .LBB276_7	@ entry.bb11_crit_edge
.LBB276_1:	@ bb1
	cmp r1, #0
	cmpne r0, #0
	bne .LBB276_3	@ bb5
	b .LBB276_9	@ bb1.bb11_crit_edge
.LBB276_2:	@ bb1
.LBB276_3:	@ bb5
	ldrb r3, [r0, #+8]
	cmp r3, #25
	ldreqb r3, [r1, #+8]
	cmpeq r3, #25
	beq .LBB276_5	@ bb7
	b .LBB276_6	@ bb10
.LBB276_4:	@ bb6
.LBB276_5:	@ bb7
	ldr r3, [r1, #+12]
	ldr r2, [r0, #+12]
	cmp r2, r3
	movne r0, #0
	sfi_bxne lr
	b .LBB276_10	@ bb8
.LBB276_6:	@ bb10
	mov r0, #0
	sfi_bx lr
.LBB276_7:	@ entry.bb11_crit_edge
	mov r0, #1
.LBB276_8:	@ bb11
	sfi_bx lr
.LBB276_9:	@ bb1.bb11_crit_edge
	mov r0, #0
	b .LBB276_8	@ bb11
.LBB276_10:	@ bb8
	ldr r3, [r1, #+16]
	ldr r2, [r0, #+16]
	mov r1, #1
	mov r0, #0
	cmp r2, r3
	moveq r0, r1
	sfi_bx lr
	.size tree_int_cst_equal, .-tree_int_cst_equal


	.globl	tree_int_cst_lt
	.align	4
tree_int_cst_lt:
	cmp r0, r1
	beq .LBB277_8	@ entry.bb17_crit_edge
.LBB277_1:	@ bb1
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+9]
	ldr r2, [r1, #+16]
	ldr r12, [r0, #+16]
	tst r3, #64
	bne .LBB277_5	@ bb11
.LBB277_2:	@ bb5
	cmp r12, r2
	blt .LBB277_10	@ bb5.bb17_crit_edge
.LBB277_3:	@ bb6
	cmp r12, r2
	beq .LBB277_11	@ bb7
.LBB277_4:	@ bb9
	mov r0, #0
	sfi_bx lr
.LBB277_5:	@ bb11
	cmp r12, r2
	blo .LBB277_10	@ bb5.bb17_crit_edge
.LBB277_6:	@ bb12
	cmp r12, r2
	movne r0, #0
	sfi_bxne lr
.LBB277_7:	@ bb13
	ldr r3, [r1, #+12]
	ldr r2, [r0, #+12]
	mov r1, #1
	mov r0, #0
	cmp r2, r3
	movlo r0, r1
	sfi_bx lr
.LBB277_8:	@ entry.bb17_crit_edge
	mov r0, #0
.LBB277_9:	@ bb17
	sfi_bx lr
.LBB277_10:	@ bb5.bb17_crit_edge
	mov r0, #1
	b .LBB277_9	@ bb17
.LBB277_11:	@ bb7
	ldr r2, [r1, #+12]
	ldr r12, [r0, #+12]
	mov r3, #1
	mov r0, #0
	cmp r12, r2
	movlo r0, r3
	sfi_bx lr
	.size tree_int_cst_lt, .-tree_int_cst_lt


	.globl	tree_int_cst_sgn
	.align	4
tree_int_cst_sgn:
	ldr r3, [r0, #+12]
	cmp r3, #0
	ldreq r3, [r0, #+16]
	cmpeq r3, #0
	beq .LBB278_5	@ bb.bb10_crit_edge
.LBB278_1:	@ bb
.LBB278_2:	@ bb2
	ldr r3, [r0, #+4]
	ldrb r3, [r3, #+9]
	tst r3, #64
	beq .LBB278_6	@ bb7
.LBB278_3:	@ bb2.bb10_crit_edge
	mov r0, #1
.LBB278_4:	@ bb10
	sfi_bx lr
.LBB278_5:	@ bb.bb10_crit_edge
	mov r0, #0
	b .LBB278_4	@ bb10
.LBB278_6:	@ bb7
	ldr r3, [r0, #+16]
	mvn r2, #0
	mov r0, #1
	cmp r3, #0
	movlt r0, r2
	sfi_bx lr
	.size tree_int_cst_sgn, .-tree_int_cst_sgn


	.globl	type_precision
	.align	4
type_precision:
	ldrb r3, [r0, #+8]
	cmp r3, #10
	movhi r0, #32
	sfi_bxhi lr
.LBB279_1:	@ entry
	mov r2, #1
	mov r1, #22, 26 @ 1408
	tst r1, r2, lsl r3
	ldrneb r0, [r0, #+28]
	sfi_bxne lr
.LBB279_2:	@ bb3
.LBB279_3:	@ bb5
	mov r0, #32
	sfi_bx lr
	.size type_precision, .-type_precision


	.globl	int_fits_type_p
	.align	4
int_fits_type_p:
	ldrb r3, [r1, #+9]
	ldr r2, [r1, #+56]
	ldrb r12, [r2, #+8]
	tst r3, #64
	beq .LBB280_9	@ bb14
.LBB280_1:	@ bb
	and r12, r12, #255
	cmp r12, #25
	bne .LBB280_5	@ bb7
.LBB280_2:	@ bb4
	ldr r12, [r0, #+16]
	ldr r3, [r2, #+16]
	cmp r3, r12
	blo .LBB280_17	@ bb12
.LBB280_3:	@ bb5
	cmp r3, r12
	bne .LBB280_5	@ bb7
.LBB280_4:	@ bb6
	ldr r12, [r0, #+12]
	ldr r2, [r2, #+12]
	cmp r2, r12
	blo .LBB280_17	@ bb12
.LBB280_5:	@ bb7
	ldr r2, [r1, #+52]
	ldrb r12, [r2, #+8]
	cmp r12, #25
	bne .LBB280_18	@ bb25
.LBB280_6:	@ bb8
	ldr r12, [r2, #+16]
	ldr r3, [r0, #+16]
	cmp r3, r12
	blo .LBB280_17	@ bb12
.LBB280_7:	@ bb9
	cmp r3, r12
	bne .LBB280_18	@ bb25
.LBB280_8:	@ bb10
	ldr r2, [r2, #+12]
	ldr r12, [r0, #+12]
	mov r3, #1
	mov r0, #0
	cmp r12, r2
	movhs r0, r3
	sfi_bx lr
.LBB280_9:	@ bb14
	and r3, r12, #255
	cmp r3, #25
	bne .LBB280_13	@ bb18
.LBB280_10:	@ bb15
	ldr r3, [r0, #+16]
	ldr r12, [r2, #+16]
	cmp r12, r3
	blt .LBB280_17	@ bb12
.LBB280_11:	@ bb16
	cmp r12, r3
	bne .LBB280_13	@ bb18
.LBB280_12:	@ bb17
	ldr r3, [r0, #+12]
	ldr r2, [r2, #+12]
	cmp r2, r3
	movlo r0, #0
	sfi_bxlo lr
.LBB280_13:	@ bb18
	ldr r3, [r1, #+52]
	ldrb r2, [r3, #+8]
	cmp r2, #25
	bne .LBB280_18	@ bb25
.LBB280_14:	@ bb19
	ldr r2, [r3, #+16]
	ldr r1, [r0, #+16]
	cmp r1, r2
	blt .LBB280_17	@ bb12
.LBB280_15:	@ bb20
	cmp r1, r2
	movne r0, #1
	sfi_bxne lr
.LBB280_16:	@ bb21
	ldr r3, [r3, #+12]
	ldr r2, [r0, #+12]
	mov r1, #1
	mov r0, #0
	cmp r2, r3
	movhs r0, r1
	sfi_bx lr
.LBB280_17:	@ bb12
	mov r0, #0
	sfi_bx lr
.LBB280_18:	@ bb25
	mov r0, #1
	sfi_bx lr
	.size int_fits_type_p, .-int_fits_type_p


	.globl	decl_type_context
	.align	4
decl_type_context:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	b .LBB281_5	@ bb5
.LBB281_1:	@ bb
	ldrb r3, [r0, #+8]
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #2
	bls .LBB281_10	@ bb11
.LBB281_2:	@ bb2
	and r2, r3, #255
	cmp r2, #5
	beq .LBB281_7	@ bb7
.LBB281_3:	@ bb2
	and r2, r3, #255
	cmp r2, #29
	andne r3, r3, #255
	cmpne r3, #32
	bne .LBB281_6	@ bb8
.LBB281_4:	@ bb2
.LBB281_5:	@ bb5
	add r3, r0, #36
	b .LBB281_8	@ bb9
.LBB281_6:	@ bb8
	emit_nops_till_bundle_end
	bl abort
.LBB281_7:	@ bb7
	add r3, r0, #28
.LBB281_8:	@ bb9
	ldr r0, [r3]
	cmp r0, #0
	bne .LBB281_1	@ bb
.LBB281_9:	@ bb9.bb11_crit_edge
	mov r0, #0
.LBB281_10:	@ bb11
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size decl_type_context, .-decl_type_context


	.globl	decl_function_context
	.align	4
decl_function_context:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #108
	beq .LBB282_9	@ bb2
.LBB282_1:	@ entry
	tst r3, #255
	bne .LBB282_6	@ bb3
.LBB282_2:	@ entry.bb14_crit_edge
	mov r0, #0
	b .LBB282_12	@ bb14
.LBB282_3:	@ bb4
	sub r2, r3, #20
	and r2, r2, #255
	cmp r2, #1
	bls .LBB282_2	@ entry.bb14_crit_edge
.LBB282_4:	@ bb6
	and r2, r3, #255
	cmp r2, #5
	beq .LBB282_7	@ bb9
.LBB282_5:	@ bb6
	and r3, r3, #255
	cmp r3, #32
	bne .LBB282_8	@ bb10
.LBB282_6:	@ bb3
	add r3, r0, #36
	b .LBB282_10	@ bb11
.LBB282_7:	@ bb9
	add r3, r0, #28
	b .LBB282_10	@ bb11
.LBB282_8:	@ bb10
	emit_nops_till_bundle_end
	bl abort
.LBB282_9:	@ bb2
	add r3, r0, #20
.LBB282_10:	@ bb11
	ldr r0, [r3]
	cmp r0, #0
	ldrneb r3, [r0, #+8]
	cmpne r3, #29
	bne .LBB282_3	@ bb4
.LBB282_11:	@ bb12
.LBB282_12:	@ bb14
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size decl_function_context, .-decl_function_context


	.globl	staticp
	.align	4
staticp:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
.LBB283_1:	@ tailrecurse
	ldrb r3, [r0, #+8]
	sub r2, r3, #28
	cmp r2, #15
	bhi .LBB283_23	@ bb24
.LBB283_2:	@ tailrecurse
	.set PCRELV23, (.LJTI283_0_0-(.LPCRELL23+8))
.LPCRELL23:
	add r1, pc, #PCRELV23
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI283_0_0:
	.long	 .LBB283_25
	.long	 .LBB283_3
	.long	 .LBB283_23
	.long	 .LBB283_23
	.long	 .LBB283_23
	.long	 .LBB283_17
	.long	 .LBB283_23
	.long	 .LBB283_23
	.long	 .LBB283_23
	.long	 .LBB283_20
	.long	 .LBB283_20
	.long	 .LBB283_23
	.long	 .LBB283_23
	.long	 .LBB283_23
	.long	 .LBB283_21
	.long	 .LBB283_19

.text
@ JUMP TABLE END



	.align	2
.LBB283_3:	@ bb
	and r2, r3, #255
	cmp r2, #108
	beq .LBB283_13	@ bb2.i
.LBB283_4:	@ bb
	tst r3, #255
	bne .LBB283_6	@ bb3.i
.LBB283_5:	@ bb.decl_function_context.exit_crit_edge
	mov r3, #0
	b .LBB283_16	@ decl_function_context.exit
.LBB283_6:	@ bb3.i
	add r3, r0, #36
	b .LBB283_14	@ bb11.i
.LBB283_7:	@ bb4.i
	sub r1, r2, #20
	and r1, r1, #255
	cmp r1, #2
	blo .LBB283_5	@ bb.decl_function_context.exit_crit_edge
.LBB283_8:	@ bb6.i
	and r1, r2, #255
	cmp r1, #5
	beq .LBB283_11	@ bb9.i
.LBB283_9:	@ bb6.i
	and r2, r2, #255
	cmp r2, #32
	bne .LBB283_12	@ bb10.i
.LBB283_10:	@ bb7.i
	add r3, r3, #36
	b .LBB283_14	@ bb11.i
.LBB283_11:	@ bb9.i
	add r3, r3, #28
	b .LBB283_14	@ bb11.i
.LBB283_12:	@ bb10.i
	emit_nops_till_bundle_end
	bl abort
.LBB283_13:	@ bb2.i
	add r3, r0, #20
.LBB283_14:	@ bb11.i
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r2, [r3, #+8]
	cmpne r2, #29
	bne .LBB283_7	@ bb4.i
.LBB283_15:	@ bb12.i
.LBB283_16:	@ decl_function_context.exit
	mov r2, #1
	mov r0, #0
	cmp r3, #0
	moveq r0, r2
	b .LBB283_24	@ bb24
	.align	2
.LBB283_17:	@ bb1
	ldrb r3, [r0, #+10]
	tst r3, #4
	bne .LBB283_25	@ bb25
.LBB283_18:	@ bb5
	ldrb r3, [r0, #+29]
	and r0, r3, #1
	b .LBB283_24	@ bb24
	.align	2
.LBB283_19:	@ bb13
	ldrb r3, [r0, #+8]!
	ldrb r3, [r0, #+2]
	mov r2, #1
	and r0, r2, r3, lsr #2
	b .LBB283_24	@ bb24
	.align	2
.LBB283_20:	@ tailrecurse.backedge
	ldr r0, [r0, #+16]
	b .LBB283_1	@ tailrecurse
	.align	2
.LBB283_21:	@ bb21
	ldr r3, [r0, #+4]
	ldr r3, [r3, #+16]
	ldrb r3, [r3, #+8]
	cmp r3, #25
	ldreq r3, [r0, #+20]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #25
	beq .LBB283_20	@ tailrecurse.backedge
.LBB283_22:	@ bb22
	.align	2
.LBB283_23:	@ bb24
	mov r0, #0
.LBB283_24:	@ bb24
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	2
.LBB283_25:	@ bb25
	mov r0, #1
	b .LBB283_24	@ bb24
	.size staticp, .-staticp


	.globl	valid_machine_attribute
	.align	4
valid_machine_attribute:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldrb r3, [r0, #+8]
	cmp r3, #1
	moveq r0, #0
	ldreq lr, [sp]
	sfi_addeq sp, sp, #4
	sfi_bxeq lr
.LBB284_1:	@ bb4
.LBB284_2:	@ bb3
	emit_nops_till_bundle_end
	bl abort
	.size valid_machine_attribute, .-valid_machine_attribute


	.globl	chainon
	.align	4
chainon:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	cmp r0, #0
	beq .LBB285_9	@ bb10
.LBB285_1:	@ bb2.preheader
	ldr r3, [r0]
	cmp r3, #0
	beq .LBB285_10	@ bb2.preheader.bb3_crit_edge
.LBB285_2:	@ bb1
	mov r2, r3
	ldr r3, [r2]
	cmp r3, #0
	bne .LBB285_2	@ bb1
.LBB285_3:	@ bb1.bb3_crit_edge
	mov r3, r2
.LBB285_4:	@ bb3
	@comment
str r1, [r2]
	b .LBB285_7	@ bb7
.LBB285_5:	@ bb4
	cmp r1, r3
	beq .LBB285_11	@ bb5
.LBB285_6:	@ bb6
	ldr r1, [r1]
.LBB285_7:	@ bb7
	cmp r1, #0
	bne .LBB285_5	@ bb4
.LBB285_8:	@ bb7.bb10_crit_edge
	mov r1, r0
.LBB285_9:	@ bb10
	mov r0, r1
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB285_10:	@ bb2.preheader.bb3_crit_edge
	mov r2, r0
	mov r3, r0
	b .LBB285_4	@ bb3
.LBB285_11:	@ bb5
	emit_nops_till_bundle_end
	bl abort
	.size chainon, .-chainon


	.globl	integer_all_onesp
	.align	4
integer_all_onesp:
	sfi_sub sp, sp, #8
	@comment
str lr, [sp, #+4]
	@comment
str r4, [sp]
.LBB286_1:	@ bb1
	mov r4, r0
	ldrb r3, [r4, #+8]
	sub r2, r3, #105
	and r2, r2, #255
	cmp r2, #2
	bhi .LBB286_3	@ bb3
.LBB286_2:	@ bb2
	ldr r2, [r4, #+4]
	ldrb r2, [r2, #+29]
	ldr r0, [r4, #+16]
	ldr r1, [r0, #+4]
	ldrb r1, [r1, #+29]
	cmp r2, r1
	beq .LBB286_1	@ bb1
.LBB286_3:	@ bb3
	and r3, r3, #255
	cmp r3, #27
	bne .LBB286_6	@ bb7
.LBB286_4:	@ bb4
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl integer_all_onesp
	cmp r0, #0
	beq .LBB286_6	@ bb7
.LBB286_5:	@ bb5
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB286_18	@ bb5.bb31_crit_edge
.LBB286_6:	@ bb7
	ldrb r3, [r4, #+8]
	cmp r3, #25
	bne .LBB286_19	@ bb7.bb31_crit_edge
.LBB286_7:	@ bb9
	ldr r3, [r4, #+4]
	ldrb r2, [r3, #+9]
	tst r2, #64
	bne .LBB286_10	@ bb19
.LBB286_8:	@ bb14
	ldr r3, [r4, #+12]
	cmn r3, #1
	bne .LBB286_19	@ bb7.bb31_crit_edge
.LBB286_9:	@ bb15
	ldr r3, [r4, #+16]
	mov r4, #1
	mov r0, #0
	cmn r3, #1
	moveq r0, r4
	b .LBB286_17	@ bb31
.LBB286_10:	@ bb19
	ldrsb r3, [r3, #+29]
	ldr r2, .LCPI286_0
	ldr r3, [r2, +r3, lsl #2]
	mov r3, r3, lsl #3
	cmp r3, #32
	blt .LBB286_22	@ bb30
.LBB286_11:	@ bb20
	sub r3, r3, #32
	cmp r3, #33
	bge .LBB286_20	@ bb21
.LBB286_12:	@ bb22
	cmp r3, #32
	mvneq r3, #0
	movne r2, #1
	mvnne r1, #0
	addne r3, r1, r2, lsl r3
	b .LBB286_14	@ bb25
.LBB286_13:	@ bb24
.LBB286_14:	@ bb25
	ldr r2, [r4, #+12]
	cmn r2, #1
	bne .LBB286_19	@ bb7.bb31_crit_edge
.LBB286_15:	@ bb26
	ldr r4, [r4, #+16]
	mov r2, #1
	mov r0, #0
	cmp r4, r3
.LBB286_16:	@ bb26
	moveq r0, r2
.LBB286_17:	@ bb31
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB286_18:	@ bb5.bb31_crit_edge
	mov r0, #1
	b .LBB286_17	@ bb31
.LBB286_19:	@ bb7.bb31_crit_edge
	mov r0, #0
	b .LBB286_17	@ bb31
.LBB286_20:	@ bb21
	emit_nops_till_bundle_end
	bl abort
.LBB286_21:	@ bb22.bb25_crit_edge
.LBB286_22:	@ bb30
	mov r2, #1
	mvn r1, #0
	add r3, r1, r2, lsl r3
	ldr r1, [r4, #+12]
	mov r0, #0
	cmp r1, r3
	b .LBB286_16	@ bb26
	.align	4
.LBB286_23:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI286_0:
 	.long	mode_size

	.size integer_all_onesp, .-integer_all_onesp


	.globl	print_obstack_statistics
	.align	4
print_obstack_statistics:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #4
	ldr r3, [r1, #+4]
	mov r4, r0
	cmp r3, #0
	beq .LBB287_4	@ entry.bb2_crit_edge
.LBB287_1:	@ entry.bb_crit_edge
	mov r5, #0
	mov r6, r5
.LBB287_2:	@ bb
	add r2, r3, #8
	sub r6, r6, r2
	ldr r2, [r3]
	add r6, r2, r6
	ldr r3, [r3, #+4]
	add r5, r5, #1
	cmp r3, #0
	bne .LBB287_2	@ bb
.LBB287_3:	@ bb2
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	@comment
str r5, [sp]
	ldr r1, .LCPI287_0
	mov r2, r4
	mov r3, r6
	emit_nops_till_bundle_end
	bl fprintf
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB287_4:	@ entry.bb2_crit_edge
	mov r5, #0
	mov r6, r5
	b .LBB287_3	@ bb2
	.align	4
.LBB287_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI287_0:
 	.long	.str1620

	.size print_obstack_statistics, .-print_obstack_statistics


	.globl	dump_tree_statistics
	.align	4
dump_tree_statistics:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI288_0
	emit_nops_till_bundle_end
	bl fprintf
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI288_1
	emit_nops_till_bundle_end
	bl fprintf
	emit_nops_till_bundle_end
	bl print_lang_statistics
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB288_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI288_0:
 	.long	.str11621

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI288_1:
 	.long	.str21622

	.size dump_tree_statistics, .-dump_tree_statistics


	.globl	simple_cst_equal
	.align	4
simple_cst_equal:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	mov r5, r1
.LBB289_1:	@ tailrecurse.outer
	cmp r4, #0
	beq .LBB289_52	@ tailrecurse.us
.LBB289_2:	@ tailrecurse
	cmp r4, r5
	beq .LBB289_53	@ tailrecurse.bb58_crit_edge
.LBB289_3:	@ bb1
	cmp r5, #0
	beq .LBB289_41	@ bb1.bb58_crit_edge
.LBB289_4:	@ bb5
	ldrb r6, [r4, #+8]
	sub r3, r6, #105
	ldrb r2, [r5, #+8]
	sub r1, r2, #105
	cmp r3, #2
	bhi .LBB289_9	@ bb9
.LBB289_5:	@ bb6.split
	cmp r1, #2
	bhi .LBB289_8	@ bb8
.LBB289_6:	@ bb7
	add r4, r4, #16
	ldr r5, [r5, #+16]
.LBB289_7:	@ tailrecurse.outer.backedge
	ldr r4, [r4]
	b .LBB289_1	@ tailrecurse.outer
.LBB289_8:	@ bb8
	add r4, r4, #16
	b .LBB289_7	@ tailrecurse.outer.backedge
.LBB289_9:	@ bb9
	cmp r1, #2
	bls .LBB289_54	@ bb10
.LBB289_10:	@ bb11.split
	and r3, r2, #255
	and r2, r6, #255
	cmp r2, r3
	bne .LBB289_41	@ bb1.bb58_crit_edge
.LBB289_11:	@ bb13
	cmp r6, #107
	bgt .LBB289_21	@ bb13
.LBB289_12:	@ bb13
	sub r3, r6, #25
	cmp r3, #27
	bhi .LBB289_22	@ bb48
.LBB289_13:	@ bb13
	.set PCRELV24, (.LJTI289_0_0-(.LPCRELL24+8))
.LPCRELL24:
	add r2, pc, #PCRELV24
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI289_0_0:
	.long	 .LBB289_14
	.long	 .LBB289_16
	.long	 .LBB289_22
	.long	 .LBB289_17
	.long	 .LBB289_41
	.long	 .LBB289_22
	.long	 .LBB289_41
	.long	 .LBB289_22
	.long	 .LBB289_41
	.long	 .LBB289_41
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_40
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_20
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_30
	.long	 .LBB289_22
	.long	 .LBB289_22
	.long	 .LBB289_24
	.long	 .LBB289_22
	.long	 .LBB289_38

.text
@ JUMP TABLE END



	.align	2
.LBB289_14:	@ bb14
	ldr r6, [r5, #+12]
	ldr r3, [r4, #+12]
	cmp r3, r6
	bne .LBB289_41	@ bb1.bb58_crit_edge
.LBB289_15:	@ bb15
	ldr r5, [r5, #+16]
	ldr r4, [r4, #+16]
	b .LBB289_29	@ bb6.i
	.align	2
.LBB289_16:	@ bb19
	ldr r0, [r4, #+16]
	ldr r1, [r4, #+20]
	ldr r2, [r5, #+16]
	ldr r3, [r5, #+20]
	emit_nops_till_bundle_end
	bl __eqdf2
	b .LBB289_19	@ bb21
	.align	2
.LBB289_17:	@ bb20
	ldr r6, [r5, #+16]
	ldr r2, [r4, #+16]
	cmp r2, r6
	bne .LBB289_41	@ bb1.bb58_crit_edge
.LBB289_18:	@ bb21
	ldr r0, [r4, #+20]
	ldr r1, [r5, #+20]
	emit_nops_till_bundle_end
	bl memcmp
.LBB289_19:	@ bb21
	mov r4, #1
	cmp r0, #0
	mov r0, #0
	moveq r0, r4
	b .LBB289_51	@ bb58
	.align	2
.LBB289_20:	@ bb25
	emit_nops_till_bundle_end
	bl abort
.LBB289_21:	@ bb13
	cmp r6, #108
	beq .LBB289_6	@ bb7
	.align	2
.LBB289_22:	@ bb48
	and r3, r6, #255
	cmp r3, #126
	blo .LBB289_42	@ bb50
.LBB289_23:	@ bb48.bb58_crit_edge
	mvn r0, #0
	b .LBB289_51	@ bb58
	.align	2
.LBB289_24:	@ bb27
	ldr r0, [r4, #+16]
	ldr r1, [r5, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #0
	ble .LBB289_51	@ bb58
.LBB289_25:	@ bb29
	add r4, r4, #20
	add r5, r5, #20
	b .LBB289_27	@ bb3.i
.LBB289_26:	@ bb.i
	ldr r0, [r4, #+16]
	ldr r1, [r5, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	bne .LBB289_41	@ bb1.bb58_crit_edge
.LBB289_27:	@ bb3.i
	ldr r4, [r4]
	ldr r5, [r5]
	cmp r4, #0
	cmpne r5, #0
	bne .LBB289_26	@ bb.i
.LBB289_28:	@ bb3.i
.LBB289_29:	@ bb6.i
	mov r6, #1
	mov r0, #0
	cmp r4, r5
	moveq r0, r6
	b .LBB289_51	@ bb58
	.align	2
.LBB289_30:	@ bb30
	ldr r0, [r4, #+16]
	ldrb r6, [r0, #+8]
	cmp r6, #33
	ldreq r6, [r0, #+32]
	cmpeq r6, #0
	beq .LBB289_32	@ bb32
	b .LBB289_33	@ bb33
.LBB289_31:	@ bb31
.LBB289_32:	@ bb32
	ldr r6, [r0, #+68]
	cmp r6, #0
	beq .LBB289_37	@ bb40
.LBB289_33:	@ bb33
	ldr r1, [r5, #+16]
	ldrb r6, [r1, #+8]
	cmp r6, #33
	ldreq r6, [r1, #+32]
	cmpeq r6, #0
	beq .LBB289_35	@ bb35
	b .LBB289_36	@ bb38
.LBB289_34:	@ bb34
.LBB289_35:	@ bb35
	ldr r6, [r1, #+68]
	cmp r6, #0
	beq .LBB289_37	@ bb40
.LBB289_36:	@ bb38
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #0
	ble .LBB289_51	@ bb58
.LBB289_37:	@ bb40
	add r4, r4, #20
	ldr r5, [r5, #+20]
	b .LBB289_7	@ tailrecurse.outer.backedge
	.align	2
.LBB289_38:	@ bb41
	ldr r0, [r4, #+16]
	ldr r1, [r5, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #0
	ble .LBB289_51	@ bb58
.LBB289_39:	@ bb43
	ldr r5, [r4, #+24]!
	b .LBB289_7	@ tailrecurse.outer.backedge
	.align	2
.LBB289_40:	@ bb44
	ldr r6, [r5, #+20]
	ldr r3, [r4, #+20]
	cmp r3, r6
	beq .LBB289_6	@ bb7
	.align	2
.LBB289_41:	@ bb1.bb58_crit_edge
	mov r0, #0
	b .LBB289_51	@ bb58
.LBB289_42:	@ bb50
	ldr r3, .LCPI289_0
	ldr r3, [r3]
	ldr r3, [r3, +r6, lsl #2]
	ldrsb r3, [r3]
	cmp r3, #113
	bgt .LBB289_46	@ bb50
.LBB289_43:	@ bb50
	sub r2, r3, #49
	cmp r2, #2
	blo .LBB289_47	@ bb55.preheader
.LBB289_44:	@ bb50
	cmp r3, #60
	beq .LBB289_47	@ bb55.preheader
.LBB289_45:	@ bb50
	cmp r3, #101
	bne .LBB289_23	@ bb48.bb58_crit_edge
	b .LBB289_47	@ bb55.preheader
.LBB289_46:	@ bb50
	sub r3, r3, #114
	cmp r3, #1
	bhi .LBB289_23	@ bb48.bb58_crit_edge
.LBB289_47:	@ bb55.preheader
	mov r0, #1
	mov r7, #0
	mov r8, r7
	b .LBB289_50	@ bb55
.LBB289_48:	@ bb52
	add r3, r4, r7
	ldr r0, [r3, #+16]
	add r3, r5, r7
	ldr r1, [r3, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #0
	ble .LBB289_51	@ bb58
.LBB289_49:	@ bb54
	add r7, r7, #4
	add r8, r8, #1
.LBB289_50:	@ bb55
	ldr r3, .LCPI289_1
	ldr r3, [r3]
	ldr r3, [r3, +r6, lsl #2]
	cmp r3, r8
	bgt .LBB289_48	@ bb52
.LBB289_51:	@ bb58
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB289_52:	@ tailrecurse.us
	mov r3, #1
	mov r0, #0
	cmp r4, r5
	moveq r0, r3
	b .LBB289_51	@ bb58
.LBB289_53:	@ tailrecurse.bb58_crit_edge
	mov r0, #1
	b .LBB289_51	@ bb58
.LBB289_54:	@ bb10
	ldr r5, [r5, #+16]
	b .LBB289_2	@ tailrecurse
	.align	4
.LBB289_55:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI289_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI289_1:
 	.long	tree_code_length

	.size simple_cst_equal, .-simple_cst_equal


	.globl	index_type_equal
	.align	4
index_type_equal:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldrb r3, [r1, #+8]
	ldrb r2, [r0, #+8]
	mov r4, r1
	mov r5, r0
	cmp r2, r3
	andeq r3, r2, #255
	cmpeq r3, #7
	beq .LBB290_2	@ bb2
	b .LBB290_7	@ bb10
.LBB290_1:	@ bb1
.LBB290_2:	@ bb2
	ldrb r3, [r4, #+28]
	ldrb r2, [r5, #+28]
	cmp r2, r3
	ldreqb r3, [r4, #+29]
	ldreqb r2, [r5, #+29]
	cmpeq r2, r3
	beq .LBB290_4	@ bb4
	b .LBB290_7	@ bb10
.LBB290_3:	@ bb3
.LBB290_4:	@ bb4
	ldr r0, [r5, #+16]
	ldr r1, [r4, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	ldreq r3, [r4, #+32]
	ldreq r2, [r5, #+32]
	cmpeq r2, r3
	beq .LBB290_6	@ bb7
	b .LBB290_7	@ bb10
.LBB290_5:	@ bb5
.LBB290_6:	@ bb7
	ldr r0, [r5, #+52]
	ldr r1, [r4, #+52]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	beq .LBB290_9	@ bb8
.LBB290_7:	@ bb10
	mov r0, #0
.LBB290_8:	@ bb10
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB290_9:	@ bb8
	ldr r0, [r5, #+56]
	ldr r1, [r4, #+56]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	mov r3, #1
	cmp r0, #1
	mov r0, #0
	moveq r0, r3
	b .LBB290_8	@ bb10
	.size index_type_equal, .-index_type_equal


	.globl	simple_cst_list_equal
	.align	4
simple_cst_list_equal:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	b .LBB291_3	@ bb3
.LBB291_1:	@ bb
	ldr r0, [r5, #+16]
	ldr r1, [r4, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	bne .LBB291_6	@ bb7
.LBB291_2:	@ bb2
	ldr r4, [r4]
	ldr r5, [r5]
.LBB291_3:	@ bb3
	cmp r5, #0
	cmpne r4, #0
	bne .LBB291_1	@ bb
.LBB291_4:	@ bb3
.LBB291_5:	@ bb6
	mov r3, #1
	mov r0, #0
	cmp r5, r4
	moveq r0, r3
	b .LBB291_7	@ bb7
.LBB291_6:	@ bb7
	mov r0, #0
.LBB291_7:	@ bb7
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.size simple_cst_list_equal, .-simple_cst_list_equal


	.globl	type_list_equal
	.align	4
type_list_equal:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	b .LBB292_6	@ bb6
.LBB292_1:	@ bb
	ldr r3, [r4, #+16]
	ldr r2, [r5, #+16]
	cmp r2, r3
	bne .LBB292_9	@ bb10
.LBB292_2:	@ bb1
	ldr r1, [r4, #+12]
	ldr r0, [r5, #+12]
	cmp r0, r1
	beq .LBB292_5	@ bb5
.LBB292_3:	@ bb2
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	ldreq r3, [r4, #+12]
	ldreq r3, [r3, #+4]
	ldreq r2, [r5, #+12]
	ldreq r2, [r2, #+4]
	cmpeq r2, r3
	beq .LBB292_5	@ bb5
	b .LBB292_9	@ bb10
.LBB292_4:	@ bb3
.LBB292_5:	@ bb5
	ldr r4, [r4]
	ldr r5, [r5]
.LBB292_6:	@ bb6
	cmp r5, #0
	cmpne r4, #0
	bne .LBB292_1	@ bb
.LBB292_7:	@ bb6
.LBB292_8:	@ bb9
	mov r3, #1
	mov r0, #0
	cmp r5, r4
	moveq r0, r3
	b .LBB292_10	@ bb10
.LBB292_9:	@ bb10
	mov r0, #0
.LBB292_10:	@ bb10
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.size type_list_equal, .-type_list_equal


	.globl	pop_momentary
	.align	4
pop_momentary:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI293_0
	ldr r2, [r3]
	ldr r1, [r2]
	@comment
str r1, [r3]
	ldr r3, [r2, #+8]
	ldr r1, .LCPI293_1
	@comment
str r3, [r1]
	ldr r3, .LCPI293_2
	ldr r3, [r3, #+4]
	ldr r1, [r2, #+4]
	cmp r3, r1
	bhs .LBB293_4	@ bb2
.LBB293_1:	@ bb
	ldr r3, .LCPI293_2
	ldr r3, [r3, #+16]
	cmp r3, r1
	bls .LBB293_4	@ bb2
.LBB293_2:	@ bb1
	ldr r3, .LCPI293_2
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
.LBB293_3:	@ bb1
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB293_4:	@ bb2
	ldr r0, .LCPI293_2
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB293_3	@ bb1
	.align	4
.LBB293_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI293_0:
 	.long	momentary_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI293_1:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI293_2:
 	.long	momentary_obstack

	.size pop_momentary, .-pop_momentary


	.globl	clear_momentary
	.align	4
clear_momentary:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI294_0
	ldr r3, [r3, #+4]
	ldr r2, .LCPI294_1
	ldr r2, [r2]
	ldr r1, [r2, #+4]
	cmp r3, r1
	bhs .LBB294_4	@ bb2
.LBB294_1:	@ bb
	ldr r3, .LCPI294_0
	ldr r3, [r3, #+16]
	cmp r3, r1
	bls .LBB294_4	@ bb2
.LBB294_2:	@ bb1
	ldr r3, .LCPI294_0
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
.LBB294_3:	@ bb1
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB294_4:	@ bb2
	ldr r0, .LCPI294_0
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB294_3	@ bb1
	.align	4
.LBB294_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI294_0:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI294_1:
 	.long	momentary_stack

	.size clear_momentary, .-clear_momentary


	.globl	obfree
	.align	4
obfree:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI295_0
	ldr r3, [r3]
	ldr r2, [r3, #+4]
	mov r1, r0
	cmp r2, r0
	bhs .LBB295_4	@ bb2
.LBB295_1:	@ bb
	ldr r2, [r3, #+16]
	cmp r2, r1
	bls .LBB295_4	@ bb2
.LBB295_2:	@ bb1
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
.LBB295_3:	@ bb1
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB295_4:	@ bb2
	mov r0, r3
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB295_3	@ bb1
	.align	4
.LBB295_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI295_0:
 	.long	current_obstack

	.size obfree, .-obfree


	.globl	pop_obstacks
	.align	4
pop_obstacks:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI296_0
	ldr r1, [r3]
	ldr r2, [r1]
	@comment
str r2, [r3]
	ldr r3, [r1, #+4]
	ldr r2, .LCPI296_1
	@comment
str r3, [r2]
	ldr r3, [r1, #+8]
	ldr r2, .LCPI296_2
	@comment
str r3, [r2]
	ldr r3, [r1, #+12]
	ldr r2, .LCPI296_3
	@comment
str r3, [r2]
	ldr r3, [r1, #+16]
	ldr r2, .LCPI296_4
	@comment
str r3, [r2]
	ldr r3, .LCPI296_5
	ldr r3, [r3, #+4]
	cmp r3, r1
	bhs .LBB296_4	@ bb2
.LBB296_1:	@ bb
	ldr r3, .LCPI296_5
	ldr r3, [r3, #+16]
	cmp r3, r1
	bls .LBB296_4	@ bb2
.LBB296_2:	@ bb1
	ldr r3, .LCPI296_5
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
.LBB296_3:	@ bb1
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB296_4:	@ bb2
	ldr r0, .LCPI296_5
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB296_3	@ bb1
	.align	4
.LBB296_5:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI296_0:
 	.long	obstack_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI296_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI296_2:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI296_3:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI296_4:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI296_5:
 	.long	obstack_stack_obstack

	.size pop_obstacks, .-pop_obstacks


	.globl	is_attribute_p
	.align	4
is_attribute_p:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r3, [r1, #+8]
	mov r4, r1
	mov r5, r0
	cmp r3, #1
	bne .LBB297_13	@ bb18
.LBB297_1:	@ bb1
	ldr r1, [r4, #+16]
	mov r0, r5
	emit_nops_till_bundle_end
	bl strcmp
	cmp r0, #0
	beq .LBB297_15	@ bb1.bb19_crit_edge
.LBB297_2:	@ bb3
	ldr r4, [r4, #+16]
	mov r0, r4
	emit_nops_till_bundle_end
	bl strlen
	mov r6, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	ldrb r3, [r5]
	mov r2, r0
	cmp r3, #95
	bne .LBB297_8	@ bb11
.LBB297_3:	@ bb4
	ldrb r3, [r5, #+1]
	cmp r3, #95
	bne .LBB297_16	@ bb7
.LBB297_4:	@ bb5
	add r3, r2, r5
	ldrb r3, [r3, #-2]
	cmp r3, #95
	addeq r3, r2, r5
	ldreqb r3, [r3, #-1]
	cmpeq r3, #95
	beq .LBB297_6	@ bb8
	b .LBB297_16	@ bb7
.LBB297_5:	@ bb6
.LBB297_6:	@ bb8
	sub r2, r2, #4
	cmp r2, r6
	bne .LBB297_13	@ bb18
.LBB297_7:	@ bb9
	add r0, r5, #2
	mov r1, r4
	emit_nops_till_bundle_end
	bl strncmp
	mov r4, #1
	cmp r0, #0
	mov r0, #0
	moveq r0, r4
	b .LBB297_14	@ bb19
.LBB297_8:	@ bb11
	add r3, r2, #4
	cmp r3, r6
	ldreqb r3, [r4]
	cmpeq r3, #95
	beq .LBB297_10	@ bb13
	b .LBB297_13	@ bb18
.LBB297_9:	@ bb12
.LBB297_10:	@ bb13
	ldrb r3, [r4, #+1]
	cmp r3, #95
	addeq r3, r6, r4
	ldreqb r3, [r3, #-2]
	cmpeq r3, #95
	beq .LBB297_12	@ bb15
	b .LBB297_13	@ bb18
.LBB297_11:	@ bb14
.LBB297_12:	@ bb15
	add r3, r6, r4
	ldrb r3, [r3, #-1]
	cmp r3, #95
	beq .LBB297_17	@ bb16
.LBB297_13:	@ bb18
	mov r0, #0
.LBB297_14:	@ bb19
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB297_15:	@ bb1.bb19_crit_edge
	mov r0, #1
	b .LBB297_14	@ bb19
.LBB297_16:	@ bb7
	emit_nops_till_bundle_end
	bl abort
.LBB297_17:	@ bb16
	add r1, r4, #2
	mov r0, r5
	emit_nops_till_bundle_end
	bl strncmp
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	moveq r0, r3
	b .LBB297_14	@ bb19
	.size is_attribute_p, .-is_attribute_p


	.globl	lookup_attribute
	.align	4
lookup_attribute:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	mov r5, r1
	b .LBB298_4	@ bb5
.LBB298_1:	@ bb
	ldr r1, [r5, #+12]
	ldrb r3, [r1, #+8]
	cmp r3, #1
	bne .LBB298_7	@ bb1
.LBB298_2:	@ bb2
	mov r0, r4
	emit_nops_till_bundle_end
	bl is_attribute_p
	cmp r0, #0
	bne .LBB298_6	@ bb7
.LBB298_3:	@ bb4
	ldr r5, [r5]
.LBB298_4:	@ bb5
	cmp r5, #0
	bne .LBB298_1	@ bb
.LBB298_5:	@ bb5.bb7_crit_edge
	mov r5, #0
.LBB298_6:	@ bb7
	mov r0, r5
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB298_7:	@ bb1
	emit_nops_till_bundle_end
	bl abort
	.size lookup_attribute, .-lookup_attribute


	.globl	attribute_list_contained
	.align	4
attribute_list_contained:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r0
	cmp r0, r1
	beq .LBB299_19	@ entry.bb20_crit_edge
.LBB299_1:	@ entry.bb3_crit_edge
	mov r3, r4
	b .LBB299_3	@ bb3
.LBB299_2:	@ bb2
	ldr r1, [r1]
	ldr r3, [r3]
.LBB299_3:	@ bb3
	cmp r3, #0
	cmpne r1, #0
	bne .LBB299_5	@ bb9
	b .LBB299_7	@ bb11
.LBB299_4:	@ bb3
.LBB299_5:	@ bb9
	ldr r2, [r1, #+12]
	ldr r0, [r3, #+12]
	cmp r0, r2
	ldreq r2, [r1, #+16]
	ldreq r0, [r3, #+16]
	cmpeq r0, r2
	beq .LBB299_2	@ bb2
.LBB299_6:	@ bb10
.LBB299_7:	@ bb11
	orr r3, r3, r1
	cmp r3, #0
	beq .LBB299_19	@ entry.bb20_crit_edge
.LBB299_8:	@ bb11.bb18_crit_edge
	mov r5, r1
	b .LBB299_18	@ bb18
.LBB299_9:	@ bb13
	ldr r3, [r5, #+12]
	ldr r6, [r3, #+16]
	mov r7, r4
	b .LBB299_13	@ bb5.i
.LBB299_10:	@ bb.i
	ldr r1, [r7, #+12]
	ldrb r3, [r1, #+8]
	cmp r3, #1
	bne .LBB299_21	@ bb1.i
.LBB299_11:	@ bb2.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl is_attribute_p
	cmp r0, #0
	bne .LBB299_15	@ lookup_attribute.exit
.LBB299_12:	@ bb4.i
	ldr r7, [r7]
.LBB299_13:	@ bb5.i
	cmp r7, #0
	bne .LBB299_10	@ bb.i
.LBB299_14:	@ lookup_attribute.exit.thread
	mov r0, #0
	b .LBB299_20	@ bb20
.LBB299_15:	@ lookup_attribute.exit
	cmp r7, #0
	beq .LBB299_14	@ lookup_attribute.exit.thread
.LBB299_16:	@ bb15
	ldr r0, [r5, #+16]
	ldr r1, [r7, #+16]
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	bne .LBB299_14	@ lookup_attribute.exit.thread
.LBB299_17:	@ bb17
	ldr r5, [r5]
.LBB299_18:	@ bb18
	cmp r5, #0
	bne .LBB299_9	@ bb13
.LBB299_19:	@ entry.bb20_crit_edge
	mov r0, #1
.LBB299_20:	@ bb20
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB299_21:	@ bb1.i
	emit_nops_till_bundle_end
	bl abort
	.size attribute_list_contained, .-attribute_list_contained


	.globl	attribute_list_equal
	.align	4
attribute_list_equal:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	bne .LBB300_3	@ bb
.LBB300_1:	@ bb2
	mov r0, #0
.LBB300_2:	@ bb2
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB300_3:	@ bb
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl attribute_list_contained
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB300_2	@ bb2
	.size attribute_list_equal, .-attribute_list_equal


	.globl	type_hash_lookup
	.align	4
type_hash_lookup:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	ldr r3, .LCPI301_0
	smull r2, r3, r0, r3
	mov r2, r3, asr #3
	add r3, r2, r3, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r0, r3
	ldr r2, .LCPI301_1
	add r4, r2, r3, lsl #2
	mov r5, r1
	mov r6, r0
.LBB301_1:	@ bb16
	ldr r4, [r4]
	cmp r4, #0
	beq .LBB301_35	@ bb18
.LBB301_2:	@ bb
	ldr r3, [r4, #+4]
	cmp r3, r6
	bne .LBB301_1	@ bb16
.LBB301_3:	@ bb1
	ldr r3, [r4, #+8]
	ldrb r2, [r3, #+8]
	ldrb r1, [r5, #+8]
	cmp r2, r1
	ldreq r2, [r5, #+4]
	ldreq r1, [r3, #+4]
	cmpeq r1, r2
	beq .LBB301_5	@ bb3
	b .LBB301_1	@ bb16
.LBB301_4:	@ bb2
.LBB301_5:	@ bb3
	ldr r7, [r3, #+20]
	ldr r8, [r5, #+20]
	mov r0, r7
	mov r1, r8
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	beq .LBB301_1	@ bb16
.LBB301_6:	@ attribute_list_equal.exit
	mov r0, r8
	mov r1, r7
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	beq .LBB301_1	@ bb16
.LBB301_7:	@ bb4
	ldr r3, [r4, #+8]
	ldr r2, [r3, #+56]
	ldr r1, [r5, #+56]
	cmp r2, r1
	beq .LBB301_14	@ bb6
.LBB301_8:	@ bb1.i27
	cmp r2, #0
	cmpne r1, #0
	bne .LBB301_10	@ bb5.i28
	b .LBB301_1	@ bb16
.LBB301_9:	@ bb1.i27
.LBB301_10:	@ bb5.i28
	ldrb r0, [r2, #+8]
	cmp r0, #25
	ldreqb r0, [r1, #+8]
	cmpeq r0, #25
	beq .LBB301_12	@ bb7.i30
	b .LBB301_1	@ bb16
.LBB301_11:	@ bb6.i29
.LBB301_12:	@ bb7.i30
	ldr r0, [r1, #+12]
	ldr r12, [r2, #+12]
	cmp r12, r0
	ldreq r1, [r1, #+16]
	ldreq r2, [r2, #+16]
	cmpeq r2, r1
	beq .LBB301_14	@ bb6
	b .LBB301_1	@ bb16
.LBB301_13:	@ bb8.i32
.LBB301_14:	@ bb6
	ldr r2, [r5, #+52]
	ldr r1, [r3, #+52]
	cmp r1, r2
	beq .LBB301_21	@ bb8
.LBB301_15:	@ bb1.i22
	cmp r1, #0
	cmpne r2, #0
	bne .LBB301_17	@ bb5.i23
	b .LBB301_1	@ bb16
.LBB301_16:	@ bb1.i22
.LBB301_17:	@ bb5.i23
	ldrb r0, [r1, #+8]
	cmp r0, #25
	ldreqb r0, [r2, #+8]
	cmpeq r0, #25
	beq .LBB301_19	@ bb7.i
	b .LBB301_1	@ bb16
.LBB301_18:	@ bb6.i24
.LBB301_19:	@ bb7.i
	ldr r0, [r2, #+12]
	ldr r12, [r1, #+12]
	cmp r12, r0
	ldreq r2, [r2, #+16]
	ldreq r1, [r1, #+16]
	cmpeq r1, r2
	beq .LBB301_21	@ bb8
	b .LBB301_1	@ bb16
.LBB301_20:	@ bb8.i
.LBB301_21:	@ bb8
	ldr r7, [r5, #+12]
	ldr r8, [r3, #+12]
	cmp r8, r7
	beq .LBB301_34	@ bb14
.LBB301_22:	@ bb9
	cmp r8, #0
	beq .LBB301_1	@ bb16
.LBB301_23:	@ bb10
	ldrb r3, [r8, #+8]
	cmp r3, #3
	bne .LBB301_1	@ bb16
.LBB301_24:	@ bb10
	cmp r7, #0
	beq .LBB301_1	@ bb16
.LBB301_25:	@ bb12
	ldrb r3, [r7, #+8]
	cmp r3, #3
	bne .LBB301_1	@ bb16
	b .LBB301_31	@ bb6.i
.LBB301_26:	@ bb.i20
	ldr r3, [r7, #+16]
	ldr r2, [r8, #+16]
	cmp r2, r3
	bne .LBB301_1	@ bb16
.LBB301_27:	@ bb1.i
	ldr r1, [r7, #+12]
	ldr r0, [r8, #+12]
	cmp r0, r1
	beq .LBB301_30	@ bb5.i
.LBB301_28:	@ bb2.i21
	emit_nops_till_bundle_end
	bl simple_cst_equal
	cmp r0, #1
	ldreq r3, [r7, #+12]
	ldreq r3, [r3, #+4]
	ldreq r2, [r8, #+12]
	ldreq r2, [r2, #+4]
	cmpeq r2, r3
	beq .LBB301_30	@ bb5.i
	b .LBB301_1	@ bb16
.LBB301_29:	@ bb3.i
.LBB301_30:	@ bb5.i
	ldr r7, [r7]
	ldr r8, [r8]
.LBB301_31:	@ bb6.i
	cmp r8, #0
	cmpne r7, #0
	bne .LBB301_26	@ bb.i20
.LBB301_32:	@ bb6.i
.LBB301_33:	@ type_list_equal.exit
	cmp r8, r7
	bne .LBB301_1	@ bb16
.LBB301_34:	@ bb14
	ldr r0, [r4, #+8]
	b .LBB301_36	@ bb18
.LBB301_35:	@ bb18
	mov r0, #0
.LBB301_36:	@ bb18
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
	.align	4
.LBB301_37:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI301_0:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI301_1:
 	.long	type_hash_table

	.size type_hash_lookup, .-type_hash_lookup


	.globl	build1
	.align	4
build1:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI302_0
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r12, [r4, #+16]
	sub r3, r12, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r3, #19
	movle r1, #20
	movle r0, r4
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB302_1:	@ bb
.LBB302_2:	@ bb1
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB302_18	@ bb1.bb20.thread_crit_edge
.LBB302_3:	@ bb5
	ldr r2, [r4, #+12]
	add r2, r2, #20
	@comment
str r2, [r4, #+12]
	ldr r0, [r4, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB302_4:	@ bb13
.LBB302_5:	@ bb14
	ldr r3, [r4, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r4, #+12]
	ldr r2, [r4, #+4]
	ldr r1, [r4, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r4, #+12]
	movgt r3, r1
.LBB302_6:	@ bb16
.LBB302_7:	@ bb17
	@comment
str r3, [r4, #+8]
.LBB302_8:	@ bb20.thread
	add r3, r0, #19
	mov r2, #0
	mov r1, #0
.LBB302_9:	@ bb20
	strb r1, [r3], #-1
	add r2, r2, #1
	cmp r2, #20
	bne .LBB302_9	@ bb20
.LBB302_10:	@ bb21
	@comment
str r6, [r0, #+4]
	strb r7, [r0, #+8]
	ldr r3, .LCPI302_1
	cmp r4, r3
	bne .LBB302_12	@ bb23
.LBB302_11:	@ bb22
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 22 @ 1024
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB302_12:	@ bb23
	@comment
str r5, [r0, #+16]
	cmp r5, #0
	beq .LBB302_17	@ bb36
.LBB302_13:	@ bb24
	ldrb r3, [r5, #+9]
	tst r3, #1
	beq .LBB302_15	@ bb30
.LBB302_14:	@ bb29
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 24 @ 256
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB302_15:	@ bb30
	ldrb r3, [r5, #+10]
	tst r3, #2
	beq .LBB302_17	@ bb36
.LBB302_16:	@ bb35
	ldrb r3, [r0, #+10]
	ldrb r2, [r0, #+11]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+1]
	strb r12, [r1]
	orr r3, r3, r2, lsl #8
	orr r2, r12, lr, lsl #8
	orr r3, r2, r3, lsl #16
	orr r3, r3, #2, 16 @ 131072
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
.LBB302_17:	@ bb36
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB302_18:	@ bb1.bb20.thread_crit_edge
	mov r0, #0
	b .LBB302_8	@ bb20.thread
	.align	4
.LBB302_19:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI302_0:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI302_1:
 	.long	permanent_obstack

	.size build1, .-build1


	.globl	tree_cons
	.align	4
tree_cons:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI303_0
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r12, [r4, #+16]
	sub r3, r12, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r3, #19
	movle r1, #20
	movle r0, r4
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB303_1:	@ bb
.LBB303_2:	@ bb2
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB303_11	@ bb2.bb21.thread_crit_edge
.LBB303_3:	@ bb6
	ldr r2, [r4, #+12]
	add r2, r2, #20
	@comment
str r2, [r4, #+12]
	ldr r0, [r4, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB303_4:	@ bb14
.LBB303_5:	@ bb15
	ldr r3, [r4, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r4, #+12]
	ldr r2, [r4, #+4]
	ldr r1, [r4, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r4, #+12]
	movgt r3, r1
.LBB303_6:	@ bb17
.LBB303_7:	@ bb18
	@comment
str r3, [r4, #+8]
.LBB303_8:	@ bb21.thread
	mov r3, #0
	@comment
str r3, [r0, #+8]
	@comment
str r3, [r0, #+4]
	@comment
str r3, [r0]
	mov r3, #3
	strb r3, [r0, #+8]
	ldr r3, .LCPI303_0
	ldr r3, [r3]
	ldr r2, .LCPI303_1
	cmp r3, r2
	bne .LBB303_10	@ bb24
.LBB303_9:	@ bb23
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 22 @ 1024
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB303_10:	@ bb24
	@comment
str r5, [r0]
	@comment
str r7, [r0, #+12]
	@comment
str r6, [r0, #+16]
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB303_11:	@ bb2.bb21.thread_crit_edge
	mov r0, #0
	b .LBB303_8	@ bb21.thread
	.align	4
.LBB303_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI303_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI303_1:
 	.long	permanent_obstack

	.size tree_cons, .-tree_cons


	.globl	get_set_constructor_bits
	.align	4
get_set_constructor_bits:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	ldr r3, [r0, #+4]
	ldr r3, [r3, #+12]
	ldr r3, [r3, #+52]
	ldr r4, [r3, #+12]
	mov r5, r2
	mov r6, r1
	cmp r2, #1
	blt .LBB304_3	@ bb2
.LBB304_1:	@ entry.bb_crit_edge
	mov r3, #0
	mov r2, #0
.LBB304_2:	@ bb
	strb r2, [r6, +r3]
	add r3, r3, #1
	cmp r3, r5
	bne .LBB304_2	@ bb
.LBB304_3:	@ bb2
	add r7, r0, #20
	mov r0, #0
	mov r8, #1
.LBB304_4:	@ bb25
	mov r2, r0
	ldr r7, [r7]
	cmp r7, #0
	beq .LBB304_22	@ bb27
.LBB304_5:	@ bb3
	ldr r1, [r7, #+16]
	ldrb r3, [r1, #+8]
	cmp r3, #25
	bne .LBB304_24	@ bb6
.LBB304_6:	@ bb4
	ldr r3, [r7, #+12]
	cmp r3, #0
	beq .LBB304_18	@ bb18
.LBB304_7:	@ bb5
	ldrb r0, [r3, #+8]
	cmp r0, #25
	bne .LBB304_24	@ bb6
.LBB304_8:	@ bb7
	cmp r3, #0
	beq .LBB304_18	@ bb18
.LBB304_9:	@ bb8
	ldr r3, [r3, #+12]
	sub r0, r3, r4
	ldr r1, [r1, #+12]
	sub r1, r1, r4
	cmp r0, #0
	blt .LBB304_15	@ bb15
.LBB304_10:	@ bb8
	cmp r0, r5
	bge .LBB304_15	@ bb15
.LBB304_11:	@ bb11
	cmp r1, #0
	blt .LBB304_15	@ bb15
.LBB304_12:	@ bb11
	cmp r1, r5
	bge .LBB304_15	@ bb15
.LBB304_13:	@ bb17.preheader
	cmp r0, r1
	ble .LBB304_16	@ bb16.preheader
.LBB304_14:	@ bb17.preheader.bb24_crit_edge
	mov r0, r2
	b .LBB304_4	@ bb25
.LBB304_15:	@ bb15
	emit_nops_till_bundle_end
	bl abort
.LBB304_16:	@ bb16.preheader
	sub r3, r3, r4
.LBB304_17:	@ bb16
	strb r8, [r6, +r3]
	add r3, r3, #1
	cmp r3, r1
	ble .LBB304_17	@ bb16
	b .LBB304_14	@ bb17.preheader.bb24_crit_edge
.LBB304_18:	@ bb18
	ldr r3, [r1, #+12]
	sub r3, r3, r4
	cmp r3, #0
	blt .LBB304_20	@ bb22
.LBB304_19:	@ bb18
	cmp r3, r5
	blt .LBB304_21	@ bb23
.LBB304_20:	@ bb22
	ldr r0, .LCPI304_0
	emit_nops_till_bundle_end
	bl error
	mov r0, #0
	b .LBB304_23	@ bb27
.LBB304_21:	@ bb23
	strb r8, [r6, +r3]
	b .LBB304_14	@ bb17.preheader.bb24_crit_edge
.LBB304_22:	@ bb27
	mov r0, r2
.LBB304_23:	@ bb27
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB304_24:	@ bb6
	ldr r0, [r7, #+12]
	emit_nops_till_bundle_end
	bl tree_cons
	b .LBB304_4	@ bb25
	.align	4
.LBB304_25:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI304_0:
 	.long	.str31623

	.size get_set_constructor_bits, .-get_set_constructor_bits


	.globl	get_set_constructor_bytes
	.align	4
get_set_constructor_bytes:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r11, lr}
	add r11, sp, #16
	mov r4, r2
	mov r5, r1
	sub r6, sp, r4, lsl #3
	mov sp, r6
	mov r7, r4, lsl #3
	mov r1, r6
	mov r2, r7
	emit_nops_till_bundle_end
	bl get_set_constructor_bits
	cmp r4, #1
	blt .LBB305_3	@ bb8.loopexit
.LBB305_1:	@ entry.bb_crit_edge
	mov r3, #0
	mov r2, #0
.LBB305_2:	@ bb
	strb r2, [r5, +r3]
	add r3, r3, #1
	cmp r3, r4
	bne .LBB305_2	@ bb
.LBB305_3:	@ bb8.loopexit
	cmp r7, #1
	blt .LBB305_10	@ bb9
.LBB305_4:	@ bb8.loopexit.bb3_crit_edge
	mov r2, #0
	mov r1, #1
	mov r3, r2
.LBB305_5:	@ bb3
	ldrb r12, [r6, +r2]
	cmp r12, #0
	rsbne r12, r3, #7
	ldrneb lr, [r5]
	orrne r12, lr, r1, lsl r12
	strneb r12, [r5]
.LBB305_6:	@ bb4
.LBB305_7:	@ bb5
	add r3, r3, #1
	cmp r3, #7
	addgt r5, r5, #1
	movgt r3, #0
.LBB305_8:	@ bb6
.LBB305_9:	@ bb7
	add r2, r2, #1
	cmp r2, r7
	bne .LBB305_5	@ bb3
.LBB305_10:	@ bb9
	sub sp, r11, #16
	ldmfd sp, {r4, r5, r6, r7, r11, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
	.size get_set_constructor_bytes, .-get_set_constructor_bytes


	.globl	saveable_tree_cons
	.align	4
saveable_tree_cons:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI306_0
	ldr r3, [r3]
	ldr r4, .LCPI306_1
	ldr r5, [r4]
	@comment
str r3, [r4]
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r5, [r4]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB306_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI306_0:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI306_1:
 	.long	current_obstack

	.size saveable_tree_cons, .-saveable_tree_cons


	.globl	temp_tree_cons
	.align	4
temp_tree_cons:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, .LCPI307_0
	ldr r5, [r4]
	ldr r3, .LCPI307_1
	@comment
str r3, [r4]
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r5, [r4]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB307_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI307_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI307_1:
 	.long	temporary_obstack

	.size temp_tree_cons, .-temp_tree_cons


	.globl	perm_tree_cons
	.align	4
perm_tree_cons:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, .LCPI308_0
	ldr r5, [r4]
	ldr r3, .LCPI308_1
	@comment
str r3, [r4]
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r5, [r4]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB308_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI308_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI308_1:
 	.long	permanent_obstack

	.size perm_tree_cons, .-perm_tree_cons


	.globl	decl_tree_cons
	.align	4
decl_tree_cons:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, .LCPI309_0
	ldr r5, [r4]
	ldr r3, .LCPI309_1
	@comment
str r3, [r4]
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r5, [r4]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB309_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI309_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI309_1:
 	.long	temp_decl_obstack

	.size decl_tree_cons, .-decl_tree_cons


	.globl	listify
	.align	4
listify:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	cmp r0, #0
	beq .LBB310_6	@ entry.bb5_crit_edge
.LBB310_1:	@ entry.bb_crit_edge
	mov r4, #0
	mov r5, #0
	mov r6, r0
	mov r7, r4
.LBB310_2:	@ bb
	mov r0, #0
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl tree_cons
	cmp r7, #0
	@comment
strne r0, [r7]
	moveq r4, r0
	b .LBB310_4	@ bb3
.LBB310_3:	@ bb1
.LBB310_4:	@ bb3
	ldr r6, [r6]
	cmp r6, #0
	mov r7, r0
	bne .LBB310_2	@ bb
.LBB310_5:	@ bb5
	mov r0, r4
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB310_6:	@ entry.bb5_crit_edge
	mov r4, #0
	b .LBB310_5	@ bb5
.LBB310_7:	@ bb.bb3_crit_edge
	.size listify, .-listify


	.globl	make_tree_vec
	.align	4
make_tree_vec:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r3, .LCPI311_0
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	mov r2, #16
	add r5, r2, r0, lsl #2
	mov r6, r0
	cmp r3, r5
	movlt r0, r4
	movlt r1, r5
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB311_1:	@ bb
.LBB311_2:	@ bb1
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB311_14	@ bb1.bb18_crit_edge
.LBB311_3:	@ bb5
	ldr r2, [r4, #+12]
	add r2, r2, r5
	@comment
str r2, [r4, #+12]
	ldr r0, [r4, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB311_4:	@ bb13
.LBB311_5:	@ bb14
	ldr r3, [r4, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r4, #+12]
	ldr r2, [r4, #+4]
	ldr r1, [r4, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r4, #+12]
	movgt r3, r1
.LBB311_6:	@ bb16
.LBB311_7:	@ bb17
	@comment
str r3, [r4, #+8]
.LBB311_8:	@ bb18
	mvn r3, #0
	add r3, r3, r5, lsr #2
	cmp r3, #0
	blt .LBB311_11	@ bb21
.LBB311_9:	@ bb.nph
	mov r3, #16
	add r3, r3, r6, lsl #2
	mvn r2, #0
	add r2, r2, r3, lsr #2
	add r3, r0, r3
	sub r3, r3, #4
	mov r1, #0
.LBB311_10:	@ bb19
	str r1, [r3], #-4
	sub r2, r2, #1
	cmp r2, #0
	bge .LBB311_10	@ bb19
.LBB311_11:	@ bb21
	mov r3, #4
	strb r3, [r0, #+8]
	@comment
str r6, [r0, #+12]
	ldr r3, .LCPI311_1
	cmp r4, r3
	bne .LBB311_13	@ bb23
.LBB311_12:	@ bb22
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 22 @ 1024
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB311_13:	@ bb23
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB311_14:	@ bb1.bb18_crit_edge
	mov r0, #0
	b .LBB311_8	@ bb18
	.align	4
.LBB311_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI311_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI311_1:
 	.long	permanent_obstack

	.size make_tree_vec, .-make_tree_vec


	.globl	copy_node
	.align	4
copy_node:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI312_0
	ldr r3, [r3]
	ldrb r4, [r0, #+8]
	ldr r3, [r3, +r4, lsl #2]
	ldrsb r3, [r3]
	mov r5, r0
	cmp r3, #59
	ble .LBB312_35	@ entry
.LBB312_1:	@ entry
	cmp r3, #97
	ble .LBB312_36	@ entry
.LBB312_2:	@ entry
	cmp r3, #113
	bgt .LBB312_6	@ entry
.LBB312_3:	@ entry
	sub r3, r3, #98
	cmp r3, #3
	bhi .LBB312_16	@ bb10
.LBB312_4:	@ entry
	.set PCRELV25, (.LJTI312_0_0-(.LPCRELL25+8))
.LPCRELL25:
	add r2, pc, #PCRELV25
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI312_0_0:
	.long	 .LBB312_11
	.long	 .LBB312_12
	.long	 .LBB312_5
	.long	 .LBB312_37

.text
@ JUMP TABLE END



	.align	2
.LBB312_5:	@ bb
	mov r6, #88
	b .LBB312_16	@ bb10
.LBB312_6:	@ entry
	sub r2, r3, #114
	cmp r2, #2
	blo .LBB312_37	@ bb3
.LBB312_7:	@ entry
	cmp r3, #116
	beq .LBB312_5	@ bb
.LBB312_8:	@ entry
	cmp r3, #120
	bne .LBB312_16	@ bb10
.LBB312_9:	@ bb8
	ldr r6, .LCPI312_1
	ldr r6, [r6]
	ldr r3, [r6, +r4, lsl #2]
	mov r6, #12
	add r6, r6, r3, lsl #2
	mov r3, r3, lsl #2
	and r2, r4, #255
	cmp r2, #4
	ldreq r6, [r5, #+12]
	addeq r6, r3, r6, lsl #2
	addeq r6, r6, #8
	b .LBB312_16	@ bb10
.LBB312_10:	@ bb9
	.align	2
.LBB312_11:	@ bb2
	mov r6, #40
	b .LBB312_16	@ bb10
	.align	2
.LBB312_12:	@ bb4
	and r6, r4, #255
	cmp r6, #26
	beq .LBB312_15	@ bb7
.LBB312_13:	@ bb4
	and r6, r4, #255
	cmp r6, #25
	bne .LBB312_9	@ bb8
.LBB312_14:	@ bb4.bb10_crit_edge
	mov r6, #20
	b .LBB312_16	@ bb10
.LBB312_15:	@ bb7
	mov r6, #24
.LBB312_16:	@ bb10
	ldr r3, .LCPI312_2
	ldr r7, [r3]
	ldr r3, [r7, #+12]
	ldr r2, [r7, #+16]
	sub r3, r2, r3
	cmp r3, r6
	movlt r0, r7
	movlt r1, r6
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB312_17:	@ bb11
.LBB312_18:	@ bb12
	ldrb r3, [r7, #+40]
	tst r3, #4
	bne .LBB312_38	@ bb12.bb29_crit_edge
.LBB312_19:	@ bb16
	ldr r2, [r7, #+12]
	add r2, r2, r6
	@comment
str r2, [r7, #+12]
	ldr r0, [r7, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r7, #+40]
.LBB312_20:	@ bb24
.LBB312_21:	@ bb25
	ldr r3, [r7, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r7, #+12]
	ldr r2, [r7, #+4]
	ldr r1, [r7, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r7, #+12]
	movgt r3, r1
.LBB312_22:	@ bb27
.LBB312_23:	@ bb28
	@comment
str r3, [r7, #+8]
.LBB312_24:	@ bb29
	mvn r3, #0
	add r3, r3, r6, lsr #2
	cmp r3, #0
	blt .LBB312_27	@ bb32
.LBB312_25:	@ bb.nph56
	mvn r3, #0
	add r3, r3, r6, lsr #2
	bic r2, r6, #3
.LBB312_26:	@ bb30
	add r1, r5, r2
	ldr r1, [r1, #-4]
	add r12, r0, r2
	@comment
str r1, [r12, #-4]
	sub r3, r3, #1
	sub r2, r2, #4
	cmp r3, #0
	bge .LBB312_26	@ bb30
.LBB312_27:	@ bb32
	bic r3, r6, #3
	cmp r3, r6
	bge .LBB312_30	@ bb35
.LBB312_28:	@ bb.nph
	add r2, r3, r0
	add r1, r3, r5
	sub r3, r6, r3
	mov r12, #0
.LBB312_29:	@ bb33
	ldrb lr, [r1, +r12]
	strb lr, [r2, +r12]
	add r12, r12, #1
	cmp r12, r3
	bne .LBB312_29	@ bb33
.LBB312_30:	@ bb35
	mov r3, #0
	@comment
str r3, [r0]
	ldr r3, .LCPI312_0
	ldr r3, [r3]
	ldr r3, [r3, +r4, lsl #2]
	ldrb r3, [r3]
	cmp r3, #116
	beq .LBB312_33	@ bb38
.LBB312_31:	@ bb35
	and r3, r3, #255
	cmp r3, #100
	ldreq r3, .LCPI312_3
	ldreq r2, [r3]
	@comment
streq r2, [r0, #+24]
	addeq r2, r2, #1
	@comment
streq r2, [r3]
	b .LBB312_34	@ bb39
.LBB312_32:	@ bb36
.LBB312_33:	@ bb38
	ldr r3, .LCPI312_4
	ldr r2, [r3]
	@comment
str r2, [r0, #+24]
	add r2, r2, #1
	@comment
str r2, [r3]
	ldr r3, .LCPI312_2
	ldr r3, [r3]
	@comment
str r3, [r0, #+80]
.LBB312_34:	@ bb39
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #1, 22 @ 1024
	ldr r1, .LCPI312_2
	ldr r1, [r1]
	strb r3, [r2]
	mov r12, r3, lsr #24
	strb r12, [r2, #+3]
	ldr r12, .LCPI312_5
	mov lr, #1
	mov r4, #0
	cmp r1, r12
	moveq r4, lr
	orr r1, r3, r4, lsl #10
	mov r1, r1, lsr #8
	strb r1, [r2, #+1]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB312_35:	@ entry
	sub r3, r3, #49
	cmp r3, #2
	bhs .LBB312_16	@ bb10
	b .LBB312_37	@ bb3
.LBB312_36:	@ entry
	cmp r3, #60
	bne .LBB312_16	@ bb10
	.align	2
.LBB312_37:	@ bb3
	ldr r6, .LCPI312_1
	ldr r6, [r6]
	ldr r6, [r6, +r4, lsl #2]
	mov r3, #16
	add r6, r3, r6, lsl #2
	b .LBB312_16	@ bb10
.LBB312_38:	@ bb12.bb29_crit_edge
	mov r0, #0
	b .LBB312_24	@ bb29
	.align	4
.LBB312_39:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI312_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI312_1:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI312_2:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI312_3:
 	.long	next_decl_uid

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI312_4:
 	.long	next_type_uid

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI312_5:
 	.long	permanent_obstack

	.size copy_node, .-copy_node


	.globl	build_type_copy
	.align	4
build_type_copy:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r4, [r0, #+64]
	ldr r5, .LCPI313_0
	ldr r6, [r5]
	ldr r3, [r0, #+80]
	@comment
str r3, [r5]
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r6, [r5]
	mov r3, #0
	@comment
str r3, [r0, #+36]
	@comment
str r3, [r0, #+40]
	ldr r3, [r4, #+60]
	@comment
str r3, [r0, #+60]
	@comment
str r0, [r4, #+60]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB313_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI313_0:
 	.long	current_obstack

	.size build_type_copy, .-build_type_copy


	.globl	build_type_variant
	.align	4
build_type_variant:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r3, #1
	mov r4, #0
	cmp r2, #0
	mov r5, #0
	movne r5, r3
	cmp r1, #0
	movne r4, r3
	add r3, r0, #64
	mov r2, #1
	b .LBB314_5	@ bb16
.LBB314_1:	@ bb
	ldrb r1, [r3, #+9]
	mov r12, r3
	ldrb lr, [r12, #+8]!
	orr r1, lr, r1, lsl #8
	ldrb lr, [r12, #+3]
	ldrb r12, [r12, #+2]
	orr r12, r12, lr, lsl #8
	orr r1, r1, r12, lsl #16
	and r12, r2, r1, lsr #13
	cmp r12, r4
	andeq r1, r2, r1, lsr #12
	cmpeq r1, r5
	beq .LBB314_3	@ bb13
	b .LBB314_4	@ bb15
.LBB314_2:	@ bb6
.LBB314_3:	@ bb13
	ldr r1, [r0, #+48]
	ldr r12, [r3, #+48]
	cmp r12, r1
	beq .LBB314_7	@ bb30
.LBB314_4:	@ bb15
	add r3, r3, #60
.LBB314_5:	@ bb16
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB314_1	@ bb
.LBB314_6:	@ bb17
	ldr r6, [r0, #+64]
	ldr r7, .LCPI314_0
	ldr r8, [r7]
	ldr r3, [r0, #+80]
	@comment
str r3, [r7]
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r8, [r7]
	mov r3, #0
	@comment
str r3, [r0, #+36]
	@comment
str r3, [r0, #+40]
	ldr r3, [r6, #+60]
	@comment
str r3, [r0, #+60]
	@comment
str r0, [r6, #+60]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+1]
	orr r2, r2, r1, lsl #8
	mov r1, r3
	ldrb r12, [r1, #+2]!
	ldrb lr, [r1, #+1]
	orr r12, r12, lr, lsl #8
	orr r2, r2, r12, lsl #16
	bic r2, r2, #3, 20 @ 12288
	strb r2, [r3]
	orr r2, r2, r4, lsl #13
	orr r2, r2, r5, lsl #12
	mov r12, r2, lsr #24
	strb r12, [r1, #+1]
	mov r12, r2, lsr #16
	strb r12, [r1]
	mov r2, r2, lsr #8
	strb r2, [r3, #+1]
	b .LBB314_8	@ bb30
.LBB314_7:	@ bb30
	mov r0, r3
.LBB314_8:	@ bb30
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
	.align	4
.LBB314_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI314_0:
 	.long	current_obstack

	.size build_type_variant, .-build_type_variant


	.globl	copy_list
	.align	4
copy_list:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r0
	cmp r0, #0
	beq .LBB315_5	@ entry.bb5_crit_edge
.LBB315_1:	@ bb1
	mov r0, r4
	emit_nops_till_bundle_end
	bl copy_node
	ldr r5, [r4]
	mov r4, r0
	cmp r5, #0
	beq .LBB315_4	@ bb5
.LBB315_2:	@ bb1.bb2_crit_edge
	mov r6, r4
.LBB315_3:	@ bb2
	mov r0, r5
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r0, [r6]
	ldr r5, [r5]
	cmp r5, #0
	mov r6, r0
	bne .LBB315_3	@ bb2
.LBB315_4:	@ bb5
	mov r0, r4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB315_5:	@ entry.bb5_crit_edge
	mov r4, #0
	b .LBB315_4	@ bb5
	.size copy_list, .-copy_list


	.globl	push_momentary
	.align	4
push_momentary:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI316_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	cmp r3, #11
	ldrle r0, .LCPI316_0
	movle r1, #12
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB316_1:	@ bb
.LBB316_2:	@ bb1
	ldr r3, .LCPI316_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB316_9	@ bb1.bb18_crit_edge
.LBB316_3:	@ bb5
	ldr r2, .LCPI316_0
	ldr r1, [r2, #+12]
	add r1, r1, #12
	@comment
str r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI316_0
	streqb r3, [r0, #+40]
.LBB316_4:	@ bb13
.LBB316_5:	@ bb14
	ldr r3, .LCPI316_0
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI316_0
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB316_6:	@ bb16
.LBB316_7:	@ bb17
	ldr r3, .LCPI316_0
	@comment
str r1, [r3, #+8]
.LBB316_8:	@ bb18
	ldr r3, .LCPI316_1
	ldr r1, [r3]
	@comment
str r1, [r2]
	ldr r1, .LCPI316_0
	ldrb r0, [r1, #+40]
	ldr r12, [r1, #+8]
	mov lr, #0
	tst r0, #4
	moveq lr, r12
	@comment
str lr, [r2, #+4]
	ldr r0, .LCPI316_2
	ldr r12, [r0]
	@comment
str r12, [r2, #+8]
	@comment
str r2, [r3]
	@comment
str r1, [r0]
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB316_9:	@ bb1.bb18_crit_edge
	mov r2, #0
	b .LBB316_8	@ bb18
	.align	4
.LBB316_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI316_0:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI316_1:
 	.long	momentary_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI316_2:
 	.long	expression_obstack

	.size push_momentary, .-push_momentary


	.globl	savealloc
	.align	4
savealloc:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI317_0
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	mov r5, r0
	cmp r3, r0
	movlt r0, r4
	movlt r1, r5
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB317_1:	@ bb
.LBB317_2:	@ bb1
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB317_8	@ bb18
.LBB317_3:	@ bb5
	ldr r2, [r4, #+12]
	add r2, r2, r5
	@comment
str r2, [r4, #+12]
	ldr r0, [r4, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB317_4:	@ bb13
.LBB317_5:	@ bb14
	ldr r3, [r4, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r4, #+12]
	ldr r2, [r4, #+4]
	ldr r1, [r4, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r4, #+12]
	movgt r3, r1
.LBB317_6:	@ bb16
.LBB317_7:	@ bb17
	@comment
str r3, [r4, #+8]
	b .LBB317_9	@ bb18
.LBB317_8:	@ bb18
	mov r0, #0
.LBB317_9:	@ bb18
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB317_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI317_0:
 	.long	saveable_obstack

	.size savealloc, .-savealloc


	.globl	permalloc
	.align	4
permalloc:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI318_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	mov r4, r0
	cmp r3, r0
	ldrlt r0, .LCPI318_0
	movlt r1, r4
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB318_1:	@ bb
.LBB318_2:	@ bb1
	ldr r3, .LCPI318_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB318_8	@ bb18
.LBB318_3:	@ bb5
	ldr r2, .LCPI318_0
	ldr r1, [r2, #+12]
	add r1, r1, r4
	@comment
str r1, [r2, #+12]
	ldr r0, [r2, #+8]
	cmp r1, r0
	orreq r3, r3, #2
	ldreq r2, .LCPI318_0
	streqb r3, [r2, #+40]
.LBB318_4:	@ bb13
.LBB318_5:	@ bb14
	ldr r3, .LCPI318_0
	ldr r2, [r3, #+24]
	add r1, r1, r2
	bic r2, r1, r2
	@comment
str r2, [r3, #+12]
	ldr r1, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r1
	sub r1, r2, r1
	cmp r1, r12
	ldrgt r2, .LCPI318_0
	@comment
strgt r3, [r2, #+12]
	movgt r2, r3
.LBB318_6:	@ bb16
.LBB318_7:	@ bb17
	ldr r3, .LCPI318_0
	@comment
str r2, [r3, #+8]
	b .LBB318_9	@ bb18
.LBB318_8:	@ bb18
	mov r0, #0
.LBB318_9:	@ bb18
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB318_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI318_0:
 	.long	permanent_obstack

	.size permalloc, .-permalloc


	.globl	oballoc
	.align	4
oballoc:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI319_0
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	mov r5, r0
	cmp r3, r0
	movlt r0, r4
	movlt r1, r5
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB319_1:	@ bb
.LBB319_2:	@ bb1
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB319_8	@ bb18
.LBB319_3:	@ bb5
	ldr r2, [r4, #+12]
	add r2, r2, r5
	@comment
str r2, [r4, #+12]
	ldr r0, [r4, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB319_4:	@ bb13
.LBB319_5:	@ bb14
	ldr r3, [r4, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r4, #+12]
	ldr r2, [r4, #+4]
	ldr r1, [r4, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r4, #+12]
	movgt r3, r1
.LBB319_6:	@ bb16
.LBB319_7:	@ bb17
	@comment
str r3, [r4, #+8]
	b .LBB319_9	@ bb18
.LBB319_8:	@ bb18
	mov r0, #0
.LBB319_9:	@ bb18
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB319_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI319_0:
 	.long	current_obstack

	.size oballoc, .-oballoc


	.globl	type_hash_add
	.align	4
type_hash_add:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	@comment
str r5, [r0, #+4]
	@comment
str r4, [r0, #+8]
	ldr r3, .LCPI320_0
	smull r3, r2, r5, r3
	mov r3, r2, asr #3
	add r3, r3, r2, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r5, r3
	ldr r2, .LCPI320_1
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB320_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI320_0:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI320_1:
 	.long	type_hash_table

	.size type_hash_add, .-type_hash_add


	.globl	type_hash_canon
	.align	4
type_hash_canon:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r3, .LCPI321_0
	ldr r3, [r3]
	mov r4, r1
	mov r5, r0
	cmp r3, #0
	bne .LBB321_10	@ bb13
.LBB321_1:	@ bb1
	mov r0, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r6, r0
	cmp r0, #0
	beq .LBB321_8	@ bb7
.LBB321_2:	@ bb2
	ldr r0, [r4, #+80]
	ldr r5, [r0, #+4]
	cmp r5, r4
	bhs .LBB321_7	@ bb5
.LBB321_3:	@ bb3
	ldr r5, [r0, #+16]
	cmp r5, r4
	bls .LBB321_7	@ bb5
.LBB321_4:	@ bb4
	@comment
str r4, [r0, #+8]
	@comment
str r4, [r0, #+12]
.LBB321_5:	@ bb4
	mov r0, r6
.LBB321_6:	@ bb4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB321_7:	@ bb5
	mov r1, r4
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB321_5	@ bb4
.LBB321_8:	@ bb7
	ldrb r3, [r4, #+9]
	tst r3, #4
	beq .LBB321_10	@ bb13
.LBB321_9:	@ bb11
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	@comment
str r5, [r0, #+4]
	@comment
str r4, [r0, #+8]
	ldr r3, .LCPI321_1
	smull r2, r3, r5, r3
	mov r2, r3, asr #3
	add r3, r2, r3, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r5, r3
	ldr r2, .LCPI321_2
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB321_10:	@ bb13
	mov r0, r4
	b .LBB321_6	@ bb4
	.align	4
.LBB321_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI321_0:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI321_1:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI321_2:
 	.long	type_hash_table

	.size type_hash_canon, .-type_hash_canon


	.globl	build_type_attribute_variant
	.align	4
build_type_attribute_variant:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	mov r4, r1
	mov r5, r0
	ldr r6, [r5, #+20]
	mov r0, r6
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	beq .LBB322_2	@ bb
.LBB322_1:	@ attribute_list_equal.exit
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl attribute_list_contained
	cmp r0, #0
	bne .LBB322_32	@ bb25
.LBB322_2:	@ bb
	ldr r3, .LCPI322_0
	ldr r6, [r3]
	ldr r3, .LCPI322_1
	cmp r6, r3
	ldrne r3, [r5, #+80]
	ldrne r2, .LCPI322_0
	@comment
strne r3, [r2]
.LBB322_3:	@ bb1
.LBB322_4:	@ bb2
	mov r0, r5
	emit_nops_till_bundle_end
	bl copy_node
	ldr r3, .LCPI322_0
	@comment
str r6, [r3]
	mov r3, #0
	@comment
str r3, [r0, #+36]
	@comment
str r3, [r0, #+40]
	@comment
str r4, [r0, #+20]
	@comment
str r0, [r0, #+64]
	@comment
str r3, [r0, #+60]
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r12, [r2, #+2]
	orr r1, r12, r1, lsl #8
	orr r3, r3, r1, lsl #16
	bic r3, r3, #3, 20 @ 12288
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, r3, lsr #16
	strb r1, [r2, #+2]
	mov r3, r3, lsr #8
	strb r3, [r0, #+9]
	ldr r3, [r0, #+4]
	ldr r1, .LCPI322_2
	and r3, r3, r1
	ldrb r2, [r2]
	mov r6, r0
	cmp r4, #0
	beq .LBB322_33	@ bb2.attribute_hash_list.exit_crit_edge
.LBB322_5:	@ bb2.bb.i30_crit_edge
	mov r1, #0
.LBB322_6:	@ bb.i30
	ldr r0, [r4, #+12]
	ldr r12, .LCPI322_2
	and r0, r0, r12
	add r1, r0, r1
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB322_6	@ bb.i30
.LBB322_7:	@ attribute_hash_list.exit
	add r3, r3, r2
	add r4, r3, r1
	cmp r2, #17
	bgt .LBB322_16	@ attribute_hash_list.exit
.LBB322_8:	@ attribute_hash_list.exit
	cmp r2, #7
	beq .LBB322_20	@ bb10
.LBB322_9:	@ attribute_hash_list.exit
	cmp r2, #8
	ldreqb r3, [r6, #+28]
	addeq r4, r3, r4
.LBB322_10:	@ bb11
.LBB322_11:	@ bb12
	ldr r3, .LCPI322_3
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB322_24	@ type_hash_canon.exit
.LBB322_12:	@ bb1.i
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r7, r0
	cmp r0, #0
	beq .LBB322_22	@ bb7.i
.LBB322_13:	@ bb2.i28
	ldr r0, [r6, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r6
	bhs .LBB322_21	@ bb5.i
.LBB322_14:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r6
	bls .LBB322_21	@ bb5.i
.LBB322_15:	@ bb4.i
	@comment
str r6, [r0, #+8]
	@comment
str r6, [r0, #+12]
	mov r6, r7
	b .LBB322_24	@ type_hash_canon.exit
.LBB322_16:	@ attribute_hash_list.exit
	cmp r2, #18
	cmpne r2, #23
	bne .LBB322_11	@ bb12
.LBB322_17:	@ attribute_hash_list.exit
.LBB322_18:	@ bb8
	ldr r3, [r6, #+12]
.LBB322_19:	@ bb8
	ldr r2, .LCPI322_2
	and r3, r3, r2
	add r4, r3, r4
	b .LBB322_11	@ bb12
.LBB322_20:	@ bb10
	ldr r3, [r6, #+56]
	b .LBB322_19	@ bb8
.LBB322_21:	@ bb5.i
	mov r1, r6
	emit_nops_till_bundle_end
	bl obstack_free
	mov r6, r7
	b .LBB322_24	@ type_hash_canon.exit
.LBB322_22:	@ bb7.i
	ldrb r3, [r6, #+9]
	tst r3, #4
	beq .LBB322_24	@ type_hash_canon.exit
.LBB322_23:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r6}
	ldr r3, .LCPI322_4
	smull r2, r3, r4, r3
	mov r2, r3, asr #3
	add r3, r2, r3, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI322_5
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB322_24:	@ type_hash_canon.exit
	ldrb r3, [r5, #+9]
	ldrb r2, [r5, #+8]!
	orr r3, r2, r3, lsl #8
	ldrb r2, [r5, #+3]
	ldrb r5, [r5, #+2]
	orr r5, r5, r2, lsl #8
	orr r5, r3, r5, lsl #16
	mov r3, #1
	and r4, r3, r5, lsr #13
	and r5, r3, r5, lsr #12
	add r3, r6, #64
	mov r2, #1
	b .LBB322_29	@ bb16.i
.LBB322_25:	@ bb.i27
	ldrb r3, [r0, #+9]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	orr r3, r12, r3, lsl #8
	ldrb r12, [r1, #+3]
	ldrb r1, [r1, #+2]
	orr r1, r1, r12, lsl #8
	orr r3, r3, r1, lsl #16
	and r1, r2, r3, lsr #13
	cmp r1, r4
	andeq r3, r2, r3, lsr #12
	cmpeq r3, r5
	beq .LBB322_27	@ bb13.i
	b .LBB322_28	@ bb15.i
.LBB322_26:	@ bb6.i
.LBB322_27:	@ bb13.i
	ldr r3, [r6, #+48]
	ldr r1, [r0, #+48]
	cmp r1, r3
	beq .LBB322_31	@ build_type_variant.exit
.LBB322_28:	@ bb15.i
	add r3, r0, #60
.LBB322_29:	@ bb16.i
	ldr r0, [r3]
	cmp r0, #0
	bne .LBB322_25	@ bb.i27
.LBB322_30:	@ bb17.i
	ldr r7, [r6, #+64]
	ldr r8, .LCPI322_0
	ldr r9, [r8]
	ldr r3, [r6, #+80]
	@comment
str r3, [r8]
	mov r0, r6
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r9, [r8]
	mov r3, #0
	@comment
str r3, [r0, #+36]
	@comment
str r3, [r0, #+40]
	ldr r3, [r7, #+60]
	@comment
str r3, [r0, #+60]
	@comment
str r0, [r7, #+60]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+1]
	orr r2, r2, r1, lsl #8
	mov r1, r3
	ldrb r12, [r1, #+2]!
	ldrb lr, [r1, #+1]
	orr r12, r12, lr, lsl #8
	orr r2, r2, r12, lsl #16
	bic r2, r2, #3, 20 @ 12288
	strb r2, [r3]
	mov r12, r4, lsl #13
	orr r5, r12, r5, lsl #12
	orr r5, r5, r2
	mov r2, r5, lsr #24
	strb r2, [r1, #+1]
	mov r2, r5, lsr #16
	strb r2, [r1]
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
.LBB322_31:	@ build_type_variant.exit
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB322_32:	@ bb25
	mov r0, r5
	b .LBB322_31	@ build_type_variant.exit
.LBB322_33:	@ bb2.attribute_hash_list.exit_crit_edge
	mov r1, #0
	b .LBB322_7	@ attribute_hash_list.exit
	.align	4
.LBB322_34:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI322_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI322_1:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI322_2:
 	.long	262143			@ 0x3FFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI322_3:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI322_4:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI322_5:
 	.long	type_hash_table

	.size build_type_attribute_variant, .-build_type_attribute_variant


	.globl	preserve_initializer
	.align	4
preserve_initializer:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI323_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	cmp r3, #0
	ldrlt r0, .LCPI323_0
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB323_1:	@ bb
.LBB323_2:	@ bb11
	ldr r3, .LCPI323_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB323_29	@ bb11.bb28_crit_edge
.LBB323_3:	@ bb22
	ldr r2, .LCPI323_0
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI323_0
	streqb r3, [r0, #+40]
.LBB323_4:	@ bb23
.LBB323_5:	@ bb24
	ldr r3, .LCPI323_0
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI323_0
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB323_6:	@ bb26
.LBB323_7:	@ bb27
	ldr r3, .LCPI323_0
	@comment
str r1, [r3, #+8]
.LBB323_8:	@ bb28
	ldr r3, .LCPI323_1
	@comment
str r2, [r3]
	ldr r3, .LCPI323_2
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	movlt r1, #0
	movlt r0, r4
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB323_9:	@ bb29
.LBB323_10:	@ bb30
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB323_30	@ bb30.bb49_crit_edge
.LBB323_11:	@ bb42
	ldr r1, [r4, #+12]
	ldr r2, [r4, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB323_12:	@ bb43
.LBB323_13:	@ bb44
	ldr r3, [r4, #+24]
	add r1, r1, r3
	bic r3, r1, r3
	@comment
str r3, [r4, #+12]
	ldr r1, [r4, #+4]
	ldr r0, [r4, #+16]
	sub r12, r0, r1
	sub r1, r3, r1
	cmp r1, r12
	@comment
strgt r0, [r4, #+12]
	movgt r3, r0
.LBB323_14:	@ bb47
.LBB323_15:	@ bb48
	@comment
str r3, [r4, #+8]
.LBB323_16:	@ bb49
	ldr r3, .LCPI323_3
	@comment
str r2, [r3]
	ldr r3, .LCPI323_4
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	ldr r2, .LCPI323_5
	ldr r4, [r2]
	cmp r3, #0
	ldrlt r0, .LCPI323_4
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB323_17:	@ bb50
.LBB323_18:	@ bb51
	ldr r3, .LCPI323_4
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB323_31	@ bb51.bb70_crit_edge
.LBB323_19:	@ bb63
	ldr r2, .LCPI323_4
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI323_4
	streqb r3, [r0, #+40]
.LBB323_20:	@ bb64
.LBB323_21:	@ bb65
	ldr r3, .LCPI323_4
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI323_4
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB323_22:	@ bb68
.LBB323_23:	@ bb69
	ldr r3, .LCPI323_4
	@comment
str r1, [r3, #+8]
.LBB323_24:	@ bb70
	ldr r3, .LCPI323_5
	@comment
str r2, [r3]
	cmp r2, r4
	beq .LBB323_28	@ return
.LBB323_25:	@ bb73.preheader
	ldr r3, .LCPI323_6
	b .LBB323_27	@ bb72
.LBB323_26:	@ bb72
	ldr r2, .LCPI323_5
	ldr r2, [r2]
	@comment
str r2, [r3, #+4]
.LBB323_27:	@ bb72
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB323_26	@ bb72
.LBB323_28:	@ return
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB323_29:	@ bb11.bb28_crit_edge
	mov r2, #0
	b .LBB323_8	@ bb28
.LBB323_30:	@ bb30.bb49_crit_edge
	mov r2, #0
	b .LBB323_16	@ bb49
.LBB323_31:	@ bb51.bb70_crit_edge
	mov r2, #0
	b .LBB323_24	@ bb70
	.align	4
.LBB323_32:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_0:
 	.long	temporary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_1:
 	.long	temporary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_2:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_3:
 	.long	maybepermanent_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_4:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_5:
 	.long	momentary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI323_6:
 	.long	momentary_stack

	.size preserve_initializer, .-preserve_initializer


	.globl	preserve_data
	.align	4
preserve_data:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI324_0
	ldr r4, [r3]
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	movlt r1, #0
	movlt r0, r4
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB324_1:	@ bb
.LBB324_2:	@ bb1
	ldrb r3, [r4, #+40]
	tst r3, #4
	bne .LBB324_9	@ bb1.bb18_crit_edge
.LBB324_3:	@ bb12
	ldr r1, [r4, #+12]
	ldr r2, [r4, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	streqb r3, [r4, #+40]
.LBB324_4:	@ bb13
.LBB324_5:	@ bb14
	ldr r3, [r4, #+24]
	add r1, r1, r3
	bic r3, r1, r3
	@comment
str r3, [r4, #+12]
	ldr r1, [r4, #+4]
	ldr r0, [r4, #+16]
	sub r12, r0, r1
	sub r1, r3, r1
	cmp r1, r12
	@comment
strgt r0, [r4, #+12]
	movgt r3, r0
.LBB324_6:	@ bb16
.LBB324_7:	@ bb17
	@comment
str r3, [r4, #+8]
.LBB324_8:	@ bb18
	ldr r3, .LCPI324_1
	@comment
str r2, [r3]
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB324_9:	@ bb1.bb18_crit_edge
	mov r2, #0
	b .LBB324_8	@ bb18
	.align	4
.LBB324_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI324_0:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI324_1:
 	.long	maybepermanent_firstobj

	.size preserve_data, .-preserve_data


	.globl	push_obstacks_nochange
	.align	4
push_obstacks_nochange:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI325_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	cmp r3, #19
	ldrle r0, .LCPI325_0
	movle r1, #20
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB325_1:	@ bb
.LBB325_2:	@ bb1
	ldr r3, .LCPI325_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB325_9	@ bb1.bb18_crit_edge
.LBB325_3:	@ bb5
	ldr r2, .LCPI325_0
	ldr r1, [r2, #+12]
	add r1, r1, #20
	@comment
str r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI325_0
	streqb r3, [r0, #+40]
.LBB325_4:	@ bb13
.LBB325_5:	@ bb14
	ldr r3, .LCPI325_0
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI325_0
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB325_6:	@ bb16
.LBB325_7:	@ bb17
	ldr r3, .LCPI325_0
	@comment
str r1, [r3, #+8]
.LBB325_8:	@ bb18
	ldr r3, .LCPI325_1
	ldr r3, [r3]
	@comment
str r3, [r2, #+4]
	ldr r3, .LCPI325_2
	ldr r3, [r3]
	@comment
str r3, [r2, #+8]
	ldr r3, .LCPI325_3
	ldr r3, [r3]
	@comment
str r3, [r2, #+12]
	ldr r3, .LCPI325_4
	ldr r3, [r3]
	@comment
str r3, [r2, #+16]
	ldr r3, .LCPI325_5
	ldr r1, [r3]
	@comment
str r1, [r2]
	@comment
str r2, [r3]
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB325_9:	@ bb1.bb18_crit_edge
	mov r2, #0
	b .LBB325_8	@ bb18
	.align	4
.LBB325_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI325_0:
 	.long	obstack_stack_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI325_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI325_2:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI325_3:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI325_4:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI325_5:
 	.long	obstack_stack

	.size push_obstacks_nochange, .-push_obstacks_nochange


	.globl	push_obstacks
	.align	4
push_obstacks:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldr r3, .LCPI326_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	mov r4, r1
	mov r5, r0
	cmp r3, #19
	ldrle r0, .LCPI326_0
	movle r1, #20
	emit_nops_till_bundle_end
	blle _obstack_newchunk
.LBB326_1:	@ bb
.LBB326_2:	@ bb1
	ldr r3, .LCPI326_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB326_9	@ bb1.bb18_crit_edge
.LBB326_3:	@ bb5
	ldr r2, .LCPI326_0
	ldr r1, [r2, #+12]
	add r1, r1, #20
	@comment
str r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI326_0
	streqb r3, [r0, #+40]
.LBB326_4:	@ bb13
.LBB326_5:	@ bb14
	ldr r3, .LCPI326_0
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI326_0
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB326_6:	@ bb16
.LBB326_7:	@ bb17
	ldr r3, .LCPI326_0
	@comment
str r1, [r3, #+8]
.LBB326_8:	@ bb18
	ldr r3, .LCPI326_1
	ldr r1, [r3]
	@comment
str r1, [r2, #+4]
	ldr r1, .LCPI326_2
	ldr r0, [r1]
	@comment
str r0, [r2, #+8]
	ldr r0, .LCPI326_3
	ldr r12, [r0]
	@comment
str r12, [r2, #+12]
	ldr r12, .LCPI326_4
	ldr lr, [r12]
	@comment
str lr, [r2, #+16]
	ldr lr, .LCPI326_5
	ldr r6, [lr]
	@comment
str r6, [r2]
	@comment
str r2, [lr]
	@comment
str r5, [r3]
	@comment
str r5, [r0]
	@comment
str r4, [r1]
	@comment
str r4, [r12]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB326_9:	@ bb1.bb18_crit_edge
	mov r2, #0
	b .LBB326_8	@ bb18
	.align	4
.LBB326_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI326_0:
 	.long	obstack_stack_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI326_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI326_2:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI326_3:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI326_4:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI326_5:
 	.long	obstack_stack

	.size push_obstacks, .-push_obstacks


	.globl	int_size_in_bytes
	.align	4
int_size_in_bytes:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI327_0
	ldr r3, [r3]
	cmp r3, r0
	beq .LBB327_6	@ entry.bb8_crit_edge
.LBB327_1:	@ bb1
	ldr r4, [r0, #+64]
	ldr r3, [r4, #+16]
	cmp r3, #0
	beq .LBB327_7	@ bb1.bb8_crit_edge
.LBB327_2:	@ bb3
	ldrb r2, [r3, #+8]
	cmp r2, #25
	bne .LBB327_7	@ bb1.bb8_crit_edge
.LBB327_3:	@ bb5
	ldr r2, [r3, #+16]
	cmp r2, #0
	bne .LBB327_8	@ bb6
.LBB327_4:	@ bb7
	ldr r3, [r3, #+12]
	add r3, r3, #7
	mov r0, r3, lsr #3
.LBB327_5:	@ bb8
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB327_6:	@ entry.bb8_crit_edge
	mov r0, #0
	b .LBB327_5	@ bb8
.LBB327_7:	@ bb1.bb8_crit_edge
	mvn r0, #0
	b .LBB327_5	@ bb8
.LBB327_8:	@ bb6
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r4, #+16]
	mov r0, #60
	emit_nops_till_bundle_end
	bl size_binop
	ldr r0, [r0, #+12]
	b .LBB327_5	@ bb8
	.align	4
.LBB327_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI327_0:
 	.long	error_mark_node

	.size int_size_in_bytes, .-int_size_in_bytes


	.globl	size_in_bytes
	.align	4
size_in_bytes:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI328_0
	ldr r3, [r3]
	cmp r3, r0
	beq .LBB328_6	@ bb
.LBB328_1:	@ bb1
	ldr r4, [r0, #+64]
	ldr r3, [r4, #+16]
	cmp r3, #0
	beq .LBB328_7	@ bb2
.LBB328_2:	@ bb3
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	ldr r1, [r4, #+16]
	mov r0, #60
	emit_nops_till_bundle_end
	bl size_binop
	ldrb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #25
	moveq r1, #0
	moveq r0, r4
	emit_nops_till_bundle_end
	bleq force_fit_type
.LBB328_3:	@ bb4
.LBB328_4:	@ bb6
	mov r0, r4
.LBB328_5:	@ bb6
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB328_6:	@ bb
	ldr r3, .LCPI328_1
	ldr r0, [r3]
	b .LBB328_5	@ bb6
.LBB328_7:	@ bb2
	mov r0, #0
	mov r1, r4
	emit_nops_till_bundle_end
	bl incomplete_type_error
	ldr r4, .LCPI328_1
	ldr r0, [r4]
	b .LBB328_5	@ bb6
	.align	4
.LBB328_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI328_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI328_1:
 	.long	integer_zero_node

	.size size_in_bytes, .-size_in_bytes


	.globl	make_node
	.align	4
make_node:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI329_0
	ldr r3, [r3]
	ldr r3, [r3, +r0, lsl #2]
	ldrsb r4, [r3]
	ldr r3, .LCPI329_1
	ldr r3, [r3]
	mov r5, r0
	cmp r4, #59
	ble .LBB329_67	@ entry
.LBB329_1:	@ entry
	cmp r4, #97
	ble .LBB329_69	@ entry
.LBB329_2:	@ entry
	cmp r4, #113
	bgt .LBB329_8	@ entry
.LBB329_3:	@ entry
	sub r2, r4, #98
	cmp r2, #3
	bhi .LBB329_68	@ bb10.i
.LBB329_4:	@ entry
	.set PCRELV26, (.LJTI329_0_0-(.LPCRELL26+8))
.LPCRELL26:
	add r1, pc, #PCRELV26
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI329_0_0:
	.long	 .LBB329_30
	.long	 .LBB329_32
	.long	 .LBB329_5
	.long	 .LBB329_70

.text
@ JUMP TABLE END



	.align	2
.LBB329_5:	@ bb
	ldr r2, .LCPI329_2
	ldr r6, [r2]
	ldr r2, .LCPI329_3
	cmp r3, r2
	moveq r6, r3
	cmp r6, r2
	beq .LBB329_7	@ bb.bb27_crit_edge
.LBB329_6:	@ bb
	cmp r5, #34
	beq .LBB329_13	@ bb4
.LBB329_7:	@ bb.bb27_crit_edge
	mov r7, #88
	b .LBB329_39	@ bb27
.LBB329_8:	@ entry
	sub r2, r4, #114
	cmp r2, #2
	blo .LBB329_70	@ bb15
.LBB329_9:	@ entry
	cmp r4, #116
	beq .LBB329_27	@ bb8
.LBB329_10:	@ entry
	cmp r4, #120
	bne .LBB329_68	@ bb10.i
.LBB329_11:	@ bb24
	ldr r6, .LCPI329_7
	ldr r6, [r6]
	ldr r6, [r6, +r5, lsl #2]
	mov r7, #12
	add r7, r7, r6, lsl #2
	cmp r5, #1
	beq .LBB329_37	@ bb25
.LBB329_12:	@ bb24.bb27_crit_edge
	mov r6, r3
	b .LBB329_39	@ bb27
.LBB329_13:	@ bb4
	ldr r3, .LCPI329_4
	ldr r3, [r3]
	cmp r3, #0
	ldrneb r7, [r3, #+8]
	cmpne r7, #0
	bne .LBB329_15	@ bb5
	b .LBB329_7	@ bb.bb27_crit_edge
.LBB329_14:	@ bb5
.LBB329_15:	@ bb5
	and r7, r7, #255
	cmp r7, #108
	addne r3, r3, #36
	addeq r3, r3, #20
	b .LBB329_23	@ bb11.i
.LBB329_16:	@ bb2.i
.LBB329_17:	@ bb4.i
	sub r7, r3, #20
	and r7, r7, #255
	cmp r7, #2
	blo .LBB329_7	@ bb.bb27_crit_edge
.LBB329_18:	@ bb6.i
	and r7, r3, #255
	cmp r7, #5
	beq .LBB329_21	@ bb9.i
.LBB329_19:	@ bb6.i
	and r3, r3, #255
	cmp r3, #32
	bne .LBB329_68	@ bb10.i
.LBB329_20:	@ bb7.i
	add r3, r0, #36
	b .LBB329_23	@ bb11.i
.LBB329_21:	@ bb9.i
	add r3, r0, #28
	b .LBB329_23	@ bb11.i
.LBB329_22:	@ bb3.i
.LBB329_23:	@ bb11.i
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB329_7	@ bb.bb27_crit_edge
.LBB329_24:	@ bb12.i
	ldrb r3, [r0, #+8]
	cmp r3, #29
	bne .LBB329_17	@ bb4.i
.LBB329_25:	@ bb6
	cmp r0, #0
	beq .LBB329_7	@ bb.bb27_crit_edge
.LBB329_26:	@ bb7
	emit_nops_till_bundle_end
	bl find_function_data
	ldr r6, [r0, #+356]
	b .LBB329_7	@ bb.bb27_crit_edge
.LBB329_27:	@ bb8
	ldr r6, .LCPI329_3
	cmp r3, r6
	bne .LBB329_29	@ bb9
.LBB329_28:	@ bb8.bb27_crit_edge
	mov r7, #88
	b .LBB329_12	@ bb24.bb27_crit_edge
.LBB329_29:	@ bb9
	ldr r3, .LCPI329_5
	ldr r3, [r3]
	ldr r6, .LCPI329_2
	ldr r7, [r6]
	ldr r6, .LCPI329_3
	cmp r3, #0
	moveq r6, r7
	b .LBB329_7	@ bb.bb27_crit_edge
	.align	2
.LBB329_30:	@ bb13
	ldr r6, .LCPI329_3
	cmp r3, r6
	bne .LBB329_38	@ bb14
.LBB329_31:	@ bb13.bb27_crit_edge
	mov r7, #40
	b .LBB329_12	@ bb24.bb27_crit_edge
	.align	2
.LBB329_32:	@ bb19
	ldr r3, .LCPI329_6
	ldr r6, [r3]
	cmp r5, #26
	beq .LBB329_35	@ bb22
.LBB329_33:	@ bb19
	cmp r5, #25
	moveq r7, #20
	ldrne r3, .LCPI329_7
	ldrne r3, [r3]
	ldrne r3, [r3, +r5, lsl #2]
	movne r7, #12
	addne r7, r7, r3, lsl #2
	b .LBB329_39	@ bb27
.LBB329_34:	@ bb19.bb27_crit_edge
.LBB329_35:	@ bb22
	mov r7, #24
	b .LBB329_39	@ bb27
.LBB329_36:	@ bb23
.LBB329_37:	@ bb25
	ldr r6, .LCPI329_3
	b .LBB329_39	@ bb27
.LBB329_38:	@ bb14
	ldr r3, .LCPI329_2
	ldr r6, [r3]
	mov r7, #40
.LBB329_39:	@ bb27
	ldr r3, [r6, #+12]
	ldr r2, [r6, #+16]
	sub r3, r2, r3
	cmp r3, r7
	movlt r0, r6
	movlt r1, r7
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB329_40:	@ bb28
.LBB329_41:	@ bb29
	ldrb r3, [r6, #+40]
	tst r3, #4
	bne .LBB329_71	@ bb29.bb46_crit_edge
.LBB329_42:	@ bb33
	ldr r2, [r6, #+12]
	add r2, r2, r7
	@comment
str r2, [r6, #+12]
	ldr r0, [r6, #+8]
	cmp r2, r0
	orreq r3, r3, #2
	streqb r3, [r6, #+40]
.LBB329_43:	@ bb41
.LBB329_44:	@ bb42
	ldr r3, [r6, #+24]
	add r2, r2, r3
	bic r3, r2, r3
	@comment
str r3, [r6, #+12]
	ldr r2, [r6, #+4]
	ldr r1, [r6, #+16]
	sub r12, r1, r2
	sub r2, r3, r2
	cmp r2, r12
	@comment
strgt r1, [r6, #+12]
	movgt r3, r1
.LBB329_45:	@ bb44
.LBB329_46:	@ bb45
	@comment
str r3, [r6, #+8]
.LBB329_47:	@ bb46
	mvn r3, #0
	add r3, r3, r7, lsr #2
	cmp r3, #0
	blt .LBB329_50	@ bb49
.LBB329_48:	@ bb.nph95
	mvn r3, #0
	add r3, r3, r7, lsr #2
	bic r2, r7, #3
	add r2, r0, r2
	sub r2, r2, #4
	mov r1, #0
.LBB329_49:	@ bb47
	str r1, [r2], #-4
	sub r3, r3, #1
	cmp r3, #0
	bge .LBB329_49	@ bb47
.LBB329_50:	@ bb49
	bic r3, r7, #3
	cmp r3, r7
	bhs .LBB329_53	@ bb52
.LBB329_51:	@ bb.nph
	add r2, r3, r0
	sub r3, r7, r3
	mov r1, #0
	mov r12, #0
.LBB329_52:	@ bb50
	strb r12, [r2, +r1]
	add r1, r1, #1
	cmp r1, r3
	bne .LBB329_52	@ bb50
.LBB329_53:	@ bb52
	strb r5, [r0, #+8]
	ldr r3, .LCPI329_3
	cmp r6, r3
	bne .LBB329_55	@ bb54
.LBB329_54:	@ bb53
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #1, 22 @ 1024
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB329_55:	@ bb54
	cmp r4, #114
	bgt .LBB329_61	@ bb54
.LBB329_56:	@ bb54
	cmp r4, #99
	beq .LBB329_65	@ bb73
.LBB329_57:	@ bb54
	cmp r4, #100
	bne .LBB329_66	@ bb74
.LBB329_58:	@ bb56
	cmp r5, #29
	movne r3, #1
	@comment
strne r3, [r0, #+72]
.LBB329_59:	@ bb57
.LBB329_60:	@ bb58
	ldrb r3, [r0, #+31]
	ldrb r2, [r0, #+30]
	orr r3, r2, r3, lsl #8
	mov r2, r0
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #1, 16 @ 65536
	ldr r1, .LCPI329_9
	ldr r1, [r1]
	strb r3, [r2]
	mov r12, r3, lsr #8
	strb r12, [r2, #+1]
	mov r2, r3, lsr #24
	strb r2, [r0, #+31]
	mov r2, #0
	mov r12, #1
	ldr lr, .LCPI329_3
	cmp r6, lr
	mov r6, #0
	moveq r6, r12
	cmp r1, #0
	mov r1, #0
	movne r1, r12
	mov r12, #1, 16 @ 65536
	tst r1, r6
	movne r2, r12
	orr r6, r2, r3
	mov r6, r6, lsr #16
	strb r6, [r0, #+30]
	ldr r6, .LCPI329_10
	ldr r6, [r6]
	@comment
str r6, [r0, #+16]
	ldr r6, .LCPI329_11
	ldr r6, [r6]
	ldr r3, .LCPI329_12
	cmp r6, #0
	moveq r6, r3
	@comment
str r6, [r0, #+12]
	ldr r6, .LCPI329_13
	ldr r3, [r6]
	@comment
str r3, [r0, #+24]
	add r3, r3, #1
	@comment
str r3, [r6]
	b .LBB329_66	@ bb74
.LBB329_61:	@ bb54
	cmp r4, #116
	beq .LBB329_64	@ bb72
.LBB329_62:	@ bb54
	cmp r4, #115
	bne .LBB329_66	@ bb74
.LBB329_63:	@ bb55
	ldrb r5, [r0, #+10]
	mov r6, r0
	ldrb r3, [r6, #+8]!
	ldrb r2, [r6, #+3]
	orr r5, r5, r2, lsl #8
	ldrb r2, [r6, #+1]
	orr r2, r3, r2, lsl #8
	orr r5, r2, r5, lsl #16
	orr r5, r5, #1, 24 @ 256
	mov r5, r5, lsr #8
	strb r5, [r6, #+1]
	strb r3, [r6]
	ldr r5, .LCPI329_8
	ldr r5, [r5]
	@comment
str r5, [r0, #+4]
	b .LBB329_66	@ bb74
.LBB329_64:	@ bb72
	ldr r3, .LCPI329_14
	ldr r2, [r3]
	@comment
str r2, [r0, #+24]
	add r2, r2, #1
	@comment
str r2, [r3]
	mov r3, #1
	@comment
str r3, [r0, #+32]
	@comment
str r0, [r0, #+64]
	@comment
str r6, [r0, #+80]
	mov r3, #0
	@comment
str r3, [r0, #+20]
	b .LBB329_66	@ bb74
.LBB329_65:	@ bb73
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #2, 24 @ 512
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB329_66:	@ bb74
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB329_67:	@ entry
	sub r3, r4, #49
	cmp r3, #2
	blo .LBB329_70	@ bb15
.LBB329_68:	@ bb10.i
	emit_nops_till_bundle_end
	bl abort
.LBB329_69:	@ entry
	cmp r4, #60
	bne .LBB329_68	@ bb10.i
	.align	2
.LBB329_70:	@ bb15
	ldr r3, .LCPI329_6
	ldr r3, [r3]
	mov r6, #1
	mov r7, #0
	ldr r2, .LCPI329_3
	cmp r3, r2
	mov r2, #0
	moveq r2, r6
	cmp r5, #49
	movne r7, r6
	orr r7, r2, r7
	ldr r6, .LCPI329_2
	ldr r6, [r6]
	cmp r7, #0
	movne r6, r3
	ldr r3, .LCPI329_7
	ldr r3, [r3]
	ldr r3, [r3, +r5, lsl #2]
	mov r7, #16
	add r7, r7, r3, lsl #2
	b .LBB329_39	@ bb27
.LBB329_71:	@ bb29.bb46_crit_edge
	mov r0, #0
	b .LBB329_47	@ bb46
	.align	4
.LBB329_72:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_2:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_3:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_4:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_5:
 	.long	all_types_permanent

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_6:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_7:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_8:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_9:
 	.long	in_system_header

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_10:
 	.long	lineno

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_11:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_12:
 	.long	.str41624

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_13:
 	.long	next_decl_uid

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI329_14:
 	.long	next_type_uid

	.size make_node, .-make_node


	.globl	build_complex_type
	.align	4
build_complex_type:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r0
	mov r0, #9
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, [r4, #+64]
	@comment
str r3, [r0, #+4]
	mov r3, r4
	ldrb r2, [r3, #+8]!
	ldrb r2, [r3, #+1]
	mov r1, r3
	ldrb r12, [r1, #+2]!
	ldrb r1, [r0, #+11]
	ldrb r12, [r0, #+10]
	orr r1, r12, r1, lsl #8
	mov r12, r0
	ldrb lr, [r12, #+8]!
	ldrb r5, [r12, #+1]
	orr lr, lr, r5, lsl #8
	orr r1, lr, r1, lsl #16
	bic r1, r1, #1, 20 @ 4096
	strb r1, [r12]
	mov lr, #1, 20 @ 4096
	and r2, lr, r2, lsl #8
	orr r2, r1, r2
	mov lr, r2, lsr #8
	strb lr, [r12, #+1]
	mov lr, r1, lsr #24
	strb lr, [r0, #+11]
	mov r1, r1, lsr #16
	strb r1, [r0, #+10]
	bic r2, r2, #2, 20 @ 8192
	ldrb r3, [r3, #+1]
	strb r2, [r12]
	mov r1, #2, 20 @ 8192
	and r3, r1, r3, lsl #8
	orr r3, r2, r3
	mov r3, r3, lsr #8
	strb r3, [r12, #+1]
	mov r3, r2, lsr #24
	strb r3, [r0, #+11]
	mov r3, r2, lsr #16
	strb r3, [r0, #+10]
	ldr r3, .LCPI330_0
	and r4, r4, r3
	ldr r3, .LCPI330_1
	ldr r3, [r3]
	mov r5, r0
	cmp r3, #0
	bne .LBB330_8	@ type_hash_canon.exit
.LBB330_1:	@ bb1.i
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r6, r0
	cmp r0, #0
	beq .LBB330_6	@ bb7.i
.LBB330_2:	@ bb2.i
	ldr r0, [r5, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r5
	bhs .LBB330_5	@ bb5.i
.LBB330_3:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r5
	bls .LBB330_5	@ bb5.i
.LBB330_4:	@ bb4.i
	@comment
str r5, [r0, #+8]
	@comment
str r5, [r0, #+12]
	mov r5, r6
	b .LBB330_8	@ type_hash_canon.exit
.LBB330_5:	@ bb5.i
	mov r1, r5
	emit_nops_till_bundle_end
	bl obstack_free
	mov r5, r6
	b .LBB330_8	@ type_hash_canon.exit
.LBB330_6:	@ bb7.i
	ldrb r3, [r5, #+9]
	tst r3, #4
	beq .LBB330_8	@ type_hash_canon.exit
.LBB330_7:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r5}
	ldr r3, .LCPI330_2
	umull r3, r2, r4, r3
	mov r3, r2, lsr #3
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI330_3
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB330_8:	@ type_hash_canon.exit
	ldr r3, [r5, #+16]
	cmp r3, #0
	moveq r0, r5
	emit_nops_till_bundle_end
	bleq layout_type
.LBB330_9:	@ bb
.LBB330_10:	@ bb12
	mov r0, r5
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB330_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI330_0:
 	.long	262143			@ 0x3FFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI330_1:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI330_2:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI330_3:
 	.long	type_hash_table

	.size build_complex_type, .-build_complex_type


	.globl	build_offset_type
	.align	4
build_offset_type:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #14
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, [r5, #+64]
	@comment
str r3, [r0, #+56]
	@comment
str r4, [r0, #+4]
	ldr r3, .LCPI331_0
	and r2, r5, r3
	and r3, r4, r3
	add r4, r3, r2
	ldr r3, .LCPI331_1
	ldr r3, [r3]
	mov r5, r0
	cmp r3, #0
	bne .LBB331_8	@ type_hash_canon.exit
.LBB331_1:	@ bb1.i
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r6, r0
	cmp r0, #0
	beq .LBB331_6	@ bb7.i
.LBB331_2:	@ bb2.i
	ldr r0, [r5, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r5
	bhs .LBB331_5	@ bb5.i
.LBB331_3:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r5
	bls .LBB331_5	@ bb5.i
.LBB331_4:	@ bb4.i
	@comment
str r5, [r0, #+8]
	@comment
str r5, [r0, #+12]
	mov r5, r6
	b .LBB331_8	@ type_hash_canon.exit
.LBB331_5:	@ bb5.i
	mov r1, r5
	emit_nops_till_bundle_end
	bl obstack_free
	mov r5, r6
	b .LBB331_8	@ type_hash_canon.exit
.LBB331_6:	@ bb7.i
	ldrb r3, [r5, #+9]
	tst r3, #4
	beq .LBB331_8	@ type_hash_canon.exit
.LBB331_7:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r5}
	ldr r3, .LCPI331_2
	smull r3, r2, r4, r3
	mov r3, r2, asr #3
	add r3, r3, r2, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI331_3
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB331_8:	@ type_hash_canon.exit
	ldr r3, [r5, #+16]
	cmp r3, #0
	moveq r0, r5
	emit_nops_till_bundle_end
	bleq layout_type
.LBB331_9:	@ bb
.LBB331_10:	@ bb1
	mov r0, r5
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB331_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI331_0:
 	.long	262143			@ 0x3FFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI331_1:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI331_2:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI331_3:
 	.long	type_hash_table

	.size build_offset_type, .-build_offset_type


	.globl	build_reference_type
	.align	4
build_reference_type:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, [r0, #+40]
	ldr r2, .LCPI332_0
	ldr r4, [r2]
	ldr r2, .LCPI332_1
	ldr r5, [r2]
	mov r6, r0
	cmp r3, #0
	bne .LBB332_4	@ bb7
.LBB332_1:	@ bb1
	ldrb r3, [r6, #+9]
	tst r3, #4
	ldrne r3, .LCPI332_2
	ldrne r2, .LCPI332_1
	@comment
strne r3, [r2]
	ldrne r2, .LCPI332_0
	@comment
strne r3, [r2]
.LBB332_2:	@ bb5
.LBB332_3:	@ bb6
	mov r0, #15
	emit_nops_till_bundle_end
	bl make_node
	mov r7, r0
	@comment
str r6, [r7, #+4]
	@comment
str r7, [r6, #+40]
	emit_nops_till_bundle_end
	bl layout_type
	ldr r3, .LCPI332_1
	@comment
str r5, [r3]
	ldr r3, .LCPI332_0
	@comment
str r4, [r3]
	mov r0, r7
	b .LBB332_5	@ bb7
.LBB332_4:	@ bb7
	mov r0, r3
.LBB332_5:	@ bb7
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB332_6:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI332_0:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI332_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI332_2:
 	.long	permanent_obstack

	.size build_reference_type, .-build_reference_type


	.globl	build_function_type
	.align	4
build_function_type:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r3, [r0, #+8]
	mov r4, r1
	cmp r3, #23
	bne .LBB333_2	@ bb1
.LBB333_1:	@ bb
	ldr r0, .LCPI333_0
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI333_1
	ldr r0, [r3]
.LBB333_2:	@ bb1
	mov r5, r0
	mov r0, #23
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+4]
	@comment
str r4, [r0, #+12]
	ldr r3, .LCPI333_2
	and r3, r5, r3
	mov r5, r0
	cmp r4, #0
	beq .LBB333_16	@ bb1.type_hash_list.exit_crit_edge
.LBB333_3:	@ bb1.bb.i_crit_edge
	mov r2, #0
.LBB333_4:	@ bb.i
	ldr r1, [r4, #+16]
	ldr r0, .LCPI333_2
	and r1, r1, r0
	add r2, r1, r2
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB333_4	@ bb.i
.LBB333_5:	@ type_hash_list.exit
	add r4, r2, r3
	ldr r3, .LCPI333_3
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB333_13	@ type_hash_canon.exit
.LBB333_6:	@ bb1.i
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r6, r0
	cmp r0, #0
	beq .LBB333_11	@ bb7.i
.LBB333_7:	@ bb2.i
	ldr r0, [r5, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r5
	bhs .LBB333_10	@ bb5.i
.LBB333_8:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r5
	bls .LBB333_10	@ bb5.i
.LBB333_9:	@ bb4.i
	@comment
str r5, [r0, #+8]
	@comment
str r5, [r0, #+12]
	mov r5, r6
	b .LBB333_13	@ type_hash_canon.exit
.LBB333_10:	@ bb5.i
	mov r1, r5
	emit_nops_till_bundle_end
	bl obstack_free
	mov r5, r6
	b .LBB333_13	@ type_hash_canon.exit
.LBB333_11:	@ bb7.i
	ldrb r3, [r5, #+9]
	tst r3, #4
	beq .LBB333_13	@ type_hash_canon.exit
.LBB333_12:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r5}
	ldr r3, .LCPI333_4
	smull r3, r2, r4, r3
	mov r3, r2, asr #3
	add r3, r3, r2, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI333_5
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB333_13:	@ type_hash_canon.exit
	ldr r3, [r5, #+16]
	cmp r3, #0
	moveq r0, r5
	emit_nops_till_bundle_end
	bleq layout_type
.LBB333_14:	@ bb2
.LBB333_15:	@ bb3
	mov r0, r5
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB333_16:	@ bb1.type_hash_list.exit_crit_edge
	mov r2, #0
	b .LBB333_5	@ type_hash_list.exit
	.align	4
.LBB333_17:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI333_0:
 	.long	.str51625

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI333_1:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI333_2:
 	.long	262143			@ 0x3FFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI333_3:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI333_4:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI333_5:
 	.long	type_hash_table

	.size build_function_type, .-build_function_type


	.globl	build_range_type
	.align	4
build_range_type:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r0, #7
	emit_nops_till_bundle_end
	bl make_node
	mov r7, r0
	@comment
str r6, [r7, #+4]
	ldr r3, .LCPI334_0
	ldr r3, [r3]
	cmp r6, #0
	moveq r6, r3
	mov r8, r6
	ldrb r3, [r8, #+28]!
	strb r3, [r7, #+28]
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [r7, #+52]
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [r7, #+56]
	ldrb r3, [r7, #+29]
	ldrb r3, [r8, #+1]
	strb r3, [r7, #+29]
	ldr r3, [r6, #+16]
	@comment
str r3, [r7, #+16]
	ldr r3, [r6, #+32]
	@comment
str r3, [r7, #+32]
	ldrb r3, [r5, #+8]
	cmp r3, #25
	bne .LBB334_12	@ type_hash_canon.exit
.LBB334_1:	@ bb2
	ldrb r3, [r4, #+8]
	cmp r3, #25
	ldreq r3, [r5, #+12]
	ldreq r2, [r4, #+12]
	subeq r3, r2, r3
	eoreq r4, r3, r3, asr #31
	ldreq r3, .LCPI334_1
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB334_3	@ bb1.i
	b .LBB334_12	@ type_hash_canon.exit
.LBB334_2:	@ bb3
.LBB334_3:	@ bb1.i
	mov r0, r4
	mov r1, r7
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r5, r0
	cmp r0, #0
	beq .LBB334_10	@ bb7.i
.LBB334_4:	@ bb2.i
	ldr r0, [r7, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r7
	bhs .LBB334_9	@ bb5.i
.LBB334_5:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r7
	bls .LBB334_9	@ bb5.i
.LBB334_6:	@ bb4.i
	@comment
str r7, [r0, #+8]
	@comment
str r7, [r0, #+12]
.LBB334_7:	@ bb4.i
	mov r0, r5
.LBB334_8:	@ bb4.i
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB334_9:	@ bb5.i
	mov r1, r7
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB334_7	@ bb4.i
.LBB334_10:	@ bb7.i
	ldrb r3, [r7, #+9]
	tst r3, #4
	beq .LBB334_12	@ type_hash_canon.exit
.LBB334_11:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r7}
	ldr r3, .LCPI334_2
	smull r2, r3, r4, r3
	mov r2, r3, asr #3
	add r3, r2, r3, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI334_3
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB334_12:	@ type_hash_canon.exit
	mov r0, r7
	b .LBB334_8	@ bb4.i
	.align	4
.LBB334_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI334_0:
 	.long	sizetype

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI334_1:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI334_2:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI334_3:
 	.long	type_hash_table

	.size build_range_type, .-build_range_type


	.globl	build_index_2_type
	.align	4
build_index_2_type:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r2, r1
	mov r1, r0
	mov r0, #0
	emit_nops_till_bundle_end
	bl build_range_type
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size build_index_2_type, .-build_index_2_type


	.globl	build_pointer_type
	.align	4
build_pointer_type:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, [r0, #+36]
	mov r4, r0
	cmp r3, #0
	bne .LBB336_5	@ bb2
.LBB336_1:	@ bb1
	ldr r0, [r4, #+80]
	mov r1, r0
	emit_nops_till_bundle_end
	bl push_obstacks
	mov r0, #13
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, .LCPI336_0
	ldr r1, [r3]
	ldr r2, [r1]
	@comment
str r2, [r3]
	ldr r3, [r1, #+4]
	ldr r2, .LCPI336_1
	@comment
str r3, [r2]
	ldr r3, [r1, #+8]
	ldr r2, .LCPI336_2
	@comment
str r3, [r2]
	ldr r3, [r1, #+12]
	ldr r2, .LCPI336_3
	@comment
str r3, [r2]
	ldr r3, [r1, #+16]
	ldr r2, .LCPI336_4
	@comment
str r3, [r2]
	ldr r3, .LCPI336_5
	ldr r3, [r3, #+4]
	mov r5, r0
	cmp r3, r1
	bhs .LBB336_3	@ bb2.i
.LBB336_2:	@ bb.i
	ldr r3, .LCPI336_5
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB336_7	@ bb1.i
.LBB336_3:	@ bb2.i
	ldr r0, .LCPI336_5
	emit_nops_till_bundle_end
	bl obstack_free
.LBB336_4:	@ pop_obstacks.exit
	@comment
str r4, [r5, #+4]
	@comment
str r5, [r4, #+36]
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r5
	b .LBB336_6	@ bb2
.LBB336_5:	@ bb2
	mov r0, r3
.LBB336_6:	@ bb2
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB336_7:	@ bb1.i
	ldr r3, .LCPI336_5
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB336_4	@ pop_obstacks.exit
	.align	4
.LBB336_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI336_0:
 	.long	obstack_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI336_1:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI336_2:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI336_3:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI336_4:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI336_5:
 	.long	obstack_stack_obstack

	.size build_pointer_type, .-build_pointer_type


	.globl	build_method_type
	.align	4
build_method_type:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #16
	emit_nops_till_bundle_end
	bl make_node
	ldrb r3, [r4, #+8]
	mov r6, r0
	cmp r3, #23
	bne .LBB337_12	@ bb
.LBB337_1:	@ bb1
	ldr r3, [r5, #+64]
	@comment
str r3, [r6, #+56]
	ldr r3, [r4, #+4]
	@comment
str r3, [r6, #+4]
	ldr r7, [r4, #+12]
	mov r0, r5
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r1, r0
	mov r0, #0
	mov r2, r7
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r6, #+12]
	ldr r3, .LCPI337_0
	and r2, r5, r3
	and r3, r4, r3
	add r4, r3, r2
	ldr r3, .LCPI337_1
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB337_9	@ type_hash_canon.exit
.LBB337_2:	@ bb1.i
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r5, r0
	cmp r0, #0
	beq .LBB337_7	@ bb7.i
.LBB337_3:	@ bb2.i
	ldr r0, [r6, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r6
	bhs .LBB337_6	@ bb5.i
.LBB337_4:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r6
	bls .LBB337_6	@ bb5.i
.LBB337_5:	@ bb4.i
	@comment
str r6, [r0, #+8]
	@comment
str r6, [r0, #+12]
	mov r6, r5
	b .LBB337_9	@ type_hash_canon.exit
.LBB337_6:	@ bb5.i
	mov r1, r6
	emit_nops_till_bundle_end
	bl obstack_free
	mov r6, r5
	b .LBB337_9	@ type_hash_canon.exit
.LBB337_7:	@ bb7.i
	ldrb r3, [r6, #+9]
	tst r3, #4
	beq .LBB337_9	@ type_hash_canon.exit
.LBB337_8:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r6}
	ldr r3, .LCPI337_2
	smull r3, r2, r4, r3
	mov r3, r2, asr #3
	add r3, r3, r2, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI337_3
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB337_9:	@ type_hash_canon.exit
	ldr r3, [r6, #+16]
	cmp r3, #0
	moveq r0, r6
	emit_nops_till_bundle_end
	bleq layout_type
.LBB337_10:	@ bb2
.LBB337_11:	@ bb3
	mov r0, r6
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB337_12:	@ bb
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB337_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI337_0:
 	.long	262143			@ 0x3FFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI337_1:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI337_2:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI337_3:
 	.long	type_hash_table

	.size build_method_type, .-build_method_type


	.globl	build_array_type
	.align	4
build_array_type:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r3, [r0, #+8]
	mov r4, r1
	cmp r3, #23
	bne .LBB338_2	@ bb1
.LBB338_1:	@ bb
	ldr r0, .LCPI338_0
	emit_nops_till_bundle_end
	bl error
	ldr r3, .LCPI338_1
	ldr r0, [r3]
.LBB338_2:	@ bb1
	mov r5, r0
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r0, #18
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+4]
	@comment
str r4, [r0, #+12]
	mov r6, r0
	cmp r4, #0
	beq .LBB338_13	@ bb6
.LBB338_3:	@ bb3
	ldr r3, .LCPI338_2
	and r2, r4, r3
	and r3, r5, r3
	add r4, r3, r2
	ldr r3, .LCPI338_3
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB338_11	@ type_hash_canon.exit
.LBB338_4:	@ bb1.i
	mov r0, r4
	mov r1, r6
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r5, r0
	cmp r0, #0
	beq .LBB338_9	@ bb7.i
.LBB338_5:	@ bb2.i
	ldr r0, [r6, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r6
	bhs .LBB338_8	@ bb5.i
.LBB338_6:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r6
	bls .LBB338_8	@ bb5.i
.LBB338_7:	@ bb4.i
	@comment
str r6, [r0, #+8]
	@comment
str r6, [r0, #+12]
	mov r6, r5
	b .LBB338_11	@ type_hash_canon.exit
.LBB338_8:	@ bb5.i
	mov r1, r6
	emit_nops_till_bundle_end
	bl obstack_free
	mov r6, r5
	b .LBB338_11	@ type_hash_canon.exit
.LBB338_9:	@ bb7.i
	ldrb r3, [r6, #+9]
	tst r3, #4
	beq .LBB338_11	@ type_hash_canon.exit
.LBB338_10:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r6}
	ldr r3, .LCPI338_4
	smull r3, r2, r4, r3
	mov r3, r2, asr #3
	add r3, r3, r2, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI338_5
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB338_11:	@ type_hash_canon.exit
	ldr r3, [r6, #+16]
	cmp r3, #0
	moveq r0, r6
	emit_nops_till_bundle_end
	bleq layout_type
.LBB338_12:	@ bb4
.LBB338_13:	@ bb6
	mov r0, r6
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB338_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI338_0:
 	.long	.str61626

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI338_1:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI338_2:
 	.long	262143			@ 0x3FFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI338_3:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI338_4:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI338_5:
 	.long	type_hash_table

	.size build_array_type, .-build_array_type


	.globl	build_block
	.align	4
build_block:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	mov r0, #5
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r7, [r0, #+16]
	@comment
str r6, [r0, #+20]
	@comment
str r5, [r0, #+24]
	@comment
str r4, [r0, #+28]
	ldr r3, [sp, #+20]
	@comment
str r3, [r0]
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.size build_block, .-build_block


	.globl	build_decl
	.align	4
build_decl:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+32]
	@comment
str r5, [r0, #+56]
	@comment
str r4, [r0, #+4]
	sub r3, r6, #33
	mov r4, r0
	cmp r3, #2
	bls .LBB340_4	@ bb
.LBB340_1:	@ bb1
	cmp r6, #29
	moveq r3, #4
	streqb r3, [r4, #+28]
.LBB340_2:	@ bb2
.LBB340_3:	@ bb3
	mov r0, r4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB340_4:	@ bb
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl layout_decl
	b .LBB340_3	@ bb3
	.size build_decl, .-build_decl


	.globl	build_parse_node
	.align	4
build_parse_node:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	mov r4, r0
	add r12, sp, #16
	stmia r12, {r1, r2, r3}
	ldr r3, .LCPI341_0
	ldr r5, [r3]
	add r2, sp, #16
	@comment
str r2, [sp]
	ldr r2, .LCPI341_1
	@comment
str r2, [r3]
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, .LCPI341_2
	ldr r3, [r3]
	ldr r3, [r3, +r4, lsl #2]
	cmp r3, #1
	blt .LBB341_3	@ bb3
.LBB341_1:	@ bb.nph
	add r2, r0, #16
	mov r1, #0
.LBB341_2:	@ bb
	ldr r12, [sp]
	add lr, r12, #4
	@comment
str lr, [sp]
	ldr r12, [r12]
	str r12, [r2], #+4
	add r1, r1, #1
	cmp r1, r3
	bne .LBB341_2	@ bb
.LBB341_3:	@ bb3
	ldr r3, .LCPI341_0
	@comment
str r5, [r3]
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB341_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI341_0:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI341_1:
 	.long	temp_decl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI341_2:
 	.long	tree_code_length

	.size build_parse_node, .-build_parse_node


	.globl	build_nt
	.align	4
build_nt:
	sfi_sub sp, sp, #12
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	sfi_sub sp, sp, #4
	mov r4, r0
	add r12, sp, #12
	stmia r12, {r1, r2, r3}
	add r3, sp, #12
	@comment
str r3, [sp]
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, .LCPI342_0
	ldr r3, [r3]
	ldr r3, [r3, +r4, lsl #2]
	cmp r3, #1
	blt .LBB342_3	@ bb3
.LBB342_1:	@ bb.nph
	add r2, r0, #16
	mov r1, #0
.LBB342_2:	@ bb
	ldr r12, [sp]
	add lr, r12, #4
	@comment
str lr, [sp]
	ldr r12, [r12]
	str r12, [r2], #+4
	add r1, r1, #1
	cmp r1, r3
	bne .LBB342_2	@ bb
.LBB342_3:	@ bb3
	sfi_add sp, sp, #4
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB342_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI342_0:
 	.long	tree_code_length

	.size build_nt, .-build_nt


	.globl	build
	.align	4
build:
	sfi_sub sp, sp, #8
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #4
	mov r4, r1
	mov r5, r0
	@comment
str r3, [sp, #+24]
	@comment
str r2, [sp, #+20]
	add r3, sp, #20
	@comment
str r3, [sp]
	emit_nops_till_bundle_end
	bl make_node
	ldr r3, .LCPI343_0
	ldr r3, [r3]
	ldr r3, [r3, +r5, lsl #2]
	@comment
str r4, [r0, #+4]
	cmp r3, #1
	beq .LBB343_14	@ bb36
.LBB343_1:	@ entry
	cmp r3, #2
	bne .LBB343_22	@ bb75.preheader
.LBB343_2:	@ bb
	ldr r3, [sp]
	add r5, r3, #4
	@comment
str r5, [sp]
	mov r5, r3
	ldr r2, [r5], #+8
	@comment
str r5, [sp]
	ldr r3, [r3, #+4]
	@comment
str r2, [r0, #+16]
	@comment
str r3, [r0, #+20]
	cmp r2, #0
	ldrneb r5, [r2, #+9]
	tstne r5, #1
	bne .LBB343_6	@ bb13
.LBB343_3:	@ bb3
.LBB343_4:	@ bb7
	cmp r3, #0
	ldrneb r5, [r3, #+9]
	tstne r5, #1
	bne .LBB343_6	@ bb13
	b .LBB343_7	@ bb14
.LBB343_5:	@ bb8
.LBB343_6:	@ bb13
	ldrb r5, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+3]
	orr r5, r5, lr, lsl #8
	ldrb lr, [r1, #+1]
	orr lr, r12, lr, lsl #8
	orr r5, lr, r5, lsl #16
	orr r5, r5, #1, 24 @ 256
	mov r5, r5, lsr #8
	strb r5, [r1, #+1]
	strb r12, [r1]
.LBB343_7:	@ bb14
	cmp r2, #0
	ldrneb r5, [r2, #+10]
	tstne r5, #2
	bne .LBB343_31	@ bb15.bb28_crit_edge
.LBB343_8:	@ bb15
.LBB343_9:	@ bb20
	cmp r3, #0
	ldrneb r3, [r3, #+10]
	tstne r3, #2
	bne .LBB343_31	@ bb15.bb28_crit_edge
.LBB343_10:	@ bb21
.LBB343_11:	@ bb27
	mov r3, #0
.LBB343_12:	@ bb28
	ldrb r5, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r5, r1, r5, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r12, [r2, #+2]
	orr r1, r12, r1, lsl #8
	orr r5, r5, r1, lsl #16
	bic r5, r5, #2, 16 @ 131072
	orr r3, r5, r3
	strb r3, [r2]
	mov r5, r3, lsr #24
	strb r5, [r2, #+3]
	mov r5, r3, lsr #16
	strb r5, [r2, #+2]
.LBB343_13:	@ bb28
	mov r3, r3, lsr #8
	strb r3, [r0, #+9]
	b .LBB343_30	@ bb76
.LBB343_14:	@ bb36
	ldr r3, [sp]
	add r2, r3, #4
	@comment
str r2, [sp]
	ldr r2, .LCPI343_1
	ldr r2, [r2]
	ldr r2, [r2, +r5, lsl #2]
	ldrb r2, [r2]
	ldr r3, [r3]
	cmp r2, #115
	bne .LBB343_32	@ bb37
.LBB343_15:	@ bb38
	@comment
str r3, [r0, #+16]
	cmp r3, #0
	beq .LBB343_20	@ bb52
.LBB343_16:	@ bb39
	ldrb r2, [r3, #+9]
	tst r2, #1
	beq .LBB343_18	@ bb45
.LBB343_17:	@ bb44
	ldrb r2, [r0, #+10]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	ldrb lr, [r1, #+3]
	orr r2, r2, lr, lsl #8
	ldrb lr, [r1, #+1]
	orr lr, r12, lr, lsl #8
	orr r2, lr, r2, lsl #16
	orr r2, r2, #1, 24 @ 256
	mov r2, r2, lsr #8
	strb r2, [r1, #+1]
	strb r12, [r1]
.LBB343_18:	@ bb45
	cmp r3, #0
	ldrneb r3, [r3, #+10]
	tstne r3, #2
	bne .LBB343_33	@ bb46.bb53_crit_edge
.LBB343_19:	@ bb46
.LBB343_20:	@ bb52
	mov r3, #0
.LBB343_21:	@ bb53
	ldrb r2, [r0, #+9]
	mov r1, r0
	ldrb r12, [r1, #+8]!
	orr r2, r12, r2, lsl #8
	ldrb r12, [r1, #+3]
	ldrb lr, [r1, #+2]
	orr r12, lr, r12, lsl #8
	orr r2, r2, r12, lsl #16
	bic r2, r2, #2, 16 @ 131072
	orr r3, r2, r3
	strb r3, [r1]
	mov r2, r3, lsr #24
	strb r2, [r1, #+3]
	mov r2, r3, lsr #16
	strb r2, [r1, #+2]
	b .LBB343_13	@ bb28
.LBB343_22:	@ bb75.preheader
	cmp r3, #0
	ble .LBB343_30	@ bb76
.LBB343_23:	@ bb.nph
	add r2, r0, #16
	mov r1, #0
.LBB343_24:	@ bb61
	ldr r12, [sp]
	add lr, r12, #4
	@comment
str lr, [sp]
	ldr r12, [r12]
	@comment
str r12, [r2]
	cmp r12, #0
	beq .LBB343_29	@ bb74
.LBB343_25:	@ bb62
	ldrb lr, [r12, #+9]
	tst lr, #1
	beq .LBB343_27	@ bb68
.LBB343_26:	@ bb67
	ldrb lr, [r0, #+10]
	mov r4, r0
	ldrb r5, [r4, #+8]!
	ldrb r6, [r4, #+3]
	orr lr, lr, r6, lsl #8
	ldrb r6, [r4, #+1]
	orr r6, r5, r6, lsl #8
	orr lr, r6, lr, lsl #16
	orr lr, lr, #1, 24 @ 256
	mov lr, lr, lsr #8
	strb lr, [r4, #+1]
	strb r5, [r4]
.LBB343_27:	@ bb68
	ldrb r12, [r12, #+10]
	tst r12, #2
	beq .LBB343_29	@ bb74
.LBB343_28:	@ bb73
	ldrb r12, [r0, #+10]
	ldrb lr, [r0, #+11]
	mov r4, r0
	ldrb r5, [r4, #+8]!
	ldrb r6, [r4, #+1]
	strb r5, [r4]
	orr r12, r12, lr, lsl #8
	orr lr, r5, r6, lsl #8
	orr r12, lr, r12, lsl #16
	orr r12, r12, #2, 16 @ 131072
	mov r12, r12, lsr #16
	strb r12, [r0, #+10]
.LBB343_29:	@ bb74
	add r1, r1, #1
	add r2, r2, #4
	cmp r1, r3
	bne .LBB343_24	@ bb61
.LBB343_30:	@ bb76
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB343_31:	@ bb15.bb28_crit_edge
	mov r3, #2, 16 @ 131072
	b .LBB343_12	@ bb28
.LBB343_32:	@ bb37
	emit_nops_till_bundle_end
	bl abort
.LBB343_33:	@ bb46.bb53_crit_edge
	mov r3, #2, 16 @ 131072
	b .LBB343_21	@ bb53
	.align	4
.LBB343_34:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI343_0:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI343_1:
 	.long	tree_code_type

	.size build, .-build


	.globl	get_narrower
	.align	4
get_narrower:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	mov r3, #1
	mov r2, #0
	mov r4, r1
	mov r1, #1
	mov r5, r0
	b .LBB344_8	@ bb25.outer
.LBB344_1:	@ bb
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+28]
	ldr r0, [r5, #+16]
	ldr r2, [r0, #+4]
	ldrb r12, [r2, #+28]
	sub r3, r3, r12
	cmp r3, #0
	blt .LBB344_10	@ bb26
.LBB344_2:	@ bb1
	cmp r3, #1
	blt .LBB344_6	@ bb16
.LBB344_3:	@ bb2
	ldrb r2, [r2, #+9]
	and r2, r1, r2, lsr #6
	mov r3, #0
	cmp r6, #0
	mov r5, r0
	bne .LBB344_8	@ bb25.outer
.LBB344_4:	@ bb8
	mov r3, #0
	cmp r2, r8
	mov r5, r0
	beq .LBB344_9	@ bb25
.LBB344_5:	@ bb8.bb26_crit_edge
	mov r5, r0
	b .LBB344_10	@ bb26
.LBB344_6:	@ bb16
	mov r3, #0
	cmp r6, #0
	mov r5, r0
	beq .LBB344_9	@ bb25
.LBB344_7:	@ bb17
	ldrb r3, [r2, #+9]
	and r2, r1, r3, lsr #6
	mov r3, #0
	mov r5, r0
.LBB344_8:	@ bb25.outer
	mov r8, r2
.LBB344_9:	@ bb25
	mov r7, r0
	mov r6, r3
	ldrb r3, [r5, #+8]
	cmp r3, #106
	beq .LBB344_1	@ bb
.LBB344_10:	@ bb26
	ldrb r3, [r5, #+8]
	cmp r3, #37
	bne .LBB344_20	@ bb75
.LBB344_11:	@ bb27
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #8
	beq .LBB344_20	@ bb75
.LBB344_12:	@ bb28
	ldr r3, [r5, #+20]
	ldrb r2, [r5, #+9]
	mov r1, r5
	ldrb r0, [r1, #+8]!
	ldr r3, [r3, #+20]
	ldr r9, [r3, #+12]
	mov r3, #1
	and r1, r3, r2, lsr #6
	mov r0, r9
	emit_nops_till_bundle_end
	bl type_for_size
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+28]
	mov r1, r0
	cmp r3, r9
	bls .LBB344_20	@ bb75
.LBB344_13:	@ bb35
	ldr r3, [r5, #+20]
	ldrb r2, [r3, #+29]
	tst r2, #16
	bne .LBB344_20	@ bb75
.LBB344_14:	@ bb40
	cmp r6, #0
	bne .LBB344_16	@ bb41
.LBB344_15:	@ bb41
	ldrb r2, [r3, #+9]
	mov r0, #1
	and r2, r0, r2, lsr #6
	cmp r2, r8
	bne .LBB344_20	@ bb75
.LBB344_16:	@ bb41
	cmp r1, #0
	beq .LBB344_20	@ bb75
.LBB344_17:	@ bb49
	cmp r6, #0
	ldrneb r7, [r3, #+9]
	movne r8, #1
	andne r8, r8, r7, lsr #6
.LBB344_18:	@ bb50
.LBB344_19:	@ bb56
	ldr r2, [r5, #+16]
	mov r0, #37
	emit_nops_till_bundle_end
	bl build
	ldrb r7, [r0, #+11]
	ldrb r3, [r0, #+10]
	orr r7, r3, r7, lsl #8
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+1]
	orr r2, r2, r1, lsl #8
	orr r7, r2, r7, lsl #16
	bic r7, r7, #1, 24 @ 256
	ldrb r2, [r5, #+8]!
	ldrb r2, [r5, #+1]
	mov r1, r5
	ldrb r12, [r1, #+2]!
	strb r7, [r3]
	mov r12, #1, 24 @ 256
	and r2, r12, r2, lsl #8
	orr r2, r7, r2
	mov r12, r2, lsr #8
	strb r12, [r3, #+1]
	mov r12, r7, lsr #24
	strb r12, [r0, #+11]
	mov r7, r7, lsr #16
	strb r7, [r0, #+10]
	bic r7, r2, #1, 20 @ 4096
	ldrb r2, [r5, #+1]
	strb r7, [r3]
	mov r12, #1, 20 @ 4096
	and r2, r12, r2, lsl #8
	orr r2, r7, r2
	mov r12, r2, lsr #8
	strb r12, [r3, #+1]
	mov r12, r7, lsr #24
	strb r12, [r0, #+11]
	mov r7, r7, lsr #16
	strb r7, [r0, #+10]
	bic r7, r2, #2, 16 @ 131072
	mov r2, r7, lsr #8
	ldrb r1, [r1]
	strb r2, [r3, #+1]
	strb r7, [r3]
	mov r3, r7, lsr #24
	strb r3, [r0, #+11]
	mov r3, #2, 16 @ 131072
	and r3, r3, r1, lsl #16
	orr r7, r7, r3
	mov r7, r7, lsr #16
	strb r7, [r0, #+10]
	mov r7, r0
.LBB344_20:	@ bb75
	mov r0, r7
	@comment
str r8, [r4]
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
	.size get_narrower, .-get_narrower


	.globl	get_unwidened
	.align	4
get_unwidened:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr r3, [r0, #+4]
	cmp r1, #0
	mov r2, r1
	moveq r2, r3
	ldrb r4, [r2, #+28]
	mov r5, r1
	cmp r3, r1
	cmpne r5, #0
	bne .LBB345_2	@ bb8
	b .LBB345_5	@ bb14
.LBB345_1:	@ entry
.LBB345_2:	@ bb8
	and r2, r4, #255
	ldrb r1, [r3, #+28]
	cmp r1, r2
	bhs .LBB345_5	@ bb14
.LBB345_3:	@ bb9
	ldrb r2, [r3, #+9]
	tst r2, #64
	beq .LBB345_5	@ bb14
.LBB345_4:	@ bb9.bb30.outer.outer_crit_edge
	mov r2, #1
	mov r1, r0
	b .LBB345_12	@ bb30.outer.outer
.LBB345_5:	@ bb14
	mov r2, #0
	mov r1, r0
	b .LBB345_12	@ bb30.outer.outer
.LBB345_6:	@ bb16
	ldr r1, [r7, #+4]
	ldrb r1, [r1, #+28]
	ldr r0, [r7, #+16]
	ldr r12, [r0, #+4]
	ldrb lr, [r12, #+28]
	sub r9, r1, lr
	cmp r9, #0
	bge .LBB345_8	@ bb18
.LBB345_7:	@ bb16
	and r10, r4, #255
	and r1, r1, #255
	cmp r1, r10
	blo .LBB345_16	@ bb31
.LBB345_8:	@ bb18
	cmp r9, #1
	blt .LBB345_14	@ bb30
.LBB345_9:	@ bb19
	and r2, r4, #255
	and r1, lr, #255
	mov r7, #1
	mov lr, #0
	cmp r1, r2
	mov r2, #0
	movlo r2, r7
	cmp r6, #0
	movne lr, r7
	tst lr, r2
	mov r7, r0
	movne r7, r8
	cmp r6, #0
	bne .LBB345_11	@ bb24
.LBB345_10:	@ bb23
	ldrb r2, [r0, #+8]
	cmp r2, #106
	bne .LBB345_13	@ bb30.outer
.LBB345_11:	@ bb24
	ldrb r1, [r12, #+9]
	mov r2, #1
	tst r1, #64
	mov r1, r0
	beq .LBB345_13	@ bb30.outer
.LBB345_12:	@ bb30.outer.outer
	mov r6, r2
	mov r7, r0
	mov r0, r1
.LBB345_13:	@ bb30.outer
	mov r8, r7
.LBB345_14:	@ bb30
	mov r7, r0
	ldrb r2, [r7, #+8]
	cmp r2, #37
	beq .LBB345_17	@ bb32
.LBB345_15:	@ bb30
	and r1, r2, #255
	cmp r1, #106
	beq .LBB345_6	@ bb16
	b .LBB345_25	@ bb75
.LBB345_16:	@ bb31
	and r2, r2, #255
	cmp r2, #37
	bne .LBB345_25	@ bb75
.LBB345_17:	@ bb32
	ldrb r3, [r3, #+8]
	cmp r3, #8
	beq .LBB345_25	@ bb75
.LBB345_18:	@ bb33
	ldr r3, [r7, #+20]
	ldr r2, [r3, #+20]
	ldrb r1, [r3, #+9]
	ldrb r0, [r3, #+8]!
	ldr r9, [r2, #+12]
	mov r3, #1
	and r1, r3, r1, lsr #6
	mov r0, r9
	emit_nops_till_bundle_end
	bl type_for_size
	ldr r3, [r7, #+4]
	ldrb r3, [r3, #+28]
	mov r1, r0
	cmp r3, r9
	bls .LBB345_25	@ bb75
.LBB345_19:	@ bb40
	cmp r5, #0
	bne .LBB345_21	@ bb46
.LBB345_20:	@ bb41
	ldr r3, [r7, #+20]
	ldrb r3, [r3, #+29]
	tst r3, #16
	bne .LBB345_25	@ bb75
.LBB345_21:	@ bb46
	cmp r4, r9
	bls .LBB345_24	@ bb55
.LBB345_22:	@ bb46
	cmp r6, #0
	beq .LBB345_24	@ bb55
.LBB345_23:	@ bb50
	ldr r3, [r7, #+20]
	ldrb r3, [r3, #+9]
	tst r3, #64
	cmpne r1, #0
	beq .LBB345_25	@ bb75
	bne .LBB345_27	@ bb56
	b .LBB345_25	@ bb75
.LBB345_24:	@ bb55
	cmp r1, #0
	beq .LBB345_25	@ bb75
	b .LBB345_27	@ bb56
.LBB345_25:	@ bb75
	mov r0, r8
.LBB345_26:	@ bb75
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB345_27:	@ bb56
	ldr r2, [r7, #+16]
	ldr r3, [r7, #+20]
	mov r0, #37
	emit_nops_till_bundle_end
	bl build
	ldrb r8, [r0, #+11]
	ldrb r3, [r0, #+10]
	orr r8, r3, r8, lsl #8
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+1]
	orr r2, r2, r1, lsl #8
	orr r8, r2, r8, lsl #16
	bic r8, r8, #1, 24 @ 256
	ldrb r2, [r7, #+8]!
	ldrb r2, [r7, #+1]
	mov r1, r7
	ldrb r12, [r1, #+2]!
	strb r8, [r3]
	mov r12, #1, 24 @ 256
	and r2, r12, r2, lsl #8
	orr r2, r8, r2
	mov r12, r2, lsr #8
	strb r12, [r3, #+1]
	mov r12, r8, lsr #24
	strb r12, [r0, #+11]
	mov r8, r8, lsr #16
	strb r8, [r0, #+10]
	bic r8, r2, #1, 20 @ 4096
	ldrb r2, [r7, #+1]
	strb r8, [r3]
	mov r12, #1, 20 @ 4096
	and r2, r12, r2, lsl #8
	orr r2, r8, r2
	mov r12, r2, lsr #8
	strb r12, [r3, #+1]
	mov r12, r8, lsr #24
	strb r12, [r0, #+11]
	mov r8, r8, lsr #16
	strb r8, [r0, #+10]
	bic r8, r2, #2, 16 @ 131072
	mov r2, r8, lsr #8
	ldrb r1, [r1]
	strb r2, [r3, #+1]
	strb r8, [r3]
	mov r3, r8, lsr #24
	strb r3, [r0, #+11]
	mov r3, #2, 16 @ 131072
	and r3, r3, r1, lsl #16
	orr r8, r8, r3
	mov r8, r8, lsr #16
	strb r8, [r0, #+10]
	b .LBB345_26	@ bb75
	.size get_unwidened, .-get_unwidened


	.globl	substitute_in_expr
	.align	4
substitute_in_expr:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI346_0
	ldr r3, [r3]
	ldrb r4, [r0, #+8]
	ldr r12, [r3, +r4, lsl #2]
	ldrsb r12, [r12]
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r12, #59
	ble .LBB346_32	@ entry
.LBB346_1:	@ entry
	cmp r12, #98
	ble .LBB346_33	@ entry
.LBB346_2:	@ entry
	cmp r12, #113
	bgt .LBB346_9	@ entry
.LBB346_3:	@ entry
	sub r3, r12, #99
	cmp r3, #2
	blo .LBB346_25	@ bb34
.LBB346_4:	@ entry
	cmp r12, #101
	bne .LBB346_34	@ bb8
.LBB346_5:	@ bb3
	ldr r3, .LCPI346_1
	ldr r3, [r3]
	ldr r3, [r3, +r4, lsl #2]
	cmp r3, #3
	beq .LBB346_16	@ bb10
.LBB346_6:	@ bb3
	cmp r3, #2
	beq .LBB346_12	@ bb5
.LBB346_7:	@ bb3
	cmp r3, #1
	bne .LBB346_34	@ bb8
	.align	2
.LBB346_8:	@ bb4
	ldr r0, [r7, #+16]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r2, r0
	ldr r1, [r7, #+4]
	mov r0, r4
	emit_nops_till_bundle_end
	bl build1
	emit_nops_till_bundle_end
	bl fold
	b .LBB346_29	@ bb26
.LBB346_9:	@ entry
	cmp r12, #114
	beq .LBB346_18	@ bb15
.LBB346_10:	@ entry
	cmp r12, #120
	bne .LBB346_34	@ bb8
.LBB346_11:	@ bb1
	and r3, r4, #255
	cmp r3, #54
	beq .LBB346_25	@ bb34
	b .LBB346_34	@ bb8
.LBB346_12:	@ bb5
	and r3, r4, #255
	cmp r3, #109
	beq .LBB346_25	@ bb34
.LBB346_13:	@ bb5
	and r3, r4, #255
	cmp r3, #43
	beq .LBB346_34	@ bb8
	.align	2
.LBB346_14:	@ bb25
	ldr r0, [r7, #+20]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r8, r0
	ldr r0, [r7, #+16]
.LBB346_15:	@ bb25
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r2, r0
	ldr r1, [r7, #+4]
	mov r0, r4
	mov r3, r8
	b .LBB346_28	@ bb25
.LBB346_16:	@ bb10
	and r3, r4, #255
	cmp r3, #48
	beq .LBB346_27	@ bb14
.LBB346_17:	@ bb10
	and r3, r4, #255
	cmp r3, #108
	beq .LBB346_25	@ bb34
	b .LBB346_34	@ bb8
.LBB346_18:	@ bb15
	sub r2, r4, #37
	cmp r2, #4
	bhi .LBB346_34	@ bb8
.LBB346_19:	@ bb15
	.set PCRELV27, (.LJTI346_0_0-(.LPCRELL27+8))
.LPCRELL27:
	add r1, pc, #PCRELV27
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI346_0_0:
	.long	 .LBB346_20
	.long	 .LBB346_27
	.long	 .LBB346_8
	.long	 .LBB346_14
	.long	 .LBB346_8

.text
@ JUMP TABLE END



	.align	2
.LBB346_20:	@ bb15.bb18_crit_edge
	mov r2, r7
.LBB346_21:	@ bb18
	ldr r2, [r2, #+16]
	ldrb r1, [r2, #+8]
	ldr r0, [r3, +r1, lsl #2]
	ldrb r0, [r0]
	cmp r0, #114
	beq .LBB346_21	@ bb18
.LBB346_22:	@ bb19
	and r3, r1, #255
	cmp r3, #54
	ldreq r3, [r7, #+20]
	cmpeq r3, r6
	beq .LBB346_24	@ bb20.bb34_crit_edge
	b .LBB346_26	@ bb22
.LBB346_23:	@ bb20
.LBB346_24:	@ bb20.bb34_crit_edge
	mov r7, r5
.LBB346_25:	@ bb34
	mov r0, r7
	b .LBB346_31	@ bb34
.LBB346_26:	@ bb22
	ldr r0, [r7, #+16]
	ldr r8, [r7, #+20]
	b .LBB346_15	@ bb25
	.align	2
.LBB346_27:	@ bb14
	ldr r0, [r7, #+24]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r8, r0
	ldr r0, [r7, #+20]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r9, r0
	ldr r0, [r7, #+16]
	mov r1, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r2, r0
	ldr r1, [r7, #+4]
	@comment
str r8, [sp]
	mov r0, r4
	mov r3, r9
.LBB346_28:	@ bb25
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
.LBB346_29:	@ bb26
	cmp r0, #0
	beq .LBB346_34	@ bb8
.LBB346_30:	@ bb28
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 20 @ 8192
	ldrb r1, [r7, #+8]!
	ldrb r7, [r7, #+1]
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, #2, 20 @ 8192
	and r7, r1, r7, lsl #8
	orr r7, r3, r7
	mov r7, r7, lsr #8
	strb r7, [r2, #+1]
	mov r7, r3, lsr #16
	strb r7, [r0, #+10]
.LBB346_31:	@ bb34
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB346_32:	@ entry
	sub r3, r12, #49
	cmp r3, #2
	blo .LBB346_5	@ bb3
	b .LBB346_34	@ bb8
.LBB346_33:	@ entry
	cmp r12, #60
	beq .LBB346_5	@ bb3
.LBB346_34:	@ bb8
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB346_35:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI346_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI346_1:
 	.long	tree_code_length

	.size substitute_in_expr, .-substitute_in_expr


	.globl	substitute_in_type
	.align	4
substitute_in_type:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	ldrb r3, [r0, #+8]
	sub r3, r3, #6
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r3, #18
	bhi .LBB347_41	@ return
.LBB347_1:	@ entry
	.set PCRELV28, (.LJTI347_0_0-(.LPCRELL28+8))
.LPCRELL28:
	add r2, pc, #PCRELV28
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI347_0_0:
	.long	 .LBB347_17
	.long	 .LBB347_2
	.long	 .LBB347_7
	.long	 .LBB347_18
	.long	 .LBB347_2
	.long	 .LBB347_2
	.long	 .LBB347_2
	.long	 .LBB347_17
	.long	 .LBB347_19
	.long	 .LBB347_19
	.long	 .LBB347_19
	.long	 .LBB347_19
	.long	 .LBB347_20
	.long	 .LBB347_19
	.long	 .LBB347_21
	.long	 .LBB347_21
	.long	 .LBB347_21
	.long	 .LBB347_19
	.long	 .LBB347_19

.text
@ JUMP TABLE END



	.align	2
.LBB347_2:	@ bb1
	ldr r0, [r6, #+52]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	beq .LBB347_4	@ bb3
.LBB347_3:	@ bb2
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	bne .LBB347_6	@ bb5
.LBB347_4:	@ bb3
	ldr r0, [r6, #+56]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	beq .LBB347_17	@ bb43
.LBB347_5:	@ bb4
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	beq .LBB347_17	@ bb43
.LBB347_6:	@ bb5
	ldr r0, [r6, #+56]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r7, r0
	ldr r0, [r6, #+52]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_expr
	mov r1, r0
	mov r0, r6
	mov r2, r7
	emit_nops_till_bundle_end
	bl build_range_type
	b .LBB347_40	@ bb43
	.align	2
.LBB347_7:	@ bb7
	ldr r0, [r6, #+52]
	cmp r0, #0
	ldrneb r3, [r0, #+8]
	cmpne r3, #26
	bne .LBB347_9	@ bb9
	b .LBB347_10	@ bb10
.LBB347_8:	@ bb8
.LBB347_9:	@ bb9
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	bne .LBB347_13	@ bb13
.LBB347_10:	@ bb10
	ldr r0, [r6, #+56]
	cmp r0, #0
	ldrneb r3, [r0, #+8]
	cmpne r3, #26
	bne .LBB347_12	@ bb12
	b .LBB347_17	@ bb43
.LBB347_11:	@ bb11
.LBB347_12:	@ bb12
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	beq .LBB347_17	@ bb43
.LBB347_13:	@ bb13
	ldr r7, [r6, #+64]
	ldr r8, .LCPI347_0
	ldr r9, [r8]
	ldr r3, [r6, #+80]
	@comment
str r3, [r8]
	mov r0, r6
	emit_nops_till_bundle_end
	bl copy_node
	@comment
str r9, [r8]
	mov r6, #0
	@comment
str r6, [r0, #+36]
	@comment
str r6, [r0, #+40]
	ldr r6, [r7, #+60]
	@comment
str r6, [r0, #+60]
	@comment
str r0, [r7, #+60]
	ldr r3, [r0, #+52]
	mov r6, r0
	cmp r3, #0
	beq .LBB347_15	@ bb15
.LBB347_14:	@ bb14
	mov r0, r3
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_expr
	@comment
str r0, [r6, #+52]
.LBB347_15:	@ bb15
	ldr r0, [r6, #+56]
	cmp r0, #0
	beq .LBB347_17	@ bb43
.LBB347_16:	@ bb16
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_expr
	@comment
str r0, [r6, #+56]
	.align	2
.LBB347_17:	@ bb43
	mov r0, r6
	b .LBB347_40	@ bb43
	.align	2
.LBB347_18:	@ bb18
	ldr r0, [r6, #+4]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_type
	emit_nops_till_bundle_end
	bl build_complex_type
	b .LBB347_40	@ bb43
	.align	2
.LBB347_19:	@ bb19
	emit_nops_till_bundle_end
	bl abort
	.align	2
.LBB347_20:	@ bb20
	ldr r0, [r6, #+12]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_type
	mov r7, r0
	ldr r0, [r6, #+4]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_type
	mov r1, r7
	emit_nops_till_bundle_end
	bl build_array_type
	mov r4, r0
	mov r5, #0
	@comment
str r5, [r4, #+16]
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r4
	b .LBB347_40	@ bb43
	.align	2
.LBB347_21:	@ bb21
	mov r0, r6
	emit_nops_till_bundle_end
	bl copy_node
	mov r7, #0
	@comment
str r7, [r0, #+12]
	@comment
str r7, [r0, #+16]
	add r8, r6, #12
	mov r9, r0
	mov r10, #0
	b .LBB347_34	@ bb36
.LBB347_22:	@ bb22
	mov r0, r8
	emit_nops_till_bundle_end
	bl copy_node
	mov r11, r0
	ldr r0, [r11, #+4]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_type
	@comment
str r0, [r11, #+4]
	ldrb r3, [r6, #+8]
	cmp r3, #22
	beq .LBB347_28	@ bb28
.LBB347_23:	@ bb23
	ldr r3, [r11, #+32]
	cmp r3, #0
	bne .LBB347_28	@ bb28
.LBB347_24:	@ bb24
	ldrb r3, [r0, #+8]
	sub r3, r3, #20
	and r3, r3, #255
	cmp r3, #1
	bhi .LBB347_28	@ bb28
.LBB347_25:	@ bb25
	ldr r3, [r0, #+12]
	cmp r3, #0
	beq .LBB347_34	@ bb36
.LBB347_26:	@ bb26
	ldr r2, [r3]
	cmp r2, #0
	moveq r11, r3
.LBB347_27:	@ bb27
.LBB347_28:	@ bb28
	@comment
str r9, [r11, #+36]
	@comment
str r10, [r11, #+20]
	ldrb r3, [r6, #+8]
	cmp r3, #22
	bne .LBB347_30	@ bb30
.LBB347_29:	@ bb29
	ldr r0, [r8, #+48]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl substitute_in_expr
	@comment
str r0, [r11, #+48]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB347_34	@ bb36
.LBB347_30:	@ bb30
	cmp r7, #0
	@comment
strne r11, [r7]
	@comment
streq r11, [r9, #+12]
	b .LBB347_32	@ bb33
.LBB347_31:	@ bb32
.LBB347_32:	@ bb33
	ldrb r7, [r6, #+8]
	cmp r7, #22
	beq .LBB347_43	@ bb34
.LBB347_33:	@ bb33.bb35_crit_edge
	mov r7, r11
.LBB347_34:	@ bb36
	ldr r8, [r8]
	cmp r8, #0
	bne .LBB347_22	@ bb22
.LBB347_35:	@ bb37
	ldrb r6, [r9, #+8]
	cmp r6, #22
	bne .LBB347_39	@ bb41
.LBB347_36:	@ bb38
	ldr r6, [r9, #+12]
	cmp r6, #0
	beq .LBB347_38	@ bb40
.LBB347_37:	@ bb39
	ldr r0, [r6, #+48]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	movne r6, #21
	strneb r6, [r9, #+8]
	b .LBB347_39	@ bb41
.LBB347_38:	@ bb40
	mov r6, #21
	strb r6, [r9, #+8]
.LBB347_39:	@ bb41
	mov r0, r9
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r9
.LBB347_40:	@ bb43
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB347_41:	@ return
	@ implicit-def: r0
	b .LBB347_40	@ bb43
.LBB347_42:	@ bb31
.LBB347_43:	@ bb34
	ldr r0, [r11, #+48]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	beq .LBB347_33	@ bb33.bb35_crit_edge
	b .LBB347_35	@ bb37
	.align	4
.LBB347_44:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI347_0:
 	.long	current_obstack

	.size substitute_in_type, .-substitute_in_type


	.globl	save_expr
	.align	4
save_expr:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	mov r4, r0
	emit_nops_till_bundle_end
	bl fold
	b .LBB348_2	@ bb
.LBB348_1:	@ bb
	ldr r0, [r0, #+16]
.LBB348_2:	@ bb
	ldrb r3, [r0, #+8]
	cmp r3, #107
	beq .LBB348_1	@ bb
.LBB348_3:	@ bb2
	mov r5, r0
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	tst r3, #2, 24 @ 512
	bne .LBB348_9	@ bb22
.LBB348_4:	@ bb6
	tst r3, #2, 20 @ 8192
	beq .LBB348_6	@ bb16
.LBB348_5:	@ bb11
	tst r3, #1, 24 @ 256
	beq .LBB348_9	@ bb22
.LBB348_6:	@ bb16
	ldrb r3, [r5, #+8]
	cmp r3, #0
	andne r3, r3, #255
	cmpne r3, #108
	bne .LBB348_8	@ bb19
	b .LBB348_9	@ bb22
.LBB348_7:	@ bb16
.LBB348_8:	@ bb19
	mov r0, r5
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	beq .LBB348_11	@ bb21
.LBB348_9:	@ bb22
	mov r0, r5
.LBB348_10:	@ bb22
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB348_11:	@ bb21
	ldr r3, .LCPI348_0
	ldr r3, [r3]
	ldr r1, [r4, #+4]
	mov r2, #0
	@comment
str r2, [sp]
	mov r0, #108
	mov r2, r5
	emit_nops_till_bundle_end
	bl build
	ldrb r5, [r0, #+10]
	mov r3, r0
	ldrb r2, [r3, #+8]!
	ldrb r1, [r3, #+3]
	orr r5, r5, r1, lsl #8
	ldrb r1, [r3, #+1]
	orr r1, r2, r1, lsl #8
	orr r5, r1, r5, lsl #16
	orr r5, r5, #1, 24 @ 256
	mov r5, r5, lsr #8
	strb r5, [r3, #+1]
	strb r2, [r3]
	b .LBB348_10	@ bb22
	.align	4
.LBB348_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI348_0:
 	.long	current_function_decl

	.size save_expr, .-save_expr


	.globl	stabilize_reference_1
	.align	4
stabilize_reference_1:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r12, [r2, #+2]
	orr r1, r12, r1, lsl #8
	orr r3, r3, r1, lsl #16
	ldrb r4, [r2]
	mov r5, r0
	tst r3, #2, 24 @ 512
	bne .LBB349_14	@ bb60
.LBB349_1:	@ entry
	and r2, r4, #255
	cmp r2, #108
	beq .LBB349_14	@ bb60
.LBB349_2:	@ bb6
	ldr r2, .LCPI349_0
	ldr r2, [r2]
	ldr r2, [r2, +r4, lsl #2]
	ldrsb r2, [r2]
	cmp r2, #59
	bgt .LBB349_7	@ bb6
.LBB349_3:	@ bb6
	cmp r2, #49
	beq .LBB349_12	@ bb33
.LBB349_4:	@ bb6
	cmp r2, #50
	bne .LBB349_18	@ bb34
.LBB349_5:	@ bb15
	sub r3, r4, #59
	and r3, r3, #255
	cmp r3, #7
	bls .LBB349_11	@ bb12
.LBB349_6:	@ bb32
	ldr r0, [r5, #+20]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r6, r0
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r1, r0
	mov r0, r4
	mov r2, r6
	emit_nops_till_bundle_end
	bl build_nt
	b .LBB349_13	@ bb35
.LBB349_7:	@ bb6
	cmp r2, #97
	ble .LBB349_16	@ bb6
.LBB349_8:	@ bb6
	sub r4, r2, #98
	cmp r4, #22
	bhi .LBB349_18	@ bb34
.LBB349_9:	@ bb6
	mov r2, #1
	mov r1, #13
	orr r1, r1, #71, 16 @ 4653056
	tst r1, r2, lsl r4
	beq .LBB349_17	@ bb6
.LBB349_10:	@ bb7
	tst r3, #1, 24 @ 256
	beq .LBB349_14	@ bb60
.LBB349_11:	@ bb12
	mov r0, r5
	emit_nops_till_bundle_end
	bl save_expr
	b .LBB349_15	@ bb60
.LBB349_12:	@ bb33
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_nt
.LBB349_13:	@ bb35
	ldr r3, [r5, #+4]
	@comment
str r3, [r0, #+4]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 20 @ 8192
	ldrb r1, [r5, #+8]!
	ldrb r1, [r5, #+1]
	mov r12, r5
	ldrb lr, [r12, #+2]!
	strb r3, [r2]
	mov lr, #2, 20 @ 8192
	and r1, lr, r1, lsl #8
	orr r1, r3, r1
	mov lr, r1, lsr #8
	strb lr, [r2, #+1]
	mov lr, r3, lsr #24
	strb lr, [r0, #+11]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	bic r3, r1, #1, 24 @ 256
	ldrb r1, [r5, #+1]
	strb r3, [r2]
	mov lr, #1, 24 @ 256
	and r1, lr, r1, lsl #8
	orr r1, r3, r1
	mov lr, r1, lsr #8
	strb lr, [r2, #+1]
	mov lr, r3, lsr #24
	strb lr, [r0, #+11]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	bic r3, r1, #1, 20 @ 4096
	ldrb r5, [r5, #+1]
	strb r3, [r2]
	mov r1, #1, 20 @ 4096
	and r5, r1, r5, lsl #8
	orr r5, r3, r5
	mov r1, r5, lsr #8
	strb r1, [r2, #+1]
	mov r1, r3, lsr #24
	strb r1, [r0, #+11]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	bic r5, r5, #2, 16 @ 131072
	mov r3, r5, lsr #8
	ldrb r1, [r12]
	strb r3, [r2, #+1]
	strb r5, [r2]
	mov r3, r5, lsr #24
	strb r3, [r0, #+11]
	mov r3, #2, 16 @ 131072
	and r3, r3, r1, lsl #16
	orr r5, r5, r3
	mov r5, r5, lsr #16
	strb r5, [r0, #+10]
	b .LBB349_15	@ bb60
.LBB349_14:	@ bb60
	mov r0, r5
.LBB349_15:	@ bb60
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB349_16:	@ bb6
	cmp r2, #60
	beq .LBB349_10	@ bb7
	b .LBB349_18	@ bb34
.LBB349_17:	@ bb6
	mov r3, #1
	mov r2, #2
	tst r2, r3, lsl r4
	bne .LBB349_14	@ bb60
.LBB349_18:	@ bb34
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB349_19:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI349_0:
 	.long	tree_code_type

	.size stabilize_reference_1, .-stabilize_reference_1


	.globl	stabilize_reference
	.align	4
stabilize_reference:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	ldrb r4, [r0, #+8]
	mov r5, r0
	cmp r4, #36
	ble .LBB350_19	@ entry
.LBB350_1:	@ entry
	cmp r4, #104
	bgt .LBB350_6	@ entry
.LBB350_2:	@ entry
	cmp r4, #68
	bgt .LBB350_16	@ entry
.LBB350_3:	@ entry
	sub r4, r4, #37
	cmp r4, #7
	bhi .LBB350_17	@ bb34
.LBB350_4:	@ entry
	.set PCRELV29, (.LJTI350_0_0-(.LPCRELL29+8))
.LPCRELL29:
	add r3, pc, #PCRELV29
	ldr pc, [r3, +r4, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI350_0_0:
	.long	 .LBB350_9
	.long	 .LBB350_14
	.long	 .LBB350_5
	.long	 .LBB350_17
	.long	 .LBB350_17
	.long	 .LBB350_11
	.long	 .LBB350_17
	.long	 .LBB350_12

.text
@ JUMP TABLE END



	.align	2
.LBB350_5:	@ bb2
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r1, r0
	mov r0, #39
	emit_nops_till_bundle_end
	bl build_nt
	b .LBB350_15	@ bb10
.LBB350_6:	@ entry
	cmp r4, #109
	beq .LBB350_13	@ bb7
.LBB350_7:	@ entry
	sub r3, r4, #105
	cmp r3, #1
	bhi .LBB350_17	@ bb34
.LBB350_8:	@ bb1
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_nt
	b .LBB350_15	@ bb10
	.align	2
.LBB350_9:	@ bb3
	ldr r0, [r5, #+16]
	ldr r4, [r5, #+20]
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r1, r0
	mov r0, #37
.LBB350_10:	@ bb3
	mov r2, r4
	emit_nops_till_bundle_end
	bl build_nt
	b .LBB350_15	@ bb10
	.align	2
.LBB350_11:	@ bb5
	ldr r0, [r5, #+20]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r4, r0
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r1, r0
	mov r0, #42
	b .LBB350_10	@ bb3
	.align	2
.LBB350_12:	@ bb6
	ldr r0, [r5, #+20]
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r4, r0
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r1, r0
	mov r0, #44
	b .LBB350_10	@ bb3
.LBB350_13:	@ bb7
	ldr r0, [r5, #+4]
	emit_nops_till_bundle_end
	bl build_pointer_type
	mov r1, r0
	mov r0, #110
	mov r2, r5
	emit_nops_till_bundle_end
	bl build1
	emit_nops_till_bundle_end
	bl save_expr
	mov r2, r0
	ldr r1, [r5, #+4]
	mov r0, #39
	emit_nops_till_bundle_end
	bl build1
	b .LBB350_15	@ bb10
	.align	2
.LBB350_14:	@ bb4
	ldr r0, [r5, #+24]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r4, r0
	ldr r0, [r5, #+20]
	emit_nops_till_bundle_end
	bl stabilize_reference_1
	mov r6, r0
	ldr r0, [r5, #+16]
	emit_nops_till_bundle_end
	bl stabilize_reference
	mov r1, r0
	mov r0, #38
	mov r2, r6
	mov r3, r4
	emit_nops_till_bundle_end
	bl build_nt
.LBB350_15:	@ bb10
	ldr r3, [r5, #+4]
	@comment
str r3, [r0, #+4]
	ldrb r3, [r0, #+11]
	ldrb r2, [r0, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 20 @ 8192
	ldrb r1, [r5, #+8]!
	ldrb r1, [r5, #+1]
	mov r12, r5
	ldrb lr, [r12, #+2]!
	strb r3, [r2]
	mov lr, #2, 20 @ 8192
	and r1, lr, r1, lsl #8
	orr r1, r3, r1
	mov lr, r1, lsr #8
	strb lr, [r2, #+1]
	mov lr, r3, lsr #24
	strb lr, [r0, #+11]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	bic r3, r1, #1, 24 @ 256
	ldrb r1, [r5, #+1]
	strb r3, [r2]
	mov lr, #1, 24 @ 256
	and r1, lr, r1, lsl #8
	orr r1, r3, r1
	mov lr, r1, lsr #8
	strb lr, [r2, #+1]
	mov lr, r3, lsr #24
	strb lr, [r0, #+11]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	bic r3, r1, #1, 20 @ 4096
	ldrb r5, [r5, #+1]
	strb r3, [r2]
	mov r1, #1, 20 @ 4096
	and r5, r1, r5, lsl #8
	orr r5, r3, r5
	mov r1, r5, lsr #8
	strb r1, [r2, #+1]
	mov r1, r3, lsr #24
	strb r1, [r0, #+11]
	mov r3, r3, lsr #16
	strb r3, [r0, #+10]
	bic r5, r5, #2, 16 @ 131072
	mov r3, r5, lsr #8
	ldrb r1, [r12]
	strb r3, [r2, #+1]
	strb r5, [r2]
	mov r3, r5, lsr #24
	strb r3, [r0, #+11]
	mov r3, #2, 16 @ 131072
	and r3, r3, r1, lsl #16
	orr r5, r5, r3
	mov r5, r5, lsr #16
	strb r5, [r0, #+10]
	b .LBB350_18	@ bb34
.LBB350_16:	@ entry
	sub r3, r4, #69
	cmp r3, #5
	blo .LBB350_8	@ bb1
	.align	2
.LBB350_17:	@ bb34
	mov r0, r5
.LBB350_18:	@ bb34
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB350_19:	@ entry
	cmp r4, #0
	bne .LBB350_17	@ bb34
.LBB350_20:	@ bb9
	ldr r5, .LCPI350_0
	ldr r0, [r5]
	b .LBB350_18	@ bb34
	.align	4
.LBB350_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI350_0:
 	.long	error_mark_node

	.size stabilize_reference, .-stabilize_reference


	.globl	array_type_nelts
	.align	4
array_type_nelts:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r4, [r0, #+12]
	ldr r5, [r4, #+52]
	mov r0, r5
	emit_nops_till_bundle_end
	bl integer_zerop
	ldr r2, [r4, #+56]
	cmp r0, #0
	beq .LBB351_3	@ bb1
.LBB351_1:	@ bb
	mov r0, r2
.LBB351_2:	@ bb
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB351_3:	@ bb1
	ldr r1, [r2, #+4]
	mov r0, #57
	mov r3, r5
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
	b .LBB351_2	@ bb
	.size array_type_nelts, .-array_type_nelts


	.globl	build_tree_list
	.align	4
build_tree_list:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #3
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+12]
	@comment
str r4, [r0, #+16]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.size build_tree_list, .-build_tree_list


	.globl	build_decl_list
	.align	4
build_decl_list:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r1
	mov r5, r0
	ldr r6, .LCPI353_0
	ldr r7, [r6]
	ldr r3, .LCPI353_1
	@comment
str r3, [r6]
	mov r0, #3
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+12]
	@comment
str r4, [r0, #+16]
	@comment
str r7, [r6]
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB353_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI353_0:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI353_1:
 	.long	temp_decl_obstack

	.size build_decl_list, .-build_decl_list


	.globl	build_complex
	.align	4
build_complex:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #27
	emit_nops_till_bundle_end
	bl make_node
	mov r6, r0
	@comment
str r5, [r6, #+16]
	@comment
str r4, [r6, #+20]
	ldr r0, [r5, #+4]
	emit_nops_till_bundle_end
	bl build_complex_type
	@comment
str r0, [r6, #+4]
	ldrb r3, [r4, #+8]!
	ldrb r3, [r4, #+1]
	ldrb r3, [r5, #+8]!
	ldrb r3, [r5, #+1]
	mov r3, r4
	ldrb r2, [r3, #+2]!
	ldrb r1, [r3, #+1]
	mov r1, r5
	ldrb r0, [r1, #+2]!
	ldrb r12, [r1, #+1]
	ldrb r12, [r6, #+11]
	ldrb lr, [r6, #+10]
	orr r12, lr, r12, lsl #8
	mov lr, r6
	ldrb r7, [lr, #+8]!
	ldrb r8, [lr, #+1]
	orr r7, r7, r8, lsl #8
	orr r12, r7, r12, lsl #16
	bic r12, r12, #2, 14 @ 524288
	strb r12, [lr]
	mov r7, r12, lsr #8
	strb r7, [lr, #+1]
	mov r7, r12, lsr #24
	strb r7, [r6, #+11]
	orr r2, r2, r0
	mov r0, #2, 14 @ 524288
	and r2, r0, r2, lsl #16
	orr r2, r12, r2
	mov r0, r2, lsr #16
	strb r0, [r6, #+10]
	ldrb r0, [r3, #+1]
	ldrb r0, [r4, #+1]
	ldrb r0, [r1, #+1]
	ldrb r0, [r5, #+1]
	bic r2, r2, #1, 14 @ 262144
	mov r0, r2, lsr #8
	ldrb r3, [r3]
	ldrb r1, [r1]
	strb r0, [lr, #+1]
	strb r2, [lr]
	mov r0, r2, lsr #24
	strb r0, [r6, #+11]
	orr r3, r3, r1
	mov r1, #1, 14 @ 262144
	and r3, r1, r3, lsl #16
	orr r3, r2, r3
	mov r3, r3, lsr #16
	strb r3, [r6, #+10]
	mov r0, r6
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
	.size build_complex, .-build_complex


	.globl	build_string
	.align	4
build_string:
	sfi_sub sp, sp, #24
	stmea sp, {r4, r5, r6, r7, r8, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #28
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+16]
	ldr r3, .LCPI355_0
	ldr r6, [r3]
	ldr r3, [r6, #+12]
	add r7, r5, #1
	add r3, r3, r7
	ldr r2, [r6, #+16]
	mov r8, r0
	cmp r3, r2
	movhi r0, r6
	movhi r1, r7
	emit_nops_till_bundle_end
	blhi _obstack_newchunk
.LBB355_1:	@ bb
.LBB355_2:	@ bb1
	ldrb r3, [r6, #+40]
	tst r3, #4
	bne .LBB355_4	@ bb6
.LBB355_3:	@ bb5
	ldr r0, [r6, #+12]
	mov r1, r4
	mov r2, r5
	emit_nops_till_bundle_end
	bl memcpy
	ldr r3, [r6, #+12]
	add r2, r3, r5
	@comment
str r2, [r6, #+12]
	mov r2, #0
	strb r2, [r3, +r5]
	add r3, r3, r7
	@comment
str r3, [r6, #+12]
.LBB355_4:	@ bb6
	ldrb r3, [r6, #+40]
	tst r3, #4
	bne .LBB355_11	@ bb6.bb18_crit_edge
.LBB355_5:	@ bb12
	ldr r1, [r6, #+12]
	ldr r2, [r6, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	streqb r3, [r6, #+40]
.LBB355_6:	@ bb13
.LBB355_7:	@ bb14
	ldr r3, [r6, #+24]
	add r1, r1, r3
	bic r3, r1, r3
	@comment
str r3, [r6, #+12]
	ldr r1, [r6, #+4]
	ldr r0, [r6, #+16]
	sub r12, r0, r1
	sub r1, r3, r1
	cmp r1, r12
	@comment
strgt r0, [r6, #+12]
	movgt r3, r0
.LBB355_8:	@ bb16
.LBB355_9:	@ bb17
	@comment
str r3, [r6, #+8]
.LBB355_10:	@ bb18
	@comment
str r2, [r8, #+20]
	mov r0, r8
	ldmfd sp, {r4, r5, r6, r7, r8, lr}
	sfi_add sp, sp, #24
	sfi_bx lr
.LBB355_11:	@ bb6.bb18_crit_edge
	mov r2, #0
	b .LBB355_10	@ bb18
	.align	4
.LBB355_12:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI355_0:
 	.long	saveable_obstack

	.size build_string, .-build_string


	.globl	build_real_from_int_cst
	.align	4
build_real_from_int_cst:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_sub sp, sp, #160
	mov r4, r1
	mov r5, r0
	ldrb r6, [r4, #+9]
	mov r3, r4
	ldrb r7, [r3, #+8]!
	ldrb r8, [r3, #+3]
	ldrb r9, [r3, #+2]
	mov r0, #26
	emit_nops_till_bundle_end
	bl make_node
	mov r10, r0
	@comment
str r5, [r10, #+4]
	mov r0, sp
	emit_nops_till_bundle_end
	bl _setjmp
	orr r3, r7, r6, lsl #8
	orr r2, r9, r8, lsl #8
	orr r6, r3, r2, lsl #16
	cmp r0, #0
	bne .LBB356_8	@ bb
.LBB356_1:	@ bb6
	mov r0, sp
	emit_nops_till_bundle_end
	bl set_float_handler
	ldrsb r3, [r5, #+29]
	ldr r2, .LCPI356_1
	ldr r3, [r2, +r3, lsl #2]
	bic r5, r3, #14, 4 @ -536870912
	ldr r0, [r4, #+16]
	cmp r0, #0
	bge .LBB356_3	@ bb11.i
.LBB356_2:	@ bb.i
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+9]
	tst r3, #64
	beq .LBB356_9	@ bb4.i
.LBB356_3:	@ bb11.i
	emit_nops_till_bundle_end
	bl __floatunsidf
	mov r2, #0
	mov r3, #31, 12 @ 32505856
	orr r3, r3, #1, 2 @ 1073741824
	emit_nops_till_bundle_end
	bl __muldf3
	mov r7, r0
	mov r8, r1
	ldr r0, [r4, #+12]
	emit_nops_till_bundle_end
	bl __floatunsidf
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	emit_nops_till_bundle_end
	bl __adddf3
.LBB356_4:	@ real_value_from_int_cst.exit
	cmp r5, #4
	bne .LBB356_6	@ bb10
.LBB356_5:	@ bb8
	emit_nops_till_bundle_end
	bl __truncdfsf2
	emit_nops_till_bundle_end
	bl __extendsfdf2
.LBB356_6:	@ bb10
	mov r4, #1, 14 @ 262144
	and r4, r4, r6, lsr #1
.LBB356_7:	@ got_it
	mov r5, r0
	mov r6, r1
	mov r0, #0
	emit_nops_till_bundle_end
	bl set_float_handler
	@comment
str r6, [r10, #+20]
	@comment
str r5, [r10, #+16]
	ldrb r3, [r10, #+11]
	ldrb r2, [r10, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r10
	ldrb r1, [r2, #+8]!
	ldrb r0, [r2, #+1]
	orr r1, r1, r0, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #3, 14 @ 786432
	bic r1, r4, #2, 14 @ 524288
	orr r3, r3, r1
	strb r3, [r2]
	mov r1, r3, lsr #8
	strb r1, [r2, #+1]
	mov r2, r3, lsr #24
	strb r2, [r10, #+11]
	mov r2, #2, 14 @ 524288
	and r2, r2, r4, lsl #1
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r10, #+10]
	mov r0, r10
	sfi_add sp, sp, #160
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB356_8:	@ bb
	ldr r4, .LCPI356_0
	ldmia r4, {r0, r1}
	mov r4, #1, 14 @ 262144
	b .LBB356_7	@ got_it
.LBB356_9:	@ bb4.i
	mvn r0, r0
	emit_nops_till_bundle_end
	bl __floatsidf
	mov r7, #0
	mov r3, #31, 12 @ 32505856
	orr r3, r3, #1, 2 @ 1073741824
	mov r2, #0
	emit_nops_till_bundle_end
	bl __muldf3
	mov r8, r0
	mov r9, r1
	ldr r4, [r4, #+12]
	mvn r0, r4
	emit_nops_till_bundle_end
	bl __floatunsidf
	mov r2, r0
	mov r3, r1
	mov r0, r8
	mov r1, r9
	emit_nops_till_bundle_end
	bl __adddf3
	mov r2, r0
	mov r3, r1
	mov r1, #255, 12 @ 267386880
	orr r1, r1, #11, 4 @ -1342177280
	mov r0, r7
	emit_nops_till_bundle_end
	bl __subdf3
	b .LBB356_4	@ real_value_from_int_cst.exit
	.align	4
.LBB356_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI356_0:
 	.long	dconst0

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI356_1:
 	.long	mode_size

	.size build_real_from_int_cst, .-build_real_from_int_cst


	.globl	build_real
	.align	4
build_real:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r0, #26
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r6, [r0, #+4]
	@comment
str r4, [r0, #+20]
	@comment
str r5, [r0, #+16]
	ldrb r3, [r0, #+9]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r12, [r2, #+2]
	orr r1, r12, r1, lsl #8
	orr r3, r3, r1, lsl #16
	bic r3, r3, #3, 14 @ 786432
	strb r3, [r2]
	mov r1, r3, lsr #24
	strb r1, [r2, #+3]
	mov r1, r3, lsr #16
	strb r1, [r2, #+2]
	mov r3, r3, lsr #8
	strb r3, [r0, #+9]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.size build_real, .-build_real


	.globl	build_int_2_wide
	.align	4
build_int_2_wide:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r0, #25
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+12]
	@comment
str r4, [r0, #+16]
	ldr r3, .LCPI358_0
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
	.align	4
.LBB358_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI358_0:
 	.long	integer_type_node

	.size build_int_2_wide, .-build_int_2_wide


	.globl	build_index_type
	.align	4
build_index_type:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r0
	mov r0, #7
	emit_nops_till_bundle_end
	bl make_node
	mov r5, r0
	ldr r6, .LCPI359_0
	ldr r3, [r6]
	ldrb r3, [r3, #+28]
	strb r3, [r5, #+28]
	mov r0, #25
	emit_nops_till_bundle_end
	bl make_node
	mov r3, #0
	@comment
str r3, [r0, #+12]
	@comment
str r3, [r0, #+16]
	ldr r3, .LCPI359_1
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	@comment
str r0, [r5, #+52]
	ldr r3, [r6]
	@comment
str r3, [r0, #+4]
	ldr r0, [r6]
	mov r1, r4
	emit_nops_till_bundle_end
	bl convert
	@comment
str r0, [r5, #+56]
	ldrb r3, [r5, #+29]
	ldr r3, [r6]
	ldrb r2, [r3, #+28]!
	ldrb r3, [r3, #+1]
	strb r3, [r5, #+29]
	ldr r3, [r6]
	ldr r3, [r3, #+16]
	@comment
str r3, [r5, #+16]
	ldr r3, [r6]
	ldr r3, [r3, #+32]
	@comment
str r3, [r5, #+32]
	ldrb r3, [r4, #+8]
	cmp r3, #25
	bne .LBB359_15	@ type_hash_canon.exit
.LBB359_1:	@ bb
	ldr r3, .LCPI359_2
	ldr r3, [r3]
	ldr r2, [r3, #+16]
	ldr r1, [r4, #+16]
	ldr r4, [r4, #+12]
	cmp r1, r2
	blt .LBB359_4	@ bb3
.LBB359_2:	@ bb1
	cmp r1, r2
	bne .LBB359_5	@ bb4
.LBB359_3:	@ bb2
	ldr r3, [r3, #+12]
	cmp r4, r3
	bhs .LBB359_5	@ bb4
.LBB359_4:	@ bb3
	mov r0, #25
	emit_nops_till_bundle_end
	bl make_node
	mvn r3, #0
	@comment
str r3, [r0, #+12]
	@comment
str r3, [r0, #+16]
	ldr r3, .LCPI359_1
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
	@comment
str r0, [r5, #+56]
	ldr r3, .LCPI359_0
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
.LBB359_5:	@ bb4
	ldr r3, .LCPI359_3
	ldr r3, [r3]
	eor r4, r4, r4, asr #31
	cmp r3, #0
	bne .LBB359_15	@ type_hash_canon.exit
.LBB359_6:	@ bb1.i
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl type_hash_lookup
	mov r6, r0
	cmp r0, #0
	beq .LBB359_13	@ bb7.i
.LBB359_7:	@ bb2.i
	ldr r0, [r5, #+80]
	ldr r4, [r0, #+4]
	cmp r4, r5
	bhs .LBB359_12	@ bb5.i
.LBB359_8:	@ bb3.i
	ldr r4, [r0, #+16]
	cmp r4, r5
	bls .LBB359_12	@ bb5.i
.LBB359_9:	@ bb4.i
	@comment
str r5, [r0, #+8]
	@comment
str r5, [r0, #+12]
.LBB359_10:	@ bb4.i
	mov r0, r6
.LBB359_11:	@ bb4.i
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB359_12:	@ bb5.i
	mov r1, r5
	emit_nops_till_bundle_end
	bl obstack_free
	b .LBB359_10	@ bb4.i
.LBB359_13:	@ bb7.i
	ldrb r3, [r5, #+9]
	tst r3, #4
	beq .LBB359_15	@ type_hash_canon.exit
.LBB359_14:	@ bb11.i
	mov r0, #12
	emit_nops_till_bundle_end
	bl oballoc
	stmib r0, {r4, r5}
	ldr r3, .LCPI359_4
	smull r3, r2, r4, r3
	mov r3, r2, asr #3
	add r3, r3, r2, lsr #31
	mov r2, #59
	mul r3, r3, r2
	sub r3, r4, r3
	ldr r2, .LCPI359_5
	ldr r1, [r2, +r3, lsl #2]
	@comment
str r1, [r0]
	@comment
str r0, [r2, +r3, lsl #2]
.LBB359_15:	@ type_hash_canon.exit
	mov r0, r5
	b .LBB359_11	@ bb4.i
	.align	4
.LBB359_16:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI359_0:
 	.long	sizetype

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI359_1:
 	.long	integer_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI359_2:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI359_3:
 	.long	debug_no_type_hash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI359_4:
 	.long	582368447			@ 0x22B63CBF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI359_5:
 	.long	type_hash_table

	.size build_index_type, .-build_index_type


	.globl	get_identifier
	.align	4
get_identifier:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	ldrb r3, [r0]
	mov r4, r0
	cmp r3, #0
	beq .LBB360_36	@ entry.bb2_crit_edge
.LBB360_1:	@ entry.bb_crit_edge
	mov r2, r4
.LBB360_2:	@ bb
	ldrb r5, [r2, #+1]!
	cmp r5, #0
	bne .LBB360_2	@ bb
.LBB360_3:	@ bb2.loopexit
	sub r5, r2, r4
.LBB360_4:	@ bb2
	ldr r2, .LCPI360_0
	ldr r2, [r2]
	cmp r2, #0
	ldrne r2, .LCPI360_1
	ldrne r2, [r2]
	cmpne r5, r2
	bhi .LBB360_6	@ bb4
	b .LBB360_37	@ bb2.bb7.preheader_crit_edge
.LBB360_5:	@ bb3
.LBB360_6:	@ bb4
	mov r1, r2
.LBB360_7:	@ bb7.preheader
	mov r0, #101
	orr r0, r0, #2, 24 @ 512
	mul r1, r1, r0
	mov r3, r3, lsl #24
	add r3, r1, r3, asr #24
	cmp r2, #1
	ble .LBB360_10	@ bb8
.LBB360_8:	@ bb7.preheader.bb6_crit_edge
	mov r1, #1
	mov r0, #101
	orr r0, r0, #2, 24 @ 512
.LBB360_9:	@ bb6
	ldrsb r12, [r4, +r1]
	mla r3, r3, r0, r12
	add r1, r1, #2
	cmp r1, r2
	blt .LBB360_9	@ bb6
.LBB360_10:	@ bb8
	bic r3, r3, #3, 2 @ -1073741824
	ldr r2, .LCPI360_2
	umull r1, r2, r3, r2
	sub r1, r3, r2
	add r2, r2, r1, lsr #1
	mov r2, r2, lsr #9
	mov r1, #241
	orr r1, r1, #3, 24 @ 768
	mul r2, r2, r1
	sub r3, r3, r2
	ldr r2, .LCPI360_3
	add r6, r2, r3, lsl #2
	mov r7, r6
	b .LBB360_14	@ bb14
.LBB360_11:	@ bb9
	ldr r3, [r7, #+12]
	cmp r3, r5
	ldreq r0, [r7, #+16]
	ldreqb r3, [r0]
	ldreqb r2, [r4]
	cmpeq r3, r2
	beq .LBB360_13	@ bb11
	b .LBB360_14	@ bb14
.LBB360_12:	@ bb10
.LBB360_13:	@ bb11
	mov r1, r4
	mov r2, r5
	emit_nops_till_bundle_end
	bl memcmp
	cmp r0, #0
	beq .LBB360_34	@ bb45
.LBB360_14:	@ bb14
	ldr r7, [r7]
	cmp r7, #0
	bne .LBB360_11	@ bb9
.LBB360_15:	@ bb15
	ldr r7, .LCPI360_0
	ldr r7, [r7]
	cmp r7, #0
	beq .LBB360_22	@ bb23
.LBB360_16:	@ bb16
	ldr r7, .LCPI360_4
	ldrb r7, [r7]
	teq r7, #1
	bne .LBB360_22	@ bb23
.LBB360_17:	@ bb17
	ldr r7, .LCPI360_1
	ldr r7, [r7]
	cmp r5, r7
	blo .LBB360_22	@ bb23
.LBB360_18:	@ bb17.bb22_crit_edge
	mov r7, r6
.LBB360_19:	@ bb22
	ldr r7, [r7]
	cmp r7, #0
	beq .LBB360_22	@ bb23
.LBB360_20:	@ bb19
	ldr r3, .LCPI360_1
	ldr r2, [r3]
	ldr r0, [r7, #+16]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strncmp
	cmp r0, #0
	bne .LBB360_19	@ bb22
.LBB360_21:	@ bb20
	ldr r3, .LCPI360_1
	ldr r3, [r3]
	ldr r1, [r7, #+16]
	ldr r0, .LCPI360_5
	mov r2, r4
	emit_nops_till_bundle_end
	bl warning
.LBB360_22:	@ bb23
	ldr r7, .LCPI360_6
	ldr r7, [r7]
	ldr r7, [r7, #+4]
	cmp r7, #0
	blt .LBB360_38	@ bb24
.LBB360_23:	@ bb25
	mov r0, #1
	emit_nops_till_bundle_end
	bl make_node
	@comment
str r5, [r0, #+12]
	ldr r7, .LCPI360_7
	ldr r3, [r7, #+12]
	add r8, r5, #1
	add r3, r3, r8
	ldr r7, [r7, #+16]
	mov r9, r0
	cmp r3, r7
	ldrhi r0, .LCPI360_7
	movhi r1, r8
	emit_nops_till_bundle_end
	blhi _obstack_newchunk
.LBB360_24:	@ bb26
.LBB360_25:	@ bb27
	ldr r7, .LCPI360_7
	ldrb r7, [r7, #+40]
	tst r7, #4
	bne .LBB360_27	@ bb32
.LBB360_26:	@ bb31
	ldr r7, .LCPI360_7
	ldr r0, [r7, #+12]
	mov r1, r4
	mov r2, r5
	emit_nops_till_bundle_end
	bl memcpy
	ldr r3, [r7, #+12]
	add r2, r3, r5
	@comment
str r2, [r7, #+12]
	mov r2, #0
	strb r2, [r3, +r5]
	add r3, r3, r8
	@comment
str r3, [r7, #+12]
.LBB360_27:	@ bb32
	ldr r7, .LCPI360_7
	ldrb r7, [r7, #+40]
	tst r7, #4
	bne .LBB360_39	@ bb32.bb44_crit_edge
.LBB360_28:	@ bb38
	ldr r3, .LCPI360_7
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+8]
	cmp r2, r3
	orreq r7, r7, #2
	ldreq r1, .LCPI360_7
	streqb r7, [r1, #+40]
.LBB360_29:	@ bb39
.LBB360_30:	@ bb40
	ldr r7, .LCPI360_7
	ldr r1, [r7, #+24]
	add r2, r2, r1
	bic r2, r2, r1
	@comment
str r2, [r7, #+12]
	ldr r1, [r7, #+4]
	ldr r7, [r7, #+16]
	sub r0, r7, r1
	sub r1, r2, r1
	cmp r1, r0
	ldrgt r2, .LCPI360_7
	@comment
strgt r7, [r2, #+12]
	movgt r2, r7
.LBB360_31:	@ bb42
.LBB360_32:	@ bb43
	ldr r7, .LCPI360_7
	@comment
str r2, [r7, #+8]
.LBB360_33:	@ bb44
	@comment
str r3, [r9, #+16]
	ldr r7, [r6]
	@comment
str r7, [r9]
	@comment
str r9, [r6]
	mov r0, r9
	b .LBB360_35	@ bb45
.LBB360_34:	@ bb45
	mov r0, r7
.LBB360_35:	@ bb45
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB360_36:	@ entry.bb2_crit_edge
	mov r5, #0
	b .LBB360_4	@ bb2
.LBB360_37:	@ bb2.bb7.preheader_crit_edge
	mov r2, r5
	mov r1, r5
	b .LBB360_7	@ bb7.preheader
.LBB360_38:	@ bb24
	emit_nops_till_bundle_end
	bl abort
.LBB360_39:	@ bb32.bb44_crit_edge
	mov r3, #0
	b .LBB360_33	@ bb44
	.align	4
.LBB360_40:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_0:
 	.long	warn_id_clash

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_1:
 	.long	id_clash_len

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_2:
 	.long	63849861			@ 0x3CE4585

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_3:
 	.long	hash_table

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_4:
 	.long	do_identifier_warnings.b

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_5:
 	.long	.str71627

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_6:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI360_7:
 	.long	permanent_obstack

	.size get_identifier, .-get_identifier


	.globl	get_file_function_name
	.align	4
get_file_function_name:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r11, lr}
	add r11, sp, #12
	ldr r3, .LCPI361_0
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	bne .LBB361_13	@ entry.bb4_crit_edge
.LBB361_1:	@ bb1
	ldr r3, .LCPI361_1
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI361_2
	ldrne r3, .LCPI361_1
	b .LBB361_3	@ bb4
.LBB361_2:	@ bb3
.LBB361_3:	@ bb4
	ldr r5, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl strlen
	add r3, r0, #17
	bic r3, r3, #3
	sub r6, sp, r3
	mov sp, r6
	ldr r1, .LCPI361_3
	mov r0, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl sprintf
	ldr r3, .LCPI361_0
	ldr r3, [r3]
	cmp r5, r3
	ldrneb r3, [r6, #+11]
	cmpne r3, #0
	bne .LBB361_5	@ bb5.bb6_crit_edge
	b .LBB361_12	@ bb14
.LBB361_4:	@ bb5
.LBB361_5:	@ bb5.bb6_crit_edge
	mov r3, #95
	mov r2, r6
.LBB361_6:	@ bb6
	ldrb r1, [r2, #+11]
	sub r0, r1, #48
	and r0, r0, #255
	cmp r0, #10
	blo .LBB361_11	@ bb12
.LBB361_7:	@ bb6
	and r0, r1, #255
	cmp r0, #46
	beq .LBB361_11	@ bb12
.LBB361_8:	@ bb9
	sub r0, r1, #65
	and r0, r0, #255
	cmp r0, #26
	blo .LBB361_11	@ bb12
.LBB361_9:	@ bb10
	sub r1, r1, #97
	and r1, r1, #255
	cmp r1, #26
	strhsb r3, [r2, #+11]
.LBB361_10:	@ bb11
.LBB361_11:	@ bb12
	ldrb r1, [r2, #+12]
	add r2, r2, #1
	cmp r1, #0
	bne .LBB361_6	@ bb6
.LBB361_12:	@ bb14
	strb r4, [r6, #+9]
	mov r0, r6
	emit_nops_till_bundle_end
	bl get_identifier
	sub sp, r11, #12
	ldmfd sp, {r4, r5, r6, r11, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB361_13:	@ entry.bb4_crit_edge
	ldr r3, .LCPI361_0
	b .LBB361_3	@ bb4
.LBB361_14:	@ bb1.bb4_crit_edge
	.align	4
.LBB361_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI361_0:
 	.long	first_global_object_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI361_1:
 	.long	main_input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI361_2:
 	.long	input_filename

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI361_3:
 	.long	.str81628

	.size get_file_function_name, .-get_file_function_name


	.globl	init_tree_codes
	.align	4
init_tree_codes:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, #126, 30 @ 504
	mov r0, #126, 30 @ 504
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r5, .LCPI362_0
	@comment
str r0, [r5]
	mov r0, #126, 30 @ 504
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r6, .LCPI362_1
	@comment
str r0, [r6]
	mov r0, #126, 30 @ 504
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r7, .LCPI362_2
	@comment
str r0, [r7]
	ldr r0, [r5]
	ldr r1, .LCPI362_3
	mov r2, #126, 30 @ 504
	emit_nops_till_bundle_end
	bl memcpy
	ldr r0, [r6]
	ldr r1, .LCPI362_4
	mov r2, #126, 30 @ 504
	emit_nops_till_bundle_end
	bl memcpy
	ldr r0, [r7]
	ldr r1, .LCPI362_5
	mov r2, r4
	emit_nops_till_bundle_end
	bl memcpy
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB362_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI362_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI362_1:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI362_2:
 	.long	tree_code_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI362_3:
 	.long	standard_tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI362_4:
 	.long	standard_tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI362_5:
 	.long	standard_tree_code_name

	.size init_tree_codes, .-init_tree_codes


	.globl	object_permanent_p
	.align	4
object_permanent_p:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	mov r1, r0
	ldr r0, .LCPI363_0
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB363_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI363_0:
 	.long	permanent_obstack

	.size object_permanent_p, .-object_permanent_p


	.globl	print_obstack_name
	.align	4
print_obstack_name:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	ldr r3, .LCPI364_0
	ldr r4, [r3]
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r4, #0
	beq .LBB364_20	@ entry.bb6_crit_edge
.LBB364_1:	@ entry.bb_crit_edge
	mov r8, #0
	mov r9, r8
.LBB364_2:	@ bb
	ldr r0, [r4, #+352]
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	ldrne r8, [r4, #+352]
	ldrne r9, .LCPI364_1
.LBB364_3:	@ bb1
.LBB364_4:	@ bb2
	ldr r0, [r4, #+356]
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	ldrne r8, [r4, #+356]
	ldrne r9, .LCPI364_2
.LBB364_5:	@ bb3
.LBB364_6:	@ bb4
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB364_2	@ bb
.LBB364_7:	@ bb6
	ldr r0, .LCPI364_3
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	bne .LBB364_21	@ bb6.bb19_crit_edge
.LBB364_8:	@ bb8
	ldr r3, .LCPI364_5
	ldr r0, [r3]
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	bne .LBB364_22	@ bb9
.LBB364_9:	@ bb10
	ldr r0, .LCPI364_7
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	bne .LBB364_25	@ bb10.bb19_crit_edge
.LBB364_10:	@ bb12
	ldr r0, .LCPI364_9
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	bne .LBB364_26	@ bb12.bb19_crit_edge
.LBB364_11:	@ bb14
	ldr r3, .LCPI364_11
	ldr r0, [r3]
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	bne .LBB364_27	@ bb15
.LBB364_12:	@ bb16
	ldr r0, .LCPI364_13
	mov r1, r7
	emit_nops_till_bundle_end
	bl _obstack_allocated_p
	cmp r0, #0
	beq .LBB364_23	@ bb18
.LBB364_13:	@ bb16.bb19_crit_edge
	ldr r8, .LCPI364_13
	ldr r9, .LCPI364_14
.LBB364_14:	@ bb19
	ldr r3, [r8, #+12]
	cmp r3, r7
	bhi .LBB364_19	@ bb22
.LBB364_15:	@ bb20
	ldr r3, [r8, #+16]
	cmp r3, r7
	bls .LBB364_19	@ bb22
.LBB364_16:	@ bb21
	ldr r1, .LCPI364_15
.LBB364_17:	@ bb21
	mov r0, r6
	mov r2, r5
	mov r3, r9
	emit_nops_till_bundle_end
	bl fprintf
.LBB364_18:	@ bb21
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB364_19:	@ bb22
	ldr r1, .LCPI364_16
	b .LBB364_17	@ bb21
.LBB364_20:	@ entry.bb6_crit_edge
	mov r8, #0
	mov r9, r8
	b .LBB364_7	@ bb6
.LBB364_21:	@ bb6.bb19_crit_edge
	ldr r8, .LCPI364_3
	ldr r9, .LCPI364_4
	b .LBB364_14	@ bb19
.LBB364_22:	@ bb9
	ldr r8, .LCPI364_5
	ldr r8, [r8]
	ldr r9, .LCPI364_6
.LBB364_23:	@ bb18
	cmp r8, #0
	bne .LBB364_14	@ bb19
.LBB364_24:	@ bb23
	ldr r1, .LCPI364_17
	mov r0, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB364_18	@ bb21
.LBB364_25:	@ bb10.bb19_crit_edge
	ldr r8, .LCPI364_7
	ldr r9, .LCPI364_8
	b .LBB364_14	@ bb19
.LBB364_26:	@ bb12.bb19_crit_edge
	ldr r8, .LCPI364_9
	ldr r9, .LCPI364_10
	b .LBB364_14	@ bb19
.LBB364_27:	@ bb15
	ldr r8, .LCPI364_11
	ldr r8, [r8]
	ldr r9, .LCPI364_12
	b .LBB364_23	@ bb18
	.align	4
.LBB364_28:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_0:
 	.long	outer_function_chain

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_1:
 	.long	.str1461766

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_2:
 	.long	.str1471767

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_3:
 	.long	obstack_stack_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_4:
 	.long	.str1481768

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_5:
 	.long	function_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_6:
 	.long	.str1491769

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_7:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_8:
 	.long	.str1501770

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_9:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_10:
 	.long	.str1511771

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_11:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_12:
 	.long	.str1521772

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_13:
 	.long	temp_decl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_14:
 	.long	.str1531773

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_15:
 	.long	.str1541774

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_16:
 	.long	.str1551775

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI364_17:
 	.long	.str1561776

	.size print_obstack_name, .-print_obstack_name


	.globl	debug_obstack
	.align	4
debug_obstack:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r4, r0
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	mov r1, r0
	ldr r2, .LCPI365_0
	mov r0, r4
	emit_nops_till_bundle_end
	bl print_obstack_name
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI365_1
	emit_nops_till_bundle_end
	bl fprintf
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB365_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI365_0:
 	.long	.str1571777

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI365_1:
 	.long	.str1581778

	.size debug_obstack, .-debug_obstack


	.globl	perm_calloc
	.align	4
perm_calloc:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI366_0
	ldr r2, [r3, #+12]
	ldr r3, [r3, #+16]
	sub r3, r3, r2
	mul r4, r1, r0
	cmp r3, r4
	ldrlt r0, .LCPI366_0
	movlt r1, r4
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB366_1:	@ bb
.LBB366_2:	@ bb1
	ldr r3, .LCPI366_0
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB366_9	@ bb1.bb18_crit_edge
.LBB366_3:	@ bb5
	ldr r5, .LCPI366_0
	ldr r2, [r5, #+12]
	add r2, r2, r4
	@comment
str r2, [r5, #+12]
	ldr r5, [r5, #+8]
	cmp r2, r5
	orreq r3, r3, #2
	ldreq r1, .LCPI366_0
	streqb r3, [r1, #+40]
.LBB366_4:	@ bb13
.LBB366_5:	@ bb14
	ldr r3, .LCPI366_0
	ldr r1, [r3, #+24]
	add r2, r2, r1
	bic r2, r2, r1
	@comment
str r2, [r3, #+12]
	ldr r1, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r0, r3, r1
	sub r1, r2, r1
	cmp r1, r0
	ldrgt r2, .LCPI366_0
	@comment
strgt r3, [r2, #+12]
	movgt r2, r3
.LBB366_6:	@ bb16
.LBB366_7:	@ bb17
	ldr r3, .LCPI366_0
	@comment
str r2, [r3, #+8]
.LBB366_8:	@ bb18
	mov r1, #0
	mov r0, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl memset
	mov r0, r5
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB366_9:	@ bb1.bb18_crit_edge
	mov r5, #0
	b .LBB366_8	@ bb18
	.align	4
.LBB366_10:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI366_0:
 	.long	permanent_obstack

	.size perm_calloc, .-perm_calloc


	.globl	permanent_allocation
	.align	4
permanent_allocation:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, .LCPI367_0
	ldr r3, [r3, #+4]
	ldr r2, .LCPI367_1
	ldr r1, [r2]
	mov r4, r0
	cmp r3, r1
	bhs .LBB367_2	@ bb12
.LBB367_1:	@ bb
	ldr r3, .LCPI367_0
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB367_23	@ bb11
.LBB367_2:	@ bb12
	ldr r0, .LCPI367_0
	emit_nops_till_bundle_end
	bl obstack_free
.LBB367_3:	@ bb13
	cmp r4, #0
	beq .LBB367_8	@ bb19
.LBB367_4:	@ bb14
	ldr r3, .LCPI367_2
	ldr r3, [r3, #+4]
	ldr r2, .LCPI367_3
	ldr r1, [r2]
	cmp r3, r1
	bhs .LBB367_6	@ bb17
.LBB367_5:	@ bb15
	ldr r3, .LCPI367_2
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB367_24	@ bb16
.LBB367_6:	@ bb17
	ldr r0, .LCPI367_2
	emit_nops_till_bundle_end
	bl obstack_free
.LBB367_7:	@ bb18
	ldr r3, .LCPI367_3
	ldr r3, [r3]
	ldr r2, .LCPI367_4
	@comment
str r3, [r2]
	b .LBB367_11	@ bb23
.LBB367_8:	@ bb19
	ldr r3, .LCPI367_2
	ldr r3, [r3, #+4]
	ldr r2, .LCPI367_4
	ldr r1, [r2]
	cmp r3, r1
	bhs .LBB367_10	@ bb22
.LBB367_9:	@ bb20
	ldr r3, .LCPI367_2
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB367_25	@ bb21
.LBB367_10:	@ bb22
	ldr r0, .LCPI367_2
	emit_nops_till_bundle_end
	bl obstack_free
.LBB367_11:	@ bb23
	ldr r3, .LCPI367_5
	ldr r0, [r3]
	ldr r3, [r0, #+4]
	ldr r2, .LCPI367_6
	ldr r1, [r2]
	cmp r3, r1
	bhs .LBB367_13	@ bb26
.LBB367_12:	@ bb24
	ldr r3, [r0, #+16]
	cmp r3, r1
	bhi .LBB367_26	@ bb25
.LBB367_13:	@ bb26
	emit_nops_till_bundle_end
	bl obstack_free
.LBB367_14:	@ bb27
	ldr r3, .LCPI367_7
	ldr r3, [r3, #+4]
	ldr r2, .LCPI367_8
	ldr r1, [r2]
	cmp r3, r1
	bhs .LBB367_16	@ bb30
.LBB367_15:	@ bb28
	ldr r3, .LCPI367_7
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB367_27	@ bb29
.LBB367_16:	@ bb30
	ldr r0, .LCPI367_7
	emit_nops_till_bundle_end
	bl obstack_free
.LBB367_17:	@ bb36.preheader
	ldr r3, .LCPI367_9
	ldr r4, [r3]
	cmp r4, #0
	beq .LBB367_22	@ bb37
.LBB367_18:	@ bb36.preheader.bb31_crit_edge
	mov r5, #0
.LBB367_19:	@ bb31
	ldr r3, [r4, #+4]
	ldr r2, .LCPI367_9
	@comment
str r3, [r2]
	ldr r0, [r4]
.LBB367_20:	@ bb34
	mov r1, #0
	emit_nops_till_bundle_end
	bl obstack_free
.LBB367_21:	@ bb35
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl free
	mov r0, r4
	emit_nops_till_bundle_end
	bl free
	ldr r4, .LCPI367_9
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB367_19	@ bb31
.LBB367_22:	@ bb37
	ldr r3, .LCPI367_10
	ldr r2, .LCPI367_11
	@comment
str r3, [r2]
	ldr r2, .LCPI367_12
	@comment
str r3, [r2]
	ldr r2, .LCPI367_13
	@comment
str r3, [r2]
	ldr r2, .LCPI367_14
	@comment
str r3, [r2]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB367_23:	@ bb11
	ldr r3, .LCPI367_0
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB367_3	@ bb13
.LBB367_24:	@ bb16
	ldr r3, .LCPI367_2
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB367_7	@ bb18
.LBB367_25:	@ bb21
	ldr r3, .LCPI367_2
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB367_11	@ bb23
.LBB367_26:	@ bb25
	@comment
str r1, [r0, #+8]
	@comment
str r1, [r0, #+12]
	b .LBB367_14	@ bb27
.LBB367_27:	@ bb29
	ldr r3, .LCPI367_7
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB367_17	@ bb36.preheader
	.align	4
.LBB367_28:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_0:
 	.long	temporary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_1:
 	.long	temporary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_2:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_3:
 	.long	momentary_function_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_4:
 	.long	momentary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_5:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_6:
 	.long	maybepermanent_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_7:
 	.long	temp_decl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_8:
 	.long	temp_decl_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_9:
 	.long	inline_obstacks

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_10:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_11:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_12:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_13:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI367_14:
 	.long	rtl_obstack

	.size permanent_allocation, .-permanent_allocation


	.globl	restore_tree_status
	.align	4
restore_tree_status:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, [r0, #+324]
	ldr r2, .LCPI368_0
	@comment
str r3, [r2]
	ldr r3, [r0, #+328]
	ldr r2, .LCPI368_1
	@comment
str r3, [r2]
	ldr r3, .LCPI368_2
	ldr r3, [r3, #+4]
	ldr r2, .LCPI368_3
	ldr r1, [r2]
	mov r4, r0
	cmp r3, r1
	bhs .LBB368_2	@ bb6
.LBB368_1:	@ bb
	ldr r3, .LCPI368_2
	ldr r3, [r3, #+16]
	cmp r3, r1
	bhi .LBB368_9	@ bb5
.LBB368_2:	@ bb6
	ldr r0, .LCPI368_2
	emit_nops_till_bundle_end
	bl obstack_free
.LBB368_3:	@ bb7
	ldr r3, .LCPI368_4
	ldr r0, [r3]
	ldr r3, [r0, #+4]
	ldr r2, .LCPI368_5
	ldr r1, [r2]
	cmp r3, r1
	bhs .LBB368_5	@ bb10
.LBB368_4:	@ bb8
	ldr r3, [r0, #+16]
	cmp r3, r1
	bhi .LBB368_10	@ bb9
.LBB368_5:	@ bb10
	emit_nops_till_bundle_end
	bl obstack_free
.LBB368_6:	@ bb11
	ldr r3, .LCPI368_6
	ldr r0, [r3]
.LBB368_7:	@ bb14
	mov r1, #0
	emit_nops_till_bundle_end
	bl obstack_free
.LBB368_8:	@ bb15
	ldr r5, .LCPI368_6
	ldr r0, [r5]
	emit_nops_till_bundle_end
	bl free
	ldr r3, [r4, #+340]
	ldr r2, .LCPI368_7
	@comment
str r3, [r2]
	ldr r3, [r4, #+344]
	ldr r2, .LCPI368_3
	@comment
str r3, [r2]
	ldr r3, [r4, #+332]
	ldr r2, .LCPI368_5
	@comment
str r3, [r2]
	ldr r3, [r4, #+352]
	@comment
str r3, [r5]
	ldr r3, [r4, #+356]
	ldr r2, .LCPI368_4
	@comment
str r3, [r2]
	ldr r3, [r4, #+348]
	ldr r2, .LCPI368_8
	@comment
str r3, [r2]
	ldr r3, [r4, #+360]
	ldr r2, .LCPI368_9
	@comment
str r3, [r2]
	ldr r3, [r4, #+364]
	ldr r2, .LCPI368_10
	@comment
str r3, [r2]
	ldr r3, [r4, #+368]
	ldr r2, .LCPI368_11
	@comment
str r3, [r2]
	ldr r3, [r4, #+372]
	ldr r2, .LCPI368_12
	@comment
str r3, [r2]
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB368_9:	@ bb5
	ldr r3, .LCPI368_2
	@comment
str r1, [r3, #+8]
	@comment
str r1, [r3, #+12]
	b .LBB368_3	@ bb7
.LBB368_10:	@ bb9
	@comment
str r1, [r0, #+8]
	@comment
str r1, [r0, #+12]
	b .LBB368_6	@ bb11
	.align	4
.LBB368_11:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_0:
 	.long	all_types_permanent

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_1:
 	.long	momentary_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_2:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_3:
 	.long	momentary_function_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_4:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_5:
 	.long	maybepermanent_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_6:
 	.long	function_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_7:
 	.long	momentary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_8:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_9:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_10:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_11:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI368_12:
 	.long	inline_obstacks

	.size restore_tree_status, .-restore_tree_status


	.globl	gcc_obstack_init
	.align	4
gcc_obstack_init:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	sfi_sub sp, sp, #4
	ldr r3, .LCPI369_0
	@comment
str r3, [sp]
	mov r1, #0
	ldr r3, .LCPI369_1
	mov r2, #0
	emit_nops_till_bundle_end
	bl _obstack_begin
	sfi_add sp, sp, #4
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.align	4
.LBB369_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI369_0:
 	.long	free

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI369_1:
 	.long	xmalloc

	.size gcc_obstack_init, .-gcc_obstack_init


	.globl	save_tree_status
	.align	4
save_tree_status:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI370_0
	ldr r3, [r3]
	@comment
str r3, [r0, #+324]
	ldr r3, .LCPI370_1
	ldr r3, [r3]
	@comment
str r3, [r0, #+328]
	ldr r3, .LCPI370_2
	ldr r3, [r3]
	@comment
str r3, [r0, #+332]
	ldr r3, .LCPI370_3
	ldr r3, [r3]
	@comment
str r3, [r0, #+340]
	ldr r3, .LCPI370_4
	ldr r3, [r3]
	@comment
str r3, [r0, #+344]
	ldr r3, .LCPI370_5
	ldr r3, [r3]
	@comment
str r3, [r0, #+352]
	ldr r3, .LCPI370_6
	ldr r3, [r3]
	@comment
str r3, [r0, #+356]
	ldr r3, .LCPI370_7
	ldr r3, [r3]
	@comment
str r3, [r0, #+348]
	ldr r3, .LCPI370_8
	ldr r3, [r3]
	@comment
str r3, [r0, #+360]
	ldr r3, .LCPI370_9
	ldr r3, [r3]
	@comment
str r3, [r0, #+364]
	ldr r3, .LCPI370_10
	ldr r3, [r3]
	@comment
str r3, [r0, #+368]
	ldr r3, .LCPI370_11
	ldr r3, [r3]
	@comment
str r3, [r0, #+372]
	ldr r3, .LCPI370_12
	ldr r3, [r3]
	cmp r3, r1
	beq .LBB370_17	@ bb
.LBB370_1:	@ bb3
	cmp r1, #0
	beq .LBB370_18	@ bb3.bb6_crit_edge
.LBB370_2:	@ bb5
	mov r0, r1
	emit_nops_till_bundle_end
	bl find_function_data
	add r4, r0, #93, 30 @ 372
.LBB370_3:	@ bb6
	mov r0, #8
	emit_nops_till_bundle_end
	bl xmalloc
	mov r5, r0
	mov r0, #44
	emit_nops_till_bundle_end
	bl xmalloc
	@comment
str r0, [r5]
	ldr r3, .LCPI370_6
	@comment
str r0, [r3]
	ldr r3, .LCPI370_14
	@comment
str r3, [sp]
	mov r1, #0
	ldr r3, .LCPI370_15
	mov r2, #0
	emit_nops_till_bundle_end
	bl _obstack_begin
	ldr r3, [r4]
	@comment
str r3, [r5, #+4]
	@comment
str r5, [r4]
.LBB370_4:	@ bb7
	ldr r3, .LCPI370_6
	ldr r3, [r3]
	ldrb r2, [r3, #+40]
	tst r2, #4
	bne .LBB370_19	@ bb7.bb18_crit_edge
.LBB370_5:	@ bb12
	ldr r0, [r3, #+12]
	ldr r1, [r3, #+8]
	cmp r0, r1
	orreq r2, r2, #2
	streqb r2, [r3, #+40]
.LBB370_6:	@ bb13
.LBB370_7:	@ bb14
	ldr r2, [r3, #+24]
	add r0, r0, r2
	bic r2, r0, r2
	@comment
str r2, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r12, [r3, #+16]
	sub lr, r12, r0
	sub r0, r2, r0
	cmp r0, lr
	@comment
strgt r12, [r3, #+12]
	movgt r2, r12
.LBB370_8:	@ bb16
.LBB370_9:	@ bb17
	@comment
str r2, [r3, #+8]
.LBB370_10:	@ bb18
	ldr r3, .LCPI370_2
	@comment
str r1, [r3]
	mov r0, #44
	emit_nops_till_bundle_end
	bl xmalloc
	ldr r3, .LCPI370_5
	@comment
str r0, [r3]
	ldr r3, .LCPI370_14
	@comment
str r3, [sp]
	mov r1, #0
	ldr r3, .LCPI370_15
	mov r2, #0
	emit_nops_till_bundle_end
	bl _obstack_begin
	ldr r3, .LCPI370_16
	ldr r2, .LCPI370_7
	@comment
str r3, [r2]
	ldr r2, .LCPI370_8
	@comment
str r3, [r2]
	ldr r2, .LCPI370_9
	@comment
str r3, [r2]
	ldr r2, .LCPI370_10
	@comment
str r3, [r2]
	ldr r3, .LCPI370_17
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB370_20	@ bb18.bb31_crit_edge
.LBB370_11:	@ bb24
	ldr r2, .LCPI370_17
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI370_17
	streqb r3, [r0, #+40]
.LBB370_12:	@ bb25
.LBB370_13:	@ bb26
	ldr r3, .LCPI370_17
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI370_17
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB370_14:	@ bb29
.LBB370_15:	@ bb30
	ldr r3, .LCPI370_17
	@comment
str r1, [r3, #+8]
.LBB370_16:	@ bb31
	ldr r3, .LCPI370_3
	@comment
str r2, [r3]
	ldr r3, .LCPI370_4
	@comment
str r2, [r3]
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB370_17:	@ bb
	ldr r3, .LCPI370_5
	ldr r3, [r3]
	ldr r2, .LCPI370_6
	@comment
str r3, [r2]
	b .LBB370_4	@ bb7
.LBB370_18:	@ bb3.bb6_crit_edge
	ldr r4, .LCPI370_13
	b .LBB370_3	@ bb6
.LBB370_19:	@ bb7.bb18_crit_edge
	mov r1, #0
	b .LBB370_10	@ bb18
.LBB370_20:	@ bb18.bb31_crit_edge
	mov r2, #0
	b .LBB370_16	@ bb31
	.align	4
.LBB370_21:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_0:
 	.long	all_types_permanent

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_1:
 	.long	momentary_stack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_2:
 	.long	maybepermanent_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_3:
 	.long	momentary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_4:
 	.long	momentary_function_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_5:
 	.long	function_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_6:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_7:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_8:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_9:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_10:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_11:
 	.long	inline_obstacks

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_12:
 	.long	current_function_decl

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_13:
 	.long	toplev_inline_obstacks

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_14:
 	.long	free

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_15:
 	.long	xmalloc

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_16:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI370_17:
 	.long	momentary_obstack

	.size save_tree_status, .-save_tree_status


	.globl	init_obstacks
	.align	4
init_obstacks:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	sfi_sub sp, sp, #4
	ldr r4, .LCPI371_0
	@comment
str r4, [sp]
	ldr r5, .LCPI371_1
	ldr r0, .LCPI371_2
	mov r1, #0
	mov r2, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl _obstack_begin
	@comment
str r4, [sp]
	ldr r0, .LCPI371_3
	mov r1, #0
	mov r2, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl _obstack_begin
	@comment
str r4, [sp]
	ldr r4, .LCPI371_4
	mov r0, r4
	mov r1, #0
	mov r2, #0
	mov r3, r5
	emit_nops_till_bundle_end
	bl _obstack_begin
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	ldrlt r0, .LCPI371_4
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB371_1:	@ bb
.LBB371_2:	@ bb16
	ldr r3, .LCPI371_4
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB371_33	@ bb16.bb33_crit_edge
.LBB371_3:	@ bb27
	ldr r2, .LCPI371_4
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI371_4
	streqb r3, [r0, #+40]
.LBB371_4:	@ bb28
.LBB371_5:	@ bb29
	ldr r3, .LCPI371_4
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI371_4
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB371_6:	@ bb31
.LBB371_7:	@ bb32
	ldr r3, .LCPI371_4
	@comment
str r1, [r3, #+8]
.LBB371_8:	@ bb33
	ldr r3, .LCPI371_5
	@comment
str r2, [r3]
	ldr r3, .LCPI371_0
	@comment
str r3, [sp]
	ldr r4, .LCPI371_6
	mov r1, #0
	ldr r3, .LCPI371_1
	mov r0, r4
	mov r2, #0
	emit_nops_till_bundle_end
	bl _obstack_begin
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	ldrlt r0, .LCPI371_6
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB371_9:	@ bb34
.LBB371_10:	@ bb35
	ldr r3, .LCPI371_6
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB371_34	@ bb35.bb54_crit_edge
.LBB371_11:	@ bb47
	ldr r2, .LCPI371_6
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI371_6
	streqb r3, [r0, #+40]
.LBB371_12:	@ bb48
.LBB371_13:	@ bb49
	ldr r3, .LCPI371_6
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI371_6
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB371_14:	@ bb52
.LBB371_15:	@ bb53
	ldr r3, .LCPI371_6
	@comment
str r1, [r3, #+8]
.LBB371_16:	@ bb54
	ldr r3, .LCPI371_7
	@comment
str r2, [r3]
	ldr r3, .LCPI371_8
	@comment
str r2, [r3]
	ldr r3, .LCPI371_0
	@comment
str r3, [sp]
	ldr r4, .LCPI371_9
	mov r1, #0
	ldr r3, .LCPI371_1
	mov r0, r4
	mov r2, #0
	emit_nops_till_bundle_end
	bl _obstack_begin
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	ldrlt r0, .LCPI371_9
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB371_17:	@ bb55
.LBB371_18:	@ bb56
	ldr r3, .LCPI371_9
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB371_35	@ bb56.bb75_crit_edge
.LBB371_19:	@ bb68
	ldr r2, .LCPI371_9
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI371_9
	streqb r3, [r0, #+40]
.LBB371_20:	@ bb69
.LBB371_21:	@ bb70
	ldr r3, .LCPI371_9
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI371_9
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB371_22:	@ bb73
.LBB371_23:	@ bb74
	ldr r3, .LCPI371_9
	@comment
str r1, [r3, #+8]
.LBB371_24:	@ bb75
	ldr r3, .LCPI371_10
	@comment
str r2, [r3]
	ldr r3, .LCPI371_0
	@comment
str r3, [sp]
	ldr r4, .LCPI371_11
	mov r1, #0
	ldr r3, .LCPI371_1
	mov r0, r4
	mov r2, #0
	emit_nops_till_bundle_end
	bl _obstack_begin
	ldr r3, [r4, #+12]
	ldr r2, [r4, #+16]
	sub r3, r2, r3
	cmp r3, #0
	ldrlt r0, .LCPI371_11
	movlt r1, #0
	emit_nops_till_bundle_end
	bllt _obstack_newchunk
.LBB371_25:	@ bb76
.LBB371_26:	@ bb77
	ldr r3, .LCPI371_11
	ldrb r3, [r3, #+40]
	tst r3, #4
	bne .LBB371_36	@ bb77.bb96_crit_edge
.LBB371_27:	@ bb89
	ldr r2, .LCPI371_11
	ldr r1, [r2, #+12]
	ldr r2, [r2, #+8]
	cmp r1, r2
	orreq r3, r3, #2
	ldreq r0, .LCPI371_11
	streqb r3, [r0, #+40]
.LBB371_28:	@ bb90
.LBB371_29:	@ bb91
	ldr r3, .LCPI371_11
	ldr r0, [r3, #+24]
	add r1, r1, r0
	bic r1, r1, r0
	@comment
str r1, [r3, #+12]
	ldr r0, [r3, #+4]
	ldr r3, [r3, #+16]
	sub r12, r3, r0
	sub r0, r1, r0
	cmp r0, r12
	ldrgt r1, .LCPI371_11
	@comment
strgt r3, [r1, #+12]
	movgt r1, r3
.LBB371_30:	@ bb94
.LBB371_31:	@ bb95
	ldr r3, .LCPI371_11
	@comment
str r1, [r3, #+8]
.LBB371_32:	@ bb96
	ldr r3, .LCPI371_12
	@comment
str r2, [r3]
	ldr r3, .LCPI371_13
	ldr r2, .LCPI371_4
	@comment
str r2, [r3]
	ldr r3, .LCPI371_14
	ldr r2, .LCPI371_9
	@comment
str r2, [r3]
	ldr r3, .LCPI371_3
	ldr r2, .LCPI371_15
	@comment
str r3, [r2]
	ldr r2, .LCPI371_16
	@comment
str r3, [r2]
	ldr r2, .LCPI371_17
	@comment
str r3, [r2]
	ldr r2, .LCPI371_18
	@comment
str r3, [r2]
	ldr r0, .LCPI371_19
	mov r1, #0
	mov r2, #241, 30 @ 964
	orr r2, r2, #3, 22 @ 3072
	emit_nops_till_bundle_end
	bl memset
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB371_33:	@ bb16.bb33_crit_edge
	mov r2, #0
	b .LBB371_8	@ bb33
.LBB371_34:	@ bb35.bb54_crit_edge
	mov r2, #0
	b .LBB371_16	@ bb54
.LBB371_35:	@ bb56.bb75_crit_edge
	mov r2, #0
	b .LBB371_24	@ bb75
.LBB371_36:	@ bb77.bb96_crit_edge
	mov r2, #0
	b .LBB371_32	@ bb96
	.align	4
.LBB371_37:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_0:
 	.long	free

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_1:
 	.long	xmalloc

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_2:
 	.long	obstack_stack_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_3:
 	.long	permanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_4:
 	.long	temporary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_5:
 	.long	temporary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_6:
 	.long	momentary_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_7:
 	.long	momentary_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_8:
 	.long	momentary_function_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_9:
 	.long	maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_10:
 	.long	maybepermanent_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_11:
 	.long	temp_decl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_12:
 	.long	temp_decl_firstobj

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_13:
 	.long	function_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_14:
 	.long	function_maybepermanent_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_15:
 	.long	current_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_16:
 	.long	expression_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_17:
 	.long	saveable_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_18:
 	.long	rtl_obstack

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI371_19:
 	.long	hash_table

	.size init_obstacks, .-init_obstacks


	.globl	indent_to
	.align	4
indent_to:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	cmp r1, #1
	blt .LBB372_3	@ bb3.preheader.return_crit_edge.critedge
.LBB372_1:	@ bb
	ldr r1, .LCPI372_0
	mov r0, r5
	emit_nops_till_bundle_end
	bl fprintf
	mov r6, #0
.LBB372_2:	@ bb2
	ldr r1, .LCPI372_1
	mov r0, r5
	emit_nops_till_bundle_end
	bl fprintf
	add r6, r6, #1
	cmp r6, r4
	bne .LBB372_2	@ bb2
.LBB372_3:	@ bb3.preheader.return_crit_edge.critedge
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.align	4
.LBB372_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI372_0:
 	.long	.str1869

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI372_1:
 	.long	.str11870

	.size indent_to, .-indent_to


	.globl	print_node_brief
	.align	4
print_node_brief:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #100
	mov r4, r2
	mov r5, r1
	mov r6, r0
	cmp r2, #0
	beq .LBB373_32	@ return
.LBB373_1:	@ bb
	ldr r2, .LCPI373_0
	ldr r2, [r2]
	ldrb r1, [r4, #+8]
	ldr r2, [r2, +r1, lsl #2]
	ldrb r7, [r2]
	cmp r3, #1
	blt .LBB373_3	@ bb2
.LBB373_2:	@ bb1
	ldr r1, .LCPI373_1
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_3:	@ bb2
	ldr r3, .LCPI373_2
	ldr r3, [r3]
	ldrb r2, [r4, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldr r1, .LCPI373_3
	mov r0, r6
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
	ldr r1, .LCPI373_4
	mov r0, r6
	mov r2, r4
	emit_nops_till_bundle_end
	bl fprintf
	and r3, r7, #255
	cmp r3, #116
	beq .LBB373_6	@ bb6
.LBB373_4:	@ bb2
	and r3, r7, #255
	cmp r3, #100
	bne .LBB373_11	@ bb12
.LBB373_5:	@ bb3
	ldr r3, [r4, #+32]
	b .LBB373_9	@ bb10
.LBB373_6:	@ bb6
	ldr r3, [r4, #+48]
	cmp r3, #0
	beq .LBB373_11	@ bb12
.LBB373_7:	@ bb7
	ldrb r2, [r3, #+8]
	cmp r2, #32
	bne .LBB373_34	@ bb7
.LBB373_8:	@ bb10
	ldr r3, [r3, #+32]
.LBB373_9:	@ bb10
	cmp r3, #0
	beq .LBB373_11	@ bb12
.LBB373_10:	@ bb11
	ldr r2, [r3, #+16]
	ldr r1, .LCPI373_5
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_11:	@ bb12
	ldrb r3, [r4, #+8]
	cmp r3, #1
	bne .LBB373_13	@ bb14
.LBB373_12:	@ bb13
	ldr r2, [r4, #+16]
	ldr r1, .LCPI373_5
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_13:	@ bb14
	ldrb r3, [r4, #+8]
	cmp r3, #25
	bne .LBB373_23	@ bb26
.LBB373_14:	@ bb15
	ldrb r3, [r4, #+10]
	tst r3, #4
	beq .LBB373_16	@ bb20
.LBB373_15:	@ bb19
	ldr r1, .LCPI373_6
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_16:	@ bb20
	ldr r2, [r4, #+16]
	cmn r2, #1
	beq .LBB373_19	@ bb23
.LBB373_17:	@ bb20
	cmp r2, #0
	bne .LBB373_22	@ bb25
.LBB373_18:	@ bb21
	ldr r2, [r4, #+12]
	ldr r1, .LCPI373_7
	b .LBB373_21	@ bb24
.LBB373_19:	@ bb23
	ldr r3, [r4, #+12]
	cmp r3, #0
	beq .LBB373_22	@ bb25
.LBB373_20:	@ bb24
	rsb r2, r3, #0
	ldr r1, .LCPI373_8
.LBB373_21:	@ bb24
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB373_23	@ bb26
.LBB373_22:	@ bb25
	ldr r3, [r4, #+12]
	ldr r1, .LCPI373_9
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_23:	@ bb26
	ldrb r3, [r4, #+8]
	cmp r3, #26
	bne .LBB373_31	@ bb40
.LBB373_24:	@ bb27
	ldrb r3, [r4, #+10]
	tst r3, #8
	beq .LBB373_26	@ bb33
.LBB373_25:	@ bb32
	ldr r1, .LCPI373_6
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_26:	@ bb33
	ldr r5, [r4, #+20]
	ldr r4, [r4, #+16]
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl target_isinf
	cmp r0, #0
	beq .LBB373_29	@ bb35
.LBB373_27:	@ bb34
	ldr r1, .LCPI373_10
.LBB373_28:	@ bb34
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB373_31	@ bb40
.LBB373_29:	@ bb35
	mov r0, r4
	mov r1, r5
	emit_nops_till_bundle_end
	bl target_isnan
	cmp r0, #0
	bne .LBB373_33	@ bb36
.LBB373_30:	@ bb37
	mov r7, sp
	ldr r1, .LCPI373_12
	mov r0, r7
	mov r2, r4
	mov r3, r5
	emit_nops_till_bundle_end
	bl sprintf
	ldr r1, .LCPI373_5
	mov r0, r6
	mov r2, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_31:	@ bb40
	ldr r1, .LCPI373_13
	mov r0, r6
	emit_nops_till_bundle_end
	bl fprintf
.LBB373_32:	@ return
	sfi_add sp, sp, #100
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB373_33:	@ bb36
	ldr r1, .LCPI373_11
	b .LBB373_28	@ bb34
.LBB373_34:	@ bb7
	and r2, r2, #255
	cmp r2, #1
	beq .LBB373_10	@ bb11
	b .LBB373_11	@ bb12
	.align	4
.LBB373_35:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_1:
 	.long	.str11870

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_2:
 	.long	tree_code_name

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_3:
 	.long	.str21871

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_4:
 	.long	.str31872

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_5:
 	.long	.str41873

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_6:
 	.long	.str51874

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_7:
 	.long	.str61875

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_8:
 	.long	.str71876

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_9:
 	.long	.str81877

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_10:
 	.long	.str91878

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_11:
 	.long	.str101879

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_12:
 	.long	.str111880

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI373_13:
 	.long	.str121881

	.size print_node_brief, .-print_node_brief


	.globl	print_node
	.align	4
print_node:
	sfi_sub sp, sp, #32
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_sub sp, sp, #120
	mov r4, r3
	mov r5, r2
	mov r6, r1
	mov r7, r0
	cmp r2, #0
	beq .LBB374_363	@ return
.LBB374_1:	@ bb
	ldr r3, .LCPI374_122
	ldr r3, [r3]
	ldrb r2, [r5, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldrb r8, [r3]
	cmp r4, #25
	bge .LBB374_364	@ bb2
.LBB374_2:	@ bb3
	cmp r4, #9
	blt .LBB374_5	@ bb8
.LBB374_3:	@ bb4
	and r3, r8, #255
	cmp r3, #100
	andne r3, r8, #255
	cmpne r3, #116
	bne .LBB374_5	@ bb8
	b .LBB374_364	@ bb2
.LBB374_4:	@ bb4
.LBB374_5:	@ bb8
	tst r2, #255
	beq .LBB374_364	@ bb2
.LBB374_6:	@ bb10
	ldr r3, .LCPI374_123
	umull r2, r3, r5, r3
	sub r2, r5, r3
	add r3, r3, r2, lsr #1
	mov r3, r3, lsr #5
	mov r2, #37
	mul r3, r3, r2
	sub r9, r5, r3
	ldr r3, .LCPI374_124
	ldr r3, [r3]
	add r3, r3, r9, lsl #2
	b .LBB374_9	@ bb14
.LBB374_7:	@ bb11
	ldr r2, [r3]
	cmp r2, r5
	beq .LBB374_364	@ bb2
.LBB374_8:	@ bb13
	add r3, r3, #4
.LBB374_9:	@ bb14
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB374_7	@ bb11
.LBB374_10:	@ bb15
	mov r0, #8
	emit_nops_till_bundle_end
	bl oballoc
	@comment
str r5, [r0]
	ldr r3, .LCPI374_124
	ldr r2, [r3]
	ldr r2, [r2, +r9, lsl #2]
	@comment
str r2, [r0, #+4]
	ldr r3, [r3]
	@comment
str r0, [r3, +r9, lsl #2]
	cmp r4, #1
	blt .LBB374_13	@ indent_to.exit
.LBB374_11:	@ bb.i
	ldr r1, .LCPI374_125
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r9, #0
.LBB374_12:	@ bb2.i
	ldr r1, .LCPI374_126
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r9, r9, #1
	cmp r9, r4
	bne .LBB374_12	@ bb2.i
.LBB374_13:	@ indent_to.exit
	ldr r3, .LCPI374_127
	ldr r3, [r3]
	ldrb r2, [r5, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldr r1, .LCPI374_128
	mov r0, r7
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
	ldr r1, .LCPI374_129
	mov r0, r7
	mov r2, r5
	emit_nops_till_bundle_end
	bl fprintf
	and r3, r8, #255
	cmp r3, #116
	beq .LBB374_16	@ bb19
.LBB374_14:	@ indent_to.exit
	and r3, r8, #255
	cmp r3, #100
	bne .LBB374_21	@ bb25
.LBB374_15:	@ bb16
	ldr r3, [r5, #+32]
	b .LBB374_19	@ bb23
.LBB374_16:	@ bb19
	ldr r3, [r5, #+48]
	cmp r3, #0
	beq .LBB374_21	@ bb25
.LBB374_17:	@ bb20
	ldrb r2, [r3, #+8]
	cmp r2, #32
	bne .LBB374_386	@ bb20
.LBB374_18:	@ bb23
	ldr r3, [r3, #+32]
.LBB374_19:	@ bb23
	cmp r3, #0
	beq .LBB374_21	@ bb25
.LBB374_20:	@ bb24
	ldr r2, [r3, #+16]
	ldr r1, .LCPI374_130
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_21:	@ bb25
	ldrb r3, [r5, #+8]
	cmp r3, #1
	bne .LBB374_23	@ bb27
.LBB374_22:	@ bb26
	ldr r2, [r5, #+16]
	ldr r1, .LCPI374_130
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_23:	@ bb27
	ldrb r3, [r5, #+8]
	cmp r3, #25
	bne .LBB374_26	@ bb30
.LBB374_24:	@ bb28
	cmp r4, #4
	bgt .LBB374_33	@ bb33
.LBB374_25:	@ bb29
	ldr r2, [r5, #+4]
	add r3, r4, #4
	ldr r1, .LCPI374_131
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_node_brief
	b .LBB374_33	@ bb33
.LBB374_26:	@ bb30
	ldr r2, [r5, #+4]
	add r3, r4, #4
	ldr r1, .LCPI374_131
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_node
	ldr r3, [r5, #+4]
	cmp r3, #0
	beq .LBB374_30	@ bb32
.LBB374_27:	@ bb31
	add r6, r4, #3
	cmp r6, #1
	blt .LBB374_30	@ bb32
.LBB374_28:	@ bb.i511
	ldr r1, .LCPI374_125
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r8, #0
.LBB374_29:	@ bb2.i516
	ldr r1, .LCPI374_126
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r8, r8, #1
	cmp r8, r6
	bne .LBB374_29	@ bb2.i516
.LBB374_30:	@ bb32
	ldr r2, .LCPI374_132
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl print_obstack_name
	add r6, r4, #3
	cmp r6, #1
	blt .LBB374_33	@ bb33
.LBB374_31:	@ bb.i519
	ldr r1, .LCPI374_125
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r8, #0
.LBB374_32:	@ bb2.i524
	ldr r1, .LCPI374_126
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r8, r8, #1
	cmp r8, r6
	bne .LBB374_32	@ bb2.i524
.LBB374_33:	@ bb33
	mov r0, r5
	emit_nops_till_bundle_end
	bl object_permanent_p
	ldrb r3, [r5, #+9]
	mov r2, r5
	ldrb r1, [r2, #+8]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	orr r3, r3, r2, lsl #16
	mov r2, #1
	and r2, r2, r3, lsr #10
	cmp r0, r2
	beq .LBB374_49	@ bb47
.LBB374_34:	@ bb39
	tst r3, #1, 22 @ 1024
	ldreq r0, .LCPI374_133
	ldrne r0, .LCPI374_134
	b .LBB374_45	@ bb45
	.align	4
.LBB374_35:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_122:
 	.long	tree_code_type

.LBB374_36:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_123:
 	.long	3134165325			@ 0xBACF914D

.LBB374_37:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_124:
 	.long	table

.LBB374_38:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_125:
 	.long	.str1869

.LBB374_39:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_126:
 	.long	.str11870

.LBB374_40:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_127:
 	.long	tree_code_name

.LBB374_41:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_128:
 	.long	.str21871

.LBB374_42:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_129:
 	.long	.str31872

.LBB374_43:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_130:
 	.long	.str41873

.LBB374_44:	@ bb45
	.align	4
.LBB374_45:	@ bb45
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_46:	@ bb46
	add r6, r4, #3
	cmp r6, #1
	blt .LBB374_49	@ bb47
.LBB374_47:	@ bb.i527
	ldr r1, .LCPI374_125
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r8, #0
.LBB374_48:	@ bb2.i532
	ldr r1, .LCPI374_126
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r8, r8, #1
	cmp r8, r6
	bne .LBB374_48	@ bb2.i532
.LBB374_49:	@ bb47
	ldrb r3, [r5, #+9]
	tst r3, #1
	beq .LBB374_51	@ bb53
.LBB374_50:	@ bb52
	ldr r0, .LCPI374_135
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_51:	@ bb53
	ldrb r3, [r5, #+9]
	tst r3, #32
	beq .LBB374_53	@ bb59
.LBB374_52:	@ bb58
	ldr r0, .LCPI374_136
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_53:	@ bb59
	ldrb r3, [r5, #+9]
	tst r3, #2
	beq .LBB374_55	@ bb65
.LBB374_54:	@ bb64
	ldr r0, .LCPI374_137
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_55:	@ bb65
	ldrb r3, [r5, #+9]
	tst r3, #8
	beq .LBB374_57	@ bb71
.LBB374_56:	@ bb70
	ldr r0, .LCPI374_138
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_57:	@ bb71
	ldrb r3, [r5, #+9]
	tst r3, #16
	beq .LBB374_59	@ bb77
.LBB374_58:	@ bb76
	ldr r0, .LCPI374_139
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_59:	@ bb77
	ldrb r3, [r5, #+9]
	tst r3, #64
	beq .LBB374_61	@ bb83
.LBB374_60:	@ bb82
	ldr r0, .LCPI374_140
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_61:	@ bb83
	ldrb r3, [r5, #+9]
	tst r3, #128
	beq .LBB374_63	@ bb89
.LBB374_62:	@ bb88
	ldr r0, .LCPI374_141
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_63:	@ bb89
	ldrb r3, [r5, #+10]
	tst r3, #1
	beq .LBB374_65	@ bb95
.LBB374_64:	@ bb94
	ldr r0, .LCPI374_142
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_65:	@ bb95
	ldrb r3, [r5, #+10]
	tst r3, #2
	beq .LBB374_67	@ bb101
.LBB374_66:	@ bb100
	ldr r0, .LCPI374_143
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_67:	@ bb101
	ldrb r3, [r5, #+9]
	tst r3, #4
	beq .LBB374_69	@ bb107
.LBB374_68:	@ bb106
	ldr r0, .LCPI374_144
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_69:	@ bb107
	ldrb r3, [r5, #+10]
	tst r3, #8
	beq .LBB374_71	@ bb113
.LBB374_70:	@ bb112
	ldr r0, .LCPI374_145
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_71:	@ bb113
	ldrb r3, [r5, #+10]
	tst r3, #4
	beq .LBB374_73	@ bb119
.LBB374_72:	@ bb118
	ldr r0, .LCPI374_146
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_73:	@ bb119
	ldrb r3, [r5, #+10]
	tst r3, #64
	beq .LBB374_75	@ bb125
.LBB374_74:	@ bb124
	ldr r0, .LCPI374_147
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_75:	@ bb125
	ldrb r3, [r5, #+10]
	tst r3, #128
	beq .LBB374_77	@ bb131
.LBB374_76:	@ bb130
	ldr r0, .LCPI374_148
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_77:	@ bb131
	ldrb r3, [r5, #+11]
	tst r3, #1
	beq .LBB374_79	@ bb137
.LBB374_78:	@ bb136
	ldr r0, .LCPI374_149
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_79:	@ bb137
	ldrb r3, [r5, #+11]
	tst r3, #2
	beq .LBB374_81	@ bb143
.LBB374_80:	@ bb142
	ldr r0, .LCPI374_150
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_81:	@ bb143
	ldrb r3, [r5, #+11]
	tst r3, #4
	beq .LBB374_83	@ bb149
.LBB374_82:	@ bb148
	ldr r0, .LCPI374_151
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_83:	@ bb149
	ldrb r3, [r5, #+11]
	tst r3, #8
	beq .LBB374_85	@ bb155
.LBB374_84:	@ bb154
	ldr r0, .LCPI374_152
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_85:	@ bb155
	ldrb r3, [r5, #+11]
	tst r3, #16
	beq .LBB374_87	@ bb161
.LBB374_86:	@ bb160
	ldr r0, .LCPI374_153
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_87:	@ bb161
	ldr r3, .LCPI374_122
	ldr r3, [r3]
	ldrb r2, [r5, #+8]
	ldr r3, [r3, +r2, lsl #2]
	ldrsb r3, [r3]
	cmp r3, #59
	ble .LBB374_367	@ bb161
.LBB374_88:	@ bb161
	cmp r3, #97
	ble .LBB374_370	@ bb161
.LBB374_89:	@ bb161
	cmp r3, #113
	bgt .LBB374_156	@ bb161
.LBB374_90:	@ bb161
	sub r3, r3, #98
	cmp r3, #3
	bhi .LBB374_362	@ bb509
.LBB374_91:	@ bb161
	.set PCRELV30, (.LJTI374_0_0-(.LPCRELL30+8))
.LPCRELL30:
	add r1, pc, #PCRELV30
	ldr pc, [r1, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI374_0_0:
	.long	 .LBB374_276
	.long	 .LBB374_159
	.long	 .LBB374_92
	.long	 .LBB374_371

.text
@ JUMP TABLE END



	.align	2
.LBB374_92:	@ bb162
	ldrb r2, [r5, #+29]
	ldrsb r6, [r5, #+28]
	tst r2, #64
	beq .LBB374_94	@ bb168
.LBB374_93:	@ bb167
	ldr r0, .LCPI374_154
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_94:	@ bb168
	ldrb r2, [r5, #+29]
	tst r2, #128
	beq .LBB374_96	@ bb174
.LBB374_95:	@ bb173
	ldr r0, .LCPI374_155
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_96:	@ bb174
	ldrb r2, [r5, #+30]
	tst r2, #1
	beq .LBB374_98	@ bb180
.LBB374_97:	@ bb179
	ldr r0, .LCPI374_156
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_98:	@ bb180
	ldrb r2, [r5, #+30]
	tst r2, #2
	beq .LBB374_100	@ bb186
.LBB374_99:	@ bb185
	ldr r0, .LCPI374_157
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_100:	@ bb186
	ldrb r2, [r5, #+29]
	tst r2, #1
	beq .LBB374_102	@ bb192
.LBB374_101:	@ bb191
	ldr r0, .LCPI374_158
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_102:	@ bb192
	ldrb r2, [r5, #+29]
	tst r2, #4
	beq .LBB374_104	@ bb198
.LBB374_103:	@ bb197
	ldr r0, .LCPI374_159
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_104:	@ bb198
	ldrb r2, [r5, #+29]
	tst r2, #4
	beq .LBB374_106	@ bb204
.LBB374_105:	@ bb203
	ldr r0, .LCPI374_160
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_106:	@ bb204
	ldrb r2, [r5, #+29]
	tst r2, #2
	beq .LBB374_108	@ bb210
.LBB374_107:	@ bb209
	ldr r0, .LCPI374_161
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_108:	@ bb210
	ldrb r2, [r5, #+29]
	tst r2, #8
	beq .LBB374_110	@ bb216
.LBB374_109:	@ bb215
	ldr r0, .LCPI374_162
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_110:	@ bb216
	ldrb r2, [r5, #+8]
	cmp r2, #32
	bne .LBB374_113	@ bb223
.LBB374_111:	@ bb217
	ldrb r2, [r5, #+29]
	tst r2, #1
	beq .LBB374_113	@ bb223
.LBB374_112:	@ bb222
	ldr r0, .LCPI374_163
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_113:	@ bb223
	ldrb r2, [r5, #+8]
	cmp r2, #29
	bne .LBB374_116	@ bb230
.LBB374_114:	@ bb224
	ldrb r2, [r5, #+29]
	tst r2, #16
	beq .LBB374_116	@ bb230
.LBB374_115:	@ bb229
	ldr r0, .LCPI374_164
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_116:	@ bb230
	ldrb r2, [r5, #+8]
	cmp r2, #29
	bne .LBB374_119	@ bb237
.LBB374_117:	@ bb231
	ldrb r2, [r5, #+9]
	tst r2, #64
	beq .LBB374_119	@ bb237
.LBB374_118:	@ bb236
	ldr r0, .LCPI374_165
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_119:	@ bb237
	ldrb r2, [r5, #+8]
	cmp r2, #36
	bne .LBB374_122	@ bb244
.LBB374_120:	@ bb238
	ldrb r2, [r5, #+29]
	tst r2, #16
	beq .LBB374_122	@ bb244
.LBB374_121:	@ bb243
	ldr r0, .LCPI374_166
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_122:	@ bb244
	ldrb r2, [r5, #+8]
	cmp r2, #30
	bne .LBB374_125	@ bb251
.LBB374_123:	@ bb245
	ldrb r2, [r5, #+29]
	tst r2, #16
	beq .LBB374_125	@ bb251
.LBB374_124:	@ bb250
	ldr r0, .LCPI374_167
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_125:	@ bb251
	ldrb r2, [r5, #+8]
	cmp r2, #33
	bne .LBB374_128	@ bb258
.LBB374_126:	@ bb252
	ldrb r2, [r5, #+29]
	tst r2, #16
	beq .LBB374_128	@ bb258
.LBB374_127:	@ bb257
	ldr r0, .LCPI374_168
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_128:	@ bb258
	ldrb r2, [r5, #+29]
	tst r2, #32
	beq .LBB374_130	@ bb264
.LBB374_129:	@ bb263
	ldr r0, .LCPI374_169
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_130:	@ bb264
	ldrb r2, [r5, #+30]
	tst r2, #4
	beq .LBB374_132	@ bb270
.LBB374_131:	@ bb269
	ldr r0, .LCPI374_170
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_132:	@ bb270
	ldrb r2, [r5, #+30]
	tst r2, #8
	beq .LBB374_134	@ bb276
.LBB374_133:	@ bb275
	ldr r0, .LCPI374_171
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_134:	@ bb276
	ldrb r2, [r5, #+31]
	tst r2, #1
	beq .LBB374_136	@ bb282
.LBB374_135:	@ bb281
	ldr r0, .LCPI374_172
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_136:	@ bb282
	ldrb r2, [r5, #+31]
	tst r2, #2
	beq .LBB374_138	@ bb288
.LBB374_137:	@ bb287
	ldr r0, .LCPI374_173
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_138:	@ bb288
	ldrb r2, [r5, #+31]
	tst r2, #4
	beq .LBB374_140	@ bb294
.LBB374_139:	@ bb293
	ldr r0, .LCPI374_174
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_140:	@ bb294
	ldrb r2, [r5, #+31]
	tst r2, #8
	beq .LBB374_142	@ bb300
.LBB374_141:	@ bb299
	ldr r0, .LCPI374_175
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_142:	@ bb300
	ldrb r2, [r5, #+31]
	tst r2, #16
	beq .LBB374_144	@ bb306
.LBB374_143:	@ bb305
	ldr r0, .LCPI374_176
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_144:	@ bb306
	ldrb r2, [r5, #+31]
	tst r2, #32
	beq .LBB374_146	@ bb312
.LBB374_145:	@ bb311
	ldr r0, .LCPI374_177
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_146:	@ bb312
	ldrb r2, [r5, #+31]
	tst r2, #64
	beq .LBB374_148	@ bb318
.LBB374_147:	@ bb317
	ldr r0, .LCPI374_178
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_148:	@ bb318
	ldrb r2, [r5, #+29]
	mov r3, r5
	ldrb r1, [r3, #+28]!
	orr r2, r1, r2, lsl #8
	ldrb r1, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r1, lsl #8
	orr r2, r2, r3, lsl #16
	cmp r2, #0
	bge .LBB374_150	@ bb324
.LBB374_149:	@ bb323
	ldr r0, .LCPI374_179
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_150:	@ bb324
	ldr r2, .LCPI374_180
	ldr r2, [r2, +r6, lsl #2]
	ldr r1, .LCPI374_130
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+12]
	ldr r3, [r5, #+16]
	ldr r1, .LCPI374_181
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+20]
	add r6, r4, #4
	ldr r1, .LCPI374_182
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+20]
	ldr r1, .LCPI374_183
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	add r8, r4, #3
	cmp r8, #1
	blt .LBB374_153	@ indent_to.exit550
.LBB374_151:	@ bb.i543
	ldr r1, .LCPI374_125
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r9, #0
.LBB374_152:	@ bb2.i548
	ldr r1, .LCPI374_126
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r9, r9, #1
	cmp r9, r8
	bne .LBB374_152	@ bb2.i548
.LBB374_153:	@ indent_to.exit550
	ldrb r2, [r5, #+8]
	cmp r2, #29
	beq .LBB374_172	@ bb326
.LBB374_154:	@ bb325
	ldr r2, [r5, #+72]
	ldr r1, .LCPI374_184
	b .LBB374_175	@ bb337
	.align	4
.LBB374_155:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_131:
 	.long	.str131882

	.align	4
.LBB374_156:	@ bb161
	sub r1, r3, #114
	cmp r1, #2
	blo .LBB374_371	@ bb450
.LBB374_157:	@ bb161
	cmp r3, #116
	beq .LBB374_213	@ bb350
.LBB374_158:	@ bb161
	cmp r3, #120
	bne .LBB374_362	@ bb509
	.align	2
.LBB374_159:	@ bb469
	cmp r2, #24
	bgt .LBB374_311	@ bb469
.LBB374_160:	@ bb469
	sub r2, r2, #1
	cmp r2, #3
	bhi .LBB374_362	@ bb509
.LBB374_161:	@ bb469
	.set PCRELV31, (.LJTI374_3_3-(.LPCRELL31+8))
.LPCRELL31:
	add r3, pc, #PCRELV31
	ldr pc, [r3, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI374_3_3:
	.long	 .LBB374_162
	.long	 .LBB374_360
	.long	 .LBB374_345
	.long	 .LBB374_350

.text
@ JUMP TABLE END



	.align	2
.LBB374_162:	@ bb499
	mov r0, r7
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl print_lang_identifier
	b .LBB374_362	@ bb509
	.align	4
.LBB374_163:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_132:
 	.long	.str141883

.LBB374_164:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_133:
 	.long	.str161885

.LBB374_165:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_134:
 	.long	.str151884

.LBB374_166:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_135:
 	.long	.str171886

.LBB374_167:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_136:
 	.long	.str181887

.LBB374_168:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_137:
 	.long	.str191888

.LBB374_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_138:
 	.long	.str201889

.LBB374_170:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_139:
 	.long	.str211890

.LBB374_171:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_140:
 	.long	.str221891

	.align	4
.LBB374_172:	@ bb326
	ldrb r2, [r5, #+29]
	mov r3, r5
	ldrb r1, [r3, #+28]!
	orr r2, r1, r2, lsl #8
	ldrb r1, [r3, #+3]
	ldrb r3, [r3, #+2]
	orr r3, r3, r1, lsl #8
	orr r2, r2, r3, lsl #16
	tst r2, #2, 22 @ 2048
	bne .LBB374_374	@ bb331
.LBB374_173:	@ bb332
	tst r2, #1, 20 @ 4096
	beq .LBB374_176	@ bb338
.LBB374_174:	@ bb337
	ldr r2, [r5, #+72]
	ldr r1, .LCPI374_185
.LBB374_175:	@ bb337
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_176:	@ bb338
	ldrb r2, [r5, #+8]
	cmp r2, #36
	ldreq r2, [r5, #+40]
	ldreq r1, .LCPI374_186
	moveq r0, r7
	moveq r3, r6
	emit_nops_till_bundle_end
	bleq print_node
.LBB374_177:	@ bb339
.LBB374_178:	@ bb340
	ldr r2, [r5, #+36]
	ldr r1, .LCPI374_187
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	ldr r2, [r5, #+64]
	ldr r1, .LCPI374_188
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	ldr r2, [r5, #+52]
	ldr r1, .LCPI374_189
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	ldr r2, [r5, #+40]
	ldr r1, .LCPI374_190
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+44]
	ldr r1, .LCPI374_191
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+48]
	ldr r1, .LCPI374_192
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	mov r0, r7
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl print_lang_decl
	ldr r2, [r5, #+68]
	cmp r2, #0
	beq .LBB374_183	@ bb342
.LBB374_179:	@ bb341
	cmp r6, #1
	blt .LBB374_182	@ indent_to.exit566
.LBB374_180:	@ bb.i559
	ldr r1, .LCPI374_193
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r8, #0
.LBB374_181:	@ bb2.i564
	ldr r1, .LCPI374_194
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r8, r8, #1
	cmp r8, r6
	bne .LBB374_181	@ bb2.i564
.LBB374_182:	@ indent_to.exit566
	ldr r1, [r5, #+68]
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_rtl
.LBB374_183:	@ bb342
	ldr r2, [r5, #+76]
	cmp r2, #0
	beq .LBB374_193	@ bb347
.LBB374_184:	@ bb343
	cmp r6, #1
	blt .LBB374_187	@ indent_to.exit574
.LBB374_185:	@ bb.i567
	ldr r1, .LCPI374_193
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r8, #0
.LBB374_186:	@ bb2.i572
	ldr r1, .LCPI374_194
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r8, r8, #1
	cmp r8, r6
	bne .LBB374_186	@ bb2.i572
.LBB374_187:	@ indent_to.exit574
	ldrb r2, [r5, #+8]
	cmp r2, #29
	beq .LBB374_192	@ bb346
.LBB374_188:	@ indent_to.exit574
	and r2, r2, #255
	cmp r2, #34
	bne .LBB374_193	@ bb347
.LBB374_189:	@ bb344
	ldr r1, .LCPI374_195
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r1, [r5, #+76]
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_rtl
	b .LBB374_193	@ bb347
	.align	4
.LBB374_190:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_141:
 	.long	.str231892

.LBB374_191:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_142:
 	.long	.str241893

	.align	4
.LBB374_192:	@ bb346
	ldr r1, .LCPI374_196
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+76]
	ldr r1, .LCPI374_197
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_193:	@ bb347
	ldr r2, [r5]
	cmp r4, #4
	bne .LBB374_272	@ bb349
.LBB374_194:	@ bb348
	ldr r1, .LCPI374_198
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	b .LBB374_362	@ bb509
	.align	4
.LBB374_195:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_143:
 	.long	.str251894

.LBB374_196:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_144:
 	.long	.str261895

.LBB374_197:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_145:
 	.long	.str271896

.LBB374_198:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_146:
 	.long	.str281897

.LBB374_199:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_147:
 	.long	.str291898

.LBB374_200:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_148:
 	.long	.str301899

.LBB374_201:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_149:
 	.long	.str311900

.LBB374_202:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_150:
 	.long	.str321901

.LBB374_203:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_151:
 	.long	.str331902

.LBB374_204:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_152:
 	.long	.str341903

.LBB374_205:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_153:
 	.long	.str351904

.LBB374_206:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_154:
 	.long	.str361905

.LBB374_207:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_155:
 	.long	.str371906

.LBB374_208:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_156:
 	.long	.str381907

.LBB374_209:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_157:
 	.long	.str391908

.LBB374_210:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_158:
 	.long	.str401909

.LBB374_211:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_159:
 	.long	.str411910

.LBB374_212:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_160:
 	.long	.str421911

	.align	4
.LBB374_213:	@ bb350
	ldrb r2, [r5, #+30]
	tst r2, #2
	beq .LBB374_215	@ bb356
.LBB374_214:	@ bb355
	ldr r0, .LCPI374_199
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_215:	@ bb356
	ldrb r2, [r5, #+30]
	tst r2, #1
	beq .LBB374_217	@ bb362
.LBB374_216:	@ bb361
	ldr r0, .LCPI374_200
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_217:	@ bb362
	ldrb r2, [r5, #+30]
	tst r2, #4
	beq .LBB374_219	@ bb368
.LBB374_218:	@ bb367
	ldr r0, .LCPI374_201
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_219:	@ bb368
	ldrb r2, [r5, #+30]
	tst r2, #8
	beq .LBB374_221	@ bb374
.LBB374_220:	@ bb373
	ldr r0, .LCPI374_171
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_221:	@ bb374
	ldrb r2, [r5, #+30]
	tst r2, #16
	beq .LBB374_223	@ bb380
.LBB374_222:	@ bb379
	ldr r0, .LCPI374_160
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_223:	@ bb380
	ldrb r2, [r5, #+30]
	tst r2, #32
	beq .LBB374_225	@ bb386
.LBB374_224:	@ bb385
	ldr r0, .LCPI374_202
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_225:	@ bb386
	ldrb r2, [r5, #+30]
	tst r2, #64
	beq .LBB374_227	@ bb392
.LBB374_226:	@ bb391
	ldr r0, .LCPI374_203
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_227:	@ bb392
	ldrb r2, [r5, #+30]
	tst r2, #128
	beq .LBB374_229	@ bb398
.LBB374_228:	@ bb397
	ldr r0, .LCPI374_204
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_229:	@ bb398
	ldrb r2, [r5, #+31]
	tst r2, #1
	beq .LBB374_231	@ bb404
.LBB374_230:	@ bb403
	ldr r0, .LCPI374_205
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_231:	@ bb404
	ldrb r2, [r5, #+31]
	tst r2, #2
	beq .LBB374_233	@ bb410
.LBB374_232:	@ bb409
	ldr r0, .LCPI374_206
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_233:	@ bb410
	ldrb r2, [r5, #+31]
	tst r2, #4
	beq .LBB374_235	@ bb416
.LBB374_234:	@ bb415
	ldr r0, .LCPI374_207
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_235:	@ bb416
	ldrb r2, [r5, #+31]
	tst r2, #8
	beq .LBB374_237	@ bb422
.LBB374_236:	@ bb421
	ldr r0, .LCPI374_208
	mov r1, r7
	emit_nops_till_bundle_end
	bl fputs
.LBB374_237:	@ bb422
	ldrsb r2, [r5, #+29]
	ldr r3, .LCPI374_180
	ldr r2, [r3, +r2, lsl #2]
	ldr r1, .LCPI374_209
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+16]
	add r6, r4, #4
	ldr r1, .LCPI374_182
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	add r8, r4, #3
	cmp r8, #1
	blt .LBB374_240	@ indent_to.exit590
.LBB374_238:	@ bb.i583
	ldr r1, .LCPI374_3
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r9, #0
.LBB374_239:	@ bb2.i588
	ldr r1, .LCPI374_4
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r9, r9, #1
	cmp r9, r8
	bne .LBB374_239	@ bb2.i588
.LBB374_240:	@ indent_to.exit590
	ldr r2, [r5, #+32]
	ldr r1, .LCPI374_62
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+44]
	ldr r1, .LCPI374_85
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+20]
	ldr r1, .LCPI374_61
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldrb r2, [r5, #+8]
	sub r3, r2, #18
	and r3, r3, #255
	cmp r3, #1
	bls .LBB374_375	@ bb423
.LBB374_241:	@ bb424
	sub r3, r2, #7
	and r3, r3, #255
	cmp r3, #5
	bhi .LBB374_253	@ bb434
.LBB374_242:	@ bb424
	.set PCRELV32, (.LJTI374_1_1-(.LPCRELL32+8))
.LPCRELL32:
	add r1, pc, #PCRELV32
	ldr pc, [r1, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI374_1_1:
	.long	 .LBB374_243
	.long	 .LBB374_247
	.long	 .LBB374_253
	.long	 .LBB374_246
	.long	 .LBB374_243
	.long	 .LBB374_243

.text
@ JUMP TABLE END



	.align	2
.LBB374_243:	@ bb429
	ldrb r2, [r5, #+28]
	ldr r1, .LCPI374_87
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+52]
	ldr r1, .LCPI374_88
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+56]
	ldr r1, .LCPI374_89
	b .LBB374_259	@ bb442
	.align	4
.LBB374_244:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_161:
 	.long	.str431912

.LBB374_245:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_162:
 	.long	.str441913

	.align	4
.LBB374_246:	@ bb431
	ldrb r2, [r5, #+28]
	ldr r1, .LCPI374_87
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	ldr r2, [r5, #+52]
	ldr r1, .LCPI374_88
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+56]
	ldr r1, .LCPI374_89
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+12]
	ldr r1, .LCPI374_90
	b .LBB374_259	@ bb442
	.align	2
.LBB374_247:	@ bb433
	ldrb r2, [r5, #+28]
	ldr r1, .LCPI374_87
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB374_260	@ bb443
	.align	4
.LBB374_248:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_163:
 	.long	.str451914

.LBB374_249:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_164:
 	.long	.str461915

.LBB374_250:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_165:
 	.long	.str471916

.LBB374_251:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_166:
 	.long	.str481917

.LBB374_252:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_167:
 	.long	.str491918

	.align	4
.LBB374_253:	@ bb434
	sub r3, r2, #20
	and r3, r3, #255
	cmp r3, #2
	bls .LBB374_377	@ bb435
.LBB374_254:	@ bb436
	and r3, r2, #255
	cmp r3, #16
	andne r2, r2, #255
	cmpne r2, #23
	bne .LBB374_260	@ bb443
.LBB374_255:	@ bb436
.LBB374_256:	@ bb440
	ldr r2, [r5, #+56]
	cmp r2, #0
	ldrne r1, .LCPI374_92
	movne r0, r7
	movne r3, r6
	emit_nops_till_bundle_end
	blne print_node_brief
.LBB374_257:	@ bb441
.LBB374_258:	@ bb442
	ldr r2, [r5, #+12]
	ldr r1, .LCPI374_93
.LBB374_259:	@ bb442
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node
.LBB374_260:	@ bb443
	ldr r2, [r5, #+76]
	cmp r2, #0
	ldrne r1, .LCPI374_66
	movne r0, r7
	movne r3, r6
	emit_nops_till_bundle_end
	blne print_node_brief
.LBB374_261:	@ bb444
.LBB374_262:	@ bb445
	mov r0, r7
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl print_lang_type
	ldr r2, [r5, #+36]
	cmp r2, #0
	bne .LBB374_268	@ bb447
.LBB374_263:	@ bb446
	mov r2, #1
	mov r4, #0
	cmp r8, #1
	movlt r4, r2
	ldr r2, [r5]
	cmp r2, #0
	beq .LBB374_271	@ bb448
.LBB374_264:	@ bb446
	cmp r4, #0
	beq .LBB374_269	@ bb.i575
	b .LBB374_271	@ bb448
	.align	4
.LBB374_265:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_168:
 	.long	.str501919

.LBB374_266:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_169:
 	.long	.str511920

.LBB374_267:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_170:
 	.long	.str521921

	.align	4
.LBB374_268:	@ bb447
	cmp r8, #1
	blt .LBB374_271	@ bb448
.LBB374_269:	@ bb.i575
	ldr r1, .LCPI374_3
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r4, #0
.LBB374_270:	@ bb2.i580
	ldr r1, .LCPI374_4
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r4, r4, #1
	cmp r4, r8
	bne .LBB374_270	@ bb2.i580
.LBB374_271:	@ bb448
	ldr r2, [r5, #+36]
	ldr r1, .LCPI374_94
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	ldr r2, [r5, #+40]
	ldr r1, .LCPI374_95
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	ldr r2, [r5]
.LBB374_272:	@ bb349
	ldr r1, .LCPI374_74
	mov r0, r7
	mov r3, r6
	emit_nops_till_bundle_end
	bl print_node_brief
	b .LBB374_362	@ bb509
	.align	4
.LBB374_273:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_171:
 	.long	.str531922

.LBB374_274:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_172:
 	.long	.str541923

.LBB374_275:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_173:
 	.long	.str551924

	.align	4
.LBB374_276:	@ bb449
	ldr r2, [r5, #+16]
	add r4, r4, #4
	ldr r1, .LCPI374_96
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+20]
	ldr r1, .LCPI374_97
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+28]
	ldr r1, .LCPI374_98
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+24]
	ldr r1, .LCPI374_99
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5]
	ldr r1, .LCPI374_74
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+32]
	ldr r1, .LCPI374_68
.LBB374_277:	@ bb451
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	b .LBB374_363	@ return
	.align	4
.LBB374_278:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_174:
 	.long	.str561925

.LBB374_279:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_175:
 	.long	.str571926

.LBB374_280:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_176:
 	.long	.str581927

	.align	4
.LBB374_281:	@ bb452
	ldr r3, .LCPI374_102
	ldr r3, [r3]
	ldr r6, [r3, +r2, lsl #2]
	cmp r2, #107
	bgt .LBB374_287	@ bb452
.LBB374_282:	@ bb452
	cmp r2, #50
	beq .LBB374_290	@ bb453
.LBB374_283:	@ bb452
	cmp r2, #51
	beq .LBB374_292	@ bb455
.LBB374_284:	@ bb452
	cmp r2, #52
	bne .LBB374_289	@ bb452.bb468.preheader_crit_edge
.LBB374_285:	@ bb456
	mov r8, #1
	b .LBB374_299	@ bb468.preheader
	.align	4
.LBB374_286:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_177:
 	.long	.str591928

	.align	4
.LBB374_287:	@ bb452
	cmp r2, #108
	beq .LBB374_290	@ bb453
.LBB374_288:	@ bb452
	cmp r2, #109
	beq .LBB374_298	@ bb457
.LBB374_289:	@ bb452.bb468.preheader_crit_edge
	mov r8, r6
	b .LBB374_299	@ bb468.preheader
.LBB374_290:	@ bb453
	mov r8, #2
	b .LBB374_299	@ bb468.preheader
	.align	4
.LBB374_291:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_178:
 	.long	.str601929

	.align	4
.LBB374_292:	@ bb455
	mov r8, #3
	b .LBB374_299	@ bb468.preheader
	.align	4
.LBB374_293:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_179:
 	.long	.str611930

.LBB374_294:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_180:
 	.long	mode_name

.LBB374_295:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_181:
 	.long	.str621931

.LBB374_296:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_182:
 	.long	.str631932

.LBB374_297:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_183:
 	.long	.str641933

	.align	4
.LBB374_298:	@ bb457
	mov r8, #0
.LBB374_299:	@ bb468.preheader
	cmp r6, #1
	blt .LBB374_362	@ bb509
.LBB374_300:	@ bb.nph603
	add r4, r4, #4
	mov r9, #0
.LBB374_301:	@ bb459
	cmp r9, r8
	blt .LBB374_309	@ bb464
.LBB374_302:	@ bb460
	cmp r4, #1
	blt .LBB374_305	@ indent_to.exit558
.LBB374_303:	@ bb.i551
	ldr r1, .LCPI374_3
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r10, #0
.LBB374_304:	@ bb2.i556
	ldr r1, .LCPI374_4
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r10, r10, #1
	cmp r10, r4
	bne .LBB374_304	@ bb2.i556
.LBB374_305:	@ indent_to.exit558
	ldr r1, .LCPI374_103
	mov r0, r7
	mov r2, r9
	emit_nops_till_bundle_end
	bl fprintf
	ldr r1, [r5, #+16]
	cmp r1, #0
	bne .LBB374_378	@ bb461
.LBB374_306:	@ bb462
	ldr r1, .LCPI374_104
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_307:	@ bb463
	ldr r1, .LCPI374_3
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB374_310	@ bb467
	.align	4
.LBB374_308:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_184:
 	.long	.str651934

	.align	4
.LBB374_309:	@ bb464
	mov r10, sp
	ldr r1, .LCPI374_105
	mov r0, r10
	mov r2, r9
	emit_nops_till_bundle_end
	bl sprintf
	ldr r2, [r5, #+16]
	mov r0, r7
	mov r1, r10
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
.LBB374_310:	@ bb467
	add r9, r9, #1
	add r5, r5, #4
	cmp r9, r6
	bne .LBB374_301	@ bb459
	b .LBB374_362	@ bb509
.LBB374_311:	@ bb469
	sub r3, r2, #25
	cmp r3, #3
	bhi .LBB374_362	@ bb509
.LBB374_312:	@ bb469
	.set PCRELV33, (.LJTI374_2_2-(.LPCRELL33+8))
.LPCRELL33:
	add r2, pc, #PCRELV33
	ldr pc, [r2, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI374_2_2:
	.long	 .LBB374_313
	.long	 .LBB374_330
	.long	 .LBB374_340
	.long	 .LBB374_341

.text
@ JUMP TABLE END



	.align	2
.LBB374_313:	@ bb470
	ldrb r4, [r5, #+10]
	tst r4, #4
	beq .LBB374_315	@ bb476
.LBB374_314:	@ bb475
	ldr r1, .LCPI374_106
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_315:	@ bb476
	ldr r2, [r5, #+16]
	cmn r2, #1
	beq .LBB374_319	@ bb479
.LBB374_316:	@ bb476
	cmp r2, #0
	bne .LBB374_323	@ bb481
.LBB374_317:	@ bb477
	ldr r2, [r5, #+12]
	ldr r1, .LCPI374_107
	b .LBB374_321	@ bb480
	.align	4
.LBB374_318:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_185:
 	.long	.str671936

	.align	4
.LBB374_319:	@ bb479
	ldr r4, [r5, #+12]
	cmp r4, #0
	beq .LBB374_323	@ bb481
.LBB374_320:	@ bb480
	rsb r2, r4, #0
	ldr r1, .LCPI374_108
.LBB374_321:	@ bb480
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB374_362	@ bb509
	.align	4
.LBB374_322:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_186:
 	.long	.str681937

	.align	4
.LBB374_323:	@ bb481
	ldr r3, [r5, #+12]
	ldr r1, .LCPI374_109
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB374_362	@ bb509
	.align	4
.LBB374_324:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_187:
 	.long	.str691938

.LBB374_325:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_188:
 	.long	.str701939

.LBB374_326:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_189:
 	.long	.str711940

.LBB374_327:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_190:
 	.long	.str721941

.LBB374_328:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_191:
 	.long	.str731942

.LBB374_329:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_192:
 	.long	.str741943

	.align	4
.LBB374_330:	@ bb482
	ldrb r4, [r5, #+10]
	tst r4, #8
	beq .LBB374_332	@ bb488
.LBB374_331:	@ bb487
	ldr r1, .LCPI374_106
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_332:	@ bb488
	ldr r4, [r5, #+20]
	ldr r5, [r5, #+16]
	mov r0, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl target_isinf
	cmp r0, #0
	beq .LBB374_335	@ bb490
.LBB374_333:	@ bb489
	ldr r1, .LCPI374_110
.LBB374_334:	@ bb489
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB374_362	@ bb509
.LBB374_335:	@ bb490
	mov r0, r5
	mov r1, r4
	emit_nops_till_bundle_end
	bl target_isnan
	cmp r0, #0
	beq .LBB374_339	@ bb492
.LBB374_336:	@ bb491
	ldr r1, .LCPI374_111
	b .LBB374_334	@ bb489
	.align	4
.LBB374_337:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_193:
 	.long	.str1869

.LBB374_338:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_194:
 	.long	.str11870

	.align	4
.LBB374_339:	@ bb492
	add r6, sp, #10
	ldr r1, .LCPI374_112
	mov r0, r6
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl sprintf
	ldr r1, .LCPI374_8
	mov r0, r7
	mov r2, r6
	emit_nops_till_bundle_end
	bl fprintf
	b .LBB374_362	@ bb509
	.align	2
.LBB374_340:	@ bb495
	ldr r2, [r5, #+16]
	add r4, r4, #4
	ldr r1, .LCPI374_113
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+20]
	ldr r1, .LCPI374_114
	b .LBB374_361	@ bb508
	.align	2
.LBB374_341:	@ bb496
	ldr r2, [r5, #+20]
	ldr r1, .LCPI374_115
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r3, r4, #4
	ldr r2, [r5]
	cmp r4, #4
	bne .LBB374_343	@ bb498
.LBB374_342:	@ bb497
	ldr r1, .LCPI374_74
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_node
	b .LBB374_362	@ bb509
.LBB374_343:	@ bb498
	ldr r1, .LCPI374_74
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_node_brief
	b .LBB374_362	@ bb509
	.align	4
.LBB374_344:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_195:
 	.long	.str751944

	.align	4
.LBB374_345:	@ bb500
	ldr r2, [r5, #+12]
	add r4, r4, #4
	ldr r1, .LCPI374_116
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+16]
	ldr r1, .LCPI374_117
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5]
	ldr r1, .LCPI374_74
	b .LBB374_361	@ bb508
	.align	4
.LBB374_346:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_196:
 	.long	.str761945

.LBB374_347:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_197:
 	.long	.str31872

.LBB374_348:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_198:
 	.long	.str771946

.LBB374_349:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_199:
 	.long	.str781947

	.align	4
.LBB374_350:	@ bb501
	ldr r6, [r5, #+12]
	cmp r6, #1
	blt .LBB374_362	@ bb509
.LBB374_351:	@ bb.nph
	add r4, r4, #4
	cmp r4, #0
	ble .LBB374_382	@ bb.nph.bb502_crit_edge
.LBB374_352:	@ bb.nph.bb502.us_crit_edge
	mov r8, #0
	mov r9, #0
.LBB374_353:	@ bb502.us
	ldr r3, [r5, #+16]
	cmp r3, #0
	beq .LBB374_357	@ bb506.us
.LBB374_354:	@ bb503.us
	add r0, sp, #110
	ldr r1, .LCPI374_118
	mov r2, r8
	emit_nops_till_bundle_end
	bl sprintf
	ldr r1, .LCPI374_3
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	mov r10, #0
.LBB374_355:	@ bb2.i540.us
	ldr r1, .LCPI374_4
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
	add r10, r10, #1
	cmp r10, r4
	bne .LBB374_355	@ bb2.i540.us
.LBB374_356:	@ indent_to.exit542.loopexit.us
	ldr r2, [r5, #+16]
	add r1, sp, #110
	mov r0, r7
	mov r3, r9
	emit_nops_till_bundle_end
	bl print_node_brief
.LBB374_357:	@ bb506.us
	add r8, r8, #1
	add r5, r5, #4
	cmp r8, r6
	bne .LBB374_353	@ bb502.us
	b .LBB374_362	@ bb509
	.align	4
.LBB374_358:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_200:
 	.long	.str791948

.LBB374_359:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_201:
 	.long	.str801949

	.align	4
.LBB374_360:	@ bb508
	ldr r2, [r5, #+12]
	add r4, r4, #4
	ldr r1, .LCPI374_119
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+16]
	ldr r1, .LCPI374_120
.LBB374_361:	@ bb508
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
.LBB374_362:	@ bb509
	ldr r1, .LCPI374_121
	mov r0, r7
	emit_nops_till_bundle_end
	bl fprintf
.LBB374_363:	@ return
	sfi_add sp, sp, #120
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, lr}
	sfi_add sp, sp, #32
	sfi_bx lr
.LBB374_364:	@ bb2
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node_brief
	b .LBB374_363	@ return
	.align	4
.LBB374_365:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_202:
 	.long	.str811950

.LBB374_366:	@ bb44
	.align	4
.LBB374_367:	@ bb161
	sub r3, r3, #49
	cmp r3, #2
	bhs .LBB374_362	@ bb509
	b .LBB374_371	@ bb450
	.align	4
.LBB374_368:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_203:
 	.long	.str821951

.LBB374_369:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_204:
 	.long	.str831952

	.align	4
.LBB374_370:	@ bb161
	cmp r3, #60
	bne .LBB374_362	@ bb509
	.align	2
.LBB374_371:	@ bb450
	and r3, r2, #255
	cmp r3, #49
	bne .LBB374_281	@ bb452
.LBB374_372:	@ bb451
	ldr r2, [r5, #+16]
	add r4, r4, #4
	ldr r1, .LCPI374_96
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+20]
	ldr r1, .LCPI374_100
	mov r0, r7
	mov r3, r4
	emit_nops_till_bundle_end
	bl print_node
	ldr r2, [r5, #+24]
	ldr r1, .LCPI374_101
	b .LBB374_277	@ bb451
	.align	4
.LBB374_373:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_205:
 	.long	.str841953

	.align	4
.LBB374_374:	@ bb331
	ldr r2, [r5, #+72]
	ldr r1, .LCPI374_63
	b .LBB374_175	@ bb337
.LBB374_375:	@ bb423
	ldr r2, [r5, #+12]
	ldr r1, .LCPI374_86
	b .LBB374_259	@ bb442
	.align	4
.LBB374_376:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_206:
 	.long	.str851954

	.align	4
.LBB374_377:	@ bb435
	ldr r2, [r5, #+12]
	ldr r1, .LCPI374_91
	b .LBB374_259	@ bb442
.LBB374_378:	@ bb461
	mov r0, r7
	emit_nops_till_bundle_end
	bl print_rtl
	b .LBB374_307	@ bb463
	.align	4
.LBB374_379:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_207:
 	.long	.str861955

.LBB374_380:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_208:
 	.long	.str871956

.LBB374_381:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_209:
 	.long	.str41873

	.align	4
.LBB374_382:	@ bb.nph.bb502_crit_edge
	mov r4, #0
	mov r8, #0
.LBB374_383:	@ bb502
	ldr r3, [r5, #+16]
	cmp r3, #0
	beq .LBB374_385	@ bb506
.LBB374_384:	@ bb503
	add r9, sp, #110
	ldr r1, .LCPI374_118
	mov r0, r9
	mov r2, r4
	emit_nops_till_bundle_end
	bl sprintf
	ldr r2, [r5, #+16]
	mov r0, r7
	mov r1, r9
	mov r3, r8
	emit_nops_till_bundle_end
	bl print_node_brief
.LBB374_385:	@ bb506
	add r4, r4, #1
	add r5, r5, #4
	cmp r4, r6
	beq .LBB374_362	@ bb509
	b .LBB374_383	@ bb502
.LBB374_386:	@ bb20
	and r2, r2, #255
	cmp r2, #1
	beq .LBB374_20	@ bb24
	b .LBB374_21	@ bb25
	.align	4
.LBB374_387:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_3:
 	.long	.str1869

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_4:
 	.long	.str11870

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_8:
 	.long	.str41873

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_61:
 	.long	.str641933

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_62:
 	.long	.str651934

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_63:
 	.long	.str661935

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_66:
 	.long	.str691938

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_68:
 	.long	.str711940

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_74:
 	.long	.str771946

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_85:
 	.long	.str881957

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_86:
 	.long	.str891958

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_87:
 	.long	.str901959

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_88:
 	.long	.str911960

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_89:
 	.long	.str921961

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_90:
 	.long	.str931962

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_91:
 	.long	.str941963

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_92:
 	.long	.str951964

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_93:
 	.long	.str961965

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_94:
 	.long	.str971966

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_95:
 	.long	.str981967

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_96:
 	.long	.str991968

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_97:
 	.long	.str1001969

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_98:
 	.long	.str1011970

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_99:
 	.long	.str1021971

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_100:
 	.long	.str1031972

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_101:
 	.long	.str1041973

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_102:
 	.long	tree_code_length

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_103:
 	.long	.str1051974

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_104:
 	.long	.str1061975

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_105:
 	.long	.str1071976

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_106:
 	.long	.str51874

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_107:
 	.long	.str61875

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_108:
 	.long	.str71876

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_109:
 	.long	.str81877

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_110:
 	.long	.str91878

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_111:
 	.long	.str101879

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_112:
 	.long	.str111880

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_113:
 	.long	.str1081977

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_114:
 	.long	.str1091978

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_115:
 	.long	.str1101979

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_116:
 	.long	.str1111980

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_117:
 	.long	.str1121981

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_118:
 	.long	.str1131982

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_119:
 	.long	.str1141983

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_120:
 	.long	.str1151984

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI374_121:
 	.long	.str121881

	.size print_node, .-print_node


	.globl	debug_tree
	.align	4
debug_tree:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	mov r4, r0
	mov r5, #0
	mov r0, #0
	emit_nops_till_bundle_end
	bl oballoc
	mov r6, r0
	mov r0, #148
	emit_nops_till_bundle_end
	bl oballoc
	ldr r7, .LCPI375_0
	@comment
str r0, [r7]
	mov r1, #0
	mov r2, #148
	emit_nops_till_bundle_end
	bl memset
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI375_1
	mov r2, r4
	mov r3, #0
	emit_nops_till_bundle_end
	bl print_node
	@comment
str r5, [r7]
	mov r0, r6
	emit_nops_till_bundle_end
	bl obfree
	mov r0, #2
	emit_nops_till_bundle_end
	bl fileptr
	ldr r1, .LCPI375_2
	emit_nops_till_bundle_end
	bl fprintf
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
	.align	4
.LBB375_1:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI375_0:
 	.long	table

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI375_1:
 	.long	.str141883

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI375_2:
 	.long	.str1869

	.size debug_tree, .-debug_tree


	.globl	get_pending_sizes
	.align	4
get_pending_sizes:
	ldr r3, .LCPI376_0
	ldr r0, [r3]
	cmp r0, #0
	beq .LBB376_3	@ bb2
.LBB376_1:	@ entry.bb_crit_edge
	mov r3, r0
.LBB376_2:	@ bb
	ldr r2, .LCPI376_1
	ldr r2, [r2]
	ldr r1, [r3, #+16]
	@comment
str r2, [r1, #+20]
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB376_2	@ bb
.LBB376_3:	@ bb2
	ldr r3, .LCPI376_0
	mov r2, #0
	@comment
str r2, [r3]
	sfi_bx lr
	.align	4
.LBB376_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI376_0:
 	.long	pending_sizes

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI376_1:
 	.long	current_function_decl

	.size get_pending_sizes, .-get_pending_sizes


	.globl	mode_for_size
	.align	4
mode_for_size:
	cmp r2, #0
	beq .LBB377_6	@ entry.bb6_crit_edge
.LBB377_1:	@ bb
	ldr r3, .LCPI377_1
	ldr r3, [r3, #+24]
	mov r3, r3, lsl #3
	cmp r3, r0
	bhs .LBB377_6	@ entry.bb6_crit_edge
.LBB377_2:	@ bb.bb8_crit_edge
	mov r1, #26
.LBB377_3:	@ bb8
	mov r0, r1
	sfi_bx lr
.LBB377_4:	@ bb3
	ldr r3, .LCPI377_1
	ldr r3, [r3, +r1, lsl #2]
	mov r2, r3, lsl #3
	ldr r3, .LCPI377_2
	cmp r2, r0
	moveq r0, r1
	sfi_bxeq lr
.LBB377_5:	@ bb6
	ldr r1, [r3, +r1, lsl #2]
	cmp r1, #0
	bne .LBB377_4	@ bb3
	b .LBB377_2	@ bb.bb8_crit_edge
.LBB377_6:	@ entry.bb6_crit_edge
	ldr r3, .LCPI377_0
	b .LBB377_5	@ bb6
	.align	4
.LBB377_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI377_0:
 	.long	class_narrowest_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI377_1:
 	.long	mode_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI377_2:
 	.long	mode_wider_mode

	.size mode_for_size, .-mode_for_size


	.globl	get_best_mode
	.align	4
get_best_mode:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #8
	add r0, r0, r1
	sub r0, r0, #1
	@comment
str r0, [sp, #+4]
	ldr r0, .LCPI378_0
	add r0, r0, #4
	ldr r4, [sp, #+44]
	mov r5, r3
	@comment
str r2, [sp]
	mov r6, r1
	b .LBB378_3	@ bb2
.LBB378_1:	@ bb
	ldr r0, .LCPI378_1
	ldr r0, [r0, +r7, lsl #2]
	mov r8, r0, lsl #3
	ldr r0, [sp, #+4]
	mov r1, r8
	emit_nops_till_bundle_end
	bl __divsi3
	mov r9, r0
	mov r0, r6
	mov r1, r8
	emit_nops_till_bundle_end
	bl __divsi3
	cmp r0, r9
	beq .LBB378_4	@ bb3
.LBB378_2:	@ bb1
	ldr r0, .LCPI378_2
	add r0, r0, r7, lsl #2
.LBB378_3:	@ bb2
	ldr r7, [r0]
	cmp r7, #0
	bne .LBB378_1	@ bb
.LBB378_4:	@ bb3
	cmp r7, #29
	beq .LBB378_20	@ bb25
.LBB378_5:	@ bb4
	mov r3, #64
	cmp r8, #64
	mov r2, r8
	movgt r2, r3
	ldr r3, [sp]
	cmp r2, r3
	bgt .LBB378_20	@ bb25
.LBB378_6:	@ bb6
	cmp r5, #0
	beq .LBB378_8	@ bb9
.LBB378_7:	@ bb7
	ldr r3, .LCPI378_1
	ldr r3, [r3, +r5, lsl #2]
	mov r3, r3, lsl #3
	cmp r3, r8
	blt .LBB378_20	@ bb25
.LBB378_8:	@ bb9
	cmp r4, #0
	bne .LBB378_18	@ bb24
.LBB378_9:	@ bb21.preheader
	ldr r3, .LCPI378_0
	ldr r4, [r3, #+4]
	cmp r4, #0
	beq .LBB378_21	@ bb21.preheader.bb22_crit_edge
.LBB378_10:	@ bb.nph
	ldr r3, .LCPI378_1
	add r8, r3, r5, lsl #2
	mov r3, #64
	ldr r2, [sp]
	cmp r2, #64
	movgt r2, r3
	@comment
str r2, [sp]
	cmp r5, #0
	bne .LBB378_22	@ bb.nph.bb11_crit_edge
.LBB378_11:	@ bb.nph.bb11.us_crit_edge
	mov r5, #0
.LBB378_12:	@ bb11.us
	ldr r8, .LCPI378_1
	ldr r8, [r8, +r4, lsl #2]
	mov r8, r8, lsl #3
	ldr r0, [sp, #+4]
	mov r1, r8
	emit_nops_till_bundle_end
	bl __divsi3
	mov r9, r0
	mov r0, r6
	mov r1, r8
	emit_nops_till_bundle_end
	bl __divsi3
	cmp r0, r9
	bne .LBB378_16	@ bb20.us
.LBB378_13:	@ bb11.us
	cmp r8, #33
	bge .LBB378_16	@ bb20.us
.LBB378_14:	@ bb14.us
	ldr r9, [sp]
	cmp r9, r8
	movge r5, r4
.LBB378_15:	@ bb14.us.bb20.us_crit_edge2
.LBB378_16:	@ bb20.us
	ldr r8, .LCPI378_2
	ldr r4, [r8, +r4, lsl #2]
	cmp r4, #0
	bne .LBB378_12	@ bb11.us
.LBB378_17:	@ bb22
	cmp r5, #0
	mov r0, r5
	moveq r0, r7
	b .LBB378_19	@ bb24
.LBB378_18:	@ bb24
	mov r0, r7
.LBB378_19:	@ bb24
	sfi_add sp, sp, #8
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB378_20:	@ bb25
	mov r0, #0
	b .LBB378_19	@ bb24
.LBB378_21:	@ bb21.preheader.bb22_crit_edge
	mov r5, #0
	b .LBB378_17	@ bb22
.LBB378_22:	@ bb.nph.bb11_crit_edge
	mov r5, #0
	mov r9, #1
.LBB378_23:	@ bb11
	ldr r3, .LCPI378_1
	ldr r3, [r3, +r4, lsl #2]
	mov r10, r3, lsl #3
	ldr r0, [sp, #+4]
	mov r1, r10
	emit_nops_till_bundle_end
	bl __divsi3
	mov r11, r0
	mov r0, r6
	mov r1, r10
	emit_nops_till_bundle_end
	bl __divsi3
	cmp r0, r11
	mov r3, #0
	movne r3, r9
	cmp r10, #32
	mov r2, #0
	movgt r2, r9
	orr r3, r3, r2
	cmp r3, #0
	bne .LBB378_27	@ bb20
.LBB378_24:	@ bb11
	ldr r3, [sp]
	cmp r3, r10
	blt .LBB378_27	@ bb20
.LBB378_25:	@ bb17
	ldr r3, [r8]
	mov r3, r3, lsl #3
	cmp r3, r10
	movge r5, r4
.LBB378_26:	@ bb19
.LBB378_27:	@ bb20
	ldr r3, .LCPI378_2
	ldr r4, [r3, +r4, lsl #2]
	cmp r4, #0
	beq .LBB378_17	@ bb22
	b .LBB378_23	@ bb11
	.align	4
.LBB378_28:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI378_0:
 	.long	class_narrowest_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI378_1:
 	.long	mode_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI378_2:
 	.long	mode_wider_mode

	.size get_best_mode, .-get_best_mode


	.globl	save_storage_status
	.align	4
save_storage_status:
	sfi_bx lr
	.size save_storage_status, .-save_storage_status


	.globl	restore_storage_status
	.align	4
restore_storage_status:
	sfi_bx lr
	.size restore_storage_status, .-restore_storage_status


	.globl	put_pending_sizes
	.align	4
put_pending_sizes:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI381_0
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI381_0
	@comment
streq r0, [r3]
	ldreq lr, [sp]
	sfi_addeq sp, sp, #4
	sfi_bxeq lr
.LBB381_1:	@ bb1
.LBB381_2:	@ bb
	emit_nops_till_bundle_end
	bl abort
	.align	4
.LBB381_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI381_0:
 	.long	pending_sizes

	.size put_pending_sizes, .-put_pending_sizes


	.globl	round_up
	.align	4
round_up:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r1
	mov r5, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl size_int
	mov r6, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r0, #60
	mov r1, r5
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	mov r0, #58
	mov r2, r6
	emit_nops_till_bundle_end
	bl size_binop
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
	.size round_up, .-round_up


	.globl	variable_size
	.align	4
variable_size:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldrb r3, [r0, #+9]
	mov r4, r0
	tst r3, #2
	bne .LBB383_9	@ bb19
.LBB383_1:	@ bb
	emit_nops_till_bundle_end
	bl global_bindings_p
	cmp r0, #0
	blt .LBB383_9	@ bb19
.LBB383_2:	@ bb4
	mov r0, r4
	emit_nops_till_bundle_end
	bl contains_placeholder_p
	cmp r0, #0
	bne .LBB383_9	@ bb19
.LBB383_3:	@ bb6
	mov r0, r4
	emit_nops_till_bundle_end
	bl save_expr
	mov r4, r0
	emit_nops_till_bundle_end
	bl global_bindings_p
	cmp r0, #0
	beq .LBB383_7	@ bb15
.LBB383_4:	@ bb7
	ldrb r4, [r4, #+9]
	tst r4, #2
	bne .LBB383_11	@ bb12
.LBB383_5:	@ bb13
	ldr r0, .LCPI383_1
	emit_nops_till_bundle_end
	bl error
.LBB383_6:	@ bb14
	mov r0, #1
	emit_nops_till_bundle_end
	bl size_int
	b .LBB383_10	@ bb19
.LBB383_7:	@ bb15
	ldr r3, .LCPI383_2
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB383_12	@ bb16
.LBB383_8:	@ bb17
	ldr r5, .LCPI383_4
	ldr r2, [r5]
	mov r0, #0
	mov r1, r4
	emit_nops_till_bundle_end
	bl tree_cons
	@comment
str r0, [r5]
.LBB383_9:	@ bb19
	mov r0, r4
.LBB383_10:	@ bb19
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB383_11:	@ bb12
	ldr r0, .LCPI383_0
	emit_nops_till_bundle_end
	bl error
	b .LBB383_6	@ bb14
.LBB383_12:	@ bb16
	ldr r3, .LCPI383_3
	ldr r0, [r3]
	mov r1, #0
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl expand_expr
	mov r1, r0
	mov r0, r4
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl expand_expr
	b .LBB383_9	@ bb19
	.align	4
.LBB383_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI383_0:
 	.long	.str1986

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI383_1:
 	.long	.str11987

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI383_2:
 	.long	immediate_size_expand

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI383_3:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI383_4:
 	.long	pending_sizes

	.size variable_size, .-variable_size


	.globl	layout_decl
	.align	4
layout_decl:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	ldrb r4, [r0, #+8]
	ldr r3, [r0, #+76]
	ldr r2, [r0, #+4]
	mov r5, r1
	mov r6, r0
	cmp r4, #31
	beq .LBB384_37	@ return
.LBB384_1:	@ bb
	and r1, r4, #255
	sub r1, r1, #32
	cmp r1, #5
	bhs .LBB384_38	@ bb1
.LBB384_2:	@ bb2
	ldr r1, .LCPI384_0
	ldr r1, [r1]
	ldr r0, .LCPI384_1
	ldr r0, [r0]
	cmp r2, r1
	mov r7, r2
	moveq r7, r0
	mov r0, r7
	ldrb r12, [r0, #+28]!
	ldrb r0, [r0, #+1]
	strb r0, [r6, #+28]
	ldrb r0, [r6, #+10]
	mov r12, r6
	ldrb lr, [r12, #+8]!
	ldrb r8, [r12, #+3]
	orr r0, r0, r8, lsl #8
	ldrb r8, [r12, #+1]
	orr lr, lr, r8, lsl #8
	orr r0, lr, r0, lsl #16
	bic r0, r0, #1, 18 @ 16384
	mov lr, r7
	ldrb r8, [lr, #+8]!
	ldrb lr, [lr, #+1]
	strb r0, [r12]
	mov r8, r0, lsr #24
	strb r8, [r12, #+3]
	mov r8, #1, 18 @ 16384
	and lr, r8, lr, lsl #8
	orr lr, r0, lr
	mov lr, lr, lsr #8
	strb lr, [r12, #+1]
	mov r0, r0, lsr #16
	strb r0, [r6, #+10]
	mov r0, #0
	cmp r2, r1
	moveq r3, r0
	ldr r0, [r6, #+20]
	cmp r0, #0
	ldreq r0, [r7, #+16]
	@comment
streq r0, [r6, #+20]
.LBB384_3:	@ bb10
.LBB384_4:	@ bb11
	and r2, r4, #255
	cmp r2, #36
	bne .LBB384_9	@ bb21
.LBB384_5:	@ bb12
	ldrb r2, [r6, #+29]
	tst r2, #16
	beq .LBB384_9	@ bb21
.LBB384_6:	@ bb17
	cmp r3, #0
	bne .LBB384_8	@ bb20
.LBB384_7:	@ bb18
	ldr r2, [r6, #+32]
	cmp r2, #0
	bne .LBB384_38	@ bb1
.LBB384_8:	@ bb20
	mov r0, r3
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r6, #+20]
	b .LBB384_13	@ bb29
.LBB384_9:	@ bb21
	ldr r3, [r6, #+72]
	cmp r3, #0
	beq .LBB384_12	@ bb28
.LBB384_10:	@ bb22
	ldrb r2, [r6, #+29]
	tst r2, #4
	bne .LBB384_13	@ bb29
.LBB384_11:	@ bb27
	ldr r2, [r7, #+32]
	cmp r2, r3
	ldrhi r3, [r7, #+32]
	@comment
strhi r3, [r6, #+72]
	b .LBB384_13	@ bb29
.LBB384_12:	@ bb28
	ldr r3, [r7, #+32]
	@comment
str r3, [r6, #+72]
.LBB384_13:	@ bb29
	mov r8, r0
	and r3, r4, #255
	cmp r3, #36
	bne .LBB384_17	@ bb44
.LBB384_14:	@ bb30
	ldrb r3, [r6, #+29]
	mov r2, r6
	ldrb r1, [r2, #+28]!
	mov r2, #1, 20 @ 4096
	mov r1, #0
	tst r2, r3, lsl #8
	mov r3, r7
	moveq r3, r1
	@comment
str r3, [r6, #+44]
	ldr r3, .LCPI384_2
	ldr r3, [r3]
	cmp r3, #0
	bne .LBB384_39	@ bb38
.LBB384_15:	@ bb40
	ldr r3, .LCPI384_3
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB384_17	@ bb44
.LBB384_16:	@ bb41
	ldr r3, [r6, #+72]
	mov r2, #8
	cmp r3, #8
	movhi r3, r2
	@comment
str r3, [r6, #+72]
.LBB384_17:	@ bb44
	ldrb r3, [r6, #+29]
	tst r3, #16
	ldrne r3, [r7, #+16]
	cmpne r3, #0
	bne .LBB384_19	@ bb50
	b .LBB384_34	@ bb71
.LBB384_18:	@ bb49
.LBB384_19:	@ bb50
	ldrb r3, [r3, #+8]
	cmp r3, #25
	bne .LBB384_34	@ bb71
.LBB384_20:	@ bb51
	ldr r3, .LCPI384_4
	ldr r3, [r3, #+24]
	mov r3, r3, lsl #3
	ldr r2, [r8, #+12]
	cmp r3, r2
	blo .LBB384_34	@ bb71
.LBB384_21:	@ bb51.bb6.i_crit_edge
	mov r4, #1
	ldr r3, .LCPI384_5
.LBB384_22:	@ bb6.i
	ldr r4, [r3, +r4, lsl #2]
	cmp r4, #0
	beq .LBB384_34	@ bb71
.LBB384_23:	@ bb3.i
	ldr r3, .LCPI384_4
	ldr r3, [r3, +r4, lsl #2]
	mov r7, r3, lsl #3
	ldr r3, .LCPI384_6
	cmp r7, r2
	bne .LBB384_22	@ bb6.i
.LBB384_24:	@ mode_for_size.exit
	cmp r4, #26
	beq .LBB384_34	@ bb71
.LBB384_25:	@ bb52
	ldr r3, .LCPI384_7
	ldr r3, [r3, +r4, lsl #2]
	mov r9, r3, lsl #3
	cmp r9, #65
	bge .LBB384_40	@ bb52.bb56_crit_edge
.LBB384_26:	@ bb53
	mov r3, #1
	cmp r9, #1
	mov r1, r9
	movlt r1, r3
.LBB384_27:	@ bb56
	mov r0, r5
	emit_nops_till_bundle_end
	bl __umodsi3
	cmp r0, #0
	bne .LBB384_34	@ bb71
.LBB384_28:	@ bb57
	cmp r9, #65
	bge .LBB384_41	@ bb57.bb62_crit_edge
.LBB384_29:	@ bb58
	mov r3, #1
	cmp r9, #1
	mov r8, r9
	movlt r8, r3
.LBB384_30:	@ bb62
	ldr r3, [r6, #+72]
	mov r2, #64
	cmp r8, r3
	movls r2, r3
	cmp r8, r3
	bls .LBB384_33	@ bb70
.LBB384_31:	@ bb62
	cmp r9, #65
	bge .LBB384_33	@ bb70
.LBB384_32:	@ bb64
	mov r2, #1
	cmp r9, #1
	movlt r9, r2
	mov r2, r9
.LBB384_33:	@ bb70
	@comment
str r2, [r6, #+72]
	strb r4, [r6, #+28]
	mov r0, r7
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r6, #+20]
	add r8, r6, #28
	ldrb r3, [r8], #+2
	ldrb r2, [r6, #+29]
	orr r3, r3, r2, lsl #8
	ldrb r2, [r8, #+1]
	ldrb r1, [r8]
	orr r2, r1, r2, lsl #8
	orr r3, r3, r2, lsl #16
	bic r3, r3, #1, 20 @ 4096
	mov r2, r3, lsr #24
	strb r2, [r8, #+1]
	mov r2, r3, lsr #16
	strb r2, [r8]
	strb r3, [r6, #+28]
	mov r8, r3, lsr #8
	strb r8, [r6, #+29]
	mov r8, r0
.LBB384_34:	@ bb71
	cmp r8, #0
	ldrneb r3, [r8, #+8]
	cmpne r3, #25
	bne .LBB384_36	@ bb73
	b .LBB384_37	@ return
.LBB384_35:	@ bb72
.LBB384_36:	@ bb73
	mov r0, r8
	emit_nops_till_bundle_end
	bl variable_size
	@comment
str r0, [r6, #+20]
.LBB384_37:	@ return
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB384_38:	@ bb1
	emit_nops_till_bundle_end
	bl abort
.LBB384_39:	@ bb38
	ldr r2, [r6, #+72]
	cmp r2, r3
	movls r3, r2
	@comment
str r3, [r6, #+72]
	b .LBB384_17	@ bb44
.LBB384_40:	@ bb52.bb56_crit_edge
	mov r1, #64
	b .LBB384_27	@ bb56
.LBB384_41:	@ bb57.bb62_crit_edge
	mov r8, #64
	b .LBB384_30	@ bb62
	.align	4
.LBB384_42:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_0:
 	.long	error_mark_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_1:
 	.long	void_type_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_2:
 	.long	maximum_field_alignment

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_3:
 	.long	flag_pack_struct

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_4:
 	.long	mode_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_5:
 	.long	class_narrowest_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_6:
 	.long	mode_wider_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI384_7:
 	.long	mode_unit_size

	.size layout_decl, .-layout_decl


	.globl	layout_type
	.align	4
layout_type:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #32
	@comment
str r0, [sp, #+24]
	cmp r0, #0
	beq .LBB385_11	@ bb
.LBB385_1:	@ bb2
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+16]
	cmp r3, #0
	bne .LBB385_207	@ return
.LBB385_2:	@ bb3
	emit_nops_till_bundle_end
	bl suspend_momentary
	@comment
str r0, [sp, #+4]
	ldr r4, [sp, #+24]
	ldr r0, [r4, #+80]
	mov r1, r0
	emit_nops_till_bundle_end
	bl push_obstacks
	emit_nops_till_bundle_end
	bl saveable_allocation
	ldrb r3, [r4, #+8]
	sub r2, r3, #6
	cmp r2, #18
	bhi .LBB385_11	@ bb
.LBB385_3:	@ bb3
	.set PCRELV34, (.LJTI385_0_0-(.LPCRELL34+8))
.LPCRELL34:
	add r1, pc, #PCRELV34
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI385_0_0:
	.long	 .LBB385_24
	.long	 .LBB385_5
	.long	 .LBB385_16
	.long	 .LBB385_20
	.long	 .LBB385_5
	.long	 .LBB385_170
	.long	 .LBB385_177
	.long	 .LBB385_29
	.long	 .LBB385_192
	.long	 .LBB385_29
	.long	 .LBB385_4
	.long	 .LBB385_190
	.long	 .LBB385_30
	.long	 .LBB385_180
	.long	 .LBB385_61
	.long	 .LBB385_135
	.long	 .LBB385_135
	.long	 .LBB385_4
	.long	 .LBB385_11

.text
@ JUMP TABLE END



	.align	2
.LBB385_4:	@ bb3.bb6.i228_crit_edge
	mov r3, #1
	ldr r2, .LCPI385_13
	b .LBB385_26	@ bb6.i228
	.align	2
.LBB385_5:	@ bb5
	ldr r3, [sp, #+24]
	ldr r0, [r3, #+52]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	bne .LBB385_8	@ bb8
.LBB385_6:	@ bb6
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	blt .LBB385_8	@ bb8
.LBB385_7:	@ bb7
	ldr r3, [sp, #+24]
	ldrb r2, [r3, #+10]
	ldrb r1, [r3, #+8]!
	ldrb r0, [r3, #+3]
	orr r2, r2, r0, lsl #8
	ldrb r0, [r3, #+1]
	orr r0, r1, r0, lsl #8
	orr r2, r0, r2, lsl #16
	orr r2, r2, #1, 18 @ 16384
	mov r2, r2, lsr #8
	strb r2, [r3, #+1]
	strb r1, [r3]
.LBB385_8:	@ bb8
	ldr r3, [sp, #+24]
	ldrb r3, [r3, #+28]
	mov r2, #1
	ldr r1, .LCPI385_13
	b .LBB385_10	@ bb3.i
.LBB385_9:	@ bb.i
	ldr r1, .LCPI385_14
	ldr r1, [r1, +r2, lsl #2]
	mov r0, r1, lsl #3
	ldr r1, .LCPI385_15
	cmp r0, r3
	bhs .LBB385_13	@ smallest_mode_for_size.exit
.LBB385_10:	@ bb3.i
	ldr r2, [r1, +r2, lsl #2]
	cmp r2, #0
	bne .LBB385_9	@ bb.i
	.align	2
.LBB385_11:	@ bb
	emit_nops_till_bundle_end
	bl abort
.LBB385_12:	@ bb3.i154
	ldr r1, .LCPI385_14
	ldr r1, [r1, +r2, lsl #2]
	mov r0, r1, lsl #3
	ldr r1, .LCPI385_15
	cmp r0, r3
	bne .LBB385_17	@ bb6.i
.LBB385_13:	@ smallest_mode_for_size.exit
	ldr r4, [sp, #+24]
	mov r3, r4
	ldrb r1, [r3, #+28]!
	ldrb r0, [r3, #+1]
	strb r2, [r3, #+1]
	strb r1, [r3]
	mov r3, r2, lsl #24
.LBB385_14:	@ smallest_mode_for_size.exit
	mov r3, r3, asr #24
	ldr r2, .LCPI385_14
	ldr r3, [r2, +r3, lsl #2]
	mov r0, r3, lsl #3
.LBB385_15:	@ smallest_mode_for_size.exit
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r4, #+16]
	b .LBB385_193	@ bb120
	.align	2
.LBB385_16:	@ bb9
	ldr r3, [sp, #+24]
	ldrb r3, [r3, #+28]
	mov r2, #2
	ldr r1, .LCPI385_13
.LBB385_17:	@ bb6.i
	ldr r2, [r1, +r2, lsl #2]
	cmp r2, #0
	bne .LBB385_12	@ bb3.i154
.LBB385_18:	@ bb6.i.mode_for_size.exit_crit_edge
	mov r2, #26
	b .LBB385_13	@ smallest_mode_for_size.exit
.LBB385_19:	@ bb3.i181
	ldr r2, .LCPI385_14
	ldr r2, [r2, +r0, lsl #2]
	mov r1, r2, lsl #3
	ldr r2, .LCPI385_15
	cmp r1, r3
	bne .LBB385_21	@ bb6.i186
	b .LBB385_23	@ mode_for_size.exit189
	.align	2
.LBB385_20:	@ bb10
	ldr r3, [sp, #+24]
	ldr r2, [r3, #+4]
	ldrb r1, [r3, #+10]
	mov r0, r3
	ldrb r12, [r0, #+8]!
	ldrb lr, [r0, #+3]
	orr r1, r1, lr, lsl #8
	ldrb lr, [r0, #+1]
	orr r12, r12, lr, lsl #8
	orr r1, r12, r1, lsl #16
	bic r1, r1, #1, 18 @ 16384
	mov r12, r2
	ldrb lr, [r12, #+8]!
	ldrb lr, [r12, #+1]
	strb r1, [r0]
	mov r4, r1, lsr #24
	strb r4, [r0, #+3]
	mov r4, #1, 18 @ 16384
	and lr, r4, lr, lsl #8
	orr lr, r1, lr
	mov lr, lr, lsr #8
	strb lr, [r0, #+1]
	mov r1, r1, lsr #16
	strb r1, [r3, #+10]
	ldrb r3, [r12]
	mov r1, #5
	mov r0, #6
	cmp r3, #7
	moveq r0, r1
	ldrb r3, [r2, #+28]
	mov r3, r3, lsl #1
	ldr r2, .LCPI385_13
.LBB385_21:	@ bb6.i186
	ldr r0, [r2, +r0, lsl #2]
	cmp r0, #0
	bne .LBB385_19	@ bb3.i181
.LBB385_22:	@ bb6.i186.mode_for_size.exit189_crit_edge
	mov r0, #26
.LBB385_23:	@ mode_for_size.exit189
	ldr r4, [sp, #+24]
	mov r3, r4
	ldrb r2, [r3, #+28]!
	ldrb r1, [r3, #+1]
	strb r0, [r3, #+1]
	strb r2, [r3]
	mov r3, r0, lsl #24
	b .LBB385_14	@ smallest_mode_for_size.exit
	.align	2
.LBB385_24:	@ bb19
	ldr r3, .LCPI385_16
	ldr r3, [r3]
	ldr r2, [sp, #+24]
	@comment
str r3, [r2, #+16]
	mov r3, #1
	@comment
str r3, [r2, #+32]
	ldrb r3, [r2, #+28]!
	mov r1, r2
	ldrb r0, [r1, #+2]!
	mov r12, #0
	b .LBB385_191	@ bb118
.LBB385_25:	@ bb3.i223
	ldr r2, .LCPI385_14
	ldr r2, [r2, +r3, lsl #2]
	bic r1, r2, #14, 4 @ -536870912
	ldr r2, .LCPI385_15
	cmp r1, #8
	beq .LBB385_28	@ mode_for_size.exit231
.LBB385_26:	@ bb6.i228
	ldr r3, [r2, +r3, lsl #2]
	cmp r3, #0
	bne .LBB385_25	@ bb3.i223
.LBB385_27:	@ bb6.i228.mode_for_size.exit231_crit_edge
	mov r3, #26
.LBB385_28:	@ mode_for_size.exit231
	ldr r4, [sp, #+24]
	mov r2, r4
	ldrb r1, [r2, #+28]!
	ldrb r0, [r2, #+1]
	strb r3, [r2, #+1]
	strb r1, [r2]
	mov r0, #64
	b .LBB385_15	@ smallest_mode_for_size.exit
	.align	2
.LBB385_29:	@ bb22
	ldr r4, [sp, #+24]
	mov r5, r4
	ldrb r3, [r5, #+28]!
	ldrb r2, [r5, #+1]
	ldr r2, .LCPI385_17
	ldr r2, [r2]
	strb r2, [r5, #+1]
	strb r3, [r5]
	mov r6, #32
	mov r0, #32
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r4, #+16]
	ldrb r3, [r4, #+10]
	ldrb r2, [r4, #+8]!
	ldrb r1, [r4, #+3]
	orr r3, r3, r1, lsl #8
	ldrb r1, [r4, #+1]
	orr r1, r2, r1, lsl #8
	orr r3, r1, r3, lsl #16
	orr r3, r3, #1, 18 @ 16384
	mov r3, r3, lsr #8
	strb r3, [r4, #+1]
	strb r2, [r4]
	strb r6, [r5]
	b .LBB385_193	@ bb120
	.align	2
.LBB385_30:	@ bb23
	ldr r3, [sp, #+24]
	ldr r4, [r3, #+4]
	ldr r5, [r3, #+12]
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_pointer_type
	cmp r5, #0
	ldrne r6, [r5, #+56]
	cmpne r6, #0
	bne .LBB385_32	@ bb25
	b .LBB385_48	@ bb46
.LBB385_31:	@ bb24
.LBB385_32:	@ bb25
	ldr r7, [r5, #+52]
	cmp r7, #0
	ldrne r3, [r4, #+16]
	cmpne r3, #0
	bne .LBB385_34	@ bb27
	b .LBB385_48	@ bb46
.LBB385_33:	@ bb26
.LBB385_34:	@ bb27
	ldrb r3, [r6, #+8]
	cmp r3, #77
	ldreq r3, [r6, #+16]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #57
	beq .LBB385_36	@ bb29
	b .LBB385_38	@ bb32
.LBB385_35:	@ bb28
.LBB385_36:	@ bb29
	ldr r0, [r3, #+20]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	beq .LBB385_38	@ bb32
.LBB385_37:	@ bb30
	ldr r3, [r6, #+16]
	ldr r0, [r3, #+16]
	mov r2, #0
	mov r1, r7
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	bne .LBB385_208	@ bb31
.LBB385_38:	@ bb32
	ldrb r3, [r6, #+8]
	cmp r3, #77
	ldreq r3, [r6, #+20]
	ldreqb r2, [r3, #+8]
	cmpeq r2, #57
	beq .LBB385_40	@ bb34
	b .LBB385_43	@ bb37
.LBB385_39:	@ bb33
.LBB385_40:	@ bb34
	ldr r0, [r3, #+20]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	beq .LBB385_43	@ bb37
.LBB385_41:	@ bb35
	ldr r3, [r6, #+20]
	ldr r0, [r3, #+16]
	mov r2, #0
	mov r1, r7
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	ldrne r6, [r6, #+16]
.LBB385_42:	@ bb36
.LBB385_43:	@ bb37
	mov r1, r6
	mov r0, #57
	mov r2, r7
	emit_nops_till_bundle_end
	bl size_binop
	mov r2, r0
	ldr r3, .LCPI385_18
	ldr r1, [r3]
	mov r0, #56
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, .LCPI385_19
	ldr r3, [r3]
	ldrb r3, [r3, #+9]
	mov r1, r0
	tst r3, #64
	bne .LBB385_47	@ bb45
.LBB385_44:	@ bb42
	ldr r3, [r5, #+52]
	ldrb r3, [r3, #+8]
	cmp r3, #25
	ldrne r3, [r5, #+56]
	ldrneb r3, [r3, #+8]
	cmpne r3, #25
	bne .LBB385_46	@ bb44
	b .LBB385_47	@ bb45
.LBB385_45:	@ bb43
.LBB385_46:	@ bb44
	ldr r3, .LCPI385_16
	ldr r2, [r3]
	mov r0, #77
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
.LBB385_47:	@ bb45
	ldr r2, [r4, #+16]
	mov r0, #58
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, [sp, #+24]
	@comment
str r0, [r3, #+16]
.LBB385_48:	@ bb46
	ldr r3, [r4, #+32]
	mov r2, #8
	cmp r3, #7
	movhi r2, r3
	ldr r3, [sp, #+24]
	@comment
str r2, [r3, #+32]
	ldrb r2, [r3, #+29]
	mov r1, r3
	ldrb r0, [r1, #+28]!
	orr r2, r0, r2, lsl #8
	ldrb r0, [r1, #+3]
	ldrb r12, [r1, #+2]
	orr r0, r12, r0, lsl #8
	orr r2, r2, r0, lsl #16
	orr r0, r2, #26, 24 @ 6656
	bic r0, r0, #229, 24 @ 58624
	strb r0, [r1]
	mov r12, r0, lsr #24
	strb r12, [r1, #+3]
	mov r0, r0, lsr #16
	strb r0, [r1, #+2]
	mov r1, #26
	strb r1, [r3, #+29]
	ldr r3, [r3, #+16]
	cmp r3, #0
	beq .LBB385_193	@ bb120
.LBB385_49:	@ bb48
	ldrb r1, [r3, #+8]
	cmp r1, #25
	bne .LBB385_193	@ bb120
.LBB385_50:	@ bb49
	ldr r1, [sp, #+24]
	ldr r1, [r1, #+4]
	ldrb r0, [r1, #+29]
	ldrb r12, [r1, #+28]!
	orr r0, r12, r0, lsl #8
	ldrb r12, [r1, #+3]
	ldrb r1, [r1, #+2]
	orr r1, r1, r12, lsl #8
	orr r1, r0, r1, lsl #16
	and r0, r1, #255, 24 @ 65280
	cmp r0, #26, 24 @ 6656
	tsteq r1, #2, 16 @ 131072
	beq .LBB385_193	@ bb120
.LBB385_51:	@ bb50
.LBB385_52:	@ bb55
	ldr r1, .LCPI385_14
	ldr r1, [r1, #+24]
	mov r1, r1, lsl #3
	ldr r0, [r3, #+12]
	cmp r1, r0
	blo .LBB385_56	@ bb55.mode_for_size.exit222_crit_edge
.LBB385_53:	@ bb55.bb6.i219_crit_edge
	mov r1, #1
	ldr r12, .LCPI385_13
	b .LBB385_55	@ bb6.i219
.LBB385_54:	@ bb3.i214
	ldr r12, .LCPI385_14
	ldr r12, [r12, +r1, lsl #2]
	mov lr, r12, lsl #3
	ldr r12, .LCPI385_15
	cmp lr, r0
	beq .LBB385_57	@ mode_for_size.exit222
.LBB385_55:	@ bb6.i219
	ldr r1, [r12, +r1, lsl #2]
	cmp r1, #0
	bne .LBB385_54	@ bb3.i214
.LBB385_56:	@ bb55.mode_for_size.exit222_crit_edge
	mov r1, #26
.LBB385_57:	@ mode_for_size.exit222
	bic r0, r2, #255, 24 @ 65280
	ldr r12, [sp, #+24]
	strb r0, [r12, #+28]
	mov lr, r0, lsr #24
	strb lr, [r12, #+31]
	mov r0, r0, lsr #16
	strb r0, [r12, #+30]
	mov r1, r1, lsl #8
	mov r0, r1, lsr #8
	strb r0, [r12, #+29]
	ldr r0, [r12, #+32]
	cmp r0, #63
	ldrls r3, [r3, #+12]
	cmpls r0, r3
	blo .LBB385_59	@ bb57
	b .LBB385_193	@ bb120
.LBB385_58:	@ bb56
.LBB385_59:	@ bb57
	and r3, r1, #255, 24 @ 65280
	cmp r3, #26, 24 @ 6656
	beq .LBB385_193	@ bb120
.LBB385_60:	@ bb58
	mov r3, #26
	ldr r1, [sp, #+24]
	strb r3, [r1, #+29]
	orr r3, r2, #26, 24 @ 6656
	orr r3, r3, #2, 16 @ 131072
	bic r3, r3, #229, 24 @ 58624
	strb r3, [r1, #+28]
	mov r2, r3, lsr #24
	strb r2, [r1, #+31]
	mov r3, r3, lsr #16
	strb r3, [r1, #+30]
	b .LBB385_193	@ bb120
	.align	2
.LBB385_61:	@ bb59
	ldr r3, [sp, #+24]
	ldr r2, [r3, #+32]
	mov r1, #8
	cmp r2, #8
	movlo r2, r1
	@comment
str r2, [sp, #+20]
	ldr r4, [r3, #+12]!
	@comment
str r3, [sp, #+16]
	cmp r4, #0
	beq .LBB385_209	@ bb59.bb89.i_crit_edge
.LBB385_62:	@ bb59.bb.i201_crit_edge
	mov r3, #8
	@comment
str r3, [sp, #+12]
	mov r3, #0
	@comment
str r3, [sp, #+28]
	mov r2, #1
	mov r5, r3
	mov r6, r3
.LBB385_63:	@ bb.i201
	cmp r2, #0
	ldr r3, [sp, #+12]
	movne r3, r5
	@comment
str r3, [sp, #+8]
	ldrb r3, [r4, #+10]
	tst r3, #4
	bne .LBB385_211	@ bb9.i
.LBB385_64:	@ bb10.i202
	ldrb r3, [r4, #+8]
	cmp r3, #36
	bne .LBB385_217	@ bb10.i202.bb86.i_crit_edge
.LBB385_65:	@ bb11.i
	ldrb r3, [r4, #+29]
	tst r3, #4
	ldrne r7, [r4, #+72]
.LBB385_66:	@ bb16.i
.LBB385_67:	@ bb17.i
	mov r0, r4
	ldr r1, [sp, #+8]
	emit_nops_till_bundle_end
	bl layout_decl
	ldrb r3, [r4, #+29]
	tst r3, #4
	ldreq r7, [r4, #+72]
.LBB385_68:	@ bb22.i203
.LBB385_69:	@ bb23.i204
	ldr r3, .LCPI385_20
	ldr r3, [r3]
	ldr r2, [r4, #+4]
	cmp r2, r3
	ldrne r3, [r4, #+44]
	cmpne r3, #0
	bne .LBB385_71	@ bb25.i206
	b .LBB385_80	@ bb43.i
.LBB385_70:	@ bb24.i205
.LBB385_71:	@ bb25.i206
	ldr r0, [r2, #+16]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB385_80	@ bb43.i
.LBB385_72:	@ bb26.i207
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB385_218	@ bb27.i
.LBB385_73:	@ bb29.i
	ldrb r3, [r4, #+29]
	tst r3, #4
	ldreq r3, [r4, #+4]
	ldreq r7, [r3, #+32]
.LBB385_74:	@ bb34.i
.LBB385_75:	@ bb35.i
	ldr r3, [r4, #+32]
	cmp r3, #0
	beq .LBB385_81	@ bb45.i
.LBB385_76:	@ bb36.i
	ldr r3, .LCPI385_21
	ldr r3, [r3]
	ldr r2, [r4, #+4]
	ldr r2, [r2, #+32]
	cmp r3, #0
	bne .LBB385_219	@ bb37.i
.LBB385_77:	@ bb38.i
	ldr r3, .LCPI385_22
	ldr r3, [r3]
	cmp r3, #0
	beq .LBB385_79	@ bb41.i
.LBB385_78:	@ bb39.i
	cmp r2, #8
	mov r3, #8
	movgt r2, r3
.LBB385_79:	@ bb41.i
	ldr r3, [sp, #+20]
	cmp r2, r3
	movhs r3, r2
	@comment
str r3, [sp, #+20]
	b .LBB385_81	@ bb45.i
.LBB385_80:	@ bb43.i
	ldr r3, [sp, #+20]
	cmp r7, r3
	movhs r3, r7
	@comment
str r3, [sp, #+20]
.LBB385_81:	@ bb45.i
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl __modsi3
	cmp r0, #0
	bne .LBB385_84	@ bb49.i
.LBB385_82:	@ bb46.i
	ldr r0, [sp, #+12]
	mov r1, r7
	emit_nops_till_bundle_end
	bl __modsi3
	cmp r0, #0
	cmpne r6, #0
	bne .LBB385_84	@ bb49.i
	b .LBB385_89	@ bb56.i
.LBB385_83:	@ bb46.i
.LBB385_84:	@ bb49.i
	cmp r6, #0
	beq .LBB385_220	@ bb51.i
.LBB385_85:	@ bb50.i
	ldr r0, [sp, #+12]
	mov r1, r7
	emit_nops_till_bundle_end
	bl __modsi3
	cmp r0, #0
	beq .LBB385_220	@ bb51.i
.LBB385_86:	@ bb52.i
	cmp r5, #0
	ble .LBB385_88	@ bb54.i
.LBB385_87:	@ bb53.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r3, #56
	mov r0, r3
	mov r1, r6
	emit_nops_till_bundle_end
	bl size_binop
	mov r6, r0
.LBB385_88:	@ bb54.i
	mov r0, r7
	emit_nops_till_bundle_end
	bl size_int
	mov r5, r0
	mov r0, r7
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r3, #60
	mov r0, r3
	mov r1, r6
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	mov r3, #58
	mov r0, r3
	mov r2, r5
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, [sp, #+12]
	cmp r7, r3
	movle r3, r7
	@comment
str r3, [sp, #+12]
	mov r5, #0
	mov r6, r0
.LBB385_89:	@ bb56.i
	ldrb r3, [r4, #+8]
	cmp r3, #36
	bne .LBB385_98	@ bb69.i
.LBB385_90:	@ bb57.i
	ldr r3, .LCPI385_20
	ldr r3, [r3]
	ldr r2, [r4, #+4]
	cmp r2, r3
	ldrne r3, [r4, #+44]
	cmpne r3, #0
	bne .LBB385_92	@ bb59.i
	b .LBB385_98	@ bb69.i
.LBB385_91:	@ bb58.i
.LBB385_92:	@ bb59.i
	ldrb r3, [r4, #+29]
	tst r3, #4
	bne .LBB385_98	@ bb69.i
.LBB385_93:	@ bb64.i
	ldr r3, .LCPI385_21
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI385_22
	ldreq r3, [r3]
	cmpeq r3, #0
	beq .LBB385_95	@ bb66.i
	b .LBB385_98	@ bb69.i
.LBB385_94:	@ bb65.i
.LBB385_95:	@ bb66.i
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	bne .LBB385_98	@ bb69.i
.LBB385_96:	@ bb67.i
	ldr r3, [r4, #+4]
	ldr r8, [r3, #+32]
	ldr r3, [r4, #+20]
	ldr r0, [r3, #+12]
	mov r1, r8
	emit_nops_till_bundle_end
	bl __modsi3
	mov r9, r0
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl __divsi3
	mov r10, r0
	sub r11, r5, #1
	add r0, r9, r11
	mov r1, r8
	emit_nops_till_bundle_end
	bl __divsi3
	cmp r10, r0
	beq .LBB385_98	@ bb69.i
.LBB385_97:	@ bb68.i
	add r5, r8, r11
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl __modsi3
	sub r5, r5, r0
.LBB385_98:	@ bb69.i
	cmp r5, #0
	cmpne r6, #0
	bne .LBB385_221	@ bb73.i
.LBB385_99:	@ bb69.i
.LBB385_100:	@ bb74.i
	cmp r6, #0
	bne .LBB385_222	@ bb75.i
.LBB385_101:	@ bb76.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r4, #+40]
	ldr r3, [sp, #+8]
	cmp r3, r5
	movne r0, r4
	movne r1, r5
	emit_nops_till_bundle_end
	blne layout_decl
.LBB385_102:	@ bb77.i
.LBB385_103:	@ bb78.i
	ldr r2, [r4, #+20]
	cmp r2, #0
	beq .LBB385_217	@ bb10.i202.bb86.i_crit_edge
.LBB385_104:	@ bb79.i
	ldrb r3, [r2, #+8]
	cmp r3, #25
	ldreq r3, [r2, #+16]
	cmpeq r3, #0
	beq .LBB385_107	@ bb81.i
	b .LBB385_108	@ bb83.i
	.align	4
.LBB385_105:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_13:
 	.long	class_narrowest_mode

.LBB385_106:	@ bb80.i
	.align	4
.LBB385_107:	@ bb81.i
	ldr r3, [r2, #+12]
	add r3, r3, r5
	cmp r3, r5
	bgt .LBB385_223	@ bb81.i.bb86.i_crit_edge
.LBB385_108:	@ bb83.i
	cmp r6, #0
	bne .LBB385_216	@ bb85.i
.LBB385_109:	@ bb83.i.bb86.i_crit_edge
	mov r6, r2
	b .LBB385_217	@ bb10.i202.bb86.i_crit_edge
	.align	4
.LBB385_110:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_14:
 	.long	mode_size

.LBB385_111:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_15:
 	.long	mode_wider_mode

	.align	4
.LBB385_112:	@ bb91.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r0, #56
	mov r1, r6
	emit_nops_till_bundle_end
	bl size_binop
.LBB385_113:	@ layout_record.exit
	ldr r4, [sp, #+24]
	@comment
str r0, [r4, #+16]
	ldr r3, [r4, #+32]
	ldr r5, [sp, #+20]
	cmp r3, r5
	movhs r5, r3
	@comment
str r5, [r4, #+32]
	ldr r6, [r4, #+16]
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	mov r7, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r0, #60
	mov r1, r6
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	mov r0, #58
	mov r2, r7
	emit_nops_till_bundle_end
	bl size_binop
	@comment
str r0, [r4, #+16]
	ldrb r3, [r4, #+29]
	mov r2, r4
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r0, [r2, #+2]
	orr r1, r0, r1, lsl #8
	orr r3, r3, r1, lsl #16
	orr r1, r3, #26, 24 @ 6656
	bic r1, r1, #229, 24 @ 58624
	strb r1, [r2]
	mov r0, r1, lsr #24
	strb r0, [r2, #+3]
	mov r1, r1, lsr #16
	strb r1, [r2, #+2]
	mov r2, #26
	strb r2, [r4, #+29]
	ldr r2, [r4, #+16]
	ldrb r1, [r2, #+8]
	cmp r1, #25
	beq .LBB385_120	@ bb72
	b .LBB385_133	@ bb79.preheader
.LBB385_114:	@ bb61
	ldr r1, [sp, #+16]
	ldrb r1, [r1, #+8]
	cmp r1, #36
	bne .LBB385_120	@ bb72
.LBB385_115:	@ bb62
	ldr r1, [sp, #+16]
	ldr r1, [r1, #+4]
	ldrb r0, [r1, #+29]
	ldrb r12, [r1, #+28]!
	orr r0, r12, r0, lsl #8
	ldrb r12, [r1, #+3]
	ldrb r1, [r1, #+2]
	orr r1, r1, r12, lsl #8
	orr r1, r0, r1, lsl #16
	and r0, r1, #255, 24 @ 65280
	cmp r0, #26, 24 @ 6656
	tsteq r1, #2, 16 @ 131072
	beq .LBB385_133	@ bb79.preheader
.LBB385_116:	@ bb63
.LBB385_117:	@ bb68
	ldr r1, [sp, #+16]
	ldr r1, [r1, #+40]
	ldrb r0, [r1, #+8]
	cmp r0, #25
	bne .LBB385_133	@ bb79.preheader
.LBB385_118:	@ bb69
	ldr r1, [r1, #+12]
	ldr r0, [sp, #+16]
	ldr r0, [r0, #+20]
	ldr r0, [r0, #+12]
	add r12, r1, r0
	sub r12, r12, #1
	mov lr, r12, asr #31
	add r12, r12, lr, lsr #27
	mov lr, r1, asr #31
	add r1, r1, lr, lsr #27
	mov r1, r1, asr #5
	cmp r1, r12, asr #5
	beq .LBB385_120	@ bb72
.LBB385_119:	@ bb70
	tst r0, #31
	beq .LBB385_133	@ bb79.preheader
.LBB385_120:	@ bb72
	ldr r1, [sp, #+16]
	ldr r1, [r1]
	@comment
str r1, [sp, #+16]
	cmp r1, #0
	bne .LBB385_114	@ bb61
.LBB385_121:	@ bb73
	ldr r1, .LCPI385_14
	ldr r1, [r1, #+24]
	mov r1, r1, lsl #3
	ldr r0, [r2, #+12]
	cmp r1, r0
	blo .LBB385_126	@ bb73.mode_for_size.exit199_crit_edge
.LBB385_122:	@ bb73.bb6.i196_crit_edge
	mov r1, #1
	ldr r12, .LCPI385_13
	b .LBB385_125	@ bb6.i196
	.align	4
.LBB385_123:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_16:
 	.long	size_zero_node

	.align	4
.LBB385_124:	@ bb3.i191
	ldr r12, .LCPI385_14
	ldr r12, [r12, +r1, lsl #2]
	mov lr, r12, lsl #3
	ldr r12, .LCPI385_15
	cmp lr, r0
	beq .LBB385_127	@ mode_for_size.exit199
.LBB385_125:	@ bb6.i196
	ldr r1, [r12, +r1, lsl #2]
	cmp r1, #0
	bne .LBB385_124	@ bb3.i191
.LBB385_126:	@ bb73.mode_for_size.exit199_crit_edge
	mov r1, #26
.LBB385_127:	@ mode_for_size.exit199
	bic r3, r3, #255, 24 @ 65280
	ldr r0, [sp, #+24]
	strb r3, [r0, #+28]
	mov r12, r3, lsr #24
	strb r12, [r0, #+31]
	mov r12, r3, lsr #16
	strb r12, [r0, #+30]
	mov r12, #255, 24 @ 65280
	and r12, r12, r1, lsl #8
	mov lr, r12, lsr #8
	strb lr, [r0, #+29]
	orr r3, r3, r12
	ldr r0, [r0, #+32]
	mov r1, r1, lsl #8
	cmp r0, #63
	ldrls r2, [r2, #+12]
	cmpls r0, r2
	blo .LBB385_130	@ bb75
	b .LBB385_133	@ bb79.preheader
	.align	4
.LBB385_128:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_17:
 	.long	ptr_mode

.LBB385_129:	@ bb74
	.align	4
.LBB385_130:	@ bb75
	and r2, r1, #255, 24 @ 65280
	cmp r2, #26, 24 @ 6656
	movne r2, r3, lsr #24
	ldrne r1, [sp, #+24]
	strneb r2, [r1, #+31]
	movne r2, r3, lsr #8
	strneb r2, [r1, #+29]
	orrne r2, r3, #2, 16 @ 131072
	movne r0, r2, lsr #16
	strneb r0, [r1, #+30]
	strneb r3, [r1, #+28]
	movne r3, r2
.LBB385_131:	@ bb76
.LBB385_132:	@ bb77
	mov r2, #26
	ldr r1, [sp, #+24]
	strb r2, [r1, #+29]
	orr r3, r3, #26, 24 @ 6656
	bic r3, r3, #229, 24 @ 58624
	strb r3, [r1, #+28]
	mov r2, r3, lsr #24
	strb r2, [r1, #+31]
	mov r3, r3, lsr #16
	strb r3, [r1, #+30]
.LBB385_133:	@ bb79.preheader
	ldr r3, [sp, #+28]
	cmp r3, #0
	beq .LBB385_193	@ bb120
.LBB385_134:	@ bb78
	ldr r4, [sp, #+28]
	ldr r0, [r4, #+16]
	mov r1, #0
	emit_nops_till_bundle_end
	bl layout_decl
	ldr r4, [r4]
	@comment
str r4, [sp, #+28]
	cmp r4, #0
	bne .LBB385_134	@ bb78
	b .LBB385_193	@ bb120
	.align	2
.LBB385_135:	@ bb80
	and r3, r3, #255
	cmp r3, #22
	bne .LBB385_137	@ bb1.i
.LBB385_136:	@ bb.i177
	ldr r4, [sp, #+24]
	ldr r0, [r4, #+12]
	emit_nops_till_bundle_end
	bl nreverse
	@comment
str r0, [r4, #+12]
.LBB385_137:	@ bb1.i
	ldr r4, [sp, #+24]
	ldr r5, [r4, #+12]!
	cmp r5, #0
	beq .LBB385_224	@ bb1.i.bb20.i_crit_edge
.LBB385_138:	@ bb1.i.bb2.i_crit_edge
	mov r6, #8
	mov r7, #0
	mov r8, #0
	mov r9, #77
	mov r10, #48
	mov r11, r7
.LBB385_139:	@ bb2.i
	ldrb r3, [r5, #+8]
	sub r3, r3, #31
	and r3, r3, #255
	cmp r3, #1
	bls .LBB385_150	@ bb18.i
.LBB385_140:	@ bb3.i178
	mov r0, r5
	mov r1, r8
	emit_nops_till_bundle_end
	bl layout_decl
	mov r0, r8
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r5, #+40]
	ldr r3, [r5, #+72]
	cmp r3, r6
	movhs r6, r3
	ldr r3, [r5, #+44]
	cmp r3, #0
	beq .LBB385_142	@ bb6.i180
.LBB385_141:	@ bb4.i179
	ldr r3, [r5, #+4]
	ldr r3, [r3, #+32]
	cmp r3, r6
	movhs r6, r3
.LBB385_142:	@ bb6.i180
	ldr r3, [sp, #+24]
	ldrb r3, [r3, #+8]
	cmp r3, #21
	beq .LBB385_147	@ bb7.i
.LBB385_143:	@ bb6.i180
	and r3, r3, #255
	cmp r3, #22
	bne .LBB385_150	@ bb18.i
.LBB385_144:	@ bb14.i
	ldr r3, .LCPI385_6
	ldr r1, [r3]
	ldr r3, .LCPI385_10
	ldr r0, [r3]
	ldr r2, [r5, #+48]
	ldr r3, [r5, #+20]
	cmp r7, #0
	moveq r7, r0
	@comment
str r7, [sp]
	mov r0, r10
	emit_nops_till_bundle_end
	bl build
	emit_nops_till_bundle_end
	bl fold
	mov r7, r0
	b .LBB385_150	@ bb18.i
	.align	4
.LBB385_145:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_18:
 	.long	size_one_node

.LBB385_146:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_19:
 	.long	sizetype

	.align	4
.LBB385_147:	@ bb7.i
	ldr r2, [r5, #+20]
	ldrb r3, [r2, #+8]
	cmp r3, #25
	beq .LBB385_225	@ bb8.i
.LBB385_148:	@ bb10.i
	cmp r7, #0
	beq .LBB385_232	@ bb10.i.bb18.i_crit_edge
.LBB385_149:	@ bb12.i
	mov r0, r9
	mov r1, r7
	emit_nops_till_bundle_end
	bl size_binop
	mov r7, r0
.LBB385_150:	@ bb18.i
	ldr r5, [r5]
	cmp r5, #0
	bne .LBB385_139	@ bb2.i
.LBB385_151:	@ bb20.i
	ldr r3, [sp, #+24]
	ldrb r3, [r3, #+8]
	cmp r3, #22
	bne .LBB385_153	@ bb22.i
.LBB385_152:	@ bb21.i
	ldr r0, [r4]
	emit_nops_till_bundle_end
	bl nreverse
	@comment
str r0, [r4]
.LBB385_153:	@ bb22.i
	cmp r7, #0
	beq .LBB385_226	@ bb23.i
.LBB385_154:	@ bb24.i
	cmp r11, #0
	beq .LBB385_227	@ bb25.i
.LBB385_155:	@ bb26.i
	mov r0, r11
	emit_nops_till_bundle_end
	bl size_int
	mov r5, r0
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r8, r0
	mov r0, #8
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r0, #60
	mov r1, r5
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	mov r0, #58
	mov r2, r8
	emit_nops_till_bundle_end
	bl size_binop
	mov r2, r0
	mov r0, #77
	mov r1, r7
	emit_nops_till_bundle_end
	bl size_binop
	ldr r3, [sp, #+24]
	@comment
str r0, [r3, #+16]
.LBB385_156:	@ layout_union.exit
	ldr r5, [sp, #+24]
	ldr r3, [r5, #+32]
	cmp r3, r6
	movhs r6, r3
	@comment
str r6, [r5, #+32]
	ldr r7, [r5, #+16]
	mov r0, r6
	emit_nops_till_bundle_end
	bl size_int
	mov r8, r0
	mov r0, r6
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r0, #60
	mov r1, r7
	emit_nops_till_bundle_end
	bl size_binop
	mov r1, r0
	mov r0, #58
	mov r2, r8
	emit_nops_till_bundle_end
	bl size_binop
	@comment
str r0, [r5, #+16]
	ldrb r3, [r5, #+29]
	mov r2, r5
	ldrb r1, [r2, #+28]!
	orr r3, r1, r3, lsl #8
	ldrb r1, [r2, #+3]
	ldrb r0, [r2, #+2]
	orr r1, r0, r1, lsl #8
	orr r3, r3, r1, lsl #16
	orr r1, r3, #26, 24 @ 6656
	bic r1, r1, #229, 24 @ 58624
	strb r1, [r2]
	mov r0, r1, lsr #24
	strb r0, [r2, #+3]
	mov r1, r1, lsr #16
	strb r1, [r2, #+2]
	mov r2, #26
	strb r2, [r5, #+29]
	ldr r2, [r5, #+16]
	ldrb r1, [r2, #+8]
	cmp r1, #25
	bne .LBB385_193	@ bb120
.LBB385_157:	@ bb81
	ldr r1, [sp, #+24]
	ldr r1, [r1, #+32]
	cmp r1, #63
	bhi .LBB385_162	@ bb92
.LBB385_158:	@ bb82
	ldr r0, [r2, #+12]
	cmp r1, r0
	bhs .LBB385_162	@ bb92
	b .LBB385_193	@ bb120
.LBB385_159:	@ bb84
	ldrb r1, [r4, #+8]
	cmp r1, #36
	ldreq r1, [r4, #+4]
	ldreqb r0, [r1, #+29]
	ldreqb r12, [r1, #+28]!
	orreq r0, r12, r0, lsl #8
	ldreqb r12, [r1, #+3]
	ldreqb r1, [r1, #+2]
	orreq r1, r1, r12, lsl #8
	orreq r1, r0, r1, lsl #16
	andeq r0, r1, #255, 24 @ 65280
	cmpeq r0, #26, 24 @ 6656
	beq .LBB385_161	@ bb86
	b .LBB385_162	@ bb92
.LBB385_160:	@ bb85
.LBB385_161:	@ bb86
	tst r1, #2, 16 @ 131072
	beq .LBB385_193	@ bb120
.LBB385_162:	@ bb92
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB385_159	@ bb84
.LBB385_163:	@ bb93
	ldr r1, .LCPI385_1
	ldr r1, [r1, #+24]
	mov r1, r1, lsl #3
	ldr r2, [r2, #+12]
	cmp r1, r2
	blo .LBB385_167	@ bb93.mode_for_size.exit176_crit_edge
.LBB385_164:	@ bb93.bb6.i174_crit_edge
	mov r1, #1
	ldr r0, .LCPI385_0
	b .LBB385_166	@ bb6.i174
.LBB385_165:	@ bb3.i169
	ldr r0, .LCPI385_1
	ldr r0, [r0, +r1, lsl #2]
	mov r12, r0, lsl #3
	ldr r0, .LCPI385_2
	cmp r12, r2
	beq .LBB385_168	@ mode_for_size.exit176
.LBB385_166:	@ bb6.i174
	ldr r1, [r0, +r1, lsl #2]
	cmp r1, #0
	bne .LBB385_165	@ bb3.i169
.LBB385_167:	@ bb93.mode_for_size.exit176_crit_edge
	mov r1, #26
.LBB385_168:	@ mode_for_size.exit176
	bic r3, r3, #255, 24 @ 65280
	ldr r2, [sp, #+24]
	strb r3, [r2, #+28]
	mov r0, r3, lsr #24
	strb r0, [r2, #+31]
	mov r3, r3, lsr #16
	strb r3, [r2, #+30]
	mov r3, r1, lsl #8
	mov r3, r3, lsr #8
	strb r3, [r2, #+29]
	b .LBB385_193	@ bb120
	.align	4
.LBB385_169:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_20:
 	.long	error_mark_node

	.align	4
.LBB385_170:	@ bb94
	mov r4, #1
	ldr r5, [sp, #+24]
	strb r4, [r5, #+29]
	ldr r3, .LCPI385_1
	ldr r3, [r3, #+4]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r5, #+16]
	strb r4, [r5, #+28]
	ldrsb r3, [r5, #+29]
	ldr r2, .LCPI385_11
	ldr r3, [r2, +r3, lsl #2]
	mov r3, r3, lsl #3
	cmp r3, #65
	bge .LBB385_228	@ bb94.bb99_crit_edge
.LBB385_171:	@ bb95
	mov r2, #1
	cmp r3, #1
	movlt r3, r2
.LBB385_172:	@ bb99
	ldr r2, [sp, #+24]
	@comment
str r3, [r2, #+32]
	ldr r0, [r2, #+52]
	ldrb r3, [r0, #+8]
	cmp r3, #25
	bne .LBB385_193	@ bb120
.LBB385_173:	@ bb100
	emit_nops_till_bundle_end
	bl tree_int_cst_sgn
	cmp r0, #0
	blt .LBB385_193	@ bb120
.LBB385_174:	@ bb101
	ldr r3, [sp, #+24]
	ldrb r2, [r3, #+10]
	ldrb r1, [r3, #+8]!
	ldrb r0, [r3, #+3]
	orr r2, r2, r0, lsl #8
	ldrb r0, [r3, #+1]
	orr r0, r1, r0, lsl #8
	orr r2, r0, r2, lsl #16
	orr r2, r2, #1, 18 @ 16384
	mov r2, r2, lsr #8
	strb r2, [r3, #+1]
	strb r1, [r3]
	b .LBB385_193	@ bb120
	.align	4
.LBB385_175:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_21:
 	.long	maximum_field_alignment

.LBB385_176:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_22:
 	.long	flag_pack_struct

	.align	4
.LBB385_177:	@ bb102
	mov r3, #1
	ldr r4, [sp, #+24]
	strb r3, [r4, #+29]
	ldr r5, .LCPI385_1
	ldr r3, [r5, #+4]
	mov r0, r3, lsl #3
	emit_nops_till_bundle_end
	bl size_int
	@comment
str r0, [r4, #+16]
	ldrsb r3, [r4, #+29]
	ldrb r3, [r5, +r3, lsl #2]
	mov r3, r3, lsl #3
	strb r3, [r4, #+28]
	ldrsb r3, [r4, #+29]
	ldr r2, .LCPI385_11
	ldr r3, [r2, +r3, lsl #2]
	mov r3, r3, lsl #3
	cmp r3, #65
	bge .LBB385_229	@ bb102.bb107_crit_edge
.LBB385_178:	@ bb103
	mov r2, #1
	cmp r3, #1
	movlt r3, r2
.LBB385_179:	@ bb107
	ldr r2, [sp, #+24]
	@comment
str r3, [r2, #+32]
	b .LBB385_193	@ bb120
	.align	2
.LBB385_180:	@ bb108
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+12]
	ldr r2, [r3, #+56]
	ldrb r1, [r2, #+8]
	cmp r1, #25
	ldreq r3, [r3, #+52]
	ldreqb r1, [r3, #+8]
	cmpeq r1, #25
	beq .LBB385_182	@ bb111
	b .LBB385_11	@ bb
.LBB385_181:	@ bb109
.LBB385_182:	@ bb111
	ldr r1, .LCPI385_12
	ldr r4, [r1]
	mov r1, #32
	cmp r4, #0
	moveq r4, r1
	ldr r3, [r3, #+12]
	ldr r2, [r2, #+12]
	sub r3, r2, r3
	add r5, r3, #1
	add r3, r4, r5
	sub r6, r3, #1
	mov r0, r6
	mov r1, r4
	emit_nops_till_bundle_end
	bl __modsi3
	sub r0, r6, r0
	cmp r0, r4
	bgt .LBB385_230	@ bb115
.LBB385_183:	@ bb116
	ldr r3, .LCPI385_1
	ldr r3, [r3, #+24]
	mov r3, r3, lsl #3
	cmp r3, r4
	blo .LBB385_187	@ bb116.mode_for_size.exit167_crit_edge
.LBB385_184:	@ bb116.bb6.i165_crit_edge
	mov r3, #1
	ldr r2, .LCPI385_0
	b .LBB385_186	@ bb6.i165
.LBB385_185:	@ bb3.i160
	ldr r2, .LCPI385_1
	ldr r2, [r2, +r3, lsl #2]
	mov r1, r2, lsl #3
	ldr r2, .LCPI385_2
	cmp r1, r4
	beq .LBB385_188	@ mode_for_size.exit167
.LBB385_186:	@ bb6.i165
	ldr r3, [r2, +r3, lsl #2]
	cmp r3, #0
	bne .LBB385_185	@ bb3.i160
.LBB385_187:	@ bb116.mode_for_size.exit167_crit_edge
	mov r3, #26
.LBB385_188:	@ mode_for_size.exit167
	ldr r2, [sp, #+24]
	ldrb r1, [r2, #+28]!
	ldrb r12, [r2, #+1]
	strb r3, [r2, #+1]
	strb r1, [r2]
.LBB385_189:	@ bb117
	emit_nops_till_bundle_end
	bl size_int
	ldr r3, [sp, #+24]
	@comment
str r0, [r3, #+16]
	@comment
str r4, [r3, #+32]
	strb r5, [r3, #+28]
	b .LBB385_193	@ bb120
	.align	2
.LBB385_190:	@ bb118
	mov r3, #64
	ldr r2, [sp, #+24]
	@comment
str r3, [r2, #+32]
	ldrb r3, [r2, #+28]!
	mov r1, r2
	ldrb r0, [r1, #+2]!
	mov r12, #26
.LBB385_191:	@ bb118
	strb r12, [r2, #+1]
	strb r0, [r1]
	strb r3, [r2]
	b .LBB385_193	@ bb120
	.align	2
.LBB385_192:	@ bb20
	mov r0, #32
	emit_nops_till_bundle_end
	bl size_int
	ldr r3, [sp, #+24]
	@comment
str r0, [r3, #+16]
	ldrb r2, [r3, #+30]
	mov r1, r3
	ldrb r0, [r1, #+28]!
	ldrb r12, [r1, #+1]
	ldr r12, .LCPI385_4
	ldr r12, [r12]
	mov lr, #255, 24 @ 65280
	and r12, lr, r12, lsl #8
	mov r12, r12, lsr #8
	ldrb lr, [r1, #+3]
	strb r12, [r1, #+1]
	orr r2, r2, lr, lsl #8
	orr r2, r0, r2, lsl #16
	mov r12, r2, lsr #24
	strb r12, [r1, #+3]
	strb r0, [r1]
	mov r2, r2, lsr #16
	strb r2, [r3, #+30]
.LBB385_193:	@ bb120
	ldr r3, [sp, #+24]
	mov r2, r3
	ldrb r1, [r2, #+28]!
	ldrb r1, [r2, #+3]
	ldrb r2, [r2, #+2]
	orr r2, r2, r1, lsl #8
	mov r2, r2, lsl #16
	ldrb r3, [r3, #+29]
	orr r3, r2, r3, lsl #8
	mov r2, r3, lsr #8
	mov r1, #255
	tst r1, r3, lsr #8
	andne r3, r2, #255
	cmpne r3, #26
	bne .LBB385_195	@ bb123
	b .LBB385_198	@ bb129
.LBB385_194:	@ bb120
.LBB385_195:	@ bb123
	mov r3, r2, lsl #24
	mov r3, r3, asr #24
	ldr r2, .LCPI385_11
	ldr r3, [r2, +r3, lsl #2]
	mov r3, r3, lsl #3
	cmp r3, #65
	bge .LBB385_231	@ bb123.bb128_crit_edge
.LBB385_196:	@ bb124
	mov r2, #1
	cmp r3, #1
	movlt r3, r2
.LBB385_197:	@ bb128
	ldr r2, [sp, #+24]
	@comment
str r3, [r2, #+32]
.LBB385_198:	@ bb129
	ldr r3, [sp, #+24]
	ldr r0, [r3, #+16]
	cmp r0, #0
	ldrneb r3, [r0, #+8]
	cmpne r3, #25
	bne .LBB385_200	@ bb131
	b .LBB385_201	@ bb132
.LBB385_199:	@ bb130
.LBB385_200:	@ bb131
	emit_nops_till_bundle_end
	bl variable_size
	ldr r3, [sp, #+24]
	@comment
str r0, [r3, #+16]
.LBB385_201:	@ bb132
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+60]
	cmp r3, #0
	ldreq r3, [sp, #+24]
	ldreq r2, [r3, #+64]
	cmpeq r2, r3
	beq .LBB385_206	@ bb137
.LBB385_202:	@ bb133
.LBB385_203:	@ bb134
	ldr r3, [sp, #+24]
	ldr r3, [r3, #+64]
	cmp r3, #0
	beq .LBB385_206	@ bb137
.LBB385_204:	@ bb.nph253
	ldr r2, [sp, #+24]
	ldrb r1, [r2, #+29]
	mov r1, r1, lsl #8
	ldr r0, [r2, #+32]
	ldr r2, [r2, #+16]
.LBB385_205:	@ bb135
	@comment
str r2, [r3, #+16]
	@comment
str r0, [r3, #+32]
	ldrb r12, [r3, #+29]
	add r12, r3, #28
	ldrb lr, [r12, #+2]!
	ldrb r4, [r12, #+1]
	orr lr, lr, r4, lsl #8
	ldrb r4, [r3, #+28]
	orr lr, r4, lr, lsl #16
	orr lr, lr, r1
	mov r4, lr, lsr #24
	strb r4, [r12, #+1]
	mov r4, lr, lsr #16
	strb r4, [r12]
	mov r12, r1, lsr #8
	strb r12, [r3, #+29]
	strb lr, [r3, #+28]
	ldr r3, [r3, #+60]
	cmp r3, #0
	bne .LBB385_205	@ bb135
.LBB385_206:	@ bb137
	emit_nops_till_bundle_end
	bl pop_obstacks
	ldr r0, [sp, #+4]
	emit_nops_till_bundle_end
	bl resume_momentary
.LBB385_207:	@ return
	sfi_add sp, sp, #32
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB385_208:	@ bb31
	ldr r6, [r6, #+20]
	b .LBB385_43	@ bb37
.LBB385_209:	@ bb59.bb89.i_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+28]
	mov r5, r3
.LBB385_210:	@ bb89.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	b .LBB385_113	@ layout_record.exit
.LBB385_211:	@ bb9.i
	mov r3, #0
	mov r0, r3
	mov r1, r4
	ldr r2, [sp, #+28]
	emit_nops_till_bundle_end
	bl tree_cons
.LBB385_212:	@ bb86.i
	@comment
str r0, [sp, #+28]
	cmp r6, #0
	mov r2, #0
	mov r3, #1
	moveq r2, r3
	ldr r4, [r4]
	cmp r4, #0
	bne .LBB385_63	@ bb.i201
.LBB385_213:	@ bb88.i
	cmp r6, #0
	beq .LBB385_210	@ bb89.i
.LBB385_214:	@ bb90.i
	cmp r5, #0
	bne .LBB385_112	@ bb91.i
.LBB385_215:	@ bb90.i.layout_record.exit_crit_edge
	mov r0, r6
	b .LBB385_113	@ layout_record.exit
.LBB385_216:	@ bb85.i
	mov r3, #56
	mov r0, r3
	mov r1, r6
	emit_nops_till_bundle_end
	bl size_binop
	mov r6, r0
.LBB385_217:	@ bb10.i202.bb86.i_crit_edge
	ldr r0, [sp, #+28]
	b .LBB385_212	@ bb86.i
.LBB385_218:	@ bb27.i
	ldr r3, [sp, #+20]
	cmp r7, r3
	movhs r3, r7
	@comment
str r3, [sp, #+20]
	b .LBB385_75	@ bb35.i
.LBB385_219:	@ bb37.i
	cmp r3, r2
	movle r2, r3
	b .LBB385_79	@ bb41.i
.LBB385_220:	@ bb51.i
	add r3, r5, r7
	sub r5, r3, #1
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl __modsi3
	sub r5, r5, r0
	b .LBB385_89	@ bb56.i
.LBB385_221:	@ bb73.i
	mov r0, r5
	emit_nops_till_bundle_end
	bl size_int
	mov r2, r0
	mov r3, #56
	mov r0, r3
	mov r1, r6
	emit_nops_till_bundle_end
	bl size_binop
	@comment
str r0, [r4, #+40]
	b .LBB385_103	@ bb78.i
.LBB385_222:	@ bb75.i
	@comment
str r6, [r4, #+40]
	b .LBB385_103	@ bb78.i
.LBB385_223:	@ bb81.i.bb86.i_crit_edge
	mov r5, r3
	b .LBB385_217	@ bb10.i202.bb86.i_crit_edge
.LBB385_224:	@ bb1.i.bb20.i_crit_edge
	mov r6, #8
	mov r7, #0
	mov r11, r7
	b .LBB385_151	@ bb20.i
.LBB385_225:	@ bb8.i
	ldr r3, [r2, #+12]
	cmp r3, r11
	movge r11, r3
	b .LBB385_150	@ bb18.i
.LBB385_226:	@ bb23.i
	add r7, r11, #7
	mov r11, r7, asr #31
	add r7, r7, r11, lsr #29
	bic r0, r7, #7
	emit_nops_till_bundle_end
	bl size_int
	ldr r7, [sp, #+24]
	@comment
str r0, [r7, #+16]
	b .LBB385_156	@ layout_union.exit
.LBB385_227:	@ bb25.i
	ldr r11, [sp, #+24]
	@comment
str r7, [r11, #+16]
	b .LBB385_156	@ layout_union.exit
.LBB385_228:	@ bb94.bb99_crit_edge
	mov r3, #64
	b .LBB385_172	@ bb99
.LBB385_229:	@ bb102.bb107_crit_edge
	mov r3, #64
	b .LBB385_179	@ bb107
.LBB385_230:	@ bb115
	ldr r3, [sp, #+24]
	ldrb r2, [r3, #+28]!
	mov r1, r3
	ldrb r12, [r1, #+2]!
	mov lr, #26
	strb lr, [r3, #+1]
	strb r12, [r1]
	strb r2, [r3]
	b .LBB385_189	@ bb117
.LBB385_231:	@ bb123.bb128_crit_edge
	mov r3, #64
	b .LBB385_197	@ bb128
.LBB385_232:	@ bb10.i.bb18.i_crit_edge
	mov r7, r2
	b .LBB385_150	@ bb18.i
	.align	4
.LBB385_233:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_0:
 	.long	class_narrowest_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_1:
 	.long	mode_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_2:
 	.long	mode_wider_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_4:
 	.long	ptr_mode

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_6:
 	.long	sizetype

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_10:
 	.long	integer_zero_node

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_11:
 	.long	mode_unit_size

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI385_12:
 	.long	set_alignment

	.size layout_type, .-layout_type


	.globl	fixup_unsigned_type
	.align	4
fixup_unsigned_type:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	ldrb r5, [r4, #+28]
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r4, #+52]
	cmp r5, #32
	movle r1, #0
	rsbgt r3, r5, #64
	mvngt r2, #0
	movgt r1, r2, lsr r3
	b .LBB386_2	@ bb2
.LBB386_1:	@ bb
.LBB386_2:	@ bb2
	cmp r5, #32
	mvnge r0, #0
	movlt r3, #1
	mvnlt r2, #0
	addlt r0, r2, r3, lsl r5
	b .LBB386_4	@ bb5
.LBB386_3:	@ bb3
.LBB386_4:	@ bb5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r4, #+56]
	ldr r3, [r4, #+52]
	@comment
str r4, [r3, #+4]
	ldr r3, [r4, #+56]
	@comment
str r4, [r3, #+4]
	mov r0, r4
	emit_nops_till_bundle_end
	bl layout_type
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB386_5:	@ entry.bb2_crit_edge
.LBB386_6:	@ bb2.bb5_crit_edge
	.size fixup_unsigned_type, .-fixup_unsigned_type


	.globl	make_unsigned_type
	.align	4
make_unsigned_type:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	mov r0, #7
	emit_nops_till_bundle_end
	bl make_node
	strb r4, [r0, #+28]
	ldr r3, .LCPI387_0
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	ldreq r3, .LCPI387_0
	@comment
streq r4, [r3]
.LBB387_1:	@ bb
.LBB387_2:	@ bb1
	ldrb r5, [r4, #+28]
	mov r0, #0
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r4, #+52]
	cmp r5, #32
	movle r1, #0
	rsbgt r3, r5, #64
	mvngt r2, #0
	movgt r1, r2, lsr r3
	b .LBB387_4	@ bb2.i
.LBB387_3:	@ bb.i
.LBB387_4:	@ bb2.i
	cmp r5, #32
	mvnge r0, #0
	movlt r3, #1
	mvnlt r2, #0
	addlt r0, r2, r3, lsl r5
	b .LBB387_6	@ fixup_unsigned_type.exit
.LBB387_5:	@ bb3.i
.LBB387_6:	@ fixup_unsigned_type.exit
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r4, #+56]
	ldr r3, [r4, #+52]
	@comment
str r4, [r3, #+4]
	ldr r3, [r4, #+56]
	@comment
str r4, [r3, #+4]
	mov r0, r4
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r4
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB387_7:	@ bb1.bb2.i_crit_edge
.LBB387_8:	@ bb2.i.fixup_unsigned_type.exit_crit_edge
	.align	4
.LBB387_9:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI387_0:
 	.long	sizetype

	.size make_unsigned_type, .-make_unsigned_type


	.globl	fixup_signed_type
	.align	4
fixup_signed_type:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldrb r4, [r0, #+28]
	mov r5, r0
	cmp r4, #33
	mvnle r1, #0
	subgt r3, r4, #33
	mvngt r2, #0
	movgt r1, r2, lsl r3
	b .LBB388_2	@ bb2
.LBB388_1:	@ bb
.LBB388_2:	@ bb2
	cmp r4, #33
	movge r0, #0
	sublt r3, r4, #1
	mvnlt r2, #0
	movlt r0, r2, lsl r3
	b .LBB388_4	@ bb5
.LBB388_3:	@ bb3
.LBB388_4:	@ bb5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r5, #+52]
	cmp r4, #33
	movle r1, #0
	subgt r3, r4, #33
	movgt r2, #1
	mvngt r1, #0
	addgt r1, r1, r2, lsl r3
	b .LBB388_6	@ bb8
.LBB388_5:	@ bb6
.LBB388_6:	@ bb8
	cmp r4, #33
	mvnge r0, #0
	sublt r3, r4, #1
	movlt r2, #1
	mvnlt r0, #0
	addlt r0, r0, r2, lsl r3
	b .LBB388_8	@ bb11
.LBB388_7:	@ bb9
.LBB388_8:	@ bb11
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r5, #+56]
	ldr r3, [r5, #+52]
	@comment
str r5, [r3, #+4]
	ldr r3, [r5, #+56]
	@comment
str r5, [r3, #+4]
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_type
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB388_9:	@ entry.bb2_crit_edge
.LBB388_10:	@ bb2.bb5_crit_edge
.LBB388_11:	@ bb5.bb8_crit_edge
.LBB388_12:	@ bb8.bb11_crit_edge
	.size fixup_signed_type, .-fixup_signed_type


	.globl	make_signed_type
	.align	4
make_signed_type:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	mov r0, #7
	emit_nops_till_bundle_end
	bl make_node
	strb r4, [r0, #+28]
	mov r5, r0
	cmp r4, #33
	mvnle r1, #0
	subgt r3, r4, #33
	mvngt r2, #0
	movgt r1, r2, lsl r3
	b .LBB389_2	@ bb2
.LBB389_1:	@ bb
.LBB389_2:	@ bb2
	cmp r4, #33
	movge r0, #0
	sublt r3, r4, #1
	mvnlt r2, #0
	movlt r0, r2, lsl r3
	b .LBB389_4	@ bb5
.LBB389_3:	@ bb3
.LBB389_4:	@ bb5
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r5, #+52]
	cmp r4, #33
	movle r1, #0
	subgt r3, r4, #33
	movgt r2, #1
	mvngt r1, #0
	addgt r1, r1, r2, lsl r3
	b .LBB389_6	@ bb8
.LBB389_5:	@ bb6
.LBB389_6:	@ bb8
	cmp r4, #33
	mvnge r0, #0
	sublt r3, r4, #1
	movlt r2, #1
	mvnlt r0, #0
	addlt r0, r0, r2, lsl r3
	b .LBB389_8	@ bb11
.LBB389_7:	@ bb9
.LBB389_8:	@ bb11
	emit_nops_till_bundle_end
	bl build_int_2_wide
	@comment
str r0, [r5, #+56]
	ldr r3, [r5, #+52]
	@comment
str r5, [r3, #+4]
	ldr r3, [r5, #+56]
	@comment
str r5, [r3, #+4]
	ldr r3, .LCPI389_0
	ldr r3, [r3]
	cmp r3, #0
	ldreq r3, .LCPI389_0
	@comment
streq r5, [r3]
.LBB389_9:	@ bb12
.LBB389_10:	@ bb13
	mov r0, r5
	emit_nops_till_bundle_end
	bl layout_type
	mov r0, r5
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB389_11:	@ entry.bb2_crit_edge
.LBB389_12:	@ bb2.bb5_crit_edge
.LBB389_13:	@ bb5.bb8_crit_edge
.LBB389_14:	@ bb8.bb11_crit_edge
	.align	4
.LBB389_15:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI389_0:
 	.long	sizetype

	.size make_signed_type, .-make_signed_type


	.globl	force_fit_type
	.align	4
force_fit_type:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldrb r3, [r0, #+8]
	mov r2, r1
	cmp r3, #25
	bne .LBB390_13	@ bb29
.LBB390_1:	@ bb3
	ldr r3, [r0, #+4]
	ldrb r1, [r3, #+8]
	mov r12, r0
	ldr lr, [r12, #+16]!
	ldr r4, [r0, #+12]!
	cmp r1, #13
	beq .LBB390_15	@ bb3.bb10_crit_edge
.LBB390_2:	@ bb6
	ldrb r1, [r3, #+28]
	cmp r1, #64
	beq .LBB390_16	@ bb6.bb14_crit_edge
.LBB390_3:	@ bb7
	cmp r1, #32
	bgt .LBB390_17	@ bb8
.LBB390_4:	@ bb10
	mov r5, #0
	@comment
str r5, [r12]
	cmp r1, #32
	mvnlt r5, #0
	biclt r5, r4, r5, lsl r1
	@comment
strlt r5, [r0]
.LBB390_5:	@ bb10.bb14_crit_edge
	mov r5, #0
.LBB390_6:	@ bb14
	ldrb r3, [r3, #+9]
	tst r3, #64
	bne .LBB390_13	@ bb29
.LBB390_7:	@ bb19
	cmp r1, #64
	beq .LBB390_12	@ bb28
.LBB390_8:	@ bb20
	sub r3, r1, #33
	sub r6, r1, #1
	cmp r1, #32
	movgt r6, r3
	cmp r1, #32
	mov r3, r0
	movgt r3, r12
	ldr r3, [r3]
	mov r7, #1
	tst r3, r7, lsl r6
	beq .LBB390_12	@ bb28
.LBB390_9:	@ bb24
	cmp r1, #33
	bge .LBB390_19	@ bb25
.LBB390_10:	@ bb26
	mvn r5, #0
	@comment
str r5, [r12]
	cmp r1, #32
	mvnge r5, #0
	ldrlt r3, [r0]
	mvnlt r5, #0
	orrlt r3, r3, r5, lsl r1
	@comment
strlt r3, [r0]
	b .LBB390_12	@ bb28
.LBB390_11:	@ bb27
.LBB390_12:	@ bb28
	ldr r3, [r0]
	eor r3, r3, r4
	orr r2, r3, r2
	eor r3, r5, lr
	orr r2, r2, r3
	mov r3, #1
	mov r0, #0
	cmp r2, #0
	movne r0, r3
	b .LBB390_14	@ bb29
.LBB390_13:	@ bb29
	mov r0, r2
.LBB390_14:	@ bb29
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB390_15:	@ bb3.bb10_crit_edge
	mov r1, #32
	b .LBB390_4	@ bb10
.LBB390_16:	@ bb6.bb14_crit_edge
	mov r5, lr
	b .LBB390_6	@ bb14
.LBB390_17:	@ bb8
	sub r5, r1, #32
	mvn r6, #0
	bic r5, lr, r6, lsl r5
	@comment
str r5, [r12]
	b .LBB390_6	@ bb14
.LBB390_18:	@ bb11
.LBB390_19:	@ bb25
	sub r1, r1, #32
	ldr r5, [r12]
	mvn r3, #0
	orr r5, r5, r3, lsl r1
	@comment
str r5, [r12]
	b .LBB390_12	@ bb28
.LBB390_20:	@ bb26.bb28_crit_edge
	.size force_fit_type, .-force_fit_type


	.globl	add_double
	.align	4
add_double:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	add r2, r2, r0
	ldr r12, [sp, #+4]
	@comment
str r2, [r12]
	mov r12, #1
	mov lr, #0
	cmp r2, r0
	movlo lr, r12
	add r2, r3, r1
	add r2, r2, lr
	ldr r0, [sp, #+8]
	@comment
str r2, [r0]
	eor r2, r2, r1
	eor r3, r1, r3
	bic r3, r2, r3
	mov r0, r3, lsr #31
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
	.size add_double, .-add_double


	.globl	neg_double
	.align	4
neg_double:
	cmp r0, #0
	rsbne r0, r0, #0
	@comment
strne r0, [r2]
	mvnne r2, r1
	@comment
strne r2, [r3]
	movne r0, #0
	moveq r0, #0
	@comment
streq r0, [r2]
	rsbeq r2, r1, #0
	@comment
streq r2, [r3]
	andeq r3, r2, r1
	moveq r0, r3, lsr #31
	sfi_bx lr
.LBB392_1:	@ bb
.LBB392_2:	@ bb1
	.size neg_double, .-neg_double


	.globl	rshift_double
	.align	4
rshift_double:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	mov r3, r1, asr #31
	ldr r12, [sp, #+16]
	mov lr, #0
	cmp r12, #0
	moveq r3, lr
	ldr r12, [sp, #+12]
	ldr lr, [sp, #+8]
	cmp r2, #32
	@comment
strge r3, [r12]
	rsbge r12, r2, #63
	movge r3, r3, lsl r12
	movge r3, r3, lsl #1
	subge r12, r2, #32
	orrge r3, r3, r1, lsr r12
	@comment
strge r3, [lr]
	rsblt r4, r2, #31
	movlt r4, r1, lsl r4
	movlt r4, r4, lsl #1
	orrlt r0, r4, r0, lsr r2
	@comment
strlt r0, [lr]
	rsblt r0, r2, #32
	movlt r3, r3, lsl r0
	orrlt r3, r3, r1, lsr r2
	@comment
strlt r3, [r12]
	b .LBB393_2	@ bb3
.LBB393_1:	@ bb3
.LBB393_2:	@ bb3
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
.LBB393_3:	@ bb4
	.size rshift_double, .-rshift_double


	.globl	lshift_double
	.align	4
lshift_double:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldr r3, [sp, #+20]
	ldr r12, [sp, #+16]
	ldr lr, [sp, #+12]
	cmp r2, #0
	bge .LBB394_4	@ bb1
.LBB394_1:	@ bb
	mov r4, r1, asr #31
	mov r5, #0
	cmp r3, #0
	moveq r4, r5
	rsb r3, r2, #0
	cmp r3, #32
	blt .LBB394_3	@ bb4.i
.LBB394_2:	@ bb3.i
	@comment
str r4, [r12]
	mvn r3, #31
	sub r3, r3, r2
	add r12, r2, #63
	mov r12, r4, lsl r12
	mov r12, r12, lsl #1
	orr r3, r12, r1, lsr r3
	b .LBB394_6	@ bb3
.LBB394_3:	@ bb4.i
	add r5, r2, #31
	mov r5, r1, lsl r5
	mov r5, r5, lsl #1
	orr r0, r5, r0, lsr r3
	@comment
str r0, [lr]
	add lr, r2, #32
	mov lr, r4, lsl lr
	orr lr, lr, r1, lsr r3
	@comment
str lr, [r12]
	b .LBB394_7	@ bb3
.LBB394_4:	@ bb1
	cmp r2, #32
	bge .LBB394_8	@ bb2
.LBB394_5:	@ bb3
	rsb r3, r2, #31
	mov r3, r0, lsr r3
	mov r3, r3, lsr #1
	orr r3, r3, r1, lsl r2
	@comment
str r3, [r12]
	mov r3, r0, lsl r2
.LBB394_6:	@ bb3
	@comment
str r3, [lr]
.LBB394_7:	@ bb3
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB394_8:	@ bb2
	sub r3, r2, #32
	mov r3, r0, lsl r3
	@comment
str r3, [r12]
	mov r12, #0
	@comment
str r12, [lr]
	b .LBB394_7	@ bb3
	.size lshift_double, .-lshift_double


	.globl	lrotate_double
	.align	4
lrotate_double:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r3
	mov r5, r1
	mov r6, r0
	mov r0, r2
	mov r1, r4
	emit_nops_till_bundle_end
	bl __modsi3
	add r3, r0, r4
	cmp r0, #0
	movge r3, r0
	ldr r2, [sp, #+20]
	ldr r1, [sp, #+16]
	cmp r3, #0
	bge .LBB395_4	@ bb1.i
.LBB395_1:	@ bb.i
	rsb r0, r3, #0
	cmp r0, #32
	mvnge r0, #31
	subge r0, r0, r3
	movge r12, r5, lsr r0
	movge r0, #0
	addlt r12, r3, #31
	movlt r12, r5, lsl r12
	movlt r12, r12, lsl #1
	orrlt r12, r12, r6, lsr r0
	movlt r0, r5, lsr r0
	b .LBB395_6	@ lshift_double.exit
.LBB395_2:	@ bb3.i.i
.LBB395_3:	@ bb4.i.i
.LBB395_4:	@ bb1.i
	cmp r3, #32
	subge r0, r3, #32
	movge r0, r6, lsl r0
	movge r12, #0
	rsblt r0, r3, #31
	movlt r0, r6, lsr r0
	movlt r0, r0, lsr #1
	orrlt r0, r0, r5, lsl r3
	movlt r12, r6, lsl r3
	b .LBB395_6	@ lshift_double.exit
.LBB395_5:	@ bb3.i
.LBB395_6:	@ lshift_double.exit
	sub r3, r4, r3
	cmp r3, #32
	subge r3, r3, #32
	movge r6, r5, lsr r3
	movge r3, #0
	rsblt lr, r3, #31
	movlt lr, r5, lsl lr
	movlt lr, lr, lsl #1
	orrlt r6, lr, r6, lsr r3
	movlt r3, r5, lsr r3
	b .LBB395_8	@ rshift_double.exit
.LBB395_7:	@ bb4.i
.LBB395_8:	@ rshift_double.exit
	orr r12, r6, r12
	@comment
str r12, [r1]
	orr r3, r3, r0
	@comment
str r3, [r2]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB395_9:	@ bb2.i
.LBB395_10:	@ bb3.i2
	.size lrotate_double, .-lrotate_double


	.globl	rrotate_double
	.align	4
rrotate_double:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r3
	mov r5, r1
	mov r6, r0
	mov r0, r2
	mov r1, r4
	emit_nops_till_bundle_end
	bl __modsi3
	add r3, r0, r4
	cmp r0, #0
	movge r3, r0
	ldr r2, [sp, #+20]
	ldr r1, [sp, #+16]
	cmp r3, #32
	subge r0, r3, #32
	movge r0, r5, lsr r0
	movge r12, #0
	rsblt r0, r3, #31
	movlt r0, r5, lsl r0
	movlt r0, r0, lsl #1
	orrlt r0, r0, r6, lsr r3
	movlt r12, r5, lsr r3
	b .LBB396_2	@ rshift_double.exit
.LBB396_1:	@ bb4.i
.LBB396_2:	@ rshift_double.exit
	sub r3, r4, r3
	cmp r3, #0
	bge .LBB396_6	@ bb1.i
.LBB396_3:	@ bb.i
	rsb lr, r3, #0
	cmp lr, #32
	mvnge lr, #31
	subge r3, lr, r3
	movge r3, r5, lsr r3
	movge lr, #0
	addlt r3, r3, #31
	movlt r3, r5, lsl r3
	movlt r3, r3, lsl #1
	orrlt r3, r3, r6, lsr lr
	movlt lr, r5, lsr lr
	b .LBB396_8	@ lshift_double.exit
.LBB396_4:	@ bb3.i.i
.LBB396_5:	@ bb4.i.i
.LBB396_6:	@ bb1.i
	cmp r3, #32
	subge r3, r3, #32
	movge lr, r6, lsl r3
	movge r3, #0
	rsblt lr, r3, #31
	movlt lr, r6, lsr lr
	movlt lr, lr, lsr #1
	orrlt lr, lr, r5, lsl r3
	movlt r3, r6, lsl r3
	b .LBB396_8	@ lshift_double.exit
.LBB396_7:	@ bb3.i2
.LBB396_8:	@ lshift_double.exit
	orr r3, r3, r0
	@comment
str r3, [r1]
	orr r3, lr, r12
	@comment
str r3, [r2]
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB396_9:	@ bb3.i
.LBB396_10:	@ bb2.i
	.size rrotate_double, .-rrotate_double


	.globl	real_value_truncate
	.align	4
real_value_truncate:
	sfi_sub sp, sp, #4
	@comment
str lr, [sp]
	ldr r3, .LCPI397_0
	ldr r3, [r3, +r0, lsl #2]
	bic r3, r3, #14, 4 @ -536870912
	mov r0, r1
	cmp r3, #4
	beq .LBB397_3	@ bb
.LBB397_1:	@ bb2
	mov r1, r2
.LBB397_2:	@ bb2
	ldr lr, [sp]
	sfi_add sp, sp, #4
	sfi_bx lr
.LBB397_3:	@ bb
	mov r1, r2
	emit_nops_till_bundle_end
	bl __truncdfsf2
	emit_nops_till_bundle_end
	bl __extendsfdf2
	b .LBB397_2	@ bb2
	.align	4
.LBB397_4:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI397_0:
 	.long	mode_size

	.size real_value_truncate, .-real_value_truncate


	.globl	target_isinf
	.align	4
target_isinf:
	ldr r3, .LCPI398_0
	ldr r3, [r3, #+4]
	cmp r3, #0
	bge .LBB398_4	@ bb17
.LBB398_1:	@ bb
	mov r3, #255, 12 @ 267386880
	orr r3, r3, #7, 4 @ 1879048192
	and r2, r1, r3
	cmp r2, r3
	ldreq r3, .LCPI398_1
	tsteq r1, r3
	beq .LBB398_6	@ bb13
.LBB398_2:	@ bb8
.LBB398_3:	@ bb15
	mov r0, #0
	sfi_bx lr
.LBB398_4:	@ bb17
	mov r3, #254
	orr r3, r3, #15, 24 @ 3840
	and r2, r0, r3
	cmp r2, r3
	movne r0, #0
	sfi_bxne lr
.LBB398_5:	@ bb22
	mov r3, #1
	mov r2, #0
	cmp r0, #1, 20 @ 4096
	mov r0, #0
	movlo r0, r3
	cmp r1, #0
	moveq r2, r3
	and r0, r0, r2
	sfi_bx lr
.LBB398_6:	@ bb13
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	moveq r0, r3
	sfi_bx lr
	.align	4
.LBB398_7:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI398_0:
 	.long	dconstm1

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI398_1:
 	.long	1048575			@ 0xFFFFF

	.size target_isinf, .-target_isinf


	.globl	target_isnan
	.align	4
target_isnan:
	ldr r3, .LCPI399_0
	ldr r3, [r3, #+4]
	cmp r3, #0
	bge .LBB399_4	@ bb17
.LBB399_1:	@ bb
	mov r3, #255, 12 @ 267386880
	orr r3, r3, #7, 4 @ 1879048192
	and r2, r1, r3
	cmp r2, r3
	bne .LBB399_5	@ bb15
.LBB399_2:	@ bb8
	ldr r3, .LCPI399_1
	tst r1, r3
	movne r0, #1
	sfi_bxne lr
.LBB399_3:	@ bb13
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	sfi_bx lr
.LBB399_4:	@ bb17
	mov r3, #254
	orr r3, r3, #15, 24 @ 3840
	and r2, r0, r3
	cmp r2, r3
	movne r0, #0
	sfi_bxne lr
	b .LBB399_7	@ bb22
.LBB399_5:	@ bb15
	mov r0, #0
	sfi_bx lr
.LBB399_6:	@ bb31
.LBB399_7:	@ bb22
	mov r3, #1
	mov r2, #0
	cmp r0, #1, 20 @ 4096
	mov r0, #0
	movlo r0, r3
	cmp r1, #0
	moveq r2, r3
	and r3, r0, r2
	eor r0, r3, #1
	sfi_bx lr
	.align	4
.LBB399_8:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI399_0:
 	.long	dconstm1

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI399_1:
 	.long	1048575			@ 0xFFFFF

	.size target_isnan, .-target_isnan


	.globl	target_negative
	.align	4
target_negative:
	ldr r3, .LCPI400_0
	ldr r3, [r3, #+4]
	cmp r3, #0
	andge r0, r0, #1
	movlt r0, r1, lsr #31
	sfi_bx lr
.LBB400_1:	@ bb
.LBB400_2:	@ bb9
	.align	4
.LBB400_3:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI400_0:
 	.long	dconstm1

	.size target_negative, .-target_negative


	.align	4
simple_operand_p:
.LBB401_1:	@ bb1
	mov r3, r0
	ldrb r2, [r3, #+8]
	sub r1, r2, #105
	and r1, r1, #255
	cmp r1, #1
	bhi .LBB401_3	@ bb3
.LBB401_2:	@ bb2
	ldr r1, [r3, #+4]
	ldrb r1, [r1, #+29]
	ldr r0, [r3, #+16]
	ldr r12, [r0, #+4]
	ldrb r12, [r12, #+29]
	cmp r1, r12
	beq .LBB401_1	@ bb1
.LBB401_3:	@ bb3
	ldr r1, .LCPI401_0
	ldr r1, [r1]
	and r2, r2, #255
	ldr r2, [r1, +r2, lsl #2]
	ldrb r2, [r2]
	cmp r2, #99
	moveq r0, #1
	sfi_bxeq lr
.LBB401_4:	@ bb3
	and r2, r2, #255
	cmp r2, #100
	ldreqb r2, [r3, #+9]
	moveq r1, r3
	ldreqb r0, [r1, #+8]!
	orreq r2, r0, r2, lsl #8
	ldreqb r0, [r1, #+3]
	ldreqb r1, [r1, #+2]
	orreq r1, r1, r0, lsl #8
	orreq r2, r2, r1, lsl #16
	tsteq r2, #2, 22 @ 2048
	beq .LBB401_6	@ bb9
	b .LBB401_12	@ bb40
.LBB401_5:	@ bb5
.LBB401_6:	@ bb9
	tst r2, #1, 20 @ 4096
	ldreqb r1, [r3, #+29]
	ldreqb r0, [r3, #+28]!
	orreq r1, r0, r1, lsl #8
	ldreqb r0, [r3, #+3]
	ldreqb r3, [r3, #+2]
	orreq r3, r3, r0, lsl #8
	orreq r3, r1, r3, lsl #16
	tsteq r3, #2, 24 @ 512
	beq .LBB401_8	@ bb19
	b .LBB401_12	@ bb40
.LBB401_7:	@ bb14
.LBB401_8:	@ bb19
	tst r2, #2, 14 @ 524288
	tsteq r3, #1, 24 @ 256
	beq .LBB401_10	@ bb29
	b .LBB401_12	@ bb40
.LBB401_9:	@ bb24
.LBB401_10:	@ bb29
	tst r2, #1, 14 @ 262144
	movne r2, #1
	andne r0, r2, r3, lsr #10
	sfi_bxne lr
	b .LBB401_13	@ bb41
.LBB401_11:	@ bb34
.LBB401_12:	@ bb40
	mov r0, #0
	sfi_bx lr
.LBB401_13:	@ bb41
	mov r0, #1
	sfi_bx lr
	.align	4
.LBB401_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI401_0:
 	.long	tree_code_type

	.size simple_operand_p, .-simple_operand_p


	.align	4
strip_compound_expr:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	ldrb r3, [r0, #+8]
	mov r4, r1
	mov r5, r0
	cmp r3, #48
	beq .LBB402_13	@ bb4
.LBB402_1:	@ entry
	and r2, r3, #255
	cmp r2, #44
	bne .LBB402_5	@ bb5
.LBB402_2:	@ bb
	ldr r2, [r5, #+16]
	ldrb r1, [r2, #+8]
	cmp r1, #105
	ldreq r2, [r2, #+16]
	cmpeq r2, r4
	beq .LBB402_12	@ bb2
.LBB402_3:	@ bb1
.LBB402_4:	@ bb3
	and r2, r3, #255
	cmp r2, #48
	beq .LBB402_13	@ bb4
.LBB402_5:	@ bb5
	ldr r2, .LCPI402_0
	ldr r2, [r2]
	ldr r3, [r2, +r3, lsl #2]
	ldrb r3, [r3]
	cmp r3, #60
	andne r2, r3, #255
	cmpne r2, #50
	bne .LBB402_7	@ bb5
	b .LBB402_9	@ bb10
.LBB402_6:	@ bb5
.LBB402_7:	@ bb5
	and r3, r3, #255
	cmp r3, #49
	bne .LBB402_10	@ bb12
.LBB402_8:	@ bb6
	ldr r0, [r5, #+16]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strip_compound_expr
	@comment
str r0, [r5, #+16]
	b .LBB402_10	@ bb12
.LBB402_9:	@ bb10
	ldr r0, [r5, #+16]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strip_compound_expr
	@comment
str r0, [r5, #+16]
	ldr r0, [r5, #+20]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strip_compound_expr
	@comment
str r0, [r5, #+20]
.LBB402_10:	@ bb12
	mov r0, r5
.LBB402_11:	@ bb12
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB402_12:	@ bb2
	ldr r0, [r5, #+20]
	b .LBB402_11	@ bb12
.LBB402_13:	@ bb4
	ldr r0, [r5, #+16]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strip_compound_expr
	@comment
str r0, [r5, #+16]
	ldr r0, [r5, #+20]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strip_compound_expr
	@comment
str r0, [r5, #+20]
	ldr r0, [r5, #+24]
	mov r1, r4
	emit_nops_till_bundle_end
	bl strip_compound_expr
	@comment
str r0, [r5, #+24]
	b .LBB402_10	@ bb12
	.align	4
.LBB402_14:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI402_0:
 	.long	tree_code_type

	.size strip_compound_expr, .-strip_compound_expr


	.globl	non_lvalue
	.align	4
non_lvalue:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldrsb r3, [r0, #+8]
	mov r4, r0
	cmp r3, #106
	bgt .LBB403_5	@ entry
.LBB403_1:	@ entry
	and r2, r3, #255
	cmp r2, #25
	beq .LBB403_8	@ bb6
.LBB403_2:	@ entry
	and r2, r3, #255
	cmp r2, #26
	andne r3, r3, #255
	cmpne r3, #28
	bne .LBB403_7	@ bb14
.LBB403_3:	@ entry
.LBB403_4:	@ bb21
	mov r0, r4
	b .LBB403_11	@ bb21
.LBB403_5:	@ entry
	and r2, r3, #255
	cmp r2, #107
	andne r3, r3, #255
	cmpne r3, #110
	bne .LBB403_7	@ bb14
	b .LBB403_4	@ bb21
.LBB403_6:	@ entry
.LBB403_7:	@ bb14
	ldr r1, [r4, #+4]
	mov r0, #107
	b .LBB403_10	@ bb7
.LBB403_8:	@ bb6
	mov r0, r4
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB403_4	@ bb21
.LBB403_9:	@ bb7
	ldr r1, [r4, #+4]
	mov r0, #106
.LBB403_10:	@ bb7
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	ldrb r3, [r4, #+8]!
	ldrb r3, [r4, #+1]
	ldrb r2, [r4, #+2]!
	ldrb r4, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r4, r4, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r4, r1, r4, lsl #16
	bic r4, r4, #2, 24 @ 512
	strb r4, [r2]
	mov r1, r4, lsr #24
	strb r1, [r2, #+3]
	mov r1, #2, 24 @ 512
	and r3, r1, r3, lsl #8
	orr r3, r4, r3
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	mov r4, r4, lsr #16
	strb r4, [r0, #+10]
.LBB403_11:	@ bb21
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.size non_lvalue, .-non_lvalue


	.align	4
omit_one_operand:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	mov r4, r2
	mov r5, r0
	emit_nops_till_bundle_end
	bl convert
	ldrb r3, [r4, #+9]
	mov r6, r0
	tst r3, #1
	bne .LBB404_13	@ bb
.LBB404_1:	@ bb4
	ldrsb r3, [r6, #+8]
	cmp r3, #106
	bgt .LBB404_6	@ bb4
.LBB404_2:	@ bb4
	and r2, r3, #255
	cmp r2, #25
	beq .LBB404_9	@ bb6.i
.LBB404_3:	@ bb4
	and r2, r3, #255
	cmp r2, #26
	andne r3, r3, #255
	cmpne r3, #28
	bne .LBB404_8	@ bb14.i
.LBB404_4:	@ bb4
.LBB404_5:	@ non_lvalue.exit
	mov r0, r6
	b .LBB404_12	@ non_lvalue.exit
.LBB404_6:	@ bb4
	and r2, r3, #255
	cmp r2, #107
	andne r3, r3, #255
	cmpne r3, #110
	bne .LBB404_8	@ bb14.i
	b .LBB404_5	@ non_lvalue.exit
.LBB404_7:	@ bb4
.LBB404_8:	@ bb14.i
	ldr r1, [r6, #+4]
	mov r0, #107
	b .LBB404_11	@ bb7.i
.LBB404_9:	@ bb6.i
	mov r0, r6
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB404_5	@ non_lvalue.exit
.LBB404_10:	@ bb7.i
	ldr r1, [r6, #+4]
	mov r0, #106
.LBB404_11:	@ bb7.i
	mov r2, r6
	emit_nops_till_bundle_end
	bl build1
	ldrb r3, [r6, #+8]!
	ldrb r3, [r6, #+1]
	ldrb r2, [r6, #+2]!
	ldrb r6, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r6, r6, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r6, r1, r6, lsl #16
	bic r6, r6, #2, 24 @ 512
	strb r6, [r2]
	mov r1, r6, lsr #24
	strb r1, [r2, #+3]
	mov r1, #2, 24 @ 512
	and r3, r1, r3, lsl #8
	orr r3, r6, r3
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	mov r6, r6, lsr #16
	strb r6, [r0, #+10]
.LBB404_12:	@ non_lvalue.exit
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB404_13:	@ bb
	mov r0, #44
	mov r1, r5
	mov r2, r4
	mov r3, r6
	emit_nops_till_bundle_end
	bl build
	b .LBB404_12	@ non_lvalue.exit
	.size omit_one_operand, .-omit_one_operand


	.globl	pedantic_non_lvalue
	.align	4
pedantic_non_lvalue:
	sfi_sub sp, sp, #8
	stmea sp, {r4, lr}
	ldr r3, .LCPI405_0
	ldr r3, [r3]
	mov r4, r0
	cmp r3, #0
	beq .LBB405_5	@ non_lvalue.exit
.LBB405_1:	@ bb
	ldrsb r3, [r4, #+8]
	cmp r3, #106
	bgt .LBB405_6	@ bb
.LBB405_2:	@ bb
	and r2, r3, #255
	cmp r2, #25
	beq .LBB405_9	@ bb6.i
.LBB405_3:	@ bb
	and r2, r3, #255
	cmp r2, #26
	andne r3, r3, #255
	cmpne r3, #28
	bne .LBB405_8	@ bb14.i
.LBB405_4:	@ bb
.LBB405_5:	@ non_lvalue.exit
	mov r0, r4
	b .LBB405_12	@ non_lvalue.exit
.LBB405_6:	@ bb
	and r2, r3, #255
	cmp r2, #107
	andne r3, r3, #255
	cmpne r3, #110
	bne .LBB405_8	@ bb14.i
	b .LBB405_5	@ non_lvalue.exit
.LBB405_7:	@ bb
.LBB405_8:	@ bb14.i
	ldr r1, [r4, #+4]
	mov r0, #107
	b .LBB405_11	@ bb7.i
.LBB405_9:	@ bb6.i
	mov r0, r4
	emit_nops_till_bundle_end
	bl integer_zerop
	cmp r0, #0
	beq .LBB405_5	@ non_lvalue.exit
.LBB405_10:	@ bb7.i
	ldr r1, [r4, #+4]
	mov r0, #106
.LBB405_11:	@ bb7.i
	mov r2, r4
	emit_nops_till_bundle_end
	bl build1
	ldrb r3, [r4, #+8]!
	ldrb r3, [r4, #+1]
	ldrb r2, [r4, #+2]!
	ldrb r4, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r4, r4, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r4, r1, r4, lsl #16
	bic r4, r4, #2, 24 @ 512
	strb r4, [r2]
	mov r1, r4, lsr #24
	strb r1, [r2, #+3]
	mov r1, #2, 24 @ 512
	and r3, r1, r3, lsl #8
	orr r3, r4, r3
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	mov r4, r4, lsr #16
	strb r4, [r0, #+10]
.LBB405_12:	@ non_lvalue.exit
	ldmfd sp, {r4, lr}
	sfi_add sp, sp, #8
	sfi_bx lr
	.align	4
.LBB405_13:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI405_0:
 	.long	pedantic_lvalues

	.size pedantic_non_lvalue, .-pedantic_non_lvalue


	.align	4
fold_convert:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #16
	ldr r3, [r0, #+4]
	@comment
str r3, [sp, #+8]
	ldrb r3, [r3, #+8]
	@comment
str r1, [sp, #+12]
	cmp r3, #7
	beq .LBB406_3	@ bb5
.LBB406_1:	@ entry
	and r2, r3, #255
	cmp r2, #8
	beq .LBB406_26	@ bb92
.LBB406_2:	@ entry
	sub r3, r3, #10
	and r3, r3, #255
	cmp r3, #4
	bhs .LBB406_25	@ bb127
.LBB406_3:	@ bb5
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+8]
	cmp r3, #25
	beq .LBB406_9	@ bb6
.LBB406_4:	@ bb5
	and r3, r3, #255
	cmp r3, #26
	bne .LBB406_24	@ bb90
.LBB406_5:	@ bb50
	ldr r4, [sp, #+8]
	ldr r0, [r4, #+52]
	ldr r3, [sp, #+12]
	ldr r5, [r3, #+20]
	ldr r6, [r3, #+16]!
	@comment
str r3, [sp, #+4]
	emit_nops_till_bundle_end
	bl real_value_from_int_cst
	@comment
str r0, [sp]
	mov r7, r1
	ldr r0, [r4, #+56]
	emit_nops_till_bundle_end
	bl real_value_from_int_cst
	ldr r3, .LCPI406_0
	ldr r3, [r3, #+4]
	cmp r3, #0
	bge .LBB406_11	@ bb17.i
.LBB406_6:	@ bb.i
	mov r3, #255, 12 @ 267386880
	orr r3, r3, #7, 4 @ 1879048192
	and r2, r5, r3
	cmp r2, r3
	bne .LBB406_14	@ bb52
.LBB406_7:	@ bb8.i
	ldr r3, .LCPI406_1
	tst r5, r3
	bne .LBB406_43	@ bb51
.LBB406_8:	@ bb13.i
	mov r3, #1
	mov r2, #0
	cmp r6, #0
	movne r2, r3
	b .LBB406_13	@ target_isnan.exit
.LBB406_9:	@ bb6
	ldr r3, [sp, #+8]
	ldrb r3, [r3, #+28]
	cmp r3, #65
	bhs .LBB406_42	@ bb128
.LBB406_10:	@ bb8
	ldr r4, [sp, #+12]
	ldr r0, [r4, #+12]
	ldr r1, [r4, #+16]
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r5, r0
	ldr r3, [sp, #+8]
	@comment
str r3, [r5, #+4]
	ldrb r2, [r3, #+8]!
	ldrb r2, [r3, #+1]
	ldrb r1, [r3, #+2]!
	ldr r3, [r4, #+4]
	ldrb r1, [r3, #+8]!
	ldrb r1, [r3, #+1]
	ldrb r12, [r3, #+2]!
	mov r6, r4
	ldrb r7, [r6, #+8]!
	ldrb r8, [r6, #+1]
	ldrb r9, [r6, #+2]!
	ldrb r10, [r6, #+1]
	ldr r3, [r4, #+16]
	mov r12, #1
	and r2, r12, r2, lsr #6
	and r1, r12, r1, lsr #6
	mov lr, #0
	cmp r2, r1
	mov r2, #0
	movlo r2, r12
	cmp r3, #0
	movlt lr, r12
	and r1, r2, lr
	emit_nops_till_bundle_end
	bl force_fit_type
	ldrb r3, [r5, #+11]
	ldrb r2, [r5, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r5
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 14 @ 524288
	strb r3, [r2]
	mov r1, r3, lsr #8
	strb r1, [r2, #+1]
	mov r1, r3, lsr #24
	strb r1, [r5, #+11]
	orr r1, r7, r8, lsl #8
	orr r12, r9, r10, lsl #8
	orr r1, r1, r12, lsl #16
	orr r1, r1, r0, lsl #19
	and r0, r1, #2, 14 @ 524288
	orr r3, r0, r3
	mov r0, r3, lsr #16
	strb r0, [r5, #+10]
	bic r3, r3, #1, 14 @ 262144
	mov r0, r3, lsr #8
	ldrb r12, [r6]
	strb r0, [r2, #+1]
	strb r3, [r2]
	mov r2, r3, lsr #24
	strb r2, [r5, #+11]
	mov r2, r1, lsr #1
	orr r2, r2, r12, lsl #16
	and r2, r2, #1, 14 @ 262144
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r5, #+10]
	mov r0, r5
	b .LBB406_24	@ bb90
.LBB406_11:	@ bb17.i
	mov r2, #254
	orr r2, r2, #15, 24 @ 3840
	and r3, r6, r2
	cmp r3, r2
	bne .LBB406_14	@ bb52
.LBB406_12:	@ bb22.i
	mov r2, #1
	mov r3, #0
	cmp r6, #1, 20 @ 4096
	mov r12, #0
	movlo r12, r2
	cmp r5, #0
	moveq r3, r2
	and r2, r12, r3
	eor r2, r2, #1
.LBB406_13:	@ target_isnan.exit
	cmp r2, #0
	bne .LBB406_43	@ bb51
.LBB406_14:	@ bb52
	mov r4, #0
	mov r8, #255, 12 @ 267386880
	orr r8, r8, #3, 4 @ 805306368
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __adddf3
	mov r9, r0
	mov r10, r1
	ldr r0, [sp]
	mov r1, r7
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __subdf3
	mov r7, r0
	mov r8, r1
	mov r0, r6
	mov r1, r5
	mov r2, r9
	mov r3, r10
	emit_nops_till_bundle_end
	bl __gedf2
	mov r11, r0
	mov r0, r6
	mov r1, r5
	mov r2, r9
	mov r3, r10
	emit_nops_till_bundle_end
	bl __unorddf2
	mov r3, #1
	cmp r11, #0
	mov r2, #0
	movge r2, r3
	cmp r0, #0
	movne r4, r3
	orr r3, r4, r2
	cmp r3, #0
	bne .LBB406_16	@ bb54
.LBB406_15:	@ bb52
	mov r0, r7
	mov r1, r8
	mov r2, r6
	mov r3, r5
	emit_nops_till_bundle_end
	bl __gedf2
	mov r4, r0
	mov r0, r7
	mov r1, r8
	mov r2, r6
	mov r3, r5
	emit_nops_till_bundle_end
	bl __unorddf2
	mov r7, #1
	mov r3, #0
	cmp r4, #0
	mov r2, #0
	movge r2, r7
	cmp r0, #0
	movne r3, r7
	orr r7, r3, r2
	cmp r7, #0
	beq .LBB406_44	@ bb52.bb55_crit_edge
.LBB406_16:	@ bb54
	mov r7, #1
.LBB406_17:	@ bb55
	mov r2, #0
	mov r0, r6
	mov r1, r5
	mov r3, #0
	emit_nops_till_bundle_end
	bl __ltdf2
	cmp r0, #0
	eorlt r5, r5, #2, 2 @ -2147483648
.LBB406_18:	@ bb56
.LBB406_19:	@ bb57
	mov r4, #0
	mov r8, #15, 12 @ 15728640
	orr r8, r8, #1, 2 @ 1073741824
	mov r0, r6
	mov r1, r5
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __divdf3
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __divdf3
	emit_nops_till_bundle_end
	bl __fixdfsi
	mov r9, r0
	emit_nops_till_bundle_end
	bl __floatsidf
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __muldf3
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __muldf3
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r5
	emit_nops_till_bundle_end
	bl __subdf3
	mov r5, r0
	mov r6, r1
	mov r8, #30, 12 @ 31457280
	orr r8, r8, #1, 2 @ 1073741824
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __ltdf2
	mov r10, r0
	mov r0, r5
	mov r1, r6
	mov r2, #0
	mov r3, r8
	emit_nops_till_bundle_end
	bl __unorddf2
	mov r3, #1
	cmp r10, #0
	mov r2, #0
	movlt r2, r3
	cmp r0, #0
	movne r4, r3
	orr r3, r4, r2
	cmp r3, #0
	beq .LBB406_45	@ bb58
.LBB406_20:	@ bb59
	mov r0, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl __fixdfsi
.LBB406_21:	@ bb60
	mov r4, r0
	ldr r3, [sp, #+4]
	ldmia r3, {r0, r1}
	mov r2, #0
	mov r3, #0
	emit_nops_till_bundle_end
	bl __ltdf2
	cmp r0, #0
	bge .LBB406_23	@ bb62
.LBB406_22:	@ bb61
	rsb r3, r9, #0
	mvn r9, r9
	cmp r4, #0
	moveq r9, r3
	rsb r3, r4, #0
	mov r2, #0
	cmp r4, #0
	moveq r3, r2
	mov r4, r3
.LBB406_23:	@ bb62
	mov r0, r4
	mov r1, r9
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r4, r0
	ldr r3, [sp, #+8]
	@comment
str r3, [r4, #+4]
	ldr r5, [sp, #+12]
	ldrb r6, [r5, #+8]!
	ldrb r8, [r5, #+1]
	mov r9, r5
	ldrb r10, [r9, #+2]!
	ldrb r11, [r9, #+1]
	mov r1, r7
	emit_nops_till_bundle_end
	bl force_fit_type
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 14 @ 524288
	strb r3, [r2]
	mov r1, r3, lsr #8
	strb r1, [r2, #+1]
	mov r1, r3, lsr #24
	strb r1, [r4, #+11]
	orr r1, r6, r8, lsl #8
	orr r12, r10, r11, lsl #8
	orr r1, r1, r12, lsl #16
	orr r1, r1, r0, lsl #19
	and r0, r1, #2, 14 @ 524288
	orr r3, r0, r3
	mov r0, r3, lsr #16
	strb r0, [r4, #+10]
	ldrb r0, [r9, #+1]
	ldrb r0, [r5, #+1]
	ldrb r0, [r5]
	bic r3, r3, #1, 14 @ 262144
	mov r0, r3, lsr #8
	ldrb r12, [r9]
	strb r0, [r2, #+1]
	strb r3, [r2]
	mov r2, r3, lsr #24
	strb r2, [r4, #+11]
	mov r2, r1, lsr #1
	orr r2, r2, r12, lsl #16
	and r2, r2, #1, 14 @ 262144
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r0, r4
.LBB406_24:	@ bb90
	ldr r3, [sp, #+8]
	@comment
str r3, [r0, #+4]
.LBB406_25:	@ bb127
	ldrb r3, [r0, #+10]
	mov r2, r0
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+3]
	orr r3, r3, r12, lsl #8
	ldrb r12, [r2, #+1]
	orr r12, r1, r12, lsl #8
	orr r3, r12, r3, lsl #16
	orr r3, r3, #2, 24 @ 512
	mov r3, r3, lsr #8
	strb r3, [r2, #+1]
	strb r1, [r2]
	b .LBB406_42	@ bb128
.LBB406_26:	@ bb92
	ldr r3, [sp, #+12]
	ldrb r3, [r3, #+8]
	cmp r3, #26
	beq .LBB406_29	@ bb95
.LBB406_27:	@ bb92
	and r3, r3, #255
	cmp r3, #25
	bne .LBB406_25	@ bb127
.LBB406_28:	@ bb93
	ldr r0, [sp, #+8]
	ldr r1, [sp, #+12]
	emit_nops_till_bundle_end
	bl build_real_from_int_cst
	b .LBB406_42	@ bb128
.LBB406_29:	@ bb95
	ldr r3, .LCPI406_0
	ldr r3, [r3, #+4]
	ldr r2, [sp, #+12]
	ldr r1, [r2, #+20]
	mov r4, r2
	ldr r2, [r4, #+16]!
	cmp r3, #0
	bge .LBB406_34	@ bb17.i146
.LBB406_30:	@ bb.i139
	mov r3, #255, 12 @ 267386880
	orr r3, r3, #7, 4 @ 1879048192
	and r0, r1, r3
	cmp r0, r3
	bne .LBB406_37	@ bb97
.LBB406_31:	@ bb8.i140
	ldr r3, .LCPI406_1
	tst r1, r3
	beq .LBB406_33	@ bb13.i144
.LBB406_32:	@ bb8.i140.bb128_crit_edge
	ldr r0, [sp, #+12]
	b .LBB406_42	@ bb128
.LBB406_33:	@ bb13.i144
	mov r1, #1
	mov r3, #0
	cmp r2, #0
	movne r3, r1
	b .LBB406_36	@ target_isnan.exit154
.LBB406_34:	@ bb17.i146
	mov r3, #254
	orr r3, r3, #15, 24 @ 3840
	and r0, r2, r3
	cmp r0, r3
	bne .LBB406_37	@ bb97
.LBB406_35:	@ bb22.i151
	mov r3, #1
	mov r0, #0
	cmp r2, #1, 20 @ 4096
	mov r2, #0
	movlo r2, r3
	cmp r1, #0
	moveq r0, r3
	and r3, r2, r0
	eor r3, r3, #1
.LBB406_36:	@ target_isnan.exit154
	cmp r3, #0
	bne .LBB406_32	@ bb8.i140.bb128_crit_edge
.LBB406_37:	@ bb97
	ldr r0, .LCPI406_3
	emit_nops_till_bundle_end
	bl _setjmp
	cmp r0, #0
	bne .LBB406_46	@ bb98
.LBB406_38:	@ bb99
	ldr r0, .LCPI406_3
	emit_nops_till_bundle_end
	bl set_float_handler
	ldr r3, [sp, #+8]
	ldrsb r3, [r3, #+29]
	ldr r2, .LCPI406_4
	ldr r3, [r2, +r3, lsl #2]
	bic r3, r3, #14, 4 @ -536870912
	ldmia r4, {r0, r1}
	cmp r3, #4
	bne .LBB406_40	@ real_value_truncate.exit
.LBB406_39:	@ bb.i136
	emit_nops_till_bundle_end
	bl __truncdfsf2
	emit_nops_till_bundle_end
	bl __extendsfdf2
.LBB406_40:	@ real_value_truncate.exit
	mov r4, r0
	mov r2, r1
	ldr r0, [sp, #+8]
	mov r1, r4
	emit_nops_till_bundle_end
	bl build_real
	mov r5, r0
	mov r4, #0
	mov r0, #0
	emit_nops_till_bundle_end
	bl set_float_handler
	mov r0, r5
.LBB406_41:	@ got_it
	mov r1, r4
	mov r4, r0
	ldr r5, [sp, #+12]
	ldrb r6, [r5, #+9]
	mov r7, r5
	ldrb r8, [r7, #+8]!
	ldrb r9, [r7, #+3]
	ldrb r10, [r7, #+2]
	emit_nops_till_bundle_end
	bl force_fit_type
	ldrb r3, [r4, #+11]
	ldrb r2, [r4, #+10]
	orr r3, r2, r3, lsl #8
	mov r2, r4
	ldrb r1, [r2, #+8]!
	ldrb r12, [r2, #+1]
	orr r1, r1, r12, lsl #8
	orr r3, r1, r3, lsl #16
	bic r3, r3, #2, 14 @ 524288
	strb r3, [r2]
	mov r1, r3, lsr #8
	strb r1, [r2, #+1]
	mov r1, r3, lsr #24
	strb r1, [r4, #+11]
	orr r1, r8, r6, lsl #8
	orr r12, r10, r9, lsl #8
	orr r1, r1, r12, lsl #16
	orr r1, r1, r0, lsl #19
	and r0, r1, #2, 14 @ 524288
	orr r3, r0, r3
	mov r0, r3, lsr #16
	strb r0, [r4, #+10]
	ldrb r0, [r7, #+3]
	ldrb r0, [r7]
	ldrb r0, [r5, #+9]
	bic r3, r3, #1, 14 @ 262144
	mov r0, r3, lsr #8
	ldrb r12, [r7, #+2]
	strb r0, [r2, #+1]
	strb r3, [r2]
	mov r2, r3, lsr #24
	strb r2, [r4, #+11]
	mov r2, r1, lsr #1
	orr r2, r2, r12, lsl #16
	and r2, r2, #1, 14 @ 262144
	orr r3, r3, r2
	mov r3, r3, lsr #16
	strb r3, [r4, #+10]
	mov r0, r4
.LBB406_42:	@ bb128
	sfi_add sp, sp, #16
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB406_43:	@ bb51
	ldr r1, .LCPI406_2
	ldr r5, [r1, #+4]
	ldr r6, [r1]
	b .LBB406_16	@ bb54
.LBB406_44:	@ bb52.bb55_crit_edge
	mov r7, #0
	b .LBB406_17	@ bb55
.LBB406_45:	@ bb58
	mov r2, #0
	mov r3, #30, 12 @ 31457280
	orr r3, r3, #3, 2 @ -1073741824
	mov r0, r5
	mov r1, r6
	emit_nops_till_bundle_end
	bl __adddf3
	emit_nops_till_bundle_end
	bl __fixdfsi
	orr r0, r0, #2, 2 @ -2147483648
	b .LBB406_21	@ bb60
.LBB406_46:	@ bb98
	ldr r0, [sp, #+12]
	emit_nops_till_bundle_end
	bl copy_node
	mov r4, #1
	b .LBB406_41	@ got_it
	.align	4
.LBB406_47:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI406_0:
 	.long	dconstm1

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI406_1:
 	.long	1048575			@ 0xFFFFF

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI406_2:
 	.long	dconst0

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI406_3:
 	.long	float_error

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI406_4:
 	.long	mode_size

	.size fold_convert, .-fold_convert


	.globl	invert_truthvalue
	.align	4
invert_truthvalue:
	sfi_sub sp, sp, #16
	stmea sp, {r4, r5, r6, lr}
	sfi_sub sp, sp, #4
	ldr r3, .LCPI407_0
	ldr r3, [r3]
	mov r4, r0
.LBB407_1:	@ tailrecurse
	ldrb r1, [r4, #+8]
	ldr r5, [r4, #+4]
	cmp r1, #0
	beq .LBB407_53	@ bb38
.LBB407_2:	@ bb1
	ldr r2, [r3, +r1, lsl #2]
	ldrb r2, [r2]
	cmp r2, #60
	bne .LBB407_16	@ bb13
.LBB407_3:	@ bb2
	ldr r2, [r4, #+16]
	ldr r3, [r2, #+4]
	ldrb r0, [r3, #+8]
	cmp r0, #8
	beq .LBB407_6	@ bb5
.LBB407_4:	@ bb2
	and r0, r0, #255
	cmp r0, #9
	ldreq r3, [r3, #+4]
	ldreqb r3, [r3, #+8]
	cmpeq r3, #8
	beq .LBB407_6	@ bb5
	b .LBB407_7	@ bb12
.LBB407_5:	@ bb4
.LBB407_6:	@ bb5
	sub r3, r1, #99
	cmp r3, #2
	bhs .LBB407_55	@ bb11
.LBB407_7:	@ bb12
	sub r3, r1, #95
	ldr r4, [r4, #+20]
	cmp r3, #5
	bhi .LBB407_33	@ bb6.i
.LBB407_8:	@ bb12
	.set PCRELV35, (.LJTI407_0_0-(.LPCRELL35+8))
.LPCRELL35:
	add r1, pc, #PCRELV35
	ldr pc, [r1, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI407_0_0:
	.long	 .LBB407_12
	.long	 .LBB407_13
	.long	 .LBB407_10
	.long	 .LBB407_11
	.long	 .LBB407_14
	.long	 .LBB407_9

.text
@ JUMP TABLE END



	.align	2
.LBB407_9:	@ bb12.invert_tree_comparison.exit_crit_edge
	mov r0, #99
	b .LBB407_15	@ invert_tree_comparison.exit
	.align	2
.LBB407_10:	@ bb2.i
	mov r0, #96
	b .LBB407_15	@ invert_tree_comparison.exit
	.align	2
.LBB407_11:	@ bb3.i
	mov r0, #95
	b .LBB407_15	@ invert_tree_comparison.exit
	.align	2
.LBB407_12:	@ bb4.i
	mov r0, #98
	b .LBB407_15	@ invert_tree_comparison.exit
	.align	2
.LBB407_13:	@ bb5.i
	mov r0, #97
	b .LBB407_15	@ invert_tree_comparison.exit
	.align	2
.LBB407_14:	@ bb7.i
	mov r0, #100
.LBB407_15:	@ invert_tree_comparison.exit
	mov r1, r5
	mov r3, r4
	b .LBB407_40	@ bb22
.LBB407_16:	@ bb13
	cmp r1, #43
	ble .LBB407_56	@ bb13
.LBB407_17:	@ bb13
	cmp r1, #104
	bgt .LBB407_29	@ bb13
.LBB407_18:	@ bb13
	cmp r1, #85
	bgt .LBB407_26	@ bb13
.LBB407_19:	@ bb13
	cmp r1, #72
	bgt .LBB407_49	@ bb13
.LBB407_20:	@ bb13
	cmp r1, #44
	beq .LBB407_47	@ bb28
.LBB407_21:	@ bb13
	cmp r1, #48
	beq .LBB407_46	@ bb27
.LBB407_22:	@ bb13
	cmp r1, #53
	bne .LBB407_32	@ bb35
.LBB407_23:	@ bb34
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	mov r0, #53
.LBB407_24:	@ bb34
	mov r1, r5
.LBB407_25:	@ bb34
	emit_nops_till_bundle_end
	bl build1
	b .LBB407_54	@ bb38
.LBB407_26:	@ bb13
	sub r3, r1, #86
	cmp r3, #8
	bhi .LBB407_32	@ bb35
.LBB407_27:	@ bb13
	.set PCRELV36, (.LJTI407_1_1-(.LPCRELL36+8))
.LPCRELL36:
	add r1, pc, #PCRELV36
	ldr pc, [r1, +r3, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI407_1_1:
	.long	 .LBB407_51
	.long	 .LBB407_32
	.long	 .LBB407_32
	.long	 .LBB407_43
	.long	 .LBB407_44
	.long	 .LBB407_28
	.long	 .LBB407_36
	.long	 .LBB407_37
	.long	 .LBB407_45

.text
@ JUMP TABLE END



	.align	2
.LBB407_28:	@ bb19
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r6, r0
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	mov r0, #92
	b .LBB407_42	@ bb23
.LBB407_29:	@ bb13
	sub r2, r1, #105
	cmp r2, #2
	blo .LBB407_50	@ bb30
.LBB407_30:	@ bb13
	cmp r1, #107
	beq .LBB407_48	@ bb29
.LBB407_31:	@ bb13
	cmp r1, #108
	beq .LBB407_55	@ bb11
	.align	2
.LBB407_32:	@ bb35
	ldr r3, [r4, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #11
	beq .LBB407_55	@ bb11
.LBB407_33:	@ bb6.i
	emit_nops_till_bundle_end
	bl abort
.LBB407_34:	@ bb17
	mov r0, #0
.LBB407_35:	@ bb18
	mov r1, #0
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r1, r0
	mov r0, r5
	emit_nops_till_bundle_end
	bl convert
	b .LBB407_54	@ bb38
	.align	2
.LBB407_36:	@ bb20
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r6, r0
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	mov r0, #91
	b .LBB407_42	@ bb23
	.align	2
.LBB407_37:	@ bb21
	ldr r6, [r4, #+20]
	ldrb r3, [r6, #+8]
	cmp r3, #94
	bne .LBB407_41	@ bb23
.LBB407_38:	@ bb22
	ldr r2, [r4, #+16]
	ldr r3, [r6, #+16]
	mov r0, #93
.LBB407_39:	@ bb22
	mov r1, r5
.LBB407_40:	@ bb22
	emit_nops_till_bundle_end
	bl build
	b .LBB407_54	@ bb38
.LBB407_41:	@ bb23
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	mov r0, #93
.LBB407_42:	@ bb23
	mov r1, r5
	mov r3, r6
	b .LBB407_40	@ bb22
	.align	2
.LBB407_43:	@ bb24
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r6, r0
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	mov r0, #90
	b .LBB407_42	@ bb23
	.align	2
.LBB407_44:	@ bb25
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r6, r0
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	mov r0, #89
	b .LBB407_42	@ bb23
	.align	2
.LBB407_45:	@ bb26
	ldr r0, [r4, #+16]
	b .LBB407_54	@ bb38
.LBB407_46:	@ bb27
	ldr r0, [r4, #+24]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r6, r0
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r3, r0
	ldr r2, [r4, #+16]
	@comment
str r6, [sp]
	mov r0, #48
	b .LBB407_39	@ bb22
.LBB407_47:	@ bb28
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r3, r0
	ldr r2, [r4, #+16]
	mov r0, #44
	b .LBB407_39	@ bb22
.LBB407_48:	@ bb29
	ldr r4, [r4, #+16]
	b .LBB407_1	@ tailrecurse
.LBB407_49:	@ bb13
	cmp r1, #73
	bne .LBB407_32	@ bb35
.LBB407_50:	@ bb30
	ldr r0, [r4, #+16]
	emit_nops_till_bundle_end
	bl invert_truthvalue
	mov r2, r0
	ldrb r0, [r4, #+8]
	b .LBB407_24	@ bb34
	.align	2
.LBB407_51:	@ bb31
	ldr r0, [r4, #+20]
	emit_nops_till_bundle_end
	bl integer_onep
	cmp r0, #0
	beq .LBB407_32	@ bb35
.LBB407_52:	@ bb32
	ldr r3, .LCPI407_1
	ldr r1, [r3]
	mov r0, r5
	emit_nops_till_bundle_end
	bl convert
	mov r3, r0
	mov r0, #99
	mov r1, r5
	mov r2, r4
	b .LBB407_40	@ bb22
.LBB407_53:	@ bb38
	mov r0, r4
.LBB407_54:	@ bb38
	sfi_add sp, sp, #4
	ldmfd sp, {r4, r5, r6, lr}
	sfi_add sp, sp, #16
	sfi_bx lr
.LBB407_55:	@ bb11
	mov r0, #94
	mov r1, r5
	mov r2, r4
	b .LBB407_25	@ bb34
.LBB407_56:	@ bb13
	cmp r1, #25
	bne .LBB407_32	@ bb35
.LBB407_57:	@ bb14
	ldr r3, [r4, #+12]
	cmp r3, #0
	ldreq r3, [r4, #+16]
	cmpeq r3, #0
	beq .LBB407_59	@ bb15.bb18_crit_edge
	b .LBB407_34	@ bb17
.LBB407_58:	@ bb15
.LBB407_59:	@ bb15.bb18_crit_edge
	mov r0, #1
	b .LBB407_35	@ bb18
	.align	4
.LBB407_60:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI407_0:
 	.long	tree_code_type

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI407_1:
 	.long	integer_zero_node

	.size invert_truthvalue, .-invert_truthvalue


	.globl	operand_equal_p
	.align	4
operand_equal_p:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	ldr r3, .LCPI408_0
	ldr r3, [r3]
	mov r12, #1, 18 @ 16384
	mov lr, #1
.LBB408_1:	@ tailrecurse
	ldr r4, [r0, #+4]
	ldrb r4, [r4, #+9]
	ldr r5, [r1, #+4]
	ldrb r5, [r5, #+9]
	eor r4, r5, r4
	tst r12, r4, lsl #8
	beq .LBB408_4	@ bb9
	.align	2
.LBB408_2:	@ tailrecurse.bb81_crit_edge
	mov r0, #0
.LBB408_3:	@ bb81
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB408_4:	@ bb9
	mov r4, r0
	ldrb r5, [r4, #+8]
	sub r0, r5, #105
	and r0, r0, #255
	cmp r0, #3
	bhs .LBB408_6	@ bb12
.LBB408_5:	@ bb10
	ldr r0, [r4, #+4]
	ldrb r6, [r0, #+29]
	ldr r0, [r4, #+16]
	ldr r7, [r0, #+4]
	ldrb r7, [r7, #+29]
	cmp r6, r7
	beq .LBB408_4	@ bb9
.LBB408_6:	@ bb12
	mov r6, r1
	ldrb r1, [r6, #+8]
	sub r1, r1, #105
	and r1, r1, #255
	cmp r1, #2
	bhi .LBB408_8	@ bb14
.LBB408_7:	@ bb13
	ldr r1, [r6, #+4]
	ldrb r0, [r1, #+29]
	ldr r1, [r6, #+16]
	ldr r7, [r1, #+4]
	ldrb r7, [r7, #+29]
	cmp r0, r7
	beq .LBB408_6	@ bb12
.LBB408_8:	@ bb14
	and r1, r5, #255
	cmp r1, #108
	cmpeq r4, r6
	beq .LBB408_10	@ bb17
	b .LBB408_12	@ bb18
.LBB408_9:	@ bb14
.LBB408_10:	@ bb17
	mov r3, #1
	mov r0, #0
	cmp r2, #0
.LBB408_11:	@ bb17
	moveq r0, r3
	b .LBB408_3	@ bb81
.LBB408_12:	@ bb18
	ldrb r1, [r4, #+9]
	tst r1, #1
	ldreqb r1, [r6, #+9]
	tsteq r1, #1
	beq .LBB408_14	@ bb29
	b .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_13:	@ bb23
.LBB408_14:	@ bb29
	ldrb r1, [r6, #+8]
	ldrb r5, [r4, #+8]
	cmp r5, r1
	bne .LBB408_23	@ bb41
.LBB408_15:	@ bb30
	and r0, r5, #255
	cmp r0, #110
	ldreq r0, [r6, #+16]
	ldreq r7, [r4, #+16]
	cmpeq r7, r0
	beq .LBB408_44	@ bb31.bb81_crit_edge
.LBB408_16:	@ bb31
.LBB408_17:	@ bb33
	and r0, r1, #255
	and r7, r5, #255
	cmp r7, r0
	bne .LBB408_23	@ bb41
.LBB408_18:	@ bb34
	and r0, r5, #255
	cmp r0, #25
	ldreq r0, [r6, #+12]
	ldreq r7, [r4, #+12]
	cmpeq r7, r0
	beq .LBB408_20	@ bb36
	b .LBB408_21	@ bb38
.LBB408_19:	@ bb35
.LBB408_20:	@ bb36
	ldr r0, [r6, #+16]
	ldr r7, [r4, #+16]
	cmp r7, r0
	beq .LBB408_44	@ bb31.bb81_crit_edge
.LBB408_21:	@ bb38
	and r0, r1, #255
	and r7, r5, #255
	cmp r7, r0
	andeq r0, r5, #255
	cmpeq r0, #26
	beq .LBB408_45	@ bb40
.LBB408_22:	@ bb38
.LBB408_23:	@ bb41
	and r1, r1, #255
	and r0, r5, #255
	cmp r0, r1
	mov r1, #0
	movne r1, lr
	cmp r4, r6
	mov r0, #0
	moveq r0, lr
	cmp r2, #0
	mov r7, #0
	movne r7, lr
	orr r7, r7, r0
	cmp r2, #0
	mov r2, #0
	moveq r2, lr
	cmp r7, #0
	mov r0, #0
	movne r0, r2
	cmp r7, #0
	bne .LBB408_3	@ bb81
.LBB408_24:	@ bb41
	teq r1, #1
	beq .LBB408_3	@ bb81
.LBB408_25:	@ bb47
	ldr r2, [r6, #+4]
	ldrb r1, [r2, #+29]
	ldr r0, [r4, #+4]
	ldrb r7, [r0, #+29]
	cmp r7, r1
	bne .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_26:	@ bb49
	and r1, r5, #255
	ldr r7, [r3, +r1, lsl #2]
	ldrsb r7, [r7]
	cmp r7, #113
	bgt .LBB408_36	@ bb49
.LBB408_27:	@ bb49
	cmp r7, #49
	beq .LBB408_33	@ bb50
.LBB408_28:	@ bb49
	cmp r7, #50
	cmpne r7, #60
	bne .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_29:	@ bb49
.LBB408_30:	@ bb62
	ldr r0, [r4, #+16]
	ldr r1, [r6, #+16]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	beq .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_31:	@ bb63
	ldr r0, [r4, #+20]
	ldr r1, [r6, #+20]
.LBB408_32:	@ bb63
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB408_3	@ bb81
.LBB408_33:	@ bb50
	sub r1, r5, #105
	and r1, r1, #255
	cmp r1, #1
	bhi .LBB408_35	@ tailrecurse.backedge
.LBB408_34:	@ bb51
	ldrb r1, [r0, #+9]
	ldrb r2, [r2, #+9]
	eor r1, r2, r1
	tst r12, r1, lsl #8
	bne .LBB408_2	@ tailrecurse.bb81_crit_edge
	.align	2
.LBB408_35:	@ tailrecurse.backedge
	ldr r1, [r6, #+16]
	ldr r0, [r4, #+16]
	mov r2, #0
	b .LBB408_1	@ tailrecurse
.LBB408_36:	@ bb49
	cmp r7, #114
	bne .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_37:	@ bb67
	sub r2, r1, #37
	cmp r2, #5
	bhi .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_38:	@ bb67
	.set PCRELV37, (.LJTI408_0_0-(.LPCRELL37+8))
.LPCRELL37:
	add r1, pc, #PCRELV37
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI408_0_0:
	.long	 .LBB408_39
	.long	 .LBB408_41
	.long	 .LBB408_35
	.long	 .LBB408_2
	.long	 .LBB408_2
	.long	 .LBB408_39

.text
@ JUMP TABLE END



	.align	2
.LBB408_39:	@ bb69
	ldr r0, [r4, #+16]
	ldr r1, [r6, #+16]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	beq .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_40:	@ bb70
	ldr r0, [r4, #+20]
	ldr r1, [r6, #+20]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	mov r4, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r4
	b .LBB408_3	@ bb81
	.align	2
.LBB408_41:	@ bb74
	ldr r0, [r4, #+16]
	ldr r1, [r6, #+16]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	beq .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_42:	@ bb75
	ldr r0, [r4, #+20]
	ldr r1, [r6, #+20]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	beq .LBB408_2	@ tailrecurse.bb81_crit_edge
.LBB408_43:	@ bb76
	ldr r0, [r4, #+24]
	ldr r1, [r6, #+24]
	b .LBB408_32	@ bb63
.LBB408_44:	@ bb31.bb81_crit_edge
	mov r0, #1
	b .LBB408_3	@ bb81
.LBB408_45:	@ bb40
	add r0, r4, #16
	add r1, r6, #16
	mov r2, #8
	emit_nops_till_bundle_end
	bl memcmp
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	b .LBB408_11	@ bb17
	.align	4
.LBB408_46:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI408_0:
 	.long	tree_code_type

	.size operand_equal_p, .-operand_equal_p


	.align	4
twoval_comparison_p:
	sfi_sub sp, sp, #28
	stmea sp, {r4, r5, r6, r7, r8, r9, lr}
	ldr r3, .LCPI409_0
	ldr r3, [r3]
	mov r4, r2
	mov r5, r1
	mov r2, #1
	mov r1, #49
	mov r6, r0
.LBB409_1:	@ tailrecurse
	ldrb r0, [r6, #+8]
	cmp r0, #94
	mov r12, #0
	moveq r12, r2
	ldr lr, [r3, +r0, lsl #2]
	ldrb lr, [lr]
	cmp lr, #101
	mov r7, #0
	moveq r7, r2
	tst r7, r12
	mov r8, lr
	movne r8, r1
	cmp lr, #101
	mov r9, #0
	movne r9, r2
	tst r7, r12
	bne .LBB409_6	@ bb9
.LBB409_2:	@ tailrecurse
	teq r9, #1
	beq .LBB409_6	@ bb9
.LBB409_3:	@ bb4
	sub r8, r0, #89
	cmp r8, #2
	blo .LBB409_5	@ bb8
.LBB409_4:	@ bb4
	and r8, r0, #255
	cmp r8, #44
	bne .LBB409_32	@ bb4.bb9_crit_edge
.LBB409_5:	@ bb8
	mov r8, #50
.LBB409_6:	@ bb9
	mov r12, r8, lsl #24
	mov r12, r12, asr #24
	cmp r12, #98
	bgt .LBB409_13	@ bb9
.LBB409_7:	@ bb9
	cmp r12, #49
	beq .LBB409_16	@ bb10
.LBB409_8:	@ bb9
	cmp r12, #50
	beq .LBB409_17	@ bb11
.LBB409_9:	@ bb9
	cmp r12, #60
	bne .LBB409_30	@ bb14
.LBB409_10:	@ bb25
	ldr r0, [r6, #+16]
	ldr r1, [r6, #+20]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	bne .LBB409_30	@ bb14
.LBB409_11:	@ bb27
	ldr r0, [r5]
	ldr r1, [r6, #+16]
	cmp r0, #0
	bne .LBB409_24	@ bb29
.LBB409_12:	@ bb28
	@comment
str r1, [r5]
	b .LBB409_27	@ bb34
.LBB409_13:	@ bb9
	cmp r12, #101
	beq .LBB409_20	@ bb17
.LBB409_14:	@ bb9
	cmp r12, #99
	bne .LBB409_30	@ bb14
.LBB409_15:	@ bb9.bb41_crit_edge
	mov r0, #1
	b .LBB409_31	@ bb41
.LBB409_16:	@ bb10
	ldr r6, [r6, #+16]
	b .LBB409_1	@ tailrecurse
.LBB409_17:	@ bb11
	ldr r0, [r6, #+16]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl twoval_comparison_p
	cmp r0, #0
	beq .LBB409_30	@ bb14
.LBB409_18:	@ bb12
	ldr r0, [r6, #+20]
.LBB409_19:	@ bb12
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl twoval_comparison_p
	mov r4, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r4
	b .LBB409_31	@ bb41
.LBB409_20:	@ bb17
	and r3, r0, #255
	cmp r3, #48
	bne .LBB409_30	@ bb14
.LBB409_21:	@ bb18
	ldr r0, [r6, #+16]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl twoval_comparison_p
	cmp r0, #0
	beq .LBB409_30	@ bb14
.LBB409_22:	@ bb19
	ldr r0, [r6, #+20]
	mov r1, r5
	mov r2, r4
	emit_nops_till_bundle_end
	bl twoval_comparison_p
	cmp r0, #0
	beq .LBB409_30	@ bb14
.LBB409_23:	@ bb20
	ldr r0, [r6, #+24]
	b .LBB409_19	@ bb12
.LBB409_24:	@ bb29
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	bne .LBB409_27	@ bb34
.LBB409_25:	@ bb30
	ldr r0, [r4]
	ldr r1, [r6, #+16]
	cmp r0, #0
	beq .LBB409_33	@ bb31
.LBB409_26:	@ bb32
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	beq .LBB409_30	@ bb14
.LBB409_27:	@ bb34
	ldr r0, [r5]
	ldr r1, [r6, #+20]
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	bne .LBB409_15	@ bb9.bb41_crit_edge
.LBB409_28:	@ bb35
	ldr r0, [r4]
	ldr r1, [r6, #+20]
	cmp r0, #0
	bne .LBB409_34	@ bb37
.LBB409_29:	@ bb36
	@comment
str r1, [r4]
	b .LBB409_15	@ bb9.bb41_crit_edge
.LBB409_30:	@ bb14
	mov r0, #0
.LBB409_31:	@ bb41
	ldmfd sp, {r4, r5, r6, r7, r8, r9, lr}
	sfi_add sp, sp, #28
	sfi_bx lr
.LBB409_32:	@ bb4.bb9_crit_edge
	mov r8, lr
	b .LBB409_6	@ bb9
.LBB409_33:	@ bb31
	@comment
str r1, [r4]
	b .LBB409_27	@ bb34
.LBB409_34:	@ bb37
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB409_31	@ bb41
	.align	4
.LBB409_35:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI409_0:
 	.long	tree_code_type

	.size twoval_comparison_p, .-twoval_comparison_p


	.align	4
operand_equal_for_comparison_p:
	sfi_sub sp, sp, #20
	stmea sp, {r4, r5, r6, r7, lr}
	sfi_sub sp, sp, #8
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	cmp r0, #0
	bne .LBB410_10	@ entry.bb25_crit_edge
.LBB410_1:	@ bb1
	ldr r3, [r6, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #12
	bhi .LBB410_8	@ bb24
.LBB410_2:	@ bb1
	mov r2, #1
	mov r1, #114, 26 @ 7296
	tst r1, r2, lsl r3
	beq .LBB410_8	@ bb24
.LBB410_3:	@ bb9
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+8]
	cmp r3, #12
	bhi .LBB410_8	@ bb24
.LBB410_4:	@ bb9
	mov r2, #1
	mov r1, #114, 26 @ 7296
	tst r1, r2, lsl r3
	beq .LBB410_8	@ bb24
.LBB410_5:	@ bb19
	mov r1, sp
	mov r0, r5
	emit_nops_till_bundle_end
	bl get_narrower
	mov r7, r0
	add r1, sp, #4
	mov r0, r4
	emit_nops_till_bundle_end
	bl get_narrower
	ldr r3, [r5, #+4]
	ldrb r3, [r3, #+28]
	ldr r2, [sp, #+4]
	ldr r12, [sp]
	cmp r12, r2
	bne .LBB410_8	@ bb24
.LBB410_6:	@ bb20
	ldr r1, [r7, #+4]
	ldrb r2, [r1, #+28]
	and lr, r3, #255
	cmp r2, lr
	ldrlo r2, [r0, #+4]
	ldrlob r2, [r2, #+28]
	andlo r3, r3, #255
	cmplo r2, r3
	blo .LBB410_11	@ bb22
.LBB410_7:	@ bb21
.LBB410_8:	@ bb24
	mov r0, #0
.LBB410_9:	@ bb25
	sfi_add sp, sp, #8
	ldmfd sp, {r4, r5, r6, r7, lr}
	sfi_add sp, sp, #20
	sfi_bx lr
.LBB410_10:	@ entry.bb25_crit_edge
	mov r0, #1
	b .LBB410_9	@ bb25
.LBB410_11:	@ bb22
	ldr r4, [r6, #+4]
	mov r0, r12
	emit_nops_till_bundle_end
	bl signed_or_unsigned_type
	mov r1, r7
	emit_nops_till_bundle_end
	bl convert
	mov r1, r0
	mov r0, r4
	emit_nops_till_bundle_end
	bl convert
	mov r1, r0
	mov r0, r6
	mov r2, #0
	emit_nops_till_bundle_end
	bl operand_equal_p
	mov r3, #1
	cmp r0, #0
	mov r0, #0
	movne r0, r3
	b .LBB410_9	@ bb25
	.size operand_equal_for_comparison_p, .-operand_equal_for_comparison_p


	.globl	size_int
	.align	4
size_int:
	sfi_sub sp, sp, #12
	stmea sp, {r4, r5, lr}
	mov r4, r0
	cmp r0, #64
	bhi .LBB411_3	@ bb4
.LBB411_1:	@ bb
	ldr r3, .LCPI411_0
	ldr r0, [r3, +r4, lsl #2]
	cmp r0, #0
	bne .LBB411_4	@ bb1
.LBB411_2:	@ bb2
	cmp r4, #64
	bls .LBB411_5	@ bb3
.LBB411_3:	@ bb4
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_int_2_wide
	ldr r3, .LCPI411_1
	ldr r3, [r3]
	@comment
str r3, [r0, #+4]
.LBB411_4:	@ bb1
	ldmfd sp, {r4, r5, lr}
	sfi_add sp, sp, #12
	sfi_bx lr
.LBB411_5:	@ bb3
	emit_nops_till_bundle_end
	bl push_obstacks_nochange
	emit_nops_till_bundle_end
	bl end_temporary_allocation
	mov r1, #0
	mov r0, r4
	emit_nops_till_bundle_end
	bl build_int_2_wide
	mov r5, r0
	ldr r3, .LCPI411_1
	ldr r3, [r3]
	@comment
str r3, [r5, #+4]
	ldr r3, .LCPI411_0
	@comment
str r5, [r3, +r4, lsl #2]
	emit_nops_till_bundle_end
	bl pop_obstacks
	mov r0, r5
	b .LBB411_4	@ bb1
	.align	4
.LBB411_6:
	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI411_0:
 	.long	size_table.4034

	emit_illegal_if_at_bundle_begining  @ ========== SFI
.LCPI411_1:
 	.long	sizetype

	.size size_int, .-size_int


	.globl	mul_double
	.align	4
mul_double:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #68
	mov r4, r3
	mov r5, r2
	mov r3, r1
	@comment
str r3, [sp]
	mov r6, r0
	mov r2, #255
	orr r2, r2, #255, 24 @ 65280
	and r1, r6, r2
	@comment
str r1, [sp, #+4]
	mov r1, r6, lsr #16
	@comment
str r1, [sp, #+8]
	and r1, r3, r2
	@comment
str r1, [sp, #+12]
	mov r3, r3, lsr #16
	@comment
str r3, [sp, #+16]
	and r7, r5, r2
	@comment
str r7, [sp, #+20]
	mov r8, r5, lsr #16
	@comment
str r8, [sp, #+24]
	and r9, r4, r2
	@comment
str r9, [sp, #+28]
	mov r10, r4, lsr #16
	@comment
str r10, [sp, #+32]
	add r0, sp, #36
	mov r11, #0
	mov r2, #32
	mov r1, #0
	emit_nops_till_bundle_end
	bl memset
	ldr r3, [sp, #+104]
	mov r2, #255
	orr r2, r2, #255, 24 @ 65280
.LBB412_1:	@ bb7.outer
	add r1, sp, #4
	ldr r1, [r1, +r11]
	add r0, sp, #36
	ldr r12, [r0, +r11]
	mla r12, r7, r1, r12
	and lr, r12, r2
	@comment
str lr, [r0, +r11]
	add r0, r0, r11
	ldr lr, [r0, #+4]
	add r12, lr, r12, lsr #16
	mla r12, r8, r1, r12
	and lr, r12, r2
	@comment
str lr, [r0, #+4]
	ldr lr, [r0, #+8]
	add r12, lr, r12, lsr #16
	mla r12, r9, r1, r12
	and lr, r12, r2
	@comment
str lr, [r0, #+8]
	ldr lr, [r0, #+12]
	add r12, lr, r12, lsr #16
	mla r1, r10, r1, r12
	and r12, r1, r2
	@comment
str r12, [r0, #+12]
	mov r1, r1, lsr #16
	@comment
str r1, [r0, #+16]
	add r11, r11, #4
	cmp r11, #16
	bne .LBB412_1	@ bb7.outer
.LBB412_2:	@ bb10
	ldr r2, [sp, #+40]
	ldr r1, [sp, #+36]
	orr r2, r1, r2, lsl #16
	@comment
str r2, [r3]
	ldr r3, [sp, #+48]
	ldr r2, [sp, #+44]
	orr r3, r2, r3, lsl #16
	ldr r2, [sp, #+108]
	@comment
str r3, [r2]
	ldr r2, [sp, #+64]
	ldr r1, [sp, #+60]
	orr r2, r1, r2, lsl #16
	ldr r1, [sp, #+56]
	ldr r0, [sp, #+52]
	orr r1, r0, r1, lsl #16
	ldr r0, [sp]
	cmp r0, #0
	bge .LBB412_4	@ bb14
.LBB412_3:	@ bb13
	rsb r0, r5, #0
	mov r12, #0
	cmp r5, #0
	moveq r0, r12
	add r1, r1, r0
	mov lr, #1
	cmp r1, r0
	movlo r12, lr
	rsb r0, r4, #0
	mvn lr, r4
	cmp r5, #0
	moveq lr, r0
	add r2, r2, lr
	add r2, r2, r12
.LBB412_4:	@ bb14
	cmp r4, #0
	bge .LBB412_6	@ bb16
.LBB412_5:	@ bb15
	rsb r0, r6, #0
	mov r12, #0
	cmp r6, #0
	moveq r0, r12
	add r1, r1, r0
	mov lr, #1
	cmp r1, r0
	movlo r12, lr
	ldr r0, [sp]
	rsb lr, r0, #0
	mvn r0, r0
	cmp r6, #0
	moveq r0, lr
	add r2, r2, r0
	add r2, r2, r12
.LBB412_6:	@ bb16
	cmp r3, #0
	blt .LBB412_9	@ bb17
.LBB412_7:	@ bb18
	orr r2, r2, r1
	mov r1, #1
	mov r3, #0
	cmp r2, #0
	movne r3, r1
.LBB412_8:	@ bb19
	and r0, r3, #1
	sfi_add sp, sp, #68
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
.LBB412_9:	@ bb17
	and r2, r2, r1
	mov r1, #1
	mov r3, #0
	cmn r2, #1
	movne r3, r1
	b .LBB412_8	@ bb19
	.size mul_double, .-mul_double


	.globl	div_and_round_double
	.align	4
div_and_round_double:
	sfi_sub sp, sp, #36
	stmea sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_sub sp, sp, #112
	ldr lr, [sp, #+152]
	ldr r12, [sp, #+148]
	orr r12, lr, r12
	@comment
str r3, [sp, #+28]
	@comment
str r2, [sp, #+24]
	@comment
str r0, [sp, #+8]
	cmp r12, #0
	beq .LBB413_69	@ bb
.LBB413_1:	@ bb1
	cmp r1, #0
	bne .LBB413_70	@ bb1.bb9_crit_edge
.LBB413_2:	@ bb2
	ldr r4, [sp, #+28]
	cmp r4, #0
	bge .LBB413_71	@ bb2.bb6thread-split_crit_edge
.LBB413_3:	@ bb3
	ldr r4, [sp, #+24]
	cmp r4, #0
	bne .LBB413_72	@ neg_double.exit.thread
.LBB413_4:	@ neg_double.exit
	ldr r4, [sp, #+28]
	rsb r5, r4, #0
	and r4, r4, r5
	cmp r4, #0
	bge .LBB413_73	@ neg_double.exit.bb6thread-split_crit_edge
.LBB413_5:	@ bb4
	ldr r4, [sp, #+152]
	ldr r3, [sp, #+148]
	and r4, r4, r3
	cmn r4, #1
	bne .LBB413_73	@ neg_double.exit.bb6thread-split_crit_edge
.LBB413_6:	@ bb4.bb6thread-split_crit_edge
	mvn r4, #0
	@comment
str r4, [sp, #+20]
	mov r4, #1
	@comment
str r4, [sp, #+12]
	mov r4, #0
.LBB413_7:	@ bb6
	ldr r3, [sp, #+152]
	cmp r3, #0
	bge .LBB413_74	@ bb6.bb9_crit_edge
.LBB413_8:	@ bb7
	ldr r3, [sp, #+152]
	rsb r2, r3, #0
	mvn r3, r3
	ldr r1, [sp, #+148]
	cmp r1, #0
	moveq r3, r2
	@comment
str r3, [sp, #+32]
	rsb r3, r1, #0
	mov r2, #0
	cmp r1, #0
	moveq r3, r2
	@comment
str r3, [sp, #+16]
	ldr r3, [sp, #+20]
	mvn r3, r3
	@comment
str r3, [sp, #+20]
.LBB413_9:	@ bb9
	cmp r5, #0
	bne .LBB413_12	@ bb14
.LBB413_10:	@ bb10
	ldr r3, [sp, #+32]
	cmp r3, #0
	beq .LBB413_75	@ bb11
.LBB413_11:	@ bb12
	cmp r5, #0
	beq .LBB413_76	@ bb13
.LBB413_12:	@ bb14
	add r0, sp, #88
	mov r1, #0
	mov r2, #16
	emit_nops_till_bundle_end
	bl memset
	add r0, sp, #52
	mov r2, #20
	mov r1, #0
	emit_nops_till_bundle_end
	bl memset
	add r0, sp, #72
	mov r1, #0
	mov r2, #16
	emit_nops_till_bundle_end
	bl memset
	mov r3, #255
	orr r3, r3, #255, 24 @ 65280
	and r2, r4, r3
	@comment
str r2, [sp, #+48]
	@comment
str r2, [sp, #+52]
	mov r4, r4, lsr #16
	@comment
str r4, [sp, #+56]
	and r6, r5, r3
	@comment
str r6, [sp, #+60]
	mov r5, r5, lsr #16
	@comment
str r5, [sp, #+64]
	ldr r2, [sp, #+16]
	and r7, r2, r3
	@comment
str r7, [sp, #+72]
	mov r8, r2, lsr #16
	@comment
str r8, [sp, #+76]
	ldr r1, [sp, #+32]
	and r9, r1, r3
	@comment
str r9, [sp, #+80]
	mov r10, r1, lsr #16
	@comment
str r10, [sp, #+84]
	cmp r2, #1, 16 @ 65536
	bhs .LBB413_14	@ bb31.preheader
.LBB413_13:	@ bb14
	ldr r3, [sp, #+32]
	cmp r3, #0
	beq .LBB413_77	@ bb29.preheader
.LBB413_14:	@ bb31.preheader
	cmp r10, #0
	beq .LBB413_23	@ bb33.preheader
.LBB413_15:	@ bb31.preheader.bb32_crit_edge
	mov r11, #3
	b .LBB413_17	@ bb32
.LBB413_16:	@ bb32.loopexit
	add r11, r3, #3
.LBB413_17:	@ bb32
	add r3, sp, #72
	ldr r3, [r3, +r11, lsl #2]
	add r1, r3, #1
	mov r0, #1, 16 @ 65536
	emit_nops_till_bundle_end
	bl __udivsi3
	cmp r0, #1
	bls .LBB413_19	@ bb42
.LBB413_18:	@ bb36.preheader
	ldr r3, [sp, #+48]
	mul r3, r3, r0
	mov r2, #255
	orr r2, r2, #255, 24 @ 65280
	and r1, r3, r2
	@comment
str r1, [sp, #+52]
	mul r4, r4, r0
	add r4, r4, r3, lsr #16
	and r3, r4, r2
	@comment
str r3, [sp, #+56]
	mul r6, r6, r0
	add r4, r6, r4, lsr #16
	and r6, r4, r2
	@comment
str r6, [sp, #+60]
	mul r5, r5, r0
	add r4, r5, r4, lsr #16
	and r5, r4, r2
	@comment
str r5, [sp, #+64]
	mov r4, r4, lsr #16
	@comment
str r4, [sp, #+68]
	mul r4, r7, r0
	and r5, r4, r2
	@comment
str r5, [sp, #+72]
	mul r5, r8, r0
	add r5, r5, r4, lsr #16
	and r6, r5, r2
	@comment
str r6, [sp, #+76]
	mul r6, r9, r0
	add r6, r6, r5, lsr #16
	and r7, r6, r2
	@comment
str r7, [sp, #+80]
	mul r7, r10, r0
	add r7, r7, r6, lsr #16
	and r3, r7, r2
	@comment
str r3, [sp, #+84]
	mov r3, #0
	tst r4, r2
	moveq r3, r11
	mov r4, #1
	tst r5, r2
	moveq r4, r3
	mov r5, #2
	tst r6, r2
	moveq r5, r4
	mov r11, #3
	tst r7, r2
	moveq r11, r5
.LBB413_19:	@ bb42
	rsb r4, r11, #3
	cmp r4, #0
	blt .LBB413_37	@ bb59.loopexit
.LBB413_20:	@ bb.nph170
	add r4, sp, #52
	sub r4, r4, r11, lsl #2
	@comment
str r4, [sp, #+48]
	add r4, sp, #88
	sub r4, r4, r11, lsl #2
	@comment
str r4, [sp, #+40]
	add r4, sp, #72
	add r4, r4, r11, lsl #2
	ldr r5, [r4], #-4
	@comment
str r4, [sp, #+36]
	rsb r4, r11, #3
	@comment
str r4, [sp, #+44]
	mov r4, #0
	mov r6, #255
	orr r6, r6, #255, 24 @ 65280
	mov r7, #1
.LBB413_21:	@ bb43
	add r3, sp, #52
	add r8, r3, r4
	ldr r3, [r8, #+16]
	ldr r2, [r8, #+12]
	add r9, r2, r3, lsl #16
	cmp r3, r5
	bne .LBB413_25	@ bb44
.LBB413_22:	@ bb43.bb46_crit_edge
	mov r0, #255
	orr r0, r0, #255, 24 @ 65280
	b .LBB413_26	@ bb46
.LBB413_23:	@ bb33.preheader
	add r11, sp, #72
	add r11, r11, #8
	mov r3, #0
.LBB413_24:	@ bb33
	ldr r2, [r11], #-4
	sub r3, r3, #1
	cmp r2, #0
	beq .LBB413_24	@ bb33
	b .LBB413_16	@ bb32.loopexit
.LBB413_25:	@ bb44
	mov r0, r9
	mov r1, r5
	emit_nops_till_bundle_end
	bl __udivsi3
.LBB413_26:	@ bb46
	mul r3, r5, r0
	sub r3, r9, r3
	cmp r3, #1, 16 @ 65536
	bhs .LBB413_28	@ bb51.preheader
.LBB413_27:	@ bb47
	ldr r2, [sp, #+36]
	ldr r2, [r2]
	mul r2, r2, r0
	add r1, sp, #52
	add r1, r1, r4
	ldr r1, [r1, #+8]
	add r3, r1, r3, lsl #16
	sub r1, r0, #1
	cmp r2, r3
	movls r1, r0
	mov r0, r1
.LBB413_28:	@ bb51.preheader
	cmp r11, #0
	blt .LBB413_78	@ bb51.preheader.bb52_crit_edge
.LBB413_29:	@ bb50.preheader
	ldr r3, [sp, #+48]
	add r2, r3, r4
	mov r1, #0
	mov r12, r1
	mov r3, r1
.LBB413_30:	@ bb50
	add lr, sp, #72
	ldr lr, [lr, +r1]
	mla r3, lr, r0, r3
	and lr, r3, r6
	add r9, r2, r1
	ldr r10, [r9, #+12]
	sub lr, r10, lr
	and r10, lr, r6
	@comment
str r10, [r9, #+12]
	cmp lr, #1, 16 @ 65536
	mov lr, #0
	movhs lr, r7
	add r3, lr, r3, lsr #16
	add r12, r12, #1
	add r1, r1, #4
	cmp r12, r11
	ble .LBB413_30	@ bb50
.LBB413_31:	@ bb52
	ldr r2, [r8, #+16]
	cmp r2, r3
	bhs .LBB413_36	@ bb57
.LBB413_32:	@ bb53
	sub r0, r0, #1
	cmp r11, #0
	blt .LBB413_79	@ bb53.bb56_crit_edge
.LBB413_33:	@ bb54.preheader
	ldr r3, [sp, #+48]
	add r2, r3, r4
	mov r1, #0
	mov r12, r1
	mov r3, r1
.LBB413_34:	@ bb54
	add lr, sp, #72
	ldr lr, [lr, +r1]
	add r9, r2, r1
	ldr r10, [r9, #+12]
	add r3, r10, r3
	add r3, r3, lr
	and lr, r3, r6
	@comment
str lr, [r9, #+12]
	mov r3, r3, lsr #16
	add r12, r12, #1
	add r1, r1, #4
	cmp r12, r11
	ble .LBB413_34	@ bb54
.LBB413_35:	@ bb56
	ldr r2, [r8, #+16]
	add r3, r2, r3
	@comment
str r3, [r8, #+16]
.LBB413_36:	@ bb57
	ldr r3, [sp, #+40]
	add r3, r3, r4
	@comment
str r0, [r3, #+12]
	ldr r3, [sp, #+44]
	sub r3, r3, #1
	@comment
str r3, [sp, #+44]
	sub r4, r4, #4
	cmp r3, #0
	bge .LBB413_21	@ bb43
.LBB413_37:	@ bb59.loopexit
	add r4, sp, #88
	add r7, r4, #12
	add r6, r4, #8
	add r5, r4, #4
.LBB413_38:	@ bb59
	ldr r3, [r5]
	ldr r2, [r4]
	orr r3, r2, r3, lsl #16
	ldr r2, [sp, #+156]
	@comment
str r3, [r2]
	ldr r3, [r7]
	ldr r2, [r6]
	orr r3, r2, r3, lsl #16
	ldr r2, [sp, #+160]
	@comment
str r3, [r2]
.LBB413_39:	@ finish_up
	ldr r3, [sp, #+20]
	cmp r3, #0
	beq .LBB413_43	@ bb62
.LBB413_40:	@ bb61
	ldr r3, [sp, #+156]
	ldr r3, [r3]
	ldr r2, [sp, #+160]
	ldr r2, [r2]
	cmp r3, #0
	rsbne r3, r3, #0
	ldrne r1, [sp, #+156]
	@comment
strne r3, [r1]
	mvnne r3, r2
	moveq r3, #0
	ldreq r1, [sp, #+156]
	@comment
streq r3, [r1]
	rsbeq r3, r2, #0
	b .LBB413_42	@ neg_double.exit130
.LBB413_41:	@ bb1.i129
.LBB413_42:	@ neg_double.exit130
	ldr r2, [sp, #+160]
	@comment
str r3, [r2]
.LBB413_43:	@ bb62
	ldr r3, [sp, #+156]
	ldr r0, [r3]
	ldr r3, [sp, #+160]
	ldr r1, [r3]
	ldr r4, [sp, #+168]
	@comment
str r4, [sp, #+4]
	ldr r5, [sp, #+164]
	@comment
str r5, [sp]
	ldr r2, [sp, #+148]
	ldr r3, [sp, #+152]
	emit_nops_till_bundle_end
	bl mul_double
	ldr r3, [r5]
	ldr r2, [r4]
	cmp r3, #0
	rsbne r3, r3, #0
	ldrne r1, [sp, #+164]
	@comment
strne r3, [r1]
	mvnne r3, r2
	moveq r3, #0
	ldreq r1, [sp, #+164]
	@comment
streq r3, [r1]
	rsbeq r3, r2, #0
	b .LBB413_45	@ neg_double.exit125
.LBB413_44:	@ bb1.i124
.LBB413_45:	@ neg_double.exit125
	ldr r2, [sp, #+168]
	@comment
str r3, [r2]
	ldr r1, [sp, #+164]
	ldr r0, [r1]
	ldr r12, [sp, #+24]
	add r0, r0, r12
	@comment
str r0, [r1]
	mov r1, #1
	mov lr, #0
	cmp r0, r12
	movlo lr, r1
	ldr r1, [sp, #+28]
	add r3, r3, r1
	add r3, r3, lr
	@comment
str r3, [r2]
	ldr r2, [sp, #+8]
	sub r2, r2, #59
	cmp r2, #9
	bhi .LBB413_69	@ bb
.LBB413_46:	@ neg_double.exit125
	.set PCRELV38, (.LJTI413_0_0-(.LPCRELL38+8))
.LPCRELL38:
	add r1, pc, #PCRELV38
	ldr pc, [r1, +r2, lsl #2] 


@ JUMP TABLE START




@ JUMP TABLE


.LJTI413_0_0:
	.long	 .LBB413_68
	.long	 .LBB413_51
	.long	 .LBB413_47
	.long	 .LBB413_55
	.long	 .LBB413_68
	.long	 .LBB413_51
	.long	 .LBB413_47
	.long	 .LBB413_55
	.long	 .LBB413_69
	.long	 .LBB413_68

.text
@ JUMP TABLE END



	.align	2
.LBB413_47:	@ bb64
	ldr r2, [sp, #+20]
	cmp r2, #0
	beq .LBB413_68	@ bb87
.LBB413_48:	@ bb65
	ldr r2, [sp, #+164]
	ldr r2, [r2]
	cmp r2, #0
	cmpeq r3, #0
	beq .LBB413_68	@ bb87
.LBB413_49:	@ bb65
.LBB413_50:	@ bb67
	ldr r3, [sp, #+156]
	ldr r2, [r3]
	sub r1, r2, #1
	ldr r0, [sp, #+160]
	ldr r12, [r0]
	@comment
str r1, [r3]
	mov r3, #1
	mov lr, #0
	cmp r1, r2
	movlo lr, r3
	add r3, r12, lr
	sub r1, r3, #1
	@comment
str r1, [r0]
	b .LBB413_65	@ bb86
	.align	2
.LBB413_51:	@ bb69
	ldr r2, [sp, #+20]
	cmp r2, #0
	bne .LBB413_68	@ bb87
.LBB413_52:	@ bb70
	ldr r2, [sp, #+164]
	ldr r2, [r2]
	cmp r2, #0
	cmpeq r3, #0
	beq .LBB413_68	@ bb87
.LBB413_53:	@ bb70
.LBB413_54:	@ bb72
	ldr r3, [sp, #+156]
	ldr r2, [r3]
	add r1, r2, #1
	ldr r0, [sp, #+160]
	ldr r12, [r0]
	@comment
str r1, [r3]
	mov r3, #1
	mov lr, #0
	cmp r1, r2
	movlo lr, r3
	add r1, lr, r12
	@comment
str r1, [r0]
	b .LBB413_65	@ bb86
	.align	2
.LBB413_55:	@ bb74
	ldr r2, [sp, #+164]
	ldr r2, [r2]
	cmp r3, #0
	bge .LBB413_57	@ bb76
.LBB413_56:	@ bb75
	rsb r1, r3, #0
	mvn r3, r3
	cmp r2, #0
	moveq r3, r1
	rsb r1, r2, #0
	mov r0, #0
	cmp r2, #0
	moveq r1, r0
	mov r2, r1
.LBB413_57:	@ bb76
	ldr r1, [sp, #+32]
	cmp r1, #0
	bge .LBB413_59	@ bb78
.LBB413_58:	@ bb77
	ldr r1, [sp, #+32]
	rsb r0, r1, #0
	mvn r1, r1
	ldr r12, [sp, #+16]
	cmp r12, #0
	moveq r1, r0
	@comment
str r1, [sp, #+32]
	rsb r1, r12, #0
	mov r0, #0
	cmp r12, #0
	moveq r1, r0
	@comment
str r1, [sp, #+16]
.LBB413_59:	@ bb78
	add r1, sp, #108
	@comment
str r1, [sp, #+4]
	add r1, sp, #104
	@comment
str r1, [sp]
	mov r0, #2
	mov r1, #0
	emit_nops_till_bundle_end
	bl mul_double
	ldr r3, [sp, #+108]
	ldr r2, [sp, #+32]
	cmp r2, r3
	blo .LBB413_62	@ bb81
.LBB413_60:	@ bb79
	ldr r2, [sp, #+32]
	cmp r2, r3
	bne .LBB413_68	@ bb87
.LBB413_61:	@ bb80
	ldr r3, [sp, #+104]
	ldr r2, [sp, #+16]
	cmp r2, r3
	bhs .LBB413_68	@ bb87
.LBB413_62:	@ bb81
	ldr r3, [sp, #+160]
	ldr r3, [r3]
	ldr r2, [sp, #+156]
	ldr r2, [r2]
	cmp r3, #0
	blt .LBB413_82	@ bb82
.LBB413_63:	@ bb83
	add r1, r2, #1
	ldr r0, [sp, #+156]
	@comment
str r1, [r0]
	mov r0, #1
	mov r12, #0
	cmp r1, r2
	movlo r12, r0
	add r1, r12, r3
.LBB413_64:	@ bb83
	ldr r3, [sp, #+160]
	@comment
str r1, [r3]
.LBB413_65:	@ bb86
	ldr r3, [sp, #+156]
	ldr r0, [r3]
	ldr r4, [sp, #+168]
	@comment
str r4, [sp, #+4]
	ldr r5, [sp, #+164]
	@comment
str r5, [sp]
	ldr r2, [sp, #+148]
	ldr r3, [sp, #+152]
	emit_nops_till_bundle_end
	bl mul_double
	ldr r3, [r5]
	ldr r2, [r4]
	cmp r3, #0
	rsbne r3, r3, #0
	ldrne r1, [sp, #+164]
	@comment
strne r3, [r1]
	mvnne r3, r2
	moveq r3, #0
	ldreq r1, [sp, #+164]
	@comment
streq r3, [r1]
	rsbeq r3, r2, #0
	b .LBB413_67	@ neg_double.exit95
.LBB413_66:	@ bb1.i94
.LBB413_67:	@ neg_double.exit95
	ldr r2, [sp, #+168]
	@comment
str r3, [r2]
	ldr r1, [sp, #+164]
	ldr r0, [r1]
	ldr r12, [sp, #+24]
	add r0, r0, r12
	@comment
str r0, [r1]
	mov r1, #1
	mov lr, #0
	cmp r0, r12
	movlo lr, r1
	ldr r1, [sp, #+28]
	add r3, r3, r1
	add r3, r3, lr
	@comment
str r3, [r2]
	.align	2
.LBB413_68:	@ bb87
	ldr r0, [sp, #+12]
	sfi_add sp, sp, #112
	ldmfd sp, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
	sfi_add sp, sp, #36
	sfi_bx lr
	.align	2
.LBB413_69:	@ bb
	emit_nops_till_bundle_end
	bl abort
.LBB413_70:	@ bb1.bb9_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+12]
	ldr r4, [sp, #+24]
	ldr r5, [sp, #+28]
	ldr r2, [sp, #+148]
	@comment
str r2, [sp, #+16]
	ldr r2, [sp, #+152]
	@comment
str r2, [sp, #+32]
	@comment
str r3, [sp, #+20]
	b .LBB413_9	@ bb9
.LBB413_71:	@ bb2.bb6thread-split_crit_edge
	mov r3, #0
	@comment
str r3, [sp, #+12]
	ldr r4, [sp, #+24]
	ldr r5, [sp, #+28]
	@comment
str r3, [sp, #+20]
	b .LBB413_7	@ bb6
.LBB413_72:	@ neg_double.exit.thread
	ldr r4, [sp, #+28]
	mvn r5, r4
	ldr r4, [sp, #+24]
	rsb r4, r4, #0
	mvn r3, #0
	@comment
str r3, [sp, #+20]
	mov r3, #0
	@comment
str r3, [sp, #+12]
	b .LBB413_7	@ bb6
.LBB413_73:	@ neg_double.exit.bb6thread-split_crit_edge
	mvn r4, #0
	@comment
str r4, [sp, #+20]
	mov r4, #0
	@comment
str r4, [sp, #+12]
	b .LBB413_7	@ bb6
.LBB413_74:	@ bb6.bb9_crit_edge
	ldr r3, [sp, #+148]
	@comment
str r3, [sp, #+16]
	ldr r3, [sp, #+152]
	@comment
str r3, [sp, #+32]
	b .LBB413_9	@ bb9
.LBB413_75:	@ bb11
	mov r0, r4
	ldr r1, [sp, #+16]
	emit_nops_till_bundle_end
	bl __udivsi3
	mov r4, #0
	ldr r5, [sp, #+168]
	@comment
str r4, [r5]
	ldr r5, [sp, #+160]
	@comment
str r4, [r5]
	ldr r4, [sp, #+156]
	@comment
str r0, [r4]
	b .LBB413_39	@ finish_up
.LBB413_76:	@ bb13
	mov r3, #0
	ldr r2, [sp, #+156]
	@comment
str r3, [r2]
	ldr r2, [sp, #+160]
	@comment
str r3, [r2]
	ldr r3, [sp, #+168]
	@comment
str r5, [r3]
	ldr r5, [sp, #+164]
	@comment
str r4, [r5]
	b .LBB413_39	@ finish_up
.LBB413_77:	@ bb29.preheader
	mov r0, r5
	ldr r7, [sp, #+16]
	mov r1, r7
	emit_nops_till_bundle_end
	bl __umodsi3
	mov r8, r0
	mov r0, r5
	mov r1, r7
	emit_nops_till_bundle_end
	bl __udivsi3
	mov r5, r0
	orr r6, r6, r8, lsl #16
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl __umodsi3
	mov r8, r0
	mov r0, r6
	mov r1, r7
	emit_nops_till_bundle_end
	bl __udivsi3
	mov r6, r0
	orr r4, r4, r8, lsl #16
	mov r0, r4
	mov r1, r7
	emit_nops_till_bundle_end
	bl __umodsi3
	mov r8, r0
	mov r0, r4
	mov r1, r7
	emit_nops_till_bundle_end
	bl __udivsi3
	mov r4, r0
	ldr r9, [sp, #+48]
	orr r0, r9, r8, lsl #16
	mov r1, r7
	emit_nops_till_bundle_end
	bl __udivsi3
	@comment
str r5, [sp, #+100]
	add r1, sp, #88
	stmia r1, {r0, r4, r6}
	add r4, sp, #88
	add r5, r4, #4
	add r6, r4, #8
	add r7, r4, #12
	b .LBB413_38	@ bb59
.LBB413_78:	@ bb51.preheader.bb52_crit_edge
	mov r3, #0
	b .LBB413_31	@ bb52
.LBB413_79:	@ bb53.bb56_crit_edge
	mov r3, #0
	b .LBB413_35	@ bb56
.LBB413_80:	@ bb.i127
.LBB413_81:	@ bb.i122
.LBB413_82:	@ bb82
	sub r1, r2, #1
	ldr r0, [sp, #+156]
	@comment
str r1, [r0]
	mov r0, #1
	mov r12, #0
	cmp r1, r2
	movlo r12, r0
	add r3, r3, r12
	sub r1, r3, #1
	b .LBB413_64	@ bb83
.LBB413_83:	@ bb.i92
	.size div_and_round_double, .-div_and_round_double
