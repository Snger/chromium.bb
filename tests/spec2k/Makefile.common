# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

######################################################################
# CONFIG
######################################################################

# NOTE: we assume you have a symlink "CLIENT" in this directory pointing
#       to your .../native_client directory
TC_ROOT=../../../toolchain

CFLAGS = $(CFLAGS_EXTRA)

######################################################################
.PHONY = clean

.SUFFIXES : .c .cc .o .bc

######################################################################

######################################################################
# time command wrapper
# invoke the makefile with
######################################################################

ifeq ($(timeit),1)
TIME_CMD=/usr/bin/time -f "TIME %U %S %e %C" -o $@.compile_time
else
TIME_CMD=
endif



clean:
	rm -f *.bc *.o *.s *.x86 *.arm  *.c~ .h~ \
              $(IT) $(IT).* *.out src/*bc $(EXTRA_CLEAN)



pnacl_bin: $(IT).pnacl.arm $(IT).pnacl.opt.arm \
           $(IT).pnacl.x8632 $(IT).pnacl.opt.x8632 \
	   $(IT).pnacl.x8664 $(IT).pnacl.opt.x8664

nacl_bin: $(IT).nacl.x8632 $(IT).nacl.opt.x8632 \
	  $(IT).nacl.x8664 $(IT).nacl.opt.x8664

nosfi_bin: $(IT).gcc.x8632 $(IT).gcc.opt.x8632 \
	   $(IT).gcc.arm $(IT).gcc.opt.arm

all: pnacl_bin nacl_bin nosfi_bin


######################################################################
## NON-SANDBOXING TOOLCHAINS
######################################################################
LOCAL_GCC=$(TIME_CMD) /usr/bin/gcc

# straight x86-32 gcc
$(IT).gcc.x8632: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O0 -m32 $(CFLAGS) $(SRC)  -static  -lm  -o $@

# optimized x86-32 gcc
$(IT).gcc.opt.x8632: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O3 -m32 $(CFLAGS) $(SRC)  -static -lm  -o $@


# straight x86-64 gcc
$(IT).gcc.x8664: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O0 -m64 $(CFLAGS) $(SRC)  -static  -lm  -o $@

# optimized x86-64 gcc
$(IT).gcc.opt.x8664: $(SRC) $(CPPSRC)
	$(LOCAL_GCC) -O3 -m64 $(CFLAGS) $(SRC)  -static -lm  -o $@

######################################################################
LOCAL_CROSS_GCC=$(TIME_CMD) \
	$(TC_ROOT)/linux_arm-trusted/arm-2009q3/bin/arm-none-linux-gnueabi-gcc

# straight arm gcc (code sourcery)
$(IT).gcc.arm: $(SRC) $(CPPSRC)
	$(LOCAL_CROSS_GCC) -O0 -march=armv6 $(CFLAGS) $(SRC)  -static  -lm  -o $@

# optimized x86 gcc (code sourcery)
$(IT).gcc.opt.arm: $(SRC) $(CPPSRC)
	$(LOCAL_CROSS_GCC) -O3 -march=armv6 $(CFLAGS) $(SRC)  -static -lm  -o $@

######################################################################
## NACL-GCC TOOLCHAINS
######################################################################
NACL_GCC=$(TIME_CMD) $(TC_ROOT)/linux_x86/bin/nacl-gcc

# nacl x86 gcc
$(IT).nacl.x8632: $(SRC) $(CPPSRC)
	$(NACL_GCC) -O0 -m32 $(CFLAGS) $(SRC)  -static  -lm  -lnosys -o $@

# nacl optimized x86 gcc
$(IT).nacl.opt.x8632: $(SRC) $(CPPSRC)
	$(NACL_GCC) -O3 -m32 $(CFLAGS) $(SRC)  -static -lm  -lnosys -o $@

######################################################################
NACL64_GCC=$(TIME_CMD) $(TC_ROOT)/linux_x86/bin/nacl64-gcc

# nacl x86-64 gcc
$(IT).nacl.x8664: $(SRC) $(CPPSRC)
	$(NACL64_GCC) -O0 $(CFLAGS) $(SRC)  -static  -lm  -lnosys -o $@

# nacl optimized x86-64 gcc
$(IT).nacl.opt.x8664: $(SRC) $(CPPSRC)
	$(NACL64_GCC) -O3 $(CFLAGS) $(SRC)  -static -lm  -lnosys -o $@


######################################################################
## BITCODE TOOLCHAINS
######################################################################
# BITCODE - FRONTEND

LLVM_FAKE_ROOT=$(TC_ROOT)/linux_arm-untrusted/arm-none-linux-gnueabi
TRANSLATOR_ROOT=$(TC_ROOT)/sandboxed_translators
BC_GCC=$(LLVM_FAKE_ROOT)/llvm-fake-sfigcc -emit-llvm
BC_GPP=$(LLVM_FAKE_ROOT)/llvm-fake-sfig++ -emit-llvm
BC_LD=$(TC_ROOT)/linux_arm-untrusted/arm-none-linux-gnueabi/bin/llvm-ld
BC_OPT=$(TC_ROOT)/linux_arm-untrusted/arm-none-linux-gnueabi/bin/opt

PNACL=--pnacl-driver-verbose

.c.bc:
	$(BC_GCC) $(PNACL) $(CFLAGS) -D__native_client__=1  $< -c -o $@
.cc.bc:
	$(BC_GPP) $(PNACL) $(CFLAGS) -D__native_client__=1  $< -c -o $@


# llvm bit code
# NOTE: BC_LD will append .bc automatically
$(IT).bc: $(SRC:%.c=%.bc) $(CPPSRC:%.cc=%.bc)
	$(BC_LD) $(SRC:%.c=%.bc) $(CPPSRC:%.cc=%.bc)  -o $(IT)

# llvm bit code optimized
$(IT).opt.bc: $(IT).bc
	$(BC_OPT) -f -O3 -std-compile-opts $< -o $@

######################################################################
# BITCODE - BACKEND - ARM
LIB_BC_PATH=$(TC_ROOT)/linux_arm-untrusted/libs-bitcode
LIBS_BC = -lc -lm -lnacl -lpthread -lnosys

BC_ARM=$(TIME_CMD) $(LLVM_FAKE_ROOT)/llvm-fake-bcld -arch arm
BC_ARM_TRANSLATOR=$(TIME_CMD) ${TRANSLATOR_ROOT}/arm/translator

$(IT).pnacl.arm: $(IT).bc
	$(BC_ARM) $(PNACL) $(IT).bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $@

# TODO(robertm): the arm translator is not fully supported at this time
$(IT).pnacl_translator.arm: $(IT).bc
	$(BC_ARM_TRANSLATOR) $(IT).bc $@

$(IT).pnacl.opt.arm: $(IT).opt.bc
	$(BC_ARM) $(PNACL) $(IT).opt.bc  -L$(LIB_BC_PATH)  $(LIBS_BC) -o $@

# TODO(robertm): the arm translator is not fully supported at this time
$(IT).pnacl_translator.opt.arm: $(IT).opt.bc
	$(BC_ARM_TRANSLATOR) $(IT).opt.bc $@

######################################################################
# BITCODE - BACKEND - X8632
BC_X8632=$(TIME_CMD) $(LLVM_FAKE_ROOT)/llvm-fake-bcld -arch x86-32
BC_X8632_FINAL=$(TIME_CMD) $(LLVM_FAKE_ROOT)/llvm-fake-bcfinal -arch x86-32
BC_X8632_TRANSLATOR=$(TIME_CMD) ${TRANSLATOR_ROOT}/x8632/translator

$(IT).pnacl.x8632: $(IT).bc
	$(BC_X8632)  $(PNACL) $(IT).bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $@

$(IT).pnacl_translator.x8632: $(IT).bc
	$(BC_X8632_FINAL) $(PNACL) $(IT).bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $(IT)
	$(BC_X8632_TRANSLATOR) $(IT).bc $@

$(IT).pnacl.opt.x8632: $(IT).opt.bc
	$(BC_X8632) $(PNACL) $(IT).opt.bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $@

$(IT).pnacl_translator.opt.x8632: $(IT).opt.bc
	$(BC_X8632_FINAL) $(PNACL) $(IT).opt.bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $(IT).opt
	$(BC_X8632_TRANSLATOR) $(IT).opt.bc $@

######################################################################
# BITCODE - BACKEND - X8664
BC_X8664=$(TIME_CMD) $(LLVM_FAKE_ROOT)/llvm-fake-bcld -arch x86-64
BC_X8664_FINAL=$(TIME_CMD) $(LLVM_FAKE_ROOT)/llvm-fake-bcfinal -arch x86-64
BC_X8664_TRANSLATOR=$(TIME_CMD) ${TRANSLATOR_ROOT}/x8664/translator

$(IT).pnacl.x8664: $(IT).bc
	$(BC_X8664) $(PNACL) $(IT).bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $@

$(IT).pnacl_translator.x8664: $(IT).bc
	$(BC_X8664_FINAL) $(PNACL) $(IT).bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $(IT)
	$(BC_X8664_TRANSLATOR) $(IT).bc $@

$(IT).pnacl.opt.x8664: $(IT).opt.bc
	$(BC_X8664) $(PNACL) $(IT).opt.bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $@

$(IT).pnacl_translator.opt.x8664: $(IT).opt.bc
	$(BC_X8664_FINAL) $(PNACL) $(IT).opt.bc -L$(LIB_BC_PATH) $(LIBS_BC) -o $(IT).opt
	$(BC_X8664_TRANSLATOR) $(IT).opt.bc $@
