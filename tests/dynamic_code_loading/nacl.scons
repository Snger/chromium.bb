# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

# The test works with PNaCl-ARM but not with PNaCl-x86, because the
# assembler #defines __arm__ rather than __i386__ or __x86_64__ even
# when we are targetting x86.
# See http://code.google.com/p/nativeclient/issues/detail?id=833
if env.Bit('bitcode') and not env.Bit('target_arm'):
  Return()

# This leaves a gap between the code and data segments.
def GetLinkFlag(env):
  if env.Bit('nacl_glibc'):
    # When using dynamic linking, the dynamic linker is responsible
    # for reserving this space rather than the executable.
    return ''
  if env.Bit('target_arm'):
    return ['--pnacl-gold-fix','-static','--section-start','.rodata=0x1000000']
  else:
    return '-Wl,--section-start,.rodata=0x1000000'

# for building the tests
env.Append(LINKFLAGS=GetLinkFlag(env))

def GetTemplate(env):
  if env.Bit('target_arm'):
    return 'templates_arm.S'
  else:
    return 'templates_x86.S'

asm_env = env.Clone()
if asm_env.Bit('bitcode'):
  asm_env.Replace(CC=env['CC_NATIVE'],
                  OBJSUFFIX='.o')
template_obj = asm_env.ComponentObject(GetTemplate(env))

prog_env = env.Clone()

if env.Bit('bitcode'):
  prog_env.AddBiasForPNaCl()

prog_env.ComponentProgram('dynamic_load_test.nexe',
                          ['dynamic_load_test.c',
                           template_obj],
                          EXTRA_LIBS=['testrunner', 'srpc', 'pthread'])

prog_env.ComponentProgram('dynamic_modify_test.nexe',
                          ['dynamic_modify_test.c',
                           template_obj],
                          EXTRA_LIBS=['testrunner', 'srpc', 'pthread'])

prog_env.ComponentProgram('write_to_dyncode.nexe',
                          ['write_to_dyncode.c'])

prog_env.ComponentProgram('dyncode_disabled_test.nexe',
                          ['dyncode_disabled_test.c'])

prog_env.ComponentProgram('debug_mode_test.nexe',
                          ['debug_mode_test.c',
                           template_obj])

tests = [
    prog_env.CommandSelLdrTestNacl(
        'dynamic_load_test.out',
        command=[prog_env.File('dynamic_load_test.nexe')],
        # We need to set this because the test needs to behave
        # differently in the plugin, but the plugin does not provide a
        # way to distinguish itself.  TODO(mseaborn): Fix that.
        # See http://code.google.com/p/nativeclient/issues/detail?id=889
        sel_ldr_flags=['-E', 'NACL_SRPC_STANDALONE=1'],
        ),
    prog_env.CommandSelLdrTestNacl(
        'write_to_dyncode.out',
        command=[prog_env.File('write_to_dyncode.nexe')],
        exit_status='untrusted_segfault',
        stdout_golden=prog_env.File('write_to_dyncode.stdout'),
        ),
    prog_env.CommandSelLdrTestNacl(
        'dyncode_disabled_test.out',
        command=[prog_env.File('dyncode_disabled_test.nexe')],
        osenv='NACL_DISABLE_DYNAMIC_LOADING=1',
        ),
    prog_env.CommandSelLdrTestNacl(
        'debug_mode_test.out',
        # NOTE: the data we are loading does not pass the validator
        sel_ldr_flags=["-c"],
        command=[prog_env.File('debug_mode_test.nexe')],
        ),
  ]
if not prog_env.Bit('target_arm'):
  tests.append(prog_env.CommandSelLdrTestNacl(
       'dynamic_modify_test.out',
       command=[prog_env.File('dynamic_modify_test.nexe')],
       sel_ldr_flags=['-E', 'NACL_SRPC_STANDALONE=1']))

# TODO(kcc): non-standard linking options confuse Valgrind debug info reader.
# See http://code.google.com/p/nativeclient/issues/detail?id=1606
is_broken = prog_env.IsRunningUnderValgrind()
prog_env.AddNodeToTestSuite(tests,
                            ['small_tests', 'sel_ldr_tests'],
                            'run_dynamic_load_test',
                            is_broken=is_broken)
