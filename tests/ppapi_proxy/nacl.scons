# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

# TODO(robertm): those should not be necessary once we go -std=c99
env.FilterOut(CFLAGS=['-pedantic'])
env.FilterOut(CCFLAGS=['-pedantic'])

basic_obj_sources = env.ComponentObject('basic_object.cc'),

basic_obj_target = 'ppapi_basic_object_%s.nexe' % env.get('TARGET_FULLARCH')
env.Alias('ppapi_basic_object.nexe', ['$STAGING_DIR/%s' % basic_obj_target])
basic_object_nexe = env.ComponentProgram(basic_obj_target,
                                         [basic_obj_sources],
                                         EXTRA_LIBS=['ppruntime',
                                                     'imc',
                                                     'platform',
                                                     'gio',
                                                     'pthread',
                                                     'm',
                                                     'srpc'])

# Note that the html and a .nmf manifest is required to run this program.
dest_copy = env.Replicate('$STAGING_DIR',
                          ['basic_object.html',
                           'basic_object.nmf',
                           'user_main.nmf',
                           env.File('${SCONSTRUCT_DIR}/tools/browser_tester/'
                                    'browserdata/nacltest.js')])
env.Depends(basic_obj_target, dest_copy)

user_main_target = 'ppapi_user_main_%s.nexe' % env.get('TARGET_FULLARCH')
env.Alias('ppapi_user_main.nexe', ['$STAGING_DIR/%s' % user_main_target])
user_main_nexe = env.ComponentProgram(user_main_target,
                                      [basic_obj_sources, 'user_main.cc',],
                                      EXTRA_LIBS=['ppruntime',
                                                  'imc',
                                                  'platform',
                                                  'gio',
                                                  'pthread',
                                                  'm',
                                                  'srpc'])

env.Depends(user_main_target, dest_copy)

node = env.PPAPIBrowserTester(
    'ppapi_basic_object_browser_test.out',
    url='basic_object.html',
    files=[basic_object_nexe,
           user_main_nexe,
           env.File('basic_object.html'),
           env.File('basic_object.nmf'),
           env.File('user_main.nmf')])

env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_ppapi_basic_object_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

event_target = 'ppapi_event_example_%s.nexe' % env.get('TARGET_FULLARCH')
env.Alias('ppapi_event_example.nexe', ['$STAGING_DIR/%s' % event_target])
event_example_nexe = env.ComponentProgram(event_target,
                                          ['event_example.cc',],
                                          EXTRA_LIBS=['ppruntime',
                                                      'imc',
                                                      'platform',
                                                      'gio',
                                                      'ppapi_cpp',
                                                      'pthread',
                                                      'm',
                                                      'srpc'])

# Note that the html and a .nmf manifest is required to run this program.
dest_copy = env.Replicate('$STAGING_DIR',
                          ['event_example.html',
                           'event_example.nmf',
                           env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js')])
env.Depends(event_target, dest_copy)

node = env.SelUniversalTest(
    'ppapi_event_example.out',
    sel_universal_flags=['--command_file',
                         env.File('sel_universal_ppapi_replay_prolog.stdin'),
                         '--command_file',
                         env.File('event_example.stdin'),
                         ],
    command=[event_example_nexe],
    stdout_golden=env.File('event_example.stdout'),
    )

env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_ppapi_event_test',
                       is_broken=env.Bit('host_windows'))
