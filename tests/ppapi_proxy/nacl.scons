# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

env.Prepend(CPPDEFINES=['XP_UNIX'])

# TODO(robertm): those should not be necessary once we go -std=c99
env.FilterOut(CFLAGS=['-pedantic'])
env.FilterOut(CCFLAGS=['-pedantic'])

basic_obj = env.ComponentObject('basic_object.cc'),

basic_object_nexe = env.ComponentProgram('ppapi_basic_object.nexe',
                     [basic_obj,],
                     EXTRA_LIBS=['ppruntime',
                                 'imc',
                                 'platform',
                                 'gio',
                                 'pthread',
                                 'm',
                                 'srpc'])

# Note that the html is required to run this program.
env.Publish('ppapi_basic_object.nexe', 'run',
            [env.File('${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/'
                      'nacltest.js'),
             'basic_object.html'])

user_main_nexe = env.ComponentProgram('ppapi_user_main.nexe',
                     [basic_obj,
                      'user_main.cc',],
                     EXTRA_LIBS=['ppruntime',
                                 'imc',
                                 'platform',
                                 'gio',
                                 'pthread',
                                 'm',
                                 'srpc'])

# Note that the html is required to run this program.
env.Publish('ppapi_user_main.nexe', 'run',
            [env.File('${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/'
                      'nacltest.js'),
             'basic_object.html'])

node = env.PPAPIBrowserTester(
    'ppapi_basic_object_browser_test.out',
    url='basic_object.html',
    files=[basic_object_nexe, user_main_nexe, env.File('basic_object.html')])

env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_ppapi_basic_object_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

env.ComponentProgram('ppapi_event_example.nexe',
                     ['event_example.cc',],
                     EXTRA_LIBS=['ppruntime',
                                 'imc',
                                 'platform',
                                 'gio',
                                 'ppapi_cpp',
                                 'pthread',
                                 'm',
                                 'srpc'])

# Note that the html is required to run this program.
env.Publish('ppapi_event_example.nexe', 'run',
            [env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js'),
             'event_example.html'])

node = env.SelUniversalTest(
    'ppapi_event_example.out',
    sel_universal_flags=['--command_file',
                         env.File('sel_universal_ppapi_replay_prolog.stdin'),
                         '--command_file',
                         env.File('event_example.stdin'),
                         ],
    command=[env.File('ppapi_event_example.nexe')],
    stdout_golden=env.File('event_example.stdout'),
    )

env.AddNodeToTestSuite(node,
                       ['small_tests', 'sel_ldr_tests'],
                       'run_ppapi_event_test',
                       is_broken=env.Bit('host_windows'))
