# First register a bunch of dummy replays with zero count
# so that those signatures will get registered during "install_upcalls"
# Note: because of the zero count we do not have to get the parameters right
#
# Enumerating all known methods ahead of time helps in many ways:
# * we can delay registering non zero count replays till later which help
#   readability
# * we get an error if for some reason the nexe calls one of these functions.
#   Sadly, the nexe usually fails silently when a method is missing from a
#   service
#
# On the downside, this is currently replicated and must be updated by hand
# when signatures change.

replay 0 HasProperty:CCC:iC *
replay 0 HasMethod:CCC:iC *
replay 0 GetProperty:CCC:CC *
replay 0 GetAllPropertyNames:CC:iCC *
replay 0 SetProperty:CCCC:C *
replay 0 RemoveProperty:CCC:C *
replay 0 Call:CCiCC:CC *
replay 0 Construct:CiCC:CC *
replay 0 Deallocate:C: *
replay 0 PPB_GetInterface:s:i *

replay 0 PPB_Audio_Dev_Create:ii:i *
replay 0 PPB_Audio_Dev_IsAudio:i:i *
replay 0 PPB_Audio_Dev_GetCurrentConfig:i:i *
replay 0 PPB_Audio_Dev_StopPlayback:i:i *
replay 0 PPB_Audio_Dev_StartPlayback:i:i *

replay 0 PPB_AudioConfig_Dev_CreateStereo16Bit:lii:l *
replay 0 PPB_AudioConfig_Dev_IsAudioConfig:l:i *
replay 0 PPB_AudioConfig_Dev_RecommendSampleFrameCount:i:i *
replay 0 PPB_AudioConfig_Dev_GetSampleRate:l:i *
replay 0 PPB_AudioConfig_Dev_GetSampleFrameCount:l:i *

replay 0 PPB_Core_AddRefResource:i: *
replay 0 PPB_Core_ReleaseResource:i: *
replay 0 PPB_Core_GetTime::d *
replay 0 ReleaseResourceMultipleTimes:ii: *

replay 0 PPB_Graphics2D_Create:iCi:i *
replay 0 PPB_Graphics2D_IsGraphics2D:i:i *
replay 0 PPB_Graphics2D_Describe:i:Cii *
replay 0 PPB_Graphics2D_PaintImageData:iiCC: *
replay 0 PPB_Graphics2D_Scroll:iCC: *
replay 0 PPB_Graphics2D_ReplaceContents:ii: *
replay 0 PPB_Graphics2D_Flush:ii:i *

replay 0 PPB_ImageData_GetNativeImageDataFormat::i *
replay 0 PPB_ImageData_IsImageDataFormatSupported:i:i *
replay 0 PPB_ImageData_Create:iiCi:i *
replay 0 PPB_ImageData_IsImageData:i:i *
replay 0 PPB_ImageData_Describe:i:Chii *

replay 0 PPB_Instance_GetWindowObject:i:C *
replay 0 PPB_Instance_GetOwnerElementObject:i:C *
replay 0 PPB_Instance_BindGraphics:ii:i *
replay 0 PPB_Instance_IsFullFrame:i:i *
replay 0 PPB_Instance_ExecuteScript:iCC:CC *

replay 0 PPB_URLRequestInfo_Create:i:l *
replay 0 PPB_URLRequestInfo_IsURLRequestInfo:i:i *
replay 0 PPB_URLRequestInfo_SetProperty:iiC:i *
replay 0 PPB_URLRequestInfo_AppendDataToBody:iC:i *
replay 0 PPB_URLRequestInfo_AppendFileToBody:illld:i *

replay 0 PPB_URLLoader_Open:iii:i *
replay 0 PPB_URLLoader_FollowRedirect:ii:i *
replay 0 PPB_URLLoader_GetUploadProgress:i:lli *
replay 0 PPB_URLLoader_GetDownloadProgress:i:lli *
replay 0 PPB_URLLoader_ReadResponseBody:iii:Ci *
replay 0 PPB_URLLoader_Close:i: *

replay 0 PPB_URLResponseInfo_IsURLResponseInfo:i:i *
replay 0 PPB_URLResponseInfo_GetProperty:ii:C *
replay 0 PPB_URLResponseInfo_GetBodyAsFileRef:i:l *

# define a bunch of variables for readability

set_variable MODULE i(4444)
set_variable INSTANCE i(5555)

# From ppapi/c/pp_input_event.h
#
# struct PP_InputEvent {
#   PP_InputEvent_Type type;
#   int32_t padding;
#   PP_TimeTicks time_stamp;  // double
#   union {
#     struct PP_InputEvent_Key key;
#     struct PP_InputEvent_Character character;
#     struct PP_InputEvent_Mouse mouse;
#     struct PP_InputEvent_Wheel wheel;
#     char padding[64];
#   } u;
# };
#
# struct PP_InputEvent_Mouse {
#   uint32_t modifier;
#   PP_InputEvent_MouseButton button;
#   float x;
#   float y;
#   int32_t click_count;
#  }; // 20 bytes -> 44 bytes paddding
#
#
# struct PP_InputEvent_Key {
#   uint32_t modifier;
#   uint32_t key_code;
# };  // 8 bytes -> 56 bytes padding

set_variable ZERO_44 8:0,8:0,8:0,8:0,8:0,4:0
set_variable ZERO_56 8:0,8:0,8:0,8:0,8:0,8:0,8:0

set_variable TIME_1 8:0x3ff0000000000000
set_variable TIME_2 8:0x3ff1000000000000
set_variable TIME_3 8:0x3ff2000000000000
set_variable TIME_4 8:0x3ff3000000000000
set_variable TIME_5 8:0x3ff4000000000000
set_variable TIME_6 8:0x3ff5000000000000
set_variable TIME_7 8:0x3ff6000000000000

set_variable COORDS 4:0x43840000,4:0x42c80000

set_variable EV_MOUSE_DOWN  R(80,4:0,4:0,${TIME_1},8:64,${COORDS},4:1,${ZERO_44})
set_variable EV_MOUSE_UP    R(80,4:1,4:0,${TIME_2},8:64,${COORDS},4:0,${ZERO_44})

set_variable EV_MOUSE_MOVE  R(80,4:2,4:0,${TIME_3},8:0,${COORDS},4:0,${ZERO_44})

set_variable EV_MOUSE_ENTER R(80,4:3,4:0,${TIME_4},8:0,${COORDS},4:0,${ZERO_44})
set_variable EV_MOUSE_LEAVE R(80,4:4,4:0,${TIME_5},8:0,${COORDS},4:0,${ZERO_44})

set_variable EV_KEY_DOWN    R(80,4:7,4:0,${TIME_6},4:0,4:0x54,${ZERO_56})
set_variable EV_KEY_UP      R(80,4:8,4:0,${TIME_7},4:0,4:0x54,${ZERO_56})

# TODO(robertm) figure out what this represents, maybe PP_Var
set_variable PROPERTY C(16,\x05\x00\x00\x00\x06\x00\x00\x00events\x00\x00)

# TODO(robertm) figure out what this represents, maybe PP_Var
set_variable EXCEPTION R(8,8:0)

# Register  signatures found in all previous replay commands for export
# via install_upcalls
echo
echo "*** REGISTER REPLAY METHODS"
replay_activate

# This is not strictly necessary
echo
echo "*** INITIALIZE PEPPER"
initialize_pepper pepper_desc

# create a upcall service on the channel between nexe and sel_univeral
echo
echo "*** CREATE UPCALL SERVICE"
install_upcalls service_string

echo
echo "*** INIT MODULE"
replay 1 PPB_GetInterface:s:i  s("PPB_Core;0.3") * i(1)
replay 1 PPB_GetInterface:s:i  s("PPB_Instance;0.4") * i(1)
rpc PPP_InitializeModule i(0) ${MODULE} h(pepper_desc) s("${service_string}") * i(0) i(0)

echo
echo "*** INIT INSTANCE"
set_variable TAGS C(23,id\000name\000src\000style\000type\000)
set_variable VALUES C(74,naclModule\000naclModule\000ppapi.nexe\000background-color:gray\000application/x-nacl\000)
rpc PPP_Instance_DidCreate ${INSTANCE} i(5) ${TAGS} ${VALUES} * i(0)

echo
echo "*** GET INSTANCE OBJECT"
replay 1 PPB_GetInterface:s:i  s("PPB_Var(Deprecated);0.3") * i(1)
rpc PPP_Instance_GetInstanceObject ${INSTANCE} * C(16)
# save result to variable
set_variable OBJECT ${result0}

echo
echo "*** GET PROPERTY (AT THE BEGINNING)"
rpc HasProperty ${OBJECT} ${PROPERTY} ${EXCEPTION} * i(0) C(8)
rpc GetProperty ${OBJECT} ${PROPERTY} ${EXCEPTION} * C(8) C(8)

echo
echo "*** TRIGGER REPAINT"
rpc PPP_Instance_DidChangeView ${INSTANCE} I(4,8,79,400,400) I(4,0,0,400,400) *

echo
echo "*** SENT EVENTS EV_MOUSE_DOWN"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_MOUSE_DOWN} * i(0)
echo
echo "*** SENT EVENTS EV_MOUSE_UP"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_MOUSE_UP} * i(0)
echo
echo "*** SENT EVENTS EV_MOUSE_MOVE"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_MOUSE_MOVE} * i(0)
echo
echo "*** SENT EVENTS EV_MOUSE_ENTER"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_MOUSE_ENTER} * i(0)
echo
echo "*** SENT EVENTS EV_MOUSE_LEAVE"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_MOUSE_LEAVE} * i(0)
echo
echo "*** SENT EVENTS EV_KEY_UP"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_KEY_UP} * i(0)
echo
echo "*** SENT EVENTS EV_KEY_DOWN"
rpc PPP_Instance_HandleInputEvent ${INSTANCE} ${EV_KEY_DOWN} * i(0)

echo
echo "*** GET PROPERTY (AT THE END)"
rpc HasProperty ${OBJECT} ${PROPERTY} ${EXCEPTION} * i(0) C(8)
rpc GetProperty ${OBJECT} ${PROPERTY} ${EXCEPTION} * C(1000) C(8)


rpc PPP_ShutdownModule *
