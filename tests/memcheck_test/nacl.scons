# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

# tests in this directory contain (inline) assembler
if env.Bit('bitcode'):
  Return()

if not env.IsRunningUnderValgrind():
  Return()

env.ComponentProgram('memcheck_test.nexe', 'memcheck_test.c')
node = env.CommandSelLdrTestNacl(
    'memcheck_test.out',
    command=[env.File('memcheck_test.nexe')],
    stderr_golden=env.File('memcheck_test.stderr.golden'),
    filter_group_only='true',
    filter_regex=(
      "'(Invalid [a-z]+ of size .+)|"
      "( at )0x[01-9A-Fa-f]+: ([_a-zA-Z][_a-zA-Z01-9]+) [^ ]+:[01-9]+|"
      "( by )0x[01-9A-Fa-f]+: ([_a-zA-Z][_a-zA-Z01-9]+) [^ ]+:[01-9]+|"
      "( Address) 0x[01-9A-Fa-f]+( is.+)|"
      "( Conditional jump or move depends.+)|"
      "(VG_USERREQ__CLIENT_CALL.+)|"
      "( .*BACKTRACE:)|"
      "(ERROR SUMMARY: [01-9]+ errors from [01-9]+ contexts)|"
      "(strcmp: .*)'"),
    exit_status='1',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_memcheck_test')


# Leak checker sanity test.
if env.Bit('with_leakcheck'):
  env.ComponentProgram('leak_test.nexe', 'leak_test.c',
                       EXTRA_LIBS=['pthread'])
  node = env.CommandSelLdrTestNacl(
      'leak_test.out',
      command=[env.File('leak_test.nexe')],
      stderr_golden=env.File('leak_test.stderr.golden'),
      filter_group_only='true',
      filter_regex=(
          "'(7,931,147 bytes in 1 blocks are definitely lost).*'"),
      exit_status='1',
      )
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_leak_test')
