# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# NOTE: the arm emulator does not handle atomic ops properly
# NOTE: the default setting of 10k rounds is too slow on ARM
EXTRA_ARGS = ['100']

# BUG: http://code.google.com/p/nativeclient/issues/detail?id=2437
# NOTE(jasonwkim): [2010/08/31 13:49:46 PDT (Tuesday)]
# small_thread_test has problem with arm/qemu (also fails on x86-32-pnacl)
is_broken = env.Bit('target_arm') and env.UsingEmulator()

if env.IsRunningUnderValgrind():
  EXTRA_ARGS = ['20']

ANNOTATIONS_LIBS=[]
if env.Bit('nacl_glibc'):
  if not env.Bit('bitcode'):
    ANNOTATIONS_LIBS += ['dynamic_annotations']
  else:
    # Valgrind does not yet work with PNaCl.
    # BUG= http://code.google.com/p/nativeclient/issues/detail?id=2357
    env.FilterOut(CPPDEFINES = [['DYNAMIC_ANNOTATIONS_ENABLED', '1']])

# GLibC headers currently require target-specific defines.
# BUG= http://code.google.com/p/nativeclient/issues/detail?id=2447
if env.Bit('bitcode') and env.Bit('nacl_glibc'):
  biased_env = env.Clone()
  biased_env.AddBiasForPNaCl()
else:
  biased_env = env

thread_test_nexe = biased_env.ComponentProgram(
    'thread_test',
    'thread_test.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'] + ANNOTATIONS_LIBS)

node = env.CommandSelLdrTestNacl(
    'thread_test.out',
    thread_test_nexe,
    args=EXTRA_ARGS,
    # TODO: investigate why this is slow on old linux system
    size='large',
    )
# NOTE: this should be a pretty slow test, but its been sped up
# to not tickle bug 853
env.AddNodeToTestSuite(node, ['small_tests'], 'run_thread_test',
                       is_broken=is_broken or
# TODO(khim): reenable it when cause of failure on 32bit Windows glibc
# will be found.
# See: http://code.google.com/p/nativeclient/issues/detail?id=1690
                                 ('TRUSTED_ENV' in env and
                                  env['TRUSTED_ENV'].Bit('windows') and
                                  env.Bit('build_x86_32') and
                                  env.Bit('nacl_glibc')))


simple_thread_test_nexe = env.ComponentProgram(
    'simple_thread_test',
    'simple_thread_test.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

node = env.CommandSelLdrTestNacl(
    'simple_thread_test.out',
    simple_thread_test_nexe,
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_simple_thread_test',
                       is_broken=is_broken)

race_test_nexe = env.ComponentProgram(
    'race_test',
    'race_test.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'] + ANNOTATIONS_LIBS)

node = env.CommandSelLdrTestNacl(
    'race_test.out',
    race_test_nexe,
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests', 'tsan_bot_tests'], 'run_race_test',
                       is_broken=is_broken)

main_thread_pthread_exit_test_nexe = env.ComponentProgram(
    'main_thread_pthread_exit_test',
    'main_thread_pthread_exit_test.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'],
    )

main_thread_pthread_exit_test2_nexe = env.ComponentProgram(
    'main_thread_pthread_exit_test2',
    'main_thread_pthread_exit_test2.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'],
    )

node = env.CommandSelLdrTestNacl(
    'main_thread_pthread_exit_test.out',
    main_thread_pthread_exit_test_nexe,
    size='small',
    )

node2 = env.CommandSelLdrTestNacl(
    'main_thread_pthread_exit_test2.out',
    main_thread_pthread_exit_test2_nexe,
    size='small',
    )

# This test fails with nacl-glibc when statically linked.
# This is a bug in upstream glibc:
# see http://sourceware.org/bugzilla/show_bug.cgi?id=12310
if not (env.Bit('nacl_glibc') and env.Bit('nacl_static_link')):
  env.AddNodeToTestSuite(node, ['small_tests'],
                         'run_main_thread_pthread_exit_test',
                         is_broken=is_broken)
# This test additionally doesn't work with newlib.
  env.AddNodeToTestSuite(node2, ['small_tests'],
                         'run_main_thread_pthread_exit_test2',
                         is_broken=is_broken or not env.Bit('nacl_glibc'))

exit_with_thread_nexe = env.ComponentProgram(
    'exit_with_thread',
    'exit_with_thread.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

node = env.CommandSelLdrTestNacl('exit_with_thread.out',
                                 exit_with_thread_nexe)
env.AddNodeToTestSuite(node, ['small_tests'], 'run_exit_with_thread_test',
                       is_broken=is_broken)

cond_wait_test_nexe = env.ComponentProgram(
    'cond_wait_test',
    'cond_wait_test.cc',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

node = env.CommandSelLdrTestNacl(
    'cond_wait_test.out',
    cond_wait_test_nexe,
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_cond_wait_test',
                       is_broken=is_broken)

thread_stack_test_nexe = env.ComponentProgram('thread_stack_test',
                                              'thread_stack_test.c',
                                              EXTRA_LIBS=['${PTHREAD_LIBS}',
                                                          '${NONIRT_LIBS}'])

node = env.CommandSelLdrTestNacl(
    'thread_stack_test.out',
    thread_stack_test_nexe,
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_thread_stack_test',
                       is_broken=is_broken)

if not env.Bit('tests_use_irt'):
  second_tls_test_nexe = env.ComponentProgram(
      'second_tls_test',
      env.RawSyscallObjects(['second_tls_test.c']),
      EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

  node = env.CommandSelLdrTestNacl('second_tls_test.out',
                                   second_tls_test_nexe)
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_second_tls_test',
                         is_broken=is_broken)

many_threads_sequential_nexe = env.ComponentProgram(
    'many_threads_sequential',
    'many_threads_sequential.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])

second_tls_create_test_nexe = env.ComponentProgram(
    'second_tls_create_test', ['second_tls_create_test.c'],
    EXTRA_LIBS=['${NONIRT_LIBS}'])

node = env.CommandSelLdrTestNacl('second_tls_create_test.out',
                                 second_tls_create_test_nexe)
env.AddNodeToTestSuite(node, ['small_tests'], 'run_second_tls_create_test',
                       is_broken=is_broken)

# This test should, in principle, be flaky, because of race conditions
# in NaCl's thread exit/join.  See:
# http://code.google.com/p/nativeclient/issues/detail?id=1027 (trusted stacks)
# http://code.google.com/p/nativeclient/issues/detail?id=1028 (newlib)
# http://code.google.com/p/nativeclient/issues/detail?id=2136 (TLS indexes)
# If we find this test fails in practice, it should be disabled until
# the races are fixed.
node = env.CommandSelLdrTestNacl('many_threads_sequential_test.out',
                                 [many_threads_sequential_nexe])
env.AddNodeToTestSuite(node, ['small_tests'],
                       'run_many_threads_sequential_test',
                       is_broken=is_broken)
