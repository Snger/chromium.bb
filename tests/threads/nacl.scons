# -*- python -*-
# Copyright 2008 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.


Import('env')

# NOTE: the arm emulator does not handle atomic ops properly
# NOTE: the default setting of 10k rounds is too slow on ARM
EXTRA_ARGS = ['100']

# TODO(robertm): research why the bitcode clause is necessary
# NOTE(jasonwkim): [2010/08/31 13:49:46 PDT (Tuesday)]
# small_thread_test has problem with arm/qemu (also fails on x86-32-pnacl)
is_broken = env.Bit('target_arm') and env.UsingEmulator()

if env.IsRunningUnderValgrind():
  EXTRA_ARGS = ['20']

ANNOTATIONS_LIBS=[]
if env.Bit('nacl_glibc'):
  ANNOTATIONS_LIBS += ['dynamic_annotations']

env.ComponentProgram('thread_test.nexe',
                     'thread_test.c',
                     EXTRA_LIBS=['pthread'] + ANNOTATIONS_LIBS,
                     )
node = env.CommandSelLdrTestNacl(
    'thread_test.out',
    command=[env.File('thread_test.nexe')] + EXTRA_ARGS,
    # TODO: investigate why this is slow on old linux system
    size='large',
    )
# NOTE: this should be a pretty slow test, but its been sped up
# to not tickle bug 853
env.AddNodeToTestSuite(node, ['small_tests'], 'run_thread_test',
                       is_broken=is_broken or
# TODO(khim): reenable it when cause of failure on 32bit Windows glibc
# will be found.
# See: http://code.google.com/p/nativeclient/issues/detail?id=1690
                                 ('TRUSTED_ENV' in env and
                                  env['TRUSTED_ENV'].Bit('windows') and
                                  env.Bit('build_x86_32') and
                                  env.Bit('nacl_glibc')))


env.ComponentProgram('simple_thread_test.nexe',
                     'simple_thread_test.c',
                     EXTRA_LIBS=['pthread'],
                     )
node = env.CommandSelLdrTestNacl(
    'simple_thread_test.out',
    command=[env.File('simple_thread_test.nexe')],
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_simple_thread_test',
                       is_broken=is_broken)

env.ComponentProgram('race_test.nexe',
                     'race_test.c',
                     EXTRA_LIBS=['pthread'] + ANNOTATIONS_LIBS,
                     )
node = env.CommandSelLdrTestNacl(
    'race_test.out',
    command=[env.File('race_test.nexe')],
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests', 'tsan_bot_tests'], 'run_race_test',
                       is_broken=is_broken)

env.ComponentProgram('main_thread_pthread_exit_test.nexe',
                     'main_thread_pthread_exit_test.c',
                     EXTRA_LIBS=['pthread'],
                     )

env.ComponentProgram('main_thread_pthread_exit_test2.nexe',
                     'main_thread_pthread_exit_test2.c',
                     EXTRA_LIBS=['pthread'],
                     )

node = env.CommandSelLdrTestNacl(
    'main_thread_pthread_exit_test.out',
    command=[env.File('main_thread_pthread_exit_test.nexe')],
    size='small',
    )

node2 = env.CommandSelLdrTestNacl(
    'main_thread_pthread_exit_test2.out',
    command=[env.File('main_thread_pthread_exit_test2.nexe')],
    size='small',
    )

# This test fails with nacl-glibc when statically linked.
# This is a bug in upstream glibc:
# see http://sourceware.org/bugzilla/show_bug.cgi?id=12310
if not (env.Bit('nacl_glibc') and env.Bit('nacl_static_link')):
  env.AddNodeToTestSuite(node, ['small_tests'],
                         'run_main_thread_pthread_exit_test',
                         is_broken=is_broken)
  env.AddNodeToTestSuite(node2, ['small_tests'],
                         'run_main_thread_pthread_exit_test2',
                         is_broken=is_broken)

env.ComponentProgram('cond_wait_test.nexe',
                     'cond_wait_test.cc',
                     EXTRA_LIBS=['pthread'],
                     )
node = env.CommandSelLdrTestNacl(
    'cond_wait_test.out',
    command=[env.File('cond_wait_test.nexe')],
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'cond_wait_test',
                       is_broken=is_broken)

env.ComponentProgram('thread_stack_test.nexe',
                     'thread_stack_test.c',
                     EXTRA_LIBS=['pthread'],
                     )
node = env.CommandSelLdrTestNacl(
    'thread_stack_test.out',
    command=[env.File('thread_stack_test.nexe')],
    size='small',
    )
env.AddNodeToTestSuite(node, ['small_tests'], 'run_thread_stack_test',
                       is_broken=is_broken)

test_prog = env.ComponentProgram('second_tls_test.nexe',
                                 env.RawSyscallObjects(['second_tls_test.c']),
                                 EXTRA_LIBS=['pthread'])
node = env.CommandSelLdrTestNacl('second_tls_test.out',
                                 command=[env.File(test_prog)])
env.AddNodeToTestSuite(node, ['small_tests'], 'run_second_tls_test',
                       is_broken=is_broken)
