# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# Breakpad crash reporting only works when NaCl is built into Chromium.
if (env.Bit('disable_dynamic_plugin_loading') and
    env.Bit('host_windows') and
    env.Bit('build_x86_32')):
  expected_crash_dumps = 1
else:
  # We are also checking that crash dumping does not work
  # unexpectedly, since that might indicate that Breakpad was enabled
  # without checking that it works securely.
  expected_crash_dumps = 0

def make_crash_test_nexe(name, libs=[]):
  obj = env.ComponentObject('inbrowser_%s' % name,
                            '${MAIN_DIR}/tests/signal_handler/%s.c' % name)
  nexe = env.ComponentProgram(
      'inbrowser_%s_${TARGET_FULLARCH}' % name, obj,
      EXTRA_LIBS=libs + [
          'srpc', 'platform', 'gio', 'imc', 'imc_syscalls', '${PTHREAD_LIBS}',
          '${NON_PPAPI_BROWSER_LIBS}'])
  return nexe

env.Append(CPPDEFINES = ['IN_BROWSER'])

# This crash in trusted code should produce a crash dump.
crash_test_nexe = make_crash_test_nexe('crash_test')
node = env.PPAPIBrowserTester(
    'inbrowser_trusted_crash_in_startup_test.out',
    python_tester_script=env.File('crash_dump_tester.py'),
    url='trusted_crash_in_startup.html',
    nmfs=['inbrowser_crash_test.nmf'],
    files=[crash_test_nexe,
           env.File('trusted_crash_in_startup.html')],
    osenv='NACL_CRASH_TEST=1',
    args=['--expected_crash_dumps=%i' % expected_crash_dumps])

env.AddNodeToTestSuite(
    node,
    ['chrome_browser_tests'],
    'run_inbrowser_trusted_crash_in_startup_test',
    is_broken=env.PPAPIBrowserTesterIsBroken())

# This tests a crash that occurs inside a syscall handler.
# Ultimately this should be recognised as a crash caused by untrusted code.
# See http://code.google.com/p/nativeclient/issues/detail?id=579
crash_in_syscall_nexe = make_crash_test_nexe('crash_in_syscall',
                                             ['imc_syscalls'])
node = env.PPAPIBrowserTester(
    'inbrowser_crash_in_syscall_test.out',
    python_tester_script=env.File('crash_dump_tester.py'),
    url='crash_in_syscall.html',
    nmfs=['inbrowser_crash_in_syscall.nmf'],
    files=[crash_in_syscall_nexe,
           env.File('crash_in_syscall.html')],
    args=['--expected_crash_dumps=%i' % expected_crash_dumps])
env.AddNodeToTestSuite(
    node, ['chrome_browser_tests'], 'run_inbrowser_crash_in_syscall_test',
    is_broken=env.PPAPIBrowserTesterIsBroken() or env.Bit('host_linux'))

# Crashes in untrusted code should not produce crash dumps.
node = env.PPAPIBrowserTester(
    'inbrowser_untrusted_crash_test.out',
    python_tester_script=env.File('crash_dump_tester.py'),
    url='untrusted_crash.html',
    nmfs=['inbrowser_crash_test.nmf'],
    files=[crash_test_nexe,
           env.File('untrusted_crash.html')],
    args=['--expected_crash_dumps=0'])
env.AddNodeToTestSuite(
    node, ['chrome_browser_tests'], 'run_inbrowser_untrusted_crash_test',
    is_broken=env.PPAPIBrowserTesterIsBroken())
