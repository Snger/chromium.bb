# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
Import('env')

if 'TRUSTED_ENV' not in env:
  Return()
if env.Bit('nacl_static_link'):
  Return()

toolchain_libraries = [
    'runnable-ld.so',
    'libc.so.6',
    'libm.so.6',
    'libgcc_s.so.1',
    'libpthread.so.0',
    'libstdc++.so.6',
    ]

nacl_libraries = [
    'libplatform.so',
    'libgio.so',
    ]

if not env.Bit('irt'):
  nacl_libraries += [
      'libppruntime.so',
      'libimc.so',
      'libsrpc.so',
      'libimc_syscalls.so',
      ]

def make_mappings(libdir, libs):
  return [('lib/%s' % lib, env.File(os.path.join(libdir, lib))) for lib in libs]

file_mapping = (make_mappings('${NACL_SDK_LIB}', toolchain_libraries) +
                make_mappings('${LIB_DIR}', nacl_libraries))

test_prog_fname = 'ppapi_test_example_${TARGET_FULLARCH}${PROGSUFFIX}'
test_prog = env.File('${STAGING_DIR}/' + test_prog_fname)
file_mapping.append((test_prog_fname, test_prog))


node = env.PPAPIBrowserTester(
    'browser_dynamic_library_test.out', url='dynamic_library_test.html',
    files=[env.File('dynamic_library_test.html'),
           env.File('dynamic_library_helper.js')],
    map_files=file_mapping,
    # TODO(mseaborn): We will get some 404 errors because the "tls"
    # subdir is in nacl-glibc's search path (we should remove it) and
    # because we're not using an explicit mapping based on a manifest
    # file yet.
    args=['--allow_404', '--enable_experimental_js'])

env.AddNodeToTestSuite(node, ['dynamic_library_browser_tests'],
                       'run_browser_dynamic_library_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())
