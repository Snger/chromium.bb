# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

if 'TRUSTED_ENV' not in env:
  Return()
if env.Bit('nacl_static_link'):
  Return()

stubout_tool = env['TRUSTED_ENV'].File(
    '${STAGING_DIR}/${PROGPREFIX}ncval_stubout${PROGSUFFIX}')

libraries = (
    'runnable-ld.so',
    'libc.so.6',
    'libm.so.6',
    'libgcc_s.so.1',
    'libpthread.so.0',
    'libstdc++.so.6',
    'libppruntime.so',
    'libimc.so',
    'libplatform.so',
    'libsrpc.so',
    'libgio.so',
    'libnacl.so',
    )
file_mapping = []
for library_name in libraries:
  # nacl-glibc has some validator failures so we need to apply
  # ncval_stubout before we can load the libraries in the browser.
  # TODO(mseaborn): Remove the need for running ncval_stubout here.
  # See http://code.google.com/p/nativeclient/issues/detail?id=876
  node = env.Command(
      target='%s.stubout' % library_name,
      source=[stubout_tool, env.File('${NACL_SDK_LIB}/%s' % library_name)],
      action=[Action('${SOURCES[0]} ${SOURCES[1]} -o $TARGET')])
  file_mapping.append(('lib/%s' % library_name, node))


test_prog_fname = 'ppapi_core_' + env.get('TARGET_FULLARCH') + ".nexe"
test_prog = env.File('${STAGING_DIR}/' + test_prog_fname)
file_mapping.append((test_prog_fname, test_prog))


node = env.PPAPIBrowserTester(
    'browser_dynamic_library_test.out', url='dynamic_library_test.html',
    files=[env.File('dynamic_library_test.html'),
           env.File('dynamic_library_helper.js')],
    map_files=file_mapping,
    # TODO(mseaborn): We will get some 404 errors because the "tls"
    # subdir is in nacl-glibc's search path (we should remove it) and
    # because we're not using an explicit mapping based on a manifest
    # file yet.
    args=['--allow_404', '--enable_experimental_js'])

env.AddNodeToTestSuite(node, ['dynamic_library_browser_tests'],
                       'run_browser_dynamic_library_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())
