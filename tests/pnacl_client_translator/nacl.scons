# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import re        # For StripArchFromLDCommand hack.

Import('env')

# Browser tests for the pnacl translator.

# TODO(jvoung): allow pnacl to reuse normal NaCl browser tests.
if not env.Bit('bitcode'):
  Return()

# The PNaCl coordinator cannot yet handle GLibC-based pexe.
if env.Bit('nacl_glibc'):
  Return()

#----------------------------------------------------------------------
# Test pexe translation.

# Usually the scons link step produces a nexe. We massage the commandline
# here to generate pexes, i.e. fully linked bitcode files.
# TODO(pdox): Clean this up if/when scons leaves a bitcode artifact more
# naturally for testing the translator inside and outside the browser.
def StripArchFromLDCommand(env):
  bitcode_env = env.Clone()
  old_link = bitcode_env.get('LINK')
  new_link = re.sub('-arch [\w\d-]+', '', old_link)
  bitcode_env.Replace(LINK=new_link)
  return bitcode_env

bitcode_env = StripArchFromLDCommand(env)

# Specify the object file to prevent junk from getting left over
# in source directory. SCons will default to point "-o" to the source
# directory if it is an absolute directory.
test_example_obj = bitcode_env.ComponentObject(
    'pnacl_test_example_obj',
    '${SCONSTRUCT_DIR}/tests/ppapi_test_example/ppapi_test_example.cc')

pexe_name = 'pnacl_test_example.pexe'

test_example_pexe = bitcode_env.ComponentProgram(
    pexe_name,
    [test_example_obj],
    EXTRA_LIBS=['${PPAPI_LIBS}',
                'ppapi_test_lib',
                'platform', # for CHECK
                'pthread',
                'gio',
                ])

# Grab test routines.
borrowed_file = '${STAGING_DIR}/ppapi_test_example.js',

env.Publish(pexe_name,
            'run',
            ['pnacl_test_example.nmf',
             'pnacl_test_example.html'])

node = bitcode_env.PPAPIBrowserTester(
    'pnacl_test_example.out',
    url='pnacl_test_example.html',
    files=(env.ExtractPublishedFiles(pexe_name, prog_suffix=False) +
           [borrowed_file]),
    args=['--prefer_portable_in_manifest'])

bitcode_env.AddNodeToTestSuite(node,
                               ['chrome_browser_tests'],
                               'run_pnacl_example_browser_test',
                               is_broken=(
                                   bitcode_env.PPAPIBrowserTesterIsBroken()))

#### Test error handling.

# We should add more cases, e.g., try a bad library to crash ld,
# try a more malicious bitcode, try to exhaust resources, etc.
# The current llc tests, don't actually crash LLC, they only
# make llc exit w/ an abnormal status.

pnacl_bad_files = env.Replicate(
    '${STAGING_DIR}',
    ['pnacl_bad_doesnotexist.nmf',
     'pnacl_bad_doesnotexist_pexe_only.nmf',
     # This one is just a text file that begins with "BC".
     'bad.pexe',
     'pnacl_bad_pexe.nmf',
     # This one is the hello world bitcode .ll w/ a missing instruction.
     'bad2.pexe',
     'pnacl_bad2_pexe.nmf',
     # Borrow the bitcode file from the test above and treat it as a
     # pexe so that the compile succeeds but linking fails.
     'pnacl_test_example_obj.bc',
     'pnacl_bad_pexe_undefined_syms.nmf',
     'pnacl_bad_test.html',
     ])

env.Depends(pnacl_bad_files, test_example_obj)

# Borrow bad load test harness.
borrowed_file = '${STAGING_DIR}/ppapi_bad.js',

node = bitcode_env.PPAPIBrowserTester(
    'pnacl_bad_test.out',
    url='pnacl_bad_test.html',
    files=pnacl_bad_files + [borrowed_file],
    args=['--allow_404', '--prefer_portable_in_manifest'])

bitcode_env.AddNodeToTestSuite(node,
                               ['chrome_browser_tests'],
                               'run_pnacl_bad_browser_test',
# "Aw, Snap!"s when running the second bad test:
# third_party/tcmalloc/chromium/src/free_list.cc:115] Memory corruption detected.
# Somehow it doesn't Aw Snap if we let the JS assertions fail,
# e.g., by changing the JS assert_eq error strings to something else.
                               is_broken=(True or
                                   bitcode_env.PPAPIBrowserTesterIsBroken()))
