# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

Import('env')

# This tests a feature that is currently only in nacl-glibc's dynamic
# linker.
if not env.Bit('nacl_glibc'):
  Return()
if env.Bit('nacl_static_link'):
  Return()
# nacl-glibc tests are currently only run on Linux and the plumbing
# for Python bindings will require more work for Mac and Windows.
# TODO(mseaborn): Share a common set of checks and plumbing with
# src/trusted/python_bindings/build.scons.
if not env.Bit('host_linux'):
  Return()
# Disable for x86-32 in case this is a multilib target, since Python
# does not support multilib.  See src/trusted/python_bindings/build.scons.
if env.Bit('build_x86_32'):
  Return()

if 'TRUSTED_ENV' not in env:
  Return()
trusted_env = env['TRUSTED_ENV']

python_extension = trusted_env.File('${STAGING_DIR}/naclimc.so')

sel_ldr = trusted_env.File('${STAGING_DIR}/${PROGPREFIX}sel_ldr${PROGSUFFIX}')
hello_world = env.File('${STAGING_DIR}/hello_world${PROGSUFFIX}')
env_vars = [
    'PYTHONPATH=%s' % ':'.join([os.path.dirname(python_extension.abspath),
                                '${SCONSTRUCT_DIR}/src/tools/posix_over_imc']),
    'NACL_SEL_LDR=%s' % sel_ldr,
    'HELLO_WORLD_PROG=%s' % hello_world,
    'NACL_LIBRARY_DIR=${NACL_SDK_LIB}',
    ]
dependencies = [python_extension, sel_ldr, hello_world]

node = env.CommandTest(
    'startup_message_test.out',
    command=['${PYTHON}', env.File('test_startup.py')],
    osenv=env_vars,
    extra_deps=dependencies)
env.AddNodeToTestSuite(node, ['small_tests'], 'run_startup_message_test')
