# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import json
import posixpath

Import('env')

env.ComponentLibrary('testrunner', ['test_runner.c'])
env.ComponentLibrary('testrunner_browser', ['test_runner_ppapi.c'])

dest_copy = env.Replicate('$STAGING_DIR', 'test_runner.html')
env.Replicate('$STAGING_DIR',
              '${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/nacltest.js')
exe_list = []


exe_list.append('imc_shm_mmap_test')

# These conditionals mirror conditionals in
# dynamic_code_loading/nacl.scons.  The dyncode tests don't work with
# dynamic linking yet, and they don't build with non-ARM PNaCl.
if (env.Bit('nacl_static_link') and
    not (env.Bit('bitcode') and not env.Bit('target_arm'))):
  exe_list.append('dynamic_load_browser_test')

  # Dynamic code modification is not implemented for ARM yet.
  if not env.Bit('target_arm'):
    exe_list.append('dynamic_modify_browser_test')

# Exception handling support is not implemented everywhere yet.
if (not env.Bit('disable_dynamic_plugin_loading') and
    not (env.Bit('host_windows') and env.Bit('build_x86_64'))):
  exe_list.append('exception_browser_test')
  env['ENV']['NACL_UNTRUSTED_EXCEPTION_HANDLING'] = '1'


test_files = ([env.File('${STAGING_DIR}/nacltest.js')] +
              [env.File('${STAGING_DIR}/%s_${TARGET_FULLARCH}${PROGSUFFIX}'
                        % exe_name)
               for exe_name in exe_list])
# These are not true dependencies: They are not needed for
# test_runner.html to be replicated to "staging", but they are needed
# for test_runner.html to work when run.
env.Depends(dest_copy, test_files)
env.Alias('test_runner.html', dest_copy)

def WriteManifestList(target, source, env):
  nmf_names = ['%s.nmf' % exe_name for exe_name in exe_list]
  data = ('// This file is automatically generated\n'
          'var G_NMF_TEST_LIST = %s;\n' % json.dumps(nmf_names))
  fh = open(target[0].abspath, 'w')
  fh.write(data)
  fh.close()

nmf_list_js = env.Command(['nmf_test_list.js'], [], WriteManifestList)[0]
# Scons does not track the dependency of nmf_list_js on exe_list, so
# we must always recreate nmf_list_js when it is used.
env.AlwaysBuild(nmf_list_js)

node = env.PPAPIBrowserTester(
    'inbrowser_test_runner.out', url='test_runner.html',
    nmf_names=exe_list,
    files=[env.File('test_runner.html'), nmf_list_js] + test_files)

# Disabled on Valgrind because of multiple nexes.
# TODO(eugenis): enable when Valgrind learns to autodetect the nexe name
env.AddNodeToTestSuite(node, ['chrome_browser_tests'],
                       'run_inbrowser_test_runner',
                       is_broken=env.PPAPIBrowserTesterIsBroken() or
                                 env.Bit('running_on_valgrind') or
                                 not env.Bit('irt'))
