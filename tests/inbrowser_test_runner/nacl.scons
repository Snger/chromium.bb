# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')


env.ComponentLibrary('testrunner', ['test_runner.c'])


if env.Bit('bitcode'):
  # The test is disabled for ARM/PNaCl because dynamic_load_test.nexe
  # was disabled for ARM/PNaCl.  TODO(mseaborn): Re-enable both.
  Return()

arch_suffix = '_%s.nexe' % env.get('TARGET_FULLARCH')
dest_copy = env.Replicate('$STAGING_DIR', 'test_runner.html')
env.Replicate('$STAGING_DIR',
              '${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/nacltest.js')
test_files = [
    env.File('$STAGING_DIR/nacltest.js'),
    env.File('$STAGING_DIR/dynamic_load_test.nmf'),
    env.File('$STAGING_DIR/dynamic_load_test' + arch_suffix),
    env.File('$STAGING_DIR/dynamic_modify_test.nmf'),
    env.File('$STAGING_DIR/dynamic_modify_test' + arch_suffix),
    env.File('$STAGING_DIR/imc_shm_mmap_test.nmf'),
    env.File('$STAGING_DIR/imc_shm_mmap_test' + arch_suffix),
    ]
# These are not true dependencies: They are not needed for
# test_runner.html to be replicated to "staging", but they are needed
# for test_runner.html to work when run.
env.Depends(dest_copy, test_files)
env.Alias('test_runner.html', dest_copy)

node = env.PPAPIBrowserTester(
    'inbrowser_test_runner.out', url='test_runner.html',
    files=[env.File('test_runner.html')] + test_files,
    args=['--enable_experimental_js'])

env.AddNodeToTestSuite(node, ['chrome_browser_tests'],
                       'run_inbrowser_test_runner',
                       is_flaky=True, # Don't subject Chrome to our problems.
                       is_broken=env.PPAPIBrowserTesterIsBroken())
