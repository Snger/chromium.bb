# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')


env.ComponentLibrary('testrunner', ['test_runner.c'])

if env.Bit('bitcode'):
  # The test is disabled for ARM/PNaCl because dynamic_load_test.nexe
  # was disabled for ARM/PNaCl.  TODO(mseaborn): Re-enable both.
  Return()

dest_copy = env.Replicate('$STAGING_DIR', 'test_runner.html')
env.Replicate('$STAGING_DIR',
              '${SCONSTRUCT_DIR}/tools/browser_tester/browserdata/nacltest.js')
test_files = [
  env.File('$STAGING_DIR/nacltest.js'),
  env.File('$STAGING_DIR/dynamic_load_test.nmf'),
  env.File('$STAGING_DIR/dynamic_load_test_${TARGET_FULLARCH}${PROGSUFFIX}'),
  env.File('$STAGING_DIR/dynamic_modify_test.nmf'),
  env.File('$STAGING_DIR/dynamic_modify_test_${TARGET_FULLARCH}${PROGSUFFIX}'),
  env.File('$STAGING_DIR/imc_shm_mmap_test.nmf'),
  env.File('$STAGING_DIR/imc_shm_mmap_test_${TARGET_FULLARCH}${PROGSUFFIX}'),
]

# These are not true dependencies: They are not needed for
# test_runner.html to be replicated to "staging", but they are needed
# for test_runner.html to work when run.
env.Depends(dest_copy, test_files)
env.Alias('test_runner.html', dest_copy)

node = env.PPAPIBrowserTester(
    'inbrowser_test_runner.out', url='test_runner.html',
    nmfs=[
        '${SCONSTRUCT_DIR}/tests/dynamic_code_loading/dynamic_load_test.nmf',
        '${SCONSTRUCT_DIR}/tests/dynamic_code_loading/dynamic_modify_test.nmf',
        '${SCONSTRUCT_DIR}/tests/imc_shm_mmap/imc_shm_mmap_test.nmf'],
    files=[env.File('test_runner.html')] + test_files,
    args=['--enable_experimental_js'])

# Disabled on Valgrind because of multiple nexes.
# TODO(eugenis): enable when Valgrind learns to autodetect the nexe name
env.AddNodeToTestSuite(node, ['chrome_browser_tests'],
                       'run_inbrowser_test_runner',
                       is_flaky=True, # Don't subject Chrome to our problems.
                       is_broken=env.PPAPIBrowserTesterIsBroken() or
                                 env.Bit('nacl_glibc') or
                                 env.Bit('running_on_valgrind'))
