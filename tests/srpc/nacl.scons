# -*- python -*-
# Copyright (c) 2011 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import platform

Import('env')


######################################################################
# Publish nexes and corresponding html to scons-out/.../staging/
######################################################################

srpc_test_nexe_name = 'srpc_test_%s.nexe' % env.get('TARGET_FULLARCH')
srpc_test_nexe = env.ComponentProgram(
    srpc_test_nexe_name, 'srpc_test.c',
    EXTRA_LIBS=[
        '${NON_PPAPI_BROWSER_LIBS}',
        'srpc',
        'imc_syscalls',
        'platform',
        'gio',
        'm',
        'pthread'])
env.Publish(srpc_test_nexe_name, 'run',
    ['srpc_basic.html',
     'srpc_perf.html',
     'srpc_shm.html',
     'srpc_plugin.html',
     'srpc_test.nmf'])
env.AddPrebuiltBinaryToRepository(srpc_test_nexe)


srpc_shm_nexe_name = 'srpc_shm_%s.nexe' % env.get('TARGET_FULLARCH')
srpc_shm_nexe = env.ComponentProgram(
    srpc_shm_nexe_name, 'srpc_shm.c',
    EXTRA_LIBS=['${NON_PPAPI_BROWSER_LIBS}',
                'srpc', 'imc_syscalls', 'platform', 'gio', 'm', 'pthread'])
env.Publish(srpc_shm_nexe_name, 'run',
    ['srpc_shm.html',
     'srpc_shm.nmf'])
env.AddPrebuiltBinaryToRepository(srpc_shm_nexe)


srpc_nrd_server_nexe_name = ('srpc_nrd_server_%s.nexe' %
                             env.get('TARGET_FULLARCH'))
srpc_nrd_server_nexe = env.ComponentProgram(
    srpc_nrd_server_nexe_name, 'srpc_nrd_server.c',
    EXTRA_LIBS=[
        '${NON_PPAPI_BROWSER_LIBS}',
        'srpc',
        'imc_syscalls',
        'platform',
        'gio',
        'm',
        'pthread'])
env.Publish(srpc_nrd_server_nexe_name, 'run',
    ['srpc_sockaddr.html',
     'srpc_nrd_server.nmf'])
env.AddPrebuiltBinaryToRepository(srpc_nrd_server_nexe)


srpc_nrd_client_nexe_name = ('srpc_nrd_client_%s.nexe' %
                             env.get('TARGET_FULLARCH'))
srpc_nrd_client_nexe = env.ComponentProgram(
    srpc_nrd_client_nexe_name, 'srpc_nrd_client.c',
    EXTRA_LIBS=[
        '${NON_PPAPI_BROWSER_LIBS}',
        'srpc',
        'imc_syscalls',
        'platform',
        'gio',
        'm',
        'pthread'])
env.Publish(srpc_nrd_client_nexe_name, 'run',
    ['srpc_nrd_xfer.html',
     'srpc_nrd_client.nmf',
     srpc_nrd_server_nexe,
     'srpc_nrd_server.nmf'])
env.AddPrebuiltBinaryToRepository(srpc_nrd_client_nexe)


cat_nexe_name = ('cat_%s.nexe' % env.get('TARGET_FULLARCH'))
cat_nexe = env.ComponentProgram(
    cat_nexe_name, 'cat.c',
    EXTRA_LIBS=['${NON_PPAPI_BROWSER_LIBS}',
                'srpc', 'imc_syscalls', 'platform', 'gio', 'pthread'])
env.Publish(cat_nexe_name, 'run',
    ['srpc_url_as_nacl_desc.html',
     'srpc_url_as_nacl_desc_success.html',
     'cat.nmf'])


srpc_bidir_nexe_name = ('srpc_bidir_%s.nexe' % env.get('TARGET_FULLARCH'))
srpc_bidir_nexe = env.ComponentProgram(
    srpc_bidir_nexe_name, 'srpc_bidir.c',
    EXTRA_LIBS=['srpc', 'imc_syscalls', 'platform', 'gio', 'm', 'pthread'])
env.Publish(srpc_bidir_nexe_name, 'run', [])


# NOTE: at least for ARM the EXTRA_LIBS list should include 'srpc'
#       but this somehow make the x86 version fragile
srpc_bad_service_nexe_name = ('srpc_bad_service_%s.nexe' %
                              env.get('TARGET_FULLARCH'))
srpc_bad_service_nexe = env.ComponentProgram(
    srpc_bad_service_nexe_name, 'srpc_bad_service.c',
    EXTRA_LIBS=['imc_syscalls', 'm', 'pthread'])
env.Publish(srpc_bad_service_nexe_name, 'run', [])

######################################################################
## Automated testing using sel_universal
######################################################################

node = env.SelUniversalTest(
    'srpc_basic_test.out',
    sel_universal_flags=['--command_file', env.File('srpc_basic_test.stdin')],
    command=[srpc_test_nexe],
    stdout_golden=env.File('srpc_basic_test.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['sel_ldr_tests', 'small_tests'],
                       'run_srpc_basic_test')

node = env.SelUniversalTest(
    'srpc_shm_test.out',
    sel_universal_flags=['--command_file',
                         env.File('srpc_shm_test.stdin')],
    command=[srpc_shm_nexe],
    stdout_golden=env.File('srpc_shm_test.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['sel_ldr_tests', 'small_tests'],
                       'run_srpc_shm_test')

node = env.SelUniversalTest(
    'srpc_bad_service.out',
    command=[srpc_bad_service_nexe],
    exit_status='1'
    )
env.AddNodeToTestSuite(node,
                       ['sel_ldr_tests', 'small_tests'],
                       'run_srpc_bad_service_test')

######################################################################
## Automated testing using chrome
######################################################################

node = env.PPAPIBrowserTester(
    'srpc_basic_chrome_browser_test.out',
    url='srpc_basic.html',
    files=env.ExtractPublishedFiles(srpc_test_nexe_name),
    args=['--enable_experimental_js'])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_basic_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

node = env.PPAPIBrowserTester(
    'srpc_nrd_xfer_chrome_browser_test.out',
    url='srpc_nrd_xfer.html',
    files=env.ExtractPublishedFiles(srpc_nrd_client_nexe_name),
    args=['--enable_experimental_js'])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_nrd_xfer_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

node = env.PPAPIBrowserTester(
    'srpc_plugin_chrome_browser_test.out',
    url='srpc_plugin.html',
    files=env.ExtractPublishedFiles(srpc_test_nexe_name),
    args=['--enable_experimental_js'])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_plugin_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

node = env.PPAPIBrowserTester(
    'srpc_shm_chrome_browser_test.out',
    url='srpc_shm.html',
    files=env.ExtractPublishedFiles(srpc_shm_nexe_name),
    args=['--enable_experimental_js'])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_shm_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

node = env.PPAPIBrowserTester(
    'srpc_sockaddr_chrome_browser_test.out',
    url='srpc_sockaddr.html',
    files=env.ExtractPublishedFiles(srpc_nrd_server_nexe_name),
    args=['--enable_experimental_js'])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_sockaddr_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())

# TODO(sehr): fix this test on windows.
node = env.PPAPIBrowserTester(
    'srpc_url_as_nacl_desc_chrome_browser_test.out',
    url='srpc_url_as_nacl_desc.html',
    files=env.ExtractPublishedFiles(cat_nexe_name),
    args=['--enable_experimental_js', '--allow_404'])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_url_as_nacl_desc_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())
