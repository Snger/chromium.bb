# -*- python -*-
# Copyright (c) 2011 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import platform

Import('env')


######################################################################
# Publish nexes and corresponding html to scons-out/.../staging/
######################################################################

# TODO(polina): make nacl_js_lib.js available by default

srpc_test_nexe = env.ComponentProgram(
    'srpc_test.nexe', 'srpc_test.c',
    EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish(
    'srpc_test.nexe', 'run',
    ['srpc_basic.html', 'srpc_perf.html', 'srpc_shm.html', 'srpc_plugin.html',
     env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.AddPrebuiltBinaryToRepository(srpc_test_nexe)


srpc_shm_nexe = env.ComponentProgram(
    'srpc_shm.nexe', 'srpc_shm.c',
    EXTRA_LIBS=['srpc', 'platform', 'gio', 'm', 'pthread'])
env.Publish(
    'srpc_shm.nexe', 'run',
    [ 'srpc_shm.html',
      env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.AddPrebuiltBinaryToRepository(srpc_shm_nexe)


srpc_nrd_server_nexe = env.ComponentProgram(
    'srpc_nrd_server.nexe', 'srpc_nrd_server.c',
    EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish(
    'srpc_nrd_server.nexe', 'run',
    ['srpc_sockaddr.html',
     env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.AddPrebuiltBinaryToRepository(srpc_nrd_server_nexe)


srpc_nrd_client_nexe = env.ComponentProgram(
    'srpc_nrd_client.nexe', 'srpc_nrd_client.c',
    EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish(
    'srpc_nrd_client.nexe', 'run',
    ['srpc_nrd_xfer.html',
     env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])
env.AddPrebuiltBinaryToRepository(srpc_nrd_client_nexe)


cat_nexe = env.ComponentProgram(
    'cat.nexe', 'cat.c',
    EXTRA_LIBS=['srpc', 'platform', 'gio', 'm', 'pthread'])
env.Publish(
    'cat.nexe', 'run',
    ['srpc_url_as_nacl_desc.html', 'srpc_url_as_nacl_desc_success.html',
     env.File('${SCONSTRUCT_DIR}/tests/nacl_js_lib.js') ])


srpc_bidir_nexe = env.ComponentProgram(
    'srpc_bidir.nexe', 'srpc_bidir.c',
    EXTRA_LIBS=['srpc', 'm', 'pthread'])
env.Publish('srpc_bidir.nexe', 'run', [])


# NOTE: at least for ARM the EXTRA_LIBS list should include 'srpc'
#       but this somehow make the x86 version fragile
srpc_bad_service_nexe = env.ComponentProgram(
    'srpc_bad_service.nexe', 'srpc_bad_service.c',
    EXTRA_LIBS=['m', 'pthread'])
env.Publish('srpc_bad_service.nexe', 'run', [])

######################################################################
## Automated testing using sel_universal
######################################################################

node = env.SelUniversalTest(
    'srpc_basic_test.out',
    sel_universal_flags=['--command_file', env.File('srpc_basic_test.stdin')],
    command=[env.File('srpc_test.nexe')],
    stdout_golden=env.File('srpc_basic_test.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['sel_ldr_tests', 'small_tests'],
                       'run_srpc_basic_test')

node = env.SelUniversalTest(
    'srpc_shm_test.out',
    sel_universal_flags=['--command_file',
                         env.File('srpc_shm_test.stdin')],
    command=[env.File('srpc_shm.nexe')],
    stdout_golden=env.File('srpc_shm_test.stdout'),
    )
env.AddNodeToTestSuite(node,
                       ['sel_ldr_tests', 'small_tests'],
                       'run_srpc_shm_test')

node = env.SelUniversalTest(
    'srpc_bad_service.out',
    command=[env.File('srpc_bad_service.nexe')],
    exit_status='1'
    )
env.AddNodeToTestSuite(node,
                       ['sel_ldr_tests', 'small_tests'],
                       'run_srpc_bad_service_test')

######################################################################
## Automated testing using chrome
######################################################################

node = env.PPAPIBrowserTester(
    'srpc_basic_chrome_browser_test.out',
    url='srpc_basic_port.html',
    files=[srpc_test_nexe, env.File('srpc_basic_port.html')])
env.AddNodeToTestSuite(node,
                       ['chrome_browser_tests'],
                       'run_srpc_basic_chrome_browser_test',
                       is_broken=env.PPAPIBrowserTesterIsBroken())
