# -*- python -*-
# Copyright 2012 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

platform = env.get('TARGET_FULLARCH')
ppapi_example_events_nexe_name = 'ppapi_example_events_%s${PROGSUFFIX}' % platform
ppapi_user_main_nexe_name = 'ppapi_user_main_%s${PROGSUFFIX}' % platform

def CreateDefaultDeps(base_name):
  return [env.File('${STAGING_DIR}/' + base_name + '_%s${PROGSUFFIX}' % platform),
          env.File('${STAGING_DIR}/' + base_name + '.html'),
          env.File('${STAGING_DIR}/' + base_name + '.nmf')]

ppapi_example_events_files = [
    env.File('${STAGING_DIR}/' + ppapi_example_events_nexe_name),
    env.File('${STAGING_DIR}/ppapi_example_events.html'),
    env.File('${STAGING_DIR}/ppapi_example_events.nmf')]
ppapi_geturl_files = CreateDefaultDeps('ppapi_geturl') + [
    env.File('${STAGING_DIR}/ppapi_geturl_success.html')]
ppapi_example_2d_files = CreateDefaultDeps('ppapi_example_2d')
ppapi_example_audio_files = CreateDefaultDeps('ppapi_example_audio')
# TODO(dspringer): Re-enable this once the 3D ABI has stabilized.  See
# http://code.google.com/p/nativeclient/issues/detail?id=2060
# ppapi_example_gles2_files = CreateDefaultDeps('ppapi_example_gles2')
ppapi_example_post_message_files = CreateDefaultDeps(
    'ppapi_example_post_message')
# TODO(dspringer): Re-enable this once the 3D ABI has stabilized. See
# http://code.google.com/p/nativeclient/issues/detail?id=2060
# ppapi_gles_book_hello_triangle_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_hello_triangle'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_hello_triangle.nmf')]
# ppapi_gles_book_mip_map_2d_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_mip_map_2d'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_mip_map_2d.nmf')]
# ppapi_gles_book_simple_texture_2d_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_2d'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_2d.nmf')]
# ppapi_gles_book_simple_texture_cubemap_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_cubemap'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_cubemap.nmf')]
# ppapi_gles_book_simple_vertex_shader_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_vertex_shader'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_simple_vertex_shader.nmf')]
# ppapi_gles_book_stencil_test_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_stencil_test'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_stencil_test.nmf')]
# ppapi_gles_book_texture_wrap_files = [
#     env.File('${STAGING_DIR}/ppapi_gles_book.html'),
#     env.File('${STAGING_DIR}/ppapi_gles_book_texture_wrap'
#              '_%s.nexe' % platform),
#     env.File('${STAGING_DIR}/ppapi_gles_book_texture_wrap.nmf')]
ppapi_ppb_core_files = CreateDefaultDeps('ppapi_ppb_core')
ppapi_ppb_file_system_files = CreateDefaultDeps('ppapi_ppb_file_system') + [
    env.File('${STAGING_DIR}/ppapi_ppb_file_system.js')]
ppapi_ppb_graphics2d_files = CreateDefaultDeps('ppapi_ppb_graphics2d')
ppapi_ppb_image_data_files = CreateDefaultDeps('ppapi_ppb_image_data')
ppapi_progress_events_files = CreateDefaultDeps('ppapi_progress_events') + [
    env.File('${STAGING_DIR}/ppapi_progress_events.js')]
ppapi_test_example_files = CreateDefaultDeps('ppapi_test_example')

# sanity.py
node = env.PyAutoTester('pyauto_sanity.out', env.File('sanity.py'))
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_sanity_test',
                       is_broken=env.PyAutoTesterIsBroken())

core_test_files = [env.File('${STAGING_DIR}/nacltest.js'),
                   ppapi_example_events_files +
                   ppapi_example_2d_files +
                   ppapi_example_audio_files +
                   # TODO(dspringer): Re-enable this once the 3D ABI has
                   # stabilized.  See
                   # http://code.google.com/p/nativeclient/issues/detail?id=2060
                   # ppapi_example_gles2_files +
                   ppapi_example_post_message_files +
                   ppapi_geturl_files +
                   # TODO(dspringer): Re-enable these once the 3D ABI has
                   # stabilized.  See
                   # http://code.google.com/p/nativeclient/issues/detail?id=2060
                   # ppapi_gles_book_hello_triangle_files +
                   # ppapi_gles_book_mip_map_2d_files +
                   # ppapi_gles_book_simple_texture_2d_files +
                   # ppapi_gles_book_simple_texture_cubemap_files +
                   # ppapi_gles_book_simple_vertex_shader_files +
                   # ppapi_gles_book_stencil_test_files +
                   # ppapi_gles_book_texture_wrap_files +
                   ppapi_ppb_core_files +
                   ppapi_ppb_file_system_files +
                   ppapi_ppb_graphics2d_files +
                   ppapi_ppb_image_data_files +
                   ppapi_progress_events_files]

# surfaway.py
node = env.PyAutoTester(
    'pyauto_surfaway.out',
    env.File('surfaway.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_surfaway_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken())

# surfaway_async.py
node = env.PyAutoTester(
    'pyauto_surfaway_async.out',
    env.File('surfaway_async.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_surfaway_async_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken() or
                                 env.PyAutoTesterSurfawayAsyncIsBroken())

# reload.py
node = env.PyAutoTester(
    'pyauto_reload.out',
    env.File('reload.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_reload_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken() or
                                 ('TRUSTED_ENV' in env and
                                  env['TRUSTED_ENV'].Bit('windows') and
                                  env.Bit('target_x86_32')))

# multiple_nexes.py
node = env.PyAutoTester(
    'pyauto_multiple_nexes.out',
    env.File('multiple_nexes.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_multiple_nexes_test',
                       is_flaky=True,
                       is_broken=env.PyAutoTesterIsBroken())

uma_test_files = [
    env.File('${STAGING_DIR}/nacltest.js'),
    env.File('${STAGING_DIR}/ppapi_progress_events.js'),
    # Validator failure
    env.File('${STAGING_DIR}/ppapi_bad_native.html'),
    env.File('${STAGING_DIR}/partly_invalid${PROGSUFFIX}'),
    env.File('${STAGING_DIR}/partly_invalid.nmf'),
    # Crash
    env.File('${STAGING_DIR}/ppapi_crash.html'),
    env.File('${STAGING_DIR}/ppapi_crash_ppapi_off_main_thread.nmf'),
    env.File('${STAGING_DIR}/ppapi_crash_ppapi_off_main_thread_%s${PROGSUFFIX}' % platform),
    env.File('${STAGING_DIR}/ppapi_crash_off_main_thread.nmf'),
    env.File('${STAGING_DIR}/ppapi_crash_off_main_thread_%s${PROGSUFFIX}' % platform),
    env.File('${STAGING_DIR}/ppapi_crash_via_check_failure_%s${PROGSUFFIX}' % platform),
    env.File('${STAGING_DIR}/ppapi_crash_via_check_failure.nmf'),
    env.File('${STAGING_DIR}/ppapi_crash_via_exit_call_%s${PROGSUFFIX}' % platform),
    env.File('${STAGING_DIR}/ppapi_crash_via_exit_call.nmf'),
    env.File('${STAGING_DIR}/ppapi_crash_in_callback_%s${PROGSUFFIX}'
             % platform),
    env.File('${STAGING_DIR}/ppapi_crash_in_callback.nmf'),
    ] + CreateDefaultDeps('ppapi_ppb_core')


# nacl_uma.py
node = env.PyAutoTester(
    'nacl_uma.out',
    env.File('nacl_uma.py'),
    files=uma_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
# Can't test validation errors (partly_broken) in PNaCl.
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_nacl_uma_test',
                       is_broken=env.PyAutoTesterIsBroken() or
                                 env.Bit('bitcode'))
