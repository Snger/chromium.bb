# -*- python -*-
# Copyright 2011 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

platform = env.get('TARGET_FULLARCH')
cat_nexe_name = 'cat_%s${PROGSUFFIX}' % platform
ppapi_basic_object_nexe_name = 'ppapi_basic_object_%s${PROGSUFFIX}' % platform
ppapi_example_events_nexe_name = 'ppapi_example_events_%s${PROGSUFFIX}' % platform
ppapi_user_main_nexe_name = 'ppapi_user_main_%s${PROGSUFFIX}' % platform
srpc_test_nexe_name = 'srpc_test_%s${PROGSUFFIX}' % platform
srpc_hw_nexe_name = 'srpc_hw_%s${PROGSUFFIX}' % platform
srpc_nrd_client_nexe_name = 'srpc_nrd_client_%s${PROGSUFFIX}' % platform
srpc_nrd_server_nexe_name = 'srpc_nrd_server_%s${PROGSUFFIX}' % platform

def CreateDefaultDeps(base_name):
  return [env.File('${STAGING_DIR}/' + base_name + '_%s${PROGSUFFIX}' % platform),
          env.File('${STAGING_DIR}/' + base_name + '.html'),
          env.File('${STAGING_DIR}/' + base_name + '.nmf')]

basic_object_files = [
    env.File('${STAGING_DIR}/' + ppapi_basic_object_nexe_name),
    env.File('${STAGING_DIR}/basic_object.html'),
    env.File('${STAGING_DIR}/basic_object.nmf'),
    env.File('${STAGING_DIR}/' + ppapi_user_main_nexe_name),
    env.File('${STAGING_DIR}/user_main.nmf')]
earth_c_files = CreateDefaultDeps('earth_c')
earth_cc_files = CreateDefaultDeps('earth_cc')
ppapi_example_events_files = [
    env.File('${STAGING_DIR}/' + ppapi_example_events_nexe_name),
    env.File('${STAGING_DIR}/ppapi_example_events.html'),
    env.File('${STAGING_DIR}/ppapi_example_events.nmf')]
ppapi_geturl_files = CreateDefaultDeps('ppapi_geturl') + [
    env.File('${STAGING_DIR}/ppapi_geturl_success.html')]
ppapi_example_2d_files = CreateDefaultDeps('ppapi_example_2d')
ppapi_example_audio_files = CreateDefaultDeps('ppapi_example_audio')
ppapi_example_font_files = CreateDefaultDeps('ppapi_example_font')
ppapi_example_gles2_files = CreateDefaultDeps('ppapi_example_gles2')
ppapi_example_post_message_files = CreateDefaultDeps(
    'ppapi_example_post_message')
ppapi_gles_book_hello_triangle_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_hello_triangle'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_hello_triangle.nmf')]
ppapi_gles_book_mip_map_2d_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_mip_map_2d'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_mip_map_2d.nmf')]
ppapi_gles_book_simple_texture_2d_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_2d'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_2d.nmf')]
ppapi_gles_book_simple_texture_cubemap_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_cubemap'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_simple_texture_cubemap.nmf')]
ppapi_gles_book_simple_vertex_shader_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_simple_vertex_shader'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_simple_vertex_shader.nmf')]
ppapi_gles_book_stencil_test_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_stencil_test'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_stencil_test.nmf')]
ppapi_gles_book_texture_wrap_files = [
    env.File('${STAGING_DIR}/ppapi_gles_book.html'),
    env.File('${STAGING_DIR}/ppapi_gles_book_texture_wrap'
             '_%s.nexe' % platform),
    env.File('${STAGING_DIR}/ppapi_gles_book_texture_wrap.nmf')]
ppapi_ppb_core_files = CreateDefaultDeps('ppapi_ppb_core')
ppapi_ppb_file_system_files = CreateDefaultDeps('ppapi_ppb_file_system')
ppapi_ppb_graphics2d_files = CreateDefaultDeps('ppapi_ppb_graphics2d')
ppapi_progress_events_files = CreateDefaultDeps('ppapi_progress_events') + [
    env.File('${STAGING_DIR}/ppapi_progress_events.js')]
ppapi_test_example_files = CreateDefaultDeps('ppapi_test_example')
ppapi_tests_files = [
    env.File('${STAGING_DIR}/ppapi_tests_%s${PROGSUFFIX}' % platform),
    env.Dir('${STAGING_DIR}/test_url_loader_data/'),
    env.File('${STAGING_DIR}/test_case.html'),
    env.File('${STAGING_DIR}/test_case.nmf'),
    env.File('${STAGING_DIR}/test_page.css')]
srpc_basic_files = [
    env.File('${STAGING_DIR}/' + srpc_test_nexe_name),
    env.File('${STAGING_DIR}/srpc_basic.html'),
    env.File('${STAGING_DIR}/srpc_test.nmf')]
srpc_nrd_xfer_files = [
    env.File('${STAGING_DIR}/' + srpc_nrd_client_nexe_name),
    env.File('${STAGING_DIR}/srpc_nrd_client.nmf'),
    env.File('${STAGING_DIR}/' + srpc_nrd_server_nexe_name),
    env.File('${STAGING_DIR}/srpc_nrd_server.nmf'),
    env.File('${STAGING_DIR}/srpc_nrd_xfer.html')]
srpc_hw_files = CreateDefaultDeps('srpc_hw');
srpc_url_as_nacl_desc_files = [
    env.File('${STAGING_DIR}/' + cat_nexe_name),
    env.File('${STAGING_DIR}/cat.nmf'),
    env.File('${STAGING_DIR}/srpc_url_as_nacl_desc.html')]

# sanity.py
node = env.PyAutoTester('pyauto_sanity.out', env.File('sanity.py'))
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_sanity_test',
                       is_broken=env.PyAutoTesterIsBroken())

core_test_files = [env.File('${STAGING_DIR}/nacltest.js'),
                   basic_object_files +
                   earth_c_files +
                   earth_cc_files +
                   ppapi_example_events_files +
                   ppapi_example_2d_files +
                   ppapi_example_audio_files +
                   ppapi_example_font_files +
                   ppapi_example_gles2_files +
                   ppapi_example_post_message_files +
                   ppapi_geturl_files +
                   ppapi_gles_book_hello_triangle_files +
                   ppapi_gles_book_mip_map_2d_files +
                   ppapi_gles_book_simple_texture_2d_files +
                   ppapi_gles_book_simple_texture_cubemap_files +
                   ppapi_gles_book_simple_vertex_shader_files +
                   ppapi_gles_book_stencil_test_files +
                   ppapi_gles_book_texture_wrap_files +
                   ppapi_ppb_core_files +
                   ppapi_ppb_file_system_files +
                   ppapi_ppb_graphics2d_files +
                   ppapi_progress_events_files +
                   ppapi_tests_files +
                   srpc_basic_files +
                   srpc_hw_files +
                   srpc_nrd_xfer_files +
                   srpc_url_as_nacl_desc_files]

# surfaway.py
node = env.PyAutoTester(
    'pyauto_surfaway.out',
    env.File('surfaway.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_surfaway_test',
                       is_broken=env.PyAutoTesterIsBroken())

# surfaway_async.py
node = env.PyAutoTester(
    'pyauto_surfaway_async.out',
    env.File('surfaway_async.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_surfaway_async_test',
                       is_broken=env.PyAutoTesterIsBroken() or
                                 env.PyAutoTesterSurfawayAsyncIsBroken())

# reload.py
node = env.PyAutoTester(
    'pyauto_reload.out',
    env.File('reload.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_reload_test',
                       is_broken=env.PyAutoTesterIsBroken())

# multiple_nexes.py
node = env.PyAutoTester(
    'pyauto_multiple_nexes.out',
    env.File('multiple_nexes.py'),
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_pyauto_multiple_nexes_test',
                       is_broken=env.PyAutoTesterIsBroken())

uma_test_files = [
    env.File('${STAGING_DIR}/ppapi_bad_bative.html'),
    env.File('${STAGING_DIR}/partly_broken.nexe'),
    env.File('${STAGING_DIR}/partly_broken.nmf'),
    ] + CreateDefaultDeps('ppapi_ppb_core')


# nacl_uma.py
node = env.PyAutoTester(
    'nacl_uma.out',
    env.File('nacl_uma.py'),
    # TODO(ncbray): depend on fewer files.
    files=core_test_files,
    extra_chrome_flags=['--enable-pepper-testing'])
# Can't test validation errors (partly_broken) in PNaCl.
env.AddNodeToTestSuite(node,
                       ['pyauto_tests'],
                       'run_nacl_uma_test',
                       is_broken=env.PyAutoTesterIsBroken() or
                                 env.Bit('bitcode'))
