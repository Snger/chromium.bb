# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Directory variables:
# prefix - common prefix for installation directories. Can be empty.
# srcdir - directory for sources being compiled.
# (see http://www.gnu.org/prep/standards/html_node/Directory-Variables.html)

ifndef srcdir
$(error srcdir: Undefined)
endif

ifndef target
$(error target: Undefined)
endif

ifndef DEFAULT_ALIGN_BYTES
$(error DEFAULT_ALIGN_BYTES: Undefined)
endif
ifndef DEFAULT_ALIGN_POW2
$(error DEFAULT_ALIGN_POW2: Undefined)
endif

# Disable configure's check of ppl and cloog on systems, where the packages are
# installed, this would make the libs enabled in GCC.  The configure check looks
# for only a specific version of a library, but we would like to use more than
# one.  See: http://code.google.com/p/nativeclient/issues/detail?id=1734
DISABLE_PPL_CHECK=\
    $(shell test -f /usr/include/ppl.hh && echo --disable-ppl-version-check)
DISABLE_CLOOG_CHECK=\
    $(shell test -d /usr/include/cloog $$ echo --disable-cloog-version-check)

GCC_CONFIGURE_FLAGS = \
    --disable-decimal-float \
    --disable-libgomp \
    --disable-libmudflap \
    --disable-libssp \
    --disable-libstdcxx-pch \
    --prefix=$(prefix) \
    --target=$(target) \
    $(DISABLE_PPL_CHECK) \
    $(DISABLE_CLOOG_CHECK)

# At the moment multilib build with glibc is broken.
# TODO(eaeltsin): fix glibc and get rid of MULTILIB variable!
ifdef MULTILIB
ifeq ($(MULTILIB),no)
GCC_CONFIGURE_FLAGS += --disable-multilib
else
$(error MULTILIB: Bad value)
endif
endif

HOST_TOOLCHAIN_BITS?=32

GCC_CC = gcc -m$(HOST_TOOLCHAIN_BITS)

GCC_CFLAGS = -O2

GCC_DEFINES = \
    -Dinhibit_libc \
    -D__gthr_posix_h \
    -DNACL_ALIGN_BYTES=$(DEFAULT_ALIGN_BYTES) \
    -DNACL_ALIGN_POW2=$(DEFAULT_ALIGN_POW2)

GCC_LDFLAGS =

# In the use of these, $* is nolibc, newlib, or glibc.
GCC_CONFIGURE_FLAGS += $(GCC_CONFIGURE_FLAGS-$*)
GCC_CFLAGS_FOR_TARGET = -O2 -g $(GCC_CFLAGS_FOR_TARGET-$*)

GCC_CONFIGURE_VARS = \
    CC="$(GCC_CC)" \
    CFLAGS="$(GCC_CFLAGS) $(GCC_DEFINES)" \
    LDFLAGS="$(GCC_LDFLAGS)" \
    CFLAGS_FOR_TARGET="$(GCC_CFLAGS_FOR_TARGET)" \
    CXXFLAGS_FOR_TARGET="$(GCC_CFLAGS_FOR_TARGET)"

GCC_CFLAGS_FOR_TARGET-nolibc =
GCC_CONFIGURE_FLAGS-nolibc = --disable-shared \
			     --disable-threads \
			     --enable-languages="c" \
			     --without-headers

# The newlib-based build of the GCC target libraries (libstdc++ et al)
# gets used in irt.nexe, which must not use direct register access for
# TLS.  src/untrusted/irt/nacl.scons:run_irt_tls_test ensures that no
# such accesses leaked into that binary.  The pregcc build does not
# produce target libraries that are linked into anything, and the glibc
# build is not used for building irt.nexe, so they do not need this option.
GCC_CFLAGS_FOR_TARGET-newlib = -mtls-use-call
GCC_CONFIGURE_FLAGS-newlib = --disable-shared \
			     --enable-languages="c,c++,objc" \
			     --enable-threads=nacl \
			     --enable-tls \
			     --with-newlib

GCC_CFLAGS_FOR_TARGET-glibc =
GCC_CONFIGURE_FLAGS-glibc = --enable-shared \
			    --enable-languages="c,c++,objc,obj-c++,fortran" \
			    --enable-threads=posix \
			    --enable-tls

gcc-variants := nolibc newlib glibc
all-gcc-configures = $(gcc-variants:%=configure-gcc-with-%)
.PHONY: $(all-gcc-configures)
$(all-gcc-configures): configure-gcc-with-%:
	$(srcdir)/configure \
	    $(GCC_CONFIGURE_VARS) \
	    $(GCC_CONFIGURE_FLAGS)
