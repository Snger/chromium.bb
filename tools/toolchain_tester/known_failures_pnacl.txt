# NOTE:
# progress on eliminating failures here should be recorded via
# http://code.google.com/p/nativeclient/issues/detail?id=2204
# ======================================================================
# failures in phase sel_ldr
# ======================================================================
# signed/unsigned mixup
20080506-1.c
# modulo operation with negative numbers
pr34070-1.c
# signed/unsigned mixup
pr34070-2.c
# select function via ternary operator - looks like a complete miscompile
pr34971.c
# signed/unsigned mixup
pr35163.c
# div weirdness
pr36077.c
# bitfield magic
pr40404.c
# alignment issues using __alignof__
alloca-1.c
# setjmp/longjmp TODO
built-in-setjmp.c
# preprocessor push/pop_macro feature
pushpop_macro.c
# simd style vectors (broken for x8632)
simd-2.c
# ======================================================================
# failures in phase translate-x8632
# ======================================================================
# llvm does not know that "fabs(x) >= 0"
20020720-1.c
# hangs compiler
pr20621-1.c
# undef signal
fp-cmp-1.c
# undef signal
fp-cmp-2.c
# undef signal
fp-cmp-3.c
# undef signbit
20080502-1.c
# undef signbit
pr35456.c
# undef isinfl
pr39228.c
# undef signal
20101011-1.c
# undef __builtin_va_arg_pack
va-arg-pack-1.c
# prefetch broken on ARM
builtin-prefetch-2.c
# vector broken on ARM
simd-6.c
# ======================================================================
# failures in phase compile-bc
# ======================================================================
# complex va_arg - frontend assert
20020412-1.c
# compiler hangs  (uses unsupported vectors)
pr23135.c
# uses __builtin_return_address (internal compiler error x86-64)
20010122-1.c
# uses __builtin_return_address (internal compiler error x86-64)
20030323-1.c
# ======================================================================
# additional failures at -O3
# ======================================================================
# uses "&&" extension
20071210-1.c
# uses  __builtin_constant_p
bcp-1.c
# uses __builtin_constant_p
builtin-constant.c
# select function via ? - looks like a complete miscompile
pr34768-2.c
# int overflow
pr45262.c
# llvm does not know how to evaluate "(x<y) && (x>y)" and "(x==y) && (x!=y)"
compare-fp-3.c
# requires -fwrapv
# pr22493-1.c
# requires -fwrapv
# pr33779-2.c
# ======================================================================
# wont fixes - misc reasons
# ======================================================================
# llvm properly diagnoses the issue and warns that the program will
# abort when code is reached
call-trap-1.c
va-arg-trap-1.c
pr34768-1.c
# long long with bitfields (this is rather idiosyncratic behavior and probably a wont fix)

# ======================================================================
# wont fixes - nested functions
# ======================================================================
# nested function
nest-align-1.c
# nested function
nest-stdar-1.c
# nested function
nestfunc-7.c
# nested function
pr22061-3.c
# nested function
pr22061-4.c
# nested function
20010209-1.c
# nested function
20010605-1.c
# nested function
20090219-1.c
# nested function
920612-2.c
# nested function
921017-1.c
# nested function
20030501-1.c
# nested function
20040520-1.c
# ======================================================================
# wont fixes - asm
# ======================================================================
# asm
pr41239.c
# asm
pr43385.c
# asm
pr43560.c
# asm
pr44852.c
# asm
pr45695.c
# asm
pr47925.c
# asm
pr49218.c
# asm
pr49390.c
# asm
memcpy-chk.c
# asm
memmove-chk.c
# asm
mempcpy-chk.c
# asm
strcat-chk.c
# asm
strncat-chk.c
# asm
20001009-2.c
# asm
20020107-1.c
# asm
20050203-1.c
# asm
20061031-1.c
# asm
20061220-1.c
# ??? TODO
20070919-1.c
# asm
20071211-1.c
# asm
20071220-2.c
# asm
20080122-1.c
# asm
960312-1.c
# asm
990130-1.c
# asm
pr38533.c
# asm
pr40022.c
# asm
20030222-1.c
# asm
990413-2.c
# asm
20071220-1.c
# asm
bitfld-5.c
# ======================================================================
# wont fixes - complex va_arg (e.g. structs passed as va_args)
# ======================================================================
# complex va_arg
920625-1.c
# complex va_arg
920908-1.c
# complex va_arg
931004-10.c
# complex va_arg
931004-12.c
# complex va_arg
931004-14.c
# complex va_arg
931004-2.c
# complex va_arg
931004-4.c
# complex va_arg
931004-6.c
# complex va_arg
931004-8.c
# complex va_arg
pr38151.c
# complex va_arg
stdarg-3.c
# complex va_arg
strct-stdarg-1.c
# complex va_arg
strct-varg-1.c
# complex va_arg
va-arg-22.c
# complex va_arg
pr44575.c
