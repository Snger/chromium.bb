$$ This is a pump file for generating file templates.  Pump is a python
$$ script that is part of the Google Test suite of utilities.  Description
$$ can be found here:
$$
$$ http://code.google.com/p/googletest/wiki/PumpManual
$$

#ifndef GIN_FUNCTION_TEMPLATE_H_
#define GIN_FUNCTION_TEMPLATE_H_

$var MAX_ARITY = 4

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/callback.h"
#include "base/logging.h"
#include "gin/arguments.h"
#include "gin/converter.h"
#include "gin/handle.h"
#include "gin/public/gin_embedders.h"
#include "gin/public/wrapper_info.h"
#include "gin/wrappable.h"

#include "v8/include/v8.h"

namespace gin {

class PerIsolateData;

namespace internal {

template<typename T>
struct RemoveConstRef {
  typedef T Type;
};
template<typename T>
struct RemoveConstRef<const T&> {
  typedef T Type;
};


// CallbackHolder and CallbackHolderBase are used to pass a base::Callback from
// CreateFunctionTemplate through v8 (via v8::FunctionTemplate) to 
// DispatchToCallback, where it is invoked.
//
// v8::FunctionTemplate only supports passing void* as data so how do we know
// when to delete the base::Callback? That's where CallbackHolderBase comes in.
// It inherits from Wrappable, which delete itself when both (a) the refcount
// via base::RefCounted has dropped to zero, and (b) there are no more
// JavaScript references in V8.
class CallbackHolderBase : public Wrappable {
 public:
  virtual WrapperInfo* GetWrapperInfo() OVERRIDE;
  static WrapperInfo kWrapperInfo;
 protected:
  virtual ~CallbackHolderBase() {}
};

template<typename Sig>
class CallbackHolder : public CallbackHolderBase {
 public:
  CallbackHolder(const base::Callback<Sig>& callback)
      : callback(callback) {}
  base::Callback<Sig> callback;
 private:
  virtual ~CallbackHolder() {}
};


// This set of templates invokes a base::Callback, converts the return type to a
// JavaScript value, and returns that value to script via the provided
// gin::Arguments object.
//
// In C++, you can declare the function foo(void), but you can't pass a void
// expression to foo. As a result, we must specialize the case of Callbacks that
// have the void return type.

$range ARITY 0..MAX_ARITY
$for ARITY [[
$var INV_ARITY = MAX_ARITY - ARITY
$range ARG 1..INV_ARITY
$range VOID INV_ARITY+1..MAX_ARITY

$if ARITY == 0 [[
template<typename R$for ARG [[, typename P$(ARG) = void]]>
struct Invoker {
]] $else [[
template<typename R$for ARG [[, typename P$(ARG)]]>
struct Invoker<R$for ARG [[, P$(ARG)]]$for VOID [[, void]]> {
]]

  inline static void Go(
      Arguments* args,
      const base::Callback<R($for ARG , [[P$(ARG)]])>& callback$for ARG [[, 
      const P$(ARG)& a$(ARG)]]) {
    args->Return(callback.Run($for ARG, [[a$(ARG)]]));
  }
};
template<$for ARG , [[typename P$(ARG)]]>
struct Invoker<void$for ARG [[, P$(ARG)]]$for VOID [[, void]]> {
  inline static void Go(
      Arguments* args,
      const base::Callback<void($for ARG , [[P$(ARG)]])>& callback$for ARG [[,
      const P$(ARG)& a$(ARG)]]) {
    callback.Run($for ARG, [[a$(ARG)]]);
  }
};


]]

// DispatchToCallback converts all the JavaScript arguments to C++ types and
// invokes the base::Callback.
$range ARITY 0..MAX_ARITY
$for ARITY [[
$range ARG 1..ARITY

template<typename R$for ARG [[, typename P$(ARG)]]>
static void DispatchToCallback(
    const v8::FunctionCallbackInfo<v8::Value>& info) {
  Arguments args(info);
  CallbackHolderBase* holder_base = NULL;
  CHECK(args.GetData(&holder_base));

  typedef CallbackHolder<R($for ARG , [[P$(ARG)]])> HolderT;
  HolderT* holder = static_cast<HolderT*>(holder_base);

$if ARITY != 0 [[


$for ARG [[  typename RemoveConstRef<P$(ARG)>::Type a$(ARG);

]]
  if (
$for ARG  ||
      [[!args.GetNext(&a$(ARG))]]) {
    args.ThrowError();
    return;
  }

]]

  Invoker<R$for ARG [[, P$(ARG)]]>::Go(&args, holder->callback$for ARG [[, a$(ARG)]]);
}

]]

}  // namespace internal


// This should be called once per-isolate to initialize the function template
// system.
void InitFunctionTemplates(PerIsolateData* isolate_data);


// This has to be outside the internal namespace because template
// specializations must be declared in the same namespace as the original
// template.
template<>
struct Converter<internal::CallbackHolderBase*>
    : public WrappableConverter<internal::CallbackHolderBase> {};


// Creates a v8::FunctionTemplate that will run the provided base::Callback each
// time it is called. JavaScript arguments and return values are converted via
// gin::Converter.
$range ARITY 0..MAX_ARITY
$for ARITY [[
$range ARG 1..ARITY

template<typename R$for ARG [[, typename P$(ARG)]]>
v8::Local<v8::FunctionTemplate> CreateFunctionTemplate(
    v8::Isolate* isolate,
    const base::Callback<R($for ARG , [[P$(ARG)]])> callback) {
  typedef internal::CallbackHolder<R($for ARG , [[P$(ARG)]])> HolderT;
  gin::Handle<HolderT> holder = CreateHandle(isolate, new HolderT(callback));
  return v8::FunctionTemplate::New(
      isolate,
      &internal::DispatchToCallback<R$for ARG [[, P$(ARG)]]>,
      ConvertToV8<internal::CallbackHolderBase*>(isolate, holder.get()));
}

]]

}  // namespace gin

#endif  // GIN_FUNCTION_TEMPLATE_H_
