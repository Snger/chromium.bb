# -*- python -*-
# Copyright 2009 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


Import('env')

# TODO(robertm): consider adding this to the top level scons files
env.Append(CPPPATH=['${TARGET_ROOT}'])
# this is needed for including gen/... files, see GENERATED below

# normally comment out -- uncomment out to test the pedantic removal
# check below.
#if env.Bit('linux') or env.Bit('mac'):
#  env.FilterOut(CCFLAGS=['-pedantic'])
#  env.FilterOut(CCFLAGS=['-Wall'])


if env['TARGET_ARCHITECTURE'] == 'x86':
  env.Append(
      LIBS = ['ncvalidate',],
  )
  if env.Bit('linux'):
    env.Append(
        LIBS = ['dl',],
    )

if env['TARGET_ARCHITECTURE'] == 'arm':
  env.Append(
    LIBS = ['ncvalidate_arm_v2',
            'arm_validator_core']
  )


# Make a copy of debug CRT for now.
# TODO(bradnelson): there should be a better way to generalize this requirement.
crt = []
if env.AllBits('windows', 'debug'):
  for i in ['.', '${STAGING_DIR}']:
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/Debug_NonRedist/'
                         'x86/Microsoft.VC80.DebugCRT')
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/x86/Microsoft.VC80.CRT')



if env.Bit('windows'):
  syscall_impl = 'win/nacl_syscall_impl.c'
else:
  syscall_impl = 'linux/nacl_syscall_impl.c'

# TODO GENERATED CODE
GENERATED='${TARGET_ROOT}/gen/native_client/src/trusted/service_runtime'
env.Command(target=env.File(GENERATED + '/nacl_syscall_handlers.c'),
            source=[syscall_impl, 'nacl_syscall_handlers_gen2.py'],
            action=[Action('${PYTHON} ${SOURCES[1]} ${SYSCALL_GEN_FLAGS}'
                           ' -i ${SOURCE} -o ${TARGET}'),
                    ],
            )


if env['BUILD_ARCHITECTURE'] == 'x86':
  modules_env = env.Clone()
  if not env.Bit('windows'):
    modules_env.FilterOut(ASFLAGS=['-m64'])
    modules_env.FilterOut(CCFLAGS=['-m64'])
    modules_env.FilterOut(LINKFLAGS = ['-m64', '-L/usr/lib64'])
    modules_env.Prepend(ASFLAGS = ['-m32', ],
                        CCFLAGS = ['-m32', ],
                        LINKFLAGS = ['-m32', '-L/usr/lib32'])

  # TODO(tuduce): If two .c files will both need to look at the
  # tramp/springboard code array, generate .c data files instead of .h
  ARCH_X86 = GENERATED + '/arch/x86'

  tramp_gen_obj = modules_env.ComponentObject('arch/x86_32/tramp.S')
  tramp_gen_exe = modules_env.ComponentProgram(
      'tramp_gen',
      ['arch/x86_32/tramp_gen.c',
       tramp_gen_obj],
      LIBS=[])
  tramp_data_header = [ ARCH_X86 + '/tramp_data.h' ]

  springboard_gen_obj = modules_env.ComponentObject('arch/x86_32/springboard.S')
  springboard_gen_exe = modules_env.ComponentProgram(
      'springboard_gen',
      ['arch/x86_32/springboard_gen.c',
       springboard_gen_obj],
      LIBS=[])
  springboard_data_header = [ ARCH_X86 + '/springboard_data.h' ]

  modules_env.Command(target=modules_env.File(tramp_data_header),
                      source=tramp_gen_exe,
                      action=['echo HEADER GENERATION: %s' %
                              str(tramp_data_header),
                              '${SOURCE} > ${TARGET}'])

  modules_env.Command(target=modules_env.File(springboard_data_header),
                      source=springboard_gen_exe,
                      action=['echo HEADER GENERATION: %s' %
                              str(springboard_data_header),
                              '${SOURCE} > ${TARGET}'])

# ----------------------------------------------------------
# TODO(robertm): this library is too big and needs to be split up
#                for easier unit testing
ldr_inputs = [
    'dyn_array.c',
    'env_cleanser.c',
    'nacl_all_modules.c',
    'nacl_app_thread.c',
    'nacl_bottom_half.c',
    'nacl_check.c',
    'nacl_closure.c',
    'nacl_globals.c',
    'nacl_memory_object.c',
    'nacl_sync_queue.c',
    'nacl_syscall_common.c',
    GENERATED + '/nacl_syscall_handlers.c',
    'nacl_syscall_hook.c',
    'nacl_text.c',
    'sel_addrspace.c',
    'sel_ldr.c',
    'sel_ldr-inl.c',
    'sel_ldr_standard.c',
    'sel_mem.c',
    'sel_util.c',
    'sel_util-inl.c',
    'web_worker_stub.c',
    'elf_util.c',
]

if env['BUILD_ARCHITECTURE'] == 'x86':
  ldr_inputs += [
      'arch/x86/nacl_app.c',
      'arch/x86/nacl_ldt_x86.c',
      'arch/x86/nacl_switch_to_app.c',
      'arch/x86/sel_rt.c',
      'arch/x86/nacl_tls.c',
      'arch/x86/sel_ldr_x86.c',
      'arch/x86/sel_addrspace_x86.c',
      'arch/x86/sel_validate_image.c',
      ]
  if env['BUILD_SUBARCH'] == '32':
    ldr_inputs += [
        'arch/x86_32/nacl_switch.S',
        'arch/x86_32/nacl_syscall.S',
        'arch/x86_32/sel_rt_32.c',
        ]
  elif env['BUILD_SUBARCH'] == '64':
    ldr_inputs += [
        'arch/x86_64/nacl_switch.S',
        'arch/x86_64/nacl_syscall.S',
        'arch/x86_64/sel_rt_64.c',
        ]
elif env['BUILD_ARCHITECTURE'] == 'arm':
  ldr_inputs += [
    'arch/arm/nacl_app.c',
    'arch/arm/nacl_switch_to_app.c',
    'arch/arm/sel_rt.c',
    'arch/arm/nacl_tls.c',
    'arch/arm/sel_ldr_arm.c',
    'arch/arm/sel_addrspace_arm.c',
    'arch/arm/sel_validate_image.c',
    'arch/arm/nacl_switch.S',
    'arch/arm/nacl_syscall.S',
    'arch/arm/springboard.S',
    'arch/arm/tramp.S',
    'arch/arm/nacl_tls_tramp.S',
  ]

if env.Bit('windows'):
  ldr_inputs += [
    'win/nacl_ldt.c',
    'win/sel_memory.c',
    'win/sel_segments.c',
    'win/nacl_thread_nice.c',
  ]
elif env.Bit('mac'):
  ldr_inputs += [
    'osx/nacl_ldt.c',
    'linux/sel_memory.c',
    'linux/x86/sel_segments.c',
    'osx/nacl_thread_nice.c',
  ]
elif env.Bit('linux'):
  ldr_inputs += [
    'linux/sel_memory.c',
    'linux/nacl_thread_nice.c',
  ]
  if env['BUILD_ARCHITECTURE'] == 'x86':
    ldr_inputs += [
      'linux/x86/nacl_ldt.c',
      'linux/x86/sel_segments.c',
    ]
  elif env['BUILD_ARCHITECTURE'] == 'arm':
    ldr_inputs += [
      'linux/arm/sel_segments.c',
    ]

# ----------------------------------------------------------
# SDL hacks
# NOTE: there are some more sdl hacks in native_client//SConstruct
#       and native_client/site_scons/site_tools/sdl.py
# ----------------------------------------------------------
sdl_mode = ARGUMENTS.get('sdl', 'hermetic')
# Require a valid sdl mode.
if sdl_mode not in ['hermetic', 'local', 'none']:
  assert(0)

if sdl_mode == 'none':
  # NOTE: do not export multimedia syscalls unless we are using sdl
  env.Append(SYSCALL_GEN_FLAGS ='-c -f Video -f Audio -f Multimedia')
else:
  env.Append(SYSCALL_GEN_FLAGS='-c')

# Set up the sdl_env
# NOTE: we try to use sdl_env as litte as possible
if sdl_mode == 'none':
  sdl_env = env.Clone()
else:
  sdl_env = env.Clone()
  sdl_env.Append(CPPDEFINES=['HAVE_SDL'])

  sdl_env.Tool('sdl')
  print '=' * 70
  print 'SDL build (%s) enabled for %s' % (sdl_mode, sdl_env['BUILD_TYPE'])
  print sdl_env.subst('Using version in ${SDL_DIR}')
  print '=' * 70

  # TODO(robertm): this should probably go into "Tool"
  if env.Bit('windows'):
    if sdl_env.Bit('debug'):
      sdl_env.Append(LINKFLAGS = ['/SUBSYSTEM:CONSOLE'])
    else:
      sdl_env.Append(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])

  if env.Bit('mac'):
    env_sdlmain = sdl_env.Clone()
    # TODO(robertm): explain why we need to disable this warning
    env_sdlmain.FilterOut(CCFLAGS=['-Werror'])
    ldr_inputs += [
        env_sdlmain.ComponentObject(
            'SDLApplication',
            '$MAIN_DIR/common/SDLApplication.m'),
    ]

# NOTE: uses sdl_env
sdl_env.ComponentLibrary('sel',
                         ldr_inputs)


env.ComponentLibrary('container',
                     ['generic_container/container.c',
                      ])


env.ComponentLibrary('expiration',
                     ['expiration.c',
                      ])


env.ComponentLibrary('nacl_xdr',
                     ['fs/xdr.c',
                      'fs/obj_proxy.c',
                      ])

# NOTE(robertm): these extra libs were orignially only added to the
#                sel_ldr binary
# TODO(robertm): see who really needs them and remove
if env.Bit('windows'):
  env.Append(
      LIBS = [
          'ws2_32',
          'kernel32',
          'advapi32',
          'winmm',
# TODO(gregoryd): ntdll.lib is required for sem_get_value implementation but
# it is available in Windows DDK only. The DDK is not
# in third_party, but we might need to add it if we want to use it.
#          'ntdll',
      ],
  )

# TODO(bradnelson): clean this up more
sdl_dll = []
if sdl_mode != 'none':
  if env.Bit('windows'):
    sdl_dll += sdl_env.Replicate('$STAGING_DIR', '$SDL_DIR/lib/SDL.dll')
    sdl_dll += sdl_env.Replicate('.', '$SDL_DIR/lib/SDL.dll')
    sdl_env.AddPluginPrerequisite(['$SDL_DIR/lib/SDL.dll'])
  elif env.Bit('mac'):
    # TODO: why do we replicate this THREE times?
    sdl_dll += sdl_env.Replicate('$TARGET_ROOT/Frameworks',
                                 '$SDL_DIR/SDL.framework')
    sdl_dll += sdl_env.Replicate('$OBJ_ROOT/Frameworks',
                                 '$SDL_DIR/SDL.framework')
    sdl_dll += sdl_env.Replicate('$OBJ_ROOT/src/trusted/Frameworks',
                                 '$SDL_DIR/SDL.framework')
    sdl_env.AddPluginPrerequisite(['$SDL_DIR/SDL.framework'])
  elif env.Bit('linux'):
    if env['BUILD_SUBARCH'] == '32':
      sdl_dll += sdl_env.Replicate('$STAGING_DIR',
                                   '$SDL_DIR/lib/libSDL-1.2.so.0')
      sdl_dll += sdl_env.Replicate('.',
                                   '$SDL_DIR/lib/libSDL-1.2.so.0')
      sdl_env.AddPluginPrerequisite(['$SDL_DIR/lib/libSDL-1.2.so.0'])
    elif env['BUILD_SUBARCH'] == '64':
      sdl_dll += sdl_env.Replicate('$STAGING_DIR',
                                   '$SDL_DIR/lib64/libSDL-1.2.so.0')
      sdl_dll += sdl_env.Replicate('.',
                                   '$SDL_DIR/lib64/libSDL-1.2.so.0')
      # add AddPluginPrerequisite if you build a 64-bit plugin
if ((not env.get('COVERAGE_ENABLED') or not env.Bit('windows')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):


  if env['TARGET_ARCHITECTURE'] == 'x86':
    VALIDATOR_LIBS = ['ncvalidate',]
  elif env['TARGET_ARCHITECTURE'] == 'arm':
    VALIDATOR_LIBS = ['ncvalidate_arm_v2', 'arm_validator_core']
  else:
    VALIDATOR_LIBS = []

  # NOTE: uses sdl_env
  SEL_LDR_NODE = sdl_env.ComponentProgram('sel_ldr',
                                          'sel_main.c',
                                          EXTRA_LIBS=['sel',
                                                      'nonnacl_srpc',
                                                      'nrd_xfer',
                                                      'nonnacl_util_c',
                                                      'google_nacl_imc_c',
                                                      'container',
                                                      'platform',
                                                      'platform_qual_lib',
                                                      'gio',
                                                      'expiration',
                                                      ] + VALIDATOR_LIBS)
  # we need this to build the plugin, so register it here
  env.AddPluginPrerequisite(SEL_LDR_NODE[0])

  # NOTE: we need Cocoa because of some GetPluginDir() implementation
  #       on mac
  env.ComponentProgram('sel_universal',
                       'sel_universal.c',
                       EXTRA_LIBS=['nonnacl_util_c',
                                   'nonnacl_srpc',
                                   'nrd_xfer',
                                   'platform',
                                   'gio',
                                   'google_nacl_imc_c',
                                   ],
                       FRAMEWORKS=['Cocoa'],
                       )
  # NOTE: we do not have segments on ARM
  if env['BUILD_ARCHITECTURE'] == 'x86':
    env.ComponentProgram('nacl_ldt_unittest',
                         'nacl_ldt_unittest.c',
                         EXTRA_LIBS=['sel',
                                     'platform',
                                     'gio',
                                     ])
  env.Requires(SEL_LDR_NODE, crt)
  env.Requires(SEL_LDR_NODE, sdl_dll)

env.EnsureRequiredBuildWarnings()

# ----------------------------------------------------------
# Unit Tests
# ----------------------------------------------------------

# NOTE: uses sdl and validator
# TODO(robertm): break this test up in smaller pieces with more managable
#                dependencies
gtest_env = sdl_env.Clone()

# This is necessary for unittest_main.c which includes gtest/gtest.h
# The problem is that gtest.h includes other files expecting the
# include path to be set.  We do *not*, however, strip out the
# -pedantic compiler flag for building non-gtest-using source files.
gtest_env.Prepend(CPPPATH=['${SOURCE_ROOT}/testing/gtest/include'])

if gtest_env.Bit('linux') or gtest_env.Bit('mac'):
  # because of: gtest-typed-test.h:236:46: error:
  # anonymous variadic macros were introduced in C99
  gtest_env.FilterOut(CCFLAGS=['-pedantic'])

unittest_inputs = [
    'unittest_main.cc',
    'sel_memory_unittest.cc',
    'nacl_sync_unittest.cc',
    'sel_mem_test.cc',
    'sel_ldr_test.cc',
]

if env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']:
  unit_tests_exe = gtest_env.ComponentProgram('service_runtime_tests',
                                              unittest_inputs,
                                              EXTRA_LIBS=['gtest',
                                                          'sel',
                                                          'nonnacl_srpc',
                                                          'nrd_xfer',
                                                          'nonnacl_util_c',
                                                          'google_nacl_imc_c',
                                                          'platform',
                                                          'gio',
                                                          ] + VALIDATOR_LIBS)
  gtest_env.Requires(unit_tests_exe, crt)
  gtest_env.Requires(unit_tests_exe, sdl_dll)

  node = gtest_env.CommandTestAgainstGoldenOutput(
      'gtest_output.xml.out',
      command=[unit_tests_exe, '--gtest_output=xml:${TARGET}'])
  gtest_env.AddNodeToTestSuite(node, ['small_tests'],
      'run_service_runtime_tests')


# Doesn't work on windows under coverage.
# TODO(bradnelson): fix this to work on windows under coverage.
if ((not env.Bit('windows') or not env.get('COVERAGE_ENABLED')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):
  # NOTE: uses sdl and validator
  mmap_test_exe = sdl_env.ComponentProgram('mmap_test',
                                           ['mmap_test.c'],
                                           EXTRA_LIBS=['sel',
                                                       'nonnacl_srpc',
                                                       'nrd_xfer',
                                                       'nonnacl_util_c',
                                                       'google_nacl_imc_c',
                                                       'platform',
                                                       'gio',
                                                       ] + VALIDATOR_LIBS)
  sdl_env.Requires(mmap_test_exe, crt)
  sdl_env.Requires(mmap_test_exe, sdl_dll)

  if env['TARGET_ARCHITECTURE'] == 'x86':
    # TODO(robertm): This test emits lots of messages to stderr
    node = sdl_env.CommandTestAgainstGoldenOutput (
        "mmap_test.out",
        # NOTE: the "[0]" subscript make this work on windows
        # TODO: maybe move this magic into CommandTestAgainstGoldenOutput()
        command=[mmap_test_exe[0], env.File('testdata/hello_world.nexe')])
    sdl_env.AddNodeToTestSuite(node, ['medium_tests'])

  # also seems to have issues with windows coverage
  # NOTE: uses sdl and validator
  nacl_sync_cond_test_exe = sdl_env.ComponentProgram(
      'nacl_sync_cond_test',
      ['nacl_sync_cond_test.c'],
      EXTRA_LIBS=['sel',
                  'nonnacl_srpc',
                  'nrd_xfer',
                  'nonnacl_util_c',
                  'google_nacl_imc_c',
                  'platform',
                  'gio',
                  ] + VALIDATOR_LIBS)
  sdl_env.Requires(nacl_sync_cond_test_exe, crt)
  sdl_env.Requires(nacl_sync_cond_test_exe, sdl_dll)

  node = sdl_env.CommandTestAgainstGoldenOutput(
      'nacl_sync_cond_test.out',
      command=[nacl_sync_cond_test_exe])
  sdl_env.AddNodeToTestSuite(node, ['medium_tests'], 'run_nacl_sync_cond_test')


expiration_test_exe = env.ComponentProgram('expiration_test',
                                           ['expiration_test.c'],
                                           EXTRA_LIBS=['expiration'])
node = env.CommandTestAgainstGoldenOutput(
    'expiration_test.out',
    command=[expiration_test_exe])
env.Requires(expiration_test_exe, crt)
env.AddNodeToTestSuite(node, ['medium_tests'])


env_cleanser_test_exe = env.ComponentProgram('env_cleanser_test',
                                             ['env_cleanser_test.c'],
                                             EXTRA_LIBS=['sel'])
node = env.CommandTestAgainstGoldenOutput(
    'env_cleanser_test.out',
    command=[env_cleanser_test_exe])
env.Requires(env_cleanser_test_exe, crt)
env.AddNodeToTestSuite(node, ['small_tests'])


check_test_exe = env.ComponentProgram('nacl_check_test',
                                      ['nacl_check_test.c'],
                                      EXTRA_LIBS=['sel',
                                                  'platform',
                                                  'gio',
                                                  ])
node = env.CommandTestAgainstGoldenOutput(
    'check_test.out',
    command=[check_test_exe, '-C'])
env.Requires(check_test_exe, crt)
env.AddNodeToTestSuite(node, ['small_tests'])


ABORT_EXIT = '17'  # magic, see nacl_check_test.c


node = env.CommandTestAgainstGoldenOutput(
    'check_test_death.out',
    command=[check_test_exe, '-c'],
    exit_status=ABORT_EXIT)  # abort()
env.AddNodeToTestSuite(node, ['small_tests'])


if env.Bit('debug'):
  node = env.CommandTestAgainstGoldenOutput(
      'dcheck_test_death.out',
      command=[check_test_exe, '-d'],
      exit_status=ABORT_EXIT)  # abort()
else:
  node = env.CommandTestAgainstGoldenOutput(
      'dcheck_test_death.out',
      command=[check_test_exe, '-d'])  # no abort()
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTestAgainstGoldenOutput(
    'check_test_always_death.out',
    command=[check_test_exe, '-s', '0', '-C'])  # no abort
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTestAgainstGoldenOutput(
    'check_test_always_death.out',
    command=[check_test_exe, '-s', '0', '-c'],
    exit_status=ABORT_EXIT)  # abort
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTestAgainstGoldenOutput(
    'dcheck_test_never_death.out',
    command=[check_test_exe, '-s', '0', '-d'])  # no abort
env.AddNodeToTestSuite(node, ['small_tests'])


node = env.CommandTestAgainstGoldenOutput(
    'dcheck_test_always_death.out',
    command=[check_test_exe, '-s', '1', '-d'],
    exit_status=ABORT_EXIT)  # abort()
env.AddNodeToTestSuite(node, ['small_tests'])


# ----------------------------------------------------------
# Integration Tests
# ----------------------------------------------------------

# Doesn't work on windows under coverage.
# TODO(bradnelson): fix this to work on windows under coverage.
# NOTE: uses sdl and validator
if ((not env.Bit('windows') or not env.get('COVERAGE_ENABLED')) and
    env['BUILD_ARCHITECTURE'] == env['TARGET_ARCHITECTURE']):
  obj_proxy_test_inputs = [ 'fs/obj_proxy_test.c', ]
  obj_proxy_test = sdl_env.ComponentProgram('obj_proxy_test',
                                            obj_proxy_test_inputs,
                                            EXTRA_LIBS=['sel',
                                                        'nonnacl_srpc',
                                                        'nrd_xfer',
                                                        'nonnacl_util_c',
                                                        'google_nacl_imc_c',
                                                        'platform',
                                                        'gio',
                                                        'nacl_xdr',
                                                        'container',
                                                        ] + VALIDATOR_LIBS)


  node = sdl_env.CommandTestAgainstGoldenOutput(
      'obj_proxy_test.out',
      # NOTE: this is run out of obj/ rather than staging/
      [obj_proxy_test, '-n', '2048'],
      size='huge')
  # TODO(bsy): change this test to use less time -- most of it (on windows)
  # is in the RNG, so with this will inherently speed up when the RNG is
  # updated.

  sdl_env.Requires(node, sdl_dll)
  sdl_env.AddNodeToTestSuite(node, ['small_tests'], 'obj_proxy_tests')

# ----------------------------------------------------------
# Integration Tests With Canned x86 Binaries
# ----------------------------------------------------------

if env['TARGET_ARCHITECTURE'] == 'x86' and env['BUILD_SUBARCH'] == '32':
  node = env.CommandSelLdrTestNacl(
      "mandel_canned.out",
      command=[env.File('testdata/mandel.nexe')],
      stdin='$SCONSTRUCT_DIR/tests/mandel/test.stdin',
      stdout_golden='$SCONSTRUCT_DIR/tests/mandel/test.stdout')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      "fib_scalar_canned.out",
      command=[env.File('testdata/fib_scalar.nexe')],
      stdin='$SCONSTRUCT_DIR/tests/fib/fib_scalar_test.stdin',
      stdout_golden='$SCONSTRUCT_DIR/tests/fib/fib_scalar_test.stdout')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      "fib_array_canned.out",
      command=[env.File('testdata/fib_array.nexe')],
      stdin='$SCONSTRUCT_DIR/tests/fib/fib_array_test.stdin',
      stdout_golden='$SCONSTRUCT_DIR/tests/fib/fib_array_test.stdout')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      'nacl_log.out',
      command=[env.File('testdata/hello_world.nexe')],
      log_golden=env.File('testdata/hello_world.log'),
      log_filter='"^(Hello, World!)$|^\[[0-9,:.]*\] (e_ident\+1 = ELF)$"')
  env.AddNodeToTestSuite(node, ['medium_tests'])

# ----------------------------------------------------------
# Death Tests With Canned x86 Binaries
# ----------------------------------------------------------
ERROR_WHILE_LOADING = '"^(Error while loading).*' +  '(:[^:]*)"'


if env['TARGET_ARCHITECTURE'] == 'x86' and env['BUILD_SUBARCH'] == '32':
  node = env.CommandSelLdrTestNacl(
      'integer_overflow_while_madvising.out',
      command=[env.File('testdata/integer_overflow_while_madvising.nexe')],
      stderr_golden=
          env.File('testdata/integer_overflow_while_madvising.stderr'),
      stderr_filter=ERROR_WHILE_LOADING,
      exit_status='1')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      'negative_memory_hole.out',
      command=[env.File('testdata/negative_hole.nexe')],
      stderr_golden=env.File('testdata/negative_hole.stderr'),
      stderr_filter=ERROR_WHILE_LOADING,
      exit_status='1')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      'old_abi.out',
      command=[env.File('testdata/old_abi.nexe')],
      stderr_golden=env.File('testdata/old_abi.stderr'),
      stderr_filter=ERROR_WHILE_LOADING,
      exit_status='1')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      'text_too_big.out',
      command=[env.File('testdata/text_too_big.nexe')],
      stderr_golden=env.File('testdata/text_too_big.stderr'),
      stderr_filter=ERROR_WHILE_LOADING,
      exit_status='1')
  env.AddNodeToTestSuite(node, ['medium_tests'])


  node = env.CommandSelLdrTestNacl(
      'nullptr.out',
      # built in tests/nullptr/
      command=[env.File('testdata/nullptr.nexe')],
      exit_status='segfault')
  env.AddNodeToTestSuite(node, ['medium_tests'])


# ----------------------------------------------------------
# More Death Tests
# ----------------------------------------------------------
if env['TARGET_ARCHITECTURE'] == env['BUILD_ARCHITECTURE']:
  # NOTE: uses sdl and validator
  sel_ldr_thread_death_test_exe = sdl_env.ComponentProgram(
      'sel_ldr_thread_death_test',
      ['sel_ldr_thread_death_test.c'],
      EXTRA_LIBS=['sel',
                  'nonnacl_srpc',
                  'nrd_xfer',
                  'nonnacl_util_c',
                  'google_nacl_imc_c',
                  'platform',
                  'gio',
                  ] + VALIDATOR_LIBS)

  node = sdl_env.CommandTestAgainstGoldenOutput(
      'sel_ldr_thread_death_test.out',
      command=[sel_ldr_thread_death_test_exe],
      exit_status='segfault')
  sdl_env.Requires(node, sdl_dll)

  # TODO(tuduce): Make it work on windows.
  if not sdl_env.Bit('windows'):
    sdl_env.AddNodeToTestSuite(node, ['medium_tests'], 'run_ichi')

# ------------------------------------------------------------------------
# Generated files test - verify that the checked in version is up to date.
# ------------------------------------------------------------------------

if (env['BUILD_ARCHITECTURE'] == 'x86' and
    env['BUILD_SUBARCH'] == '32' and
    not env.Bit('windows')):
  cmp_script = '${SCONSTRUCT_DIR}/tools/file_cmp_test.py'
  checkedin_file = '${SCONSTRUCT_DIR}/src/trusted/service_runtime/arch/x86_64/tramp_data.h'
  generated_file = tramp_data_header[0]

  command = ['${PYTHON}', cmp_script, checkedin_file, generated_file]
  node = env.Command(target = None,
    source = [checkedin_file, cmp_script],
    action = ' '.join(command))
  env.AddNodeToTestSuite(node, ['small_tests'], 'tramp_data')

  checkedin_file = '${SCONSTRUCT_DIR}/src/trusted/service_runtime/arch/x86_64/springboard_data.h'
  generated_file = springboard_data_header[0]
  node = env.Command(target = None,
    source = [checkedin_file, cmp_script],
    action = ' '.join(command))
  env.AddNodeToTestSuite(node, ['small_tests'], 'springboard_data')
