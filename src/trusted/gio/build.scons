# -* python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import platform
import sys

Import('env')

# TODO(robertm): consider adding this to the top level scons files
env.Append(CPPPATH=['${TARGET_ROOT}'])

if env.Bit('windows'):
  env.Append(CPPDEFINES=['WIN32'])
  if env.Bit('target_x86_64'):
    env.Append(CPPDEFINES=['WIN64'])

# normally comment out -- uncomment out to test the pedantic removal
# check below.
#if env.Bit('linux') or env.Bit('mac'):
#  env.FilterOut(CCFLAGS=['-pedantic'])
#  env.FilterOut(CCFLAGS=['-Wall'])


# Make a copy of debug CRT for now.
# TODO(bradnelson): there should be a better way to generalize this requirement.
crt = []
if env.AllBits('windows', 'debug'):
  for i in ['.', '${STAGING_DIR}']:
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/Debug_NonRedist/'
                         'x86/Microsoft.VC80.DebugCRT')
    crt += env.Replicate(i, '$VC80_DIR/vc/redist/x86/Microsoft.VC80.CRT')

env.DualLibrary('gio_wrapped_desc',
                ['gio_shm.c',
                 'gio_shm_unbounded.c',
                 'gio_nacl_desc.c',
                ])

# ----------------------------------------------------------
# Unit Tests
# ----------------------------------------------------------

if ((not env.Bit('coverage_enabled') or not env.Bit('windows')) and
    not env.CrossToolsBuild()):
  gio_shm_test_exe = env.ComponentProgram('gio_shm_test',
                                              ['gio_shm_test.c'],
                                              EXTRA_LIBS=['gio_wrapped_desc',
                                                          'nonnacl_srpc',
                                                          'nrd_xfer',
                                                          'nacl_base',
                                                          'nonnacl_util_c',
                                                          'google_nacl_imc_c',
                                                          'platform',
                                                          'gio',
                                                          ])
  if env.Bit('target_arm'):
    params = [ '-n', '512', '-m', '2']
  else:
    params = []  # default
  node = env.CommandTest(
      'gio_shm_test.out',
      command=[gio_shm_test_exe] + params)
  env.Requires(gio_shm_test_exe, crt)
  env.AddNodeToTestSuite(node, ['large_tests'], 'run_gio_shm_test')

  gio_shm_unbounded_test_exe = (
      env.ComponentProgram('gio_shm_unbounded_test',
                               ['gio_shm_unbounded_test.c'],
                               EXTRA_LIBS=['gio_wrapped_desc',
                                           'nonnacl_srpc',
                                           'nrd_xfer',
                                           'nacl_base',
                                           'nonnacl_util_c',
                                           'google_nacl_imc_c',
                                           'platform',
                                           'gio',
                                          ]))
  node = env.CommandTest(
      'gio_shm_unbounded_test.out',
      command=[gio_shm_unbounded_test_exe,])
  env.Requires(gio_shm_unbounded_test_exe, crt)

  is_broken = env.Bit('target_arm') and env.UsingEmulator()
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_gio_shm_unbounded_test',
                         is_broken=is_broken)

  gio_nacl_desc_test_exe = env.ComponentProgram(
      'gio_nacl_desc_test',
      ['gio_nacl_desc_test.c'],
      EXTRA_LIBS=['gio_wrapped_desc',
                  'nonnacl_srpc',
                  'nrd_xfer',
                  'nacl_base',
                  'nonnacl_util_c',
                  'google_nacl_imc_c',
                  'platform',
                  'gio',
                  ])

  import tempfile
  node = env.CommandTest('gio_nacl_desc_test.out',
                         command = [gio_nacl_desc_test_exe,
                                    # TODO(krasin): use testdata/some_binary_file,
                                    # since it's used just as a file with bytes,
                                    # not as a NaCl module.
                                    env.File('../service_runtime/testdata/fib_array.nexe'),
                                    tempfile.mktemp()])
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_gio_nacl_desc_test')


