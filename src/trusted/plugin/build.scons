# -*- python -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# TODO(polina): for Mac build check if no longer need .r files and/or document
# target browsers for each bundle target.

Import('env')

if not env.Bit('mac'):
  env['COMPONENT_STATIC'] = False


plugin_env = env.Clone()
if env.Bit('linux'):
    plugin_env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        CPPDEFINES = ['XP_UNIX', 'MOZ_X11'],
        # Catch unresolved symbols in libraries.
        LINKFLAGS=['-Wl,-z,defs'],
        )

    # We usually try to build things statically, but the plugin is a .so
    plugin_env.FilterOut(LINKFLAGS=['-static'])

if env.Bit('mac'):
    plugin_env.Append(
        CCFLAGS=['-Wno-long-long',
                 # warning: Basically all of our 2d Mac stuff is deprecated.
                 '-Wno-deprecated',
                 '-Wno-deprecated-declarations'],
        CPPDEFINES = [
            'XP_MACOSX',
            'XP_UNIX',
            ['TARGET_API_MAC_CARBON', '1'],
            # TODO(robertm): NO_X11 may be obsolete
            'NO_X11',
            'USE_SYSTEM_CONSOLE',
        ],
        FRAMEWORKS = ['Carbon'],
        # TODO(jrg): it's a little awkward to, when you want a bundle:
        #  1) add -bundle to your LINKFLAGS
        #  2) create a "program" (which shows up in all_programs target)
        #  3) create a bundle out of it, specifying the bundle extension
        # Ideally that all happens inside a CompleteBundlePseudoBuilder().
        LINKFLAGS = ['-bundle', '-framework', 'Foundation']
    )

if env.Bit('windows'):
    plugin_env.Append(
        CPPDEFINES = ['XP_WIN', 'WIN32', '_WINDOWS'],
    )

# The PPAPI plugin depends upon the code that is in the top (plugin) directory
# and on a large set of libraries.  We continue to keep the common and ppapi
# specific sources separate for the moment.
# TODO: We should remove common and flatten ppapi into the main plugin dir
# if we plan to only support one plugin architecture.
common_inputs = [
    # TODO: we should put a scons file in src/third_party_mod/nacl_plugin
    #       which exports a library which is then linked in.
    #       Currently this results inlink time symbol clashes
    # Portable plugin code
    'connected_socket.cc',
    'desc_based_handle.cc',
    'method_map.cc',
    'nacl_subprocess.cc',
    'nexe_arch.cc',
    'plugin.cc',
    'portable_handle.cc',
    'scriptable_handle.cc',
    'service_runtime.cc',
    'srpc_client.cc',
    'string_encoding.cc',
    'utility.cc',
]

if env.Bit('target_x86'):
  common_inputs += ['arch_x86/sandbox_isa.cc']
elif env.Bit('target_arm'):
  common_inputs += ['arch_arm/sandbox_isa.cc']
else:
  # Unrecognized architecture - this is a build failure.
  print "Unrecognized architecture: %s" % env['TARGET_ARCHITECTURE']
  Return()

common_objs = plugin_env.ComponentObject(common_inputs)

# The libraries used by both the PPAPI plugin.  They and the PPAPI specific
# libraries must come before OS libraries, because they may generate references
# that are resolved by the OS libraries.  E.g., libplatform.a contains
# references to symbols from libcrypto.so.
common_libs = [
    'nonnacl_util',
    'nonnacl_srpc',
    'gio_wrapped_desc',
    'nrd_xfer',
    'nacl_perf_counter',
    'nacl_base',
    'imc',
    'weak_ref',
    'platform',
    'platform_qual_lib',
    'reverse_service',
    'gio',
    'jsoncpp',
    'sel',
    'simple_service',
    'thread_interface',
    'env_cleanser',
    'nacl_error_code',
]

os_libs = [ ]
if plugin_env.Bit('linux'):
  os_libs += ['dl', 'Xt', 'X11', 'crypto']

if plugin_env.Bit('windows'):
  os_libs += ['gdi32', 'user32', ]


###############################################################################
# PPAPI Plugin Build
###############################################################################

# The PPAPI (Pepper v2) plugin is used in Chrome only.
#
# We build a shared library with this build script to allow easier build
# testing. This library can also be loaded into Chrome using --no-sandbox
# --register-pepper-plugins="path/to/library;application/x-nacl".
#
# The .gyp files include rules used to link the plugin statically into Chrome.
# (This is still work in progress as of mid-Nov 2010.)
#
# The PPAPI plugin uses code from
#   trusted/plugin/ppapi/ - for implementing NaCl as a trusted PPAPI plugin
#   shared/ppapi_proxy/ - for proxying PPAPI to NaCl modules
ppapi_inputs = [
    'ppapi/array_ppapi.cc',
    'ppapi/async_receive.cc',
    'ppapi/browser_interface_ppapi.cc',
    'ppapi/file_downloader.cc',
    'ppapi/manifest.cc',
    'ppapi/module_ppapi.cc',
    'ppapi/plugin_ppapi.cc',
    'ppapi/pnacl_coordinator.cc',
    'ppapi/pnacl_srpc_lib.cc',
    'ppapi/scriptable_handle_ppapi.cc',
    'ppapi/var_utils.cc',
]

ppNaClPlugin = 'ppNaClPlugin'

ppapi_env = plugin_env.Clone()

# Set #define for NACL_PPAPI. Force the source files to rebuild with it. Use an
# alternate prefix to avoid "two environments with different actions" error.
ppapi_env.Append(CPPDEFINES = ['NACL_PPAPI'])
ppapi_env.Replace(OBJPREFIX='ppapi_', SHOBJPREFIX='ppapi_');

ppapi_libs = common_libs + [ 'ppapi_cpp', 'ppapi_browser', 'nonnacl_srpc' ]
if ppapi_env['SHARED_LIBS_SPECIAL']:
  ppapi_env.Append(LIBS=[l + '_shared' for l in ppapi_libs] + os_libs)
else:
  ppapi_env.Append(LIBS=ppapi_libs + os_libs)

if not env.Bit('mac'):  # linux, windows, arm
  # This builds with
  #   MODE=... ppNaClPlugin sel_ldr
  # with the output going to
  #   scons-out/.../staging/libppNaClPlugin.so on Linux and
  #   scons-out/.../staging/ppNaClPlugin.dll on Windows.
  ppapi_plugin = ppapi_env.ComponentLibrary(ppNaClPlugin,
                                            common_inputs + ppapi_inputs,
                                            no_import_lib=True)
else:  # mac
  # This builds with
  #   MODE=... scons-out/.../staging/ppNaClPlugin.bundle sel_ldr
  # This places both ppNaClPlugin.bundle/ and sel_ldr into staging/.
  # One must either set $NACL_SEL_LDR=path/to/sel_ldr or manually
  # copy sel_ldr to path/to/ppNaClPlugin.bundle/Contents/Resources/.
  # (the 2nd option has been disabled:
  # see ../nonnacl_util/osx/get_plugin_dirname.mm).
  REZ = '/Developer/Tools/Rez'
  ppapi_env.Command(target='ppNaClPlugin.rsrc',
                    source='osx_ppapi/ppNaClPlugin.r',
                    action=[Action(REZ + ' -o ${TARGET} ${SOURCE} -useDF')])
  ppapi_plugin = ppapi_env.ComponentProgram(ppNaClPlugin,
                                            common_inputs + ppapi_inputs,
                                            no_import_lib=True)
  # Bundle pattern can be found in
  # site_scons/site_tools/target_platform_mac.py
  bundle_name = '${STAGING_DIR}/' + ppNaClPlugin + '.bundle'
  ppapi_env.Bundle(bundle_name,
                   BUNDLE_EXE = ppapi_plugin,
                   BUNDLE_PKGINFO_FILENAME = 0,
                   BUNDLE_RESOURCES = 'ppNaClPlugin.rsrc',
                   BUNDLE_INFO_PLIST = 'osx_ppapi/Info.plist')

ppapi_env.Alias('plugin', ppapi_env.GetPPAPIPluginPath(False))

###############################################################################
# PPAPI Plugin Test
###############################################################################

# Rather than link ppNaClPlugin statically, this unittest uses the dynamic
# library.  Note that these tests do not yet run on ARM.
unittest_sources = ['ppapi/dylib_unittest.cc', 'ppapi/plugin_unittest.cc']
if env.Bit('target_x86'):
  if env.Bit('linux'):
    unittest = env.ComponentProgram('ppapi_plugin_unittest',
                                    unittest_sources,
                                    no_import_lib=True,
                                    EXTRA_LIBS=['dl'])
  elif env.Bit('mac'):
    unittest = env.ComponentProgram('ppapi_plugin_unittest', unittest_sources)
  elif env.Bit('windows'):
    unittest = env.ComponentProgram('ppapi_plugin_unittest',
                                    unittest_sources,
                                    no_import_lib=True)
  node = env.CommandTest('ppapi_plugin_unittest.out',
                         command=[unittest,
                                  ppapi_plugin,
                                  env['BUILD_ISA_NAME']])
  env.AddNodeToTestSuite(node, ['small_tests'], 'run_ppapi_plugin_unittest')


# TODO(polina,sehr): add a test for the PPAPI plugin on ARM.
