/*
 * Copyright 2009 The Native Client Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can
 * be found in the LICENSE file.
 */

/* This file provides API functions to connect arm_categorize.c
 * and arm_compress.cc so that when the --compress option is
 * specified, the ARM instruction trie can be built and compressed
 * simultaneously. Note that this header file defines the API
 * in terms of C, so that we can include it in arm_categorize.c
 */

#ifndef NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CAT_COMPRESS_H__
#define NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CAT_COMPRESS_H__

#include "native_client/src/trusted/validator_arm/arm_categorize.h"

EXTERN_C_BEGIN

/*
 * Creates an instance of ArmTrieMergeSet;
 */
struct ArmTrieMergeSet* CreateArmTrieMergeSet();

/*
 * Destroys a previously created instance generated by
 * CreateArmTrieMergeSet();
 */
void DestroyArmTrieMergeSet(struct ArmTrieMergeSet* merge_set);

/*
 * Compress the given instruction node, updating the number of leaves (and
 * hence, the number of instruction patterns matched). Returns the compressed
 * node (null if this subtrie doesn't contains any possible leaf instruction
 * matches).
 *
 * *WARNING* This method should only be called inside of
 * BuildCompressedArmInstructionTrie, since it counts on
 */
ArmInstructionTrie* CompressNode(ArmInstructionTrieData* data,
                                 ArmInstructionTrie* node,
                                 Bool apply_recursively,
                                 size_t* number_leaves_visited);

/*
 * Generate integers (in the order this function is called, starting
 * at 1), for each node pointer. Used in debugging messages to generate
 * repeatable values for trie node pointers.
 */
int GetTrieNodeId(const ArmInstructionTrie* node);

EXTERN_C_END

#endif  /* NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CAT_COMPRESS_H__ */
