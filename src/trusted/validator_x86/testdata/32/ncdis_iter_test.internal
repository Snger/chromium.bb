00000000: 00 00                                        add %ds[%eax], %al
  00                          386L OpcodeUsesModRm OpcodeLockable OperandSize_b
    Add $E, $G
      E_Operand               OpUse OpSet OpDest
      G_Operand               OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
00000000: 00 c0                                        add %al, %al
  00                          386L OpcodeUsesModRm OpcodeLockable OperandSize_b
    Add $E, $G
      E_Operand               OpUse OpSet OpDest
      G_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
00000000: 01 c0                                        add %eax, %eax
  01                          386L OpcodeUsesModRm OpcodeLockable OperandSize_w OperandSize_v
    Add $E, $G
      E_Operand               OpUse OpSet OpDest OperandZeroExtends_v
      G_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
00000000: 03 18                                        add %ebx, %ds[%eax]
  03                          386L OpcodeUsesModRm OpcodeLockable OperandSize_w OperandSize_v
    Add $G, $E
      G_Operand               OpUse OpSet OpDest OperandZeroExtends_v
      E_Operand               OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
00000000: 03 1d 20 00 00 00                            add %ebx, 0x20
  03                          386L OpcodeUsesModRm OpcodeLockable OperandSize_w OperandSize_v
    Add $G, $E
      G_Operand               OpUse OpSet OpDest OperandZeroExtends_v
      E_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprDest | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x20, ExprUsed | ExprSize32 | ExprSignedHex },
};
00000000: 02 04 00                                     add %al, %ds[%eax+%eax*1]
  02                          386L OpcodeUsesModRm OpcodeLockable OperandSize_b
    Add $G, $E
      G_Operand               OpUse OpSet OpDest
      E_Operand               OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprDest | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
00000000: d5 0a                                        aad
  d5                          ILLEGAL OpcodeHasImmed_b
    Aad {%AX}, {%AL}, {%AH}, {$I}
      RegAX                   OpSet OpImplicit
      RegAL                   OpSet OpImplicit
      RegAH                   OpSet OpImplicit
      I_Operand               OpUse OpImplicit
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ah, ExprSet | ExprSize8 },
  { OperandReference[1] , 3, ExprImplicit },
  { ExprConstant[0] , 0xa, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
00000000: 90                                           nop
  90                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 90                                        nop
  90                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 8d 76 00                                     lea %esi, %ds[%esi]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OperandSize_w OperandSize_v
    Lea $G, $M
      G_Operand               OpSet OperandZeroExtends_v
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
00000000: 8d 74 26 00                                  lea %esi, %ds[%esi+%esp*1]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OperandSize_w OperandSize_v
    Lea $G, $M
      G_Operand               OpSet OperandZeroExtends_v
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
00000000: 8d b6 00 00 00 00                            lea %esi, %ds[%esi]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OperandSize_w OperandSize_v
    Lea $G, $M
      G_Operand               OpSet OperandZeroExtends_v
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 8d b4 26 00 00 00 00                         lea %esi, %ds[%esi+%esp*1]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OperandSize_w OperandSize_v
    Lea $G, $M
      G_Operand               OpSet OperandZeroExtends_v
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 89 f6                                        mov %esi, %esi
  89                          386 OpcodeUsesModRm OperandSize_w OperandSize_v
    Mov $E, $G
      E_Operand               OpSet OperandZeroExtends_v
      G_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
00000000: 8d bc 27 00 00 00 00                         lea %edi, %ds[%edi+%esp*1]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OperandSize_w OperandSize_v
    Lea $G, $M
      G_Operand               OpSet OperandZeroExtends_v
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %edi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 0f 1f 00                                     nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 40 00                                  nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 44 00 00                               nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 0f 1f 44 00 00                            nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 80 00 00 00 00                         nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 84 00 00 00 00 00                      nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 0f 1f 84 00 00 00 00 00                   nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 2e 0f 1f 84 00 00 00 00 00                nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 2e 0f 1f 84 00 00 00 00 00          nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00       nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 nop
  1f                          386 
    Nop
NaClExpVector[0] = {
};
00000000: e3 00                                        jecxz 0x2
  e3                          JMP8 OpcodeHasImmed OperandSize_b AddressSize_v
    Jecxz {%REIP}, $I
      RegREIP                 OpSet OpImplicit
      J_Operand               OpUse OperandNear OperandRelative
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eip, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x2, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
00000000: 67 e3 00                                     jcxz 0x3
  e3                          JMP8 OpcodeHasImmed OperandSize_b AddressSize_w
    Jcxz {%REIP}, $I
      RegREIP                 OpSet OpImplicit
      J_Operand               OpUse OperandNear OperandRelative
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eip, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x3, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
00000000: 0f 16 d1                                     movlhps %xmm2, %xmm1
  0f 16                       SSE ModRmModIs0x3 OpcodeUsesModRm
    Movlhps $G(xmm), $E(xmm)
      Xmm_G_Operand           OpSet OpDest
      Xmm_E_Operand           OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm1, ExprUsed },
};
00000000: 0f 16 a5 00 00 00 00                         movhps %xmm4, %ss[%ebp]
  0f 16                       SSE ModRmModIsnt0x3 OpcodeUsesModRm
    Movhps $G(xmm), $M
      Xmm_G_Operand           OpSet OpDest
      Mo_Operand              OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm4, ExprSet | ExprDest },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ss, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %ebp, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
