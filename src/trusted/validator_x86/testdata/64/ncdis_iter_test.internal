0000000000000000: 00 c0                                        add %al, %al
  { 1, { 0x00, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstAdd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 01 c0                                        add %eax, %eax
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 41 01 c3                                     add %r11d, %eax
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r11d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 44 01 d8                                     add %eax, %r11d
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstAdd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r11d, ExprUsed | ExprSize32 },
};
0000000000000000: 48 01 c3                                     add %rbx, %rax
  { 1, { 0x01, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstAdd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 67 03 18                                     add %ebx, [%eax]
  { 1, { 0x03, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstAdd,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 02 04 00                                     add %al, [%rax+%rax*1]
  { 1, { 0x02, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstAdd,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 02 04 00                                  add %al, [%eax+%eax*1]
  { 1, { 0x02, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstAdd,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 48 83 ec 08                                  sub %rsp, 0x8
  { 1, { 0x83, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstSub,
    3, {
      { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
00000000004003d4: e8 83 00 00 00                               call 0x40045c
  { 1, { 0xe8, 0x00, 0x00 },
    NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_v),
    InstCall,
    3, {
      { RegREIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x40045c, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
00000000004003de: e8 7d 05 00 00                               call 0x400960
  { 1, { 0xe8, 0x00, 0x00 },
    NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_v),
    InstCall,
    3, {
      { RegREIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x400960, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: c3                                           ret
  { 1, { 0xc3, 0x00, 0x00 },
    NACLi_RETURN,
    NACL_EMPTY_IFLAGS,
    InstRet,
    2, {
      { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ff 35 ea 0d 20 00                            push [%rip+0x200dea]
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    InstPush,
    3, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dea, ExprSize32 | ExprSignedHex },
};
0000000000000000: ff 25 ec 0d 20 00                            jmp [%rip+0x200dec]
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_INDIRECT,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeForce64),
    InstJmp,
    3, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed | ExprJumpTarget },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200dec, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 1f 40 00                                  nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 68 00 00 00 00                               push 0x0
  { 1, { 0x68, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    InstPush,
    2, {
      { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000400403: e9 e0 ff ff ff                               jmp 0x4003e8
  { 1, { 0xe9, 0x00, 0x00 },
    NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only),
    InstJmp,
    2, {
      { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4003e8, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 49 89 d1                                     mov %r9, %rdx
  { 1, { 0x89, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMov,
    2, {
      { E_Operand, NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r9, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
};
0000000000000000: 5e                                           pop %rsi
  { 1, { 0x5e, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    InstPop,
    3, {
      { OpcodeBaseMinus6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { G_OpcodeBase, NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %rsi, ExprSet | ExprSize64 },
};
0000000000000000: 49 c7 c0 c0 08 40 00                         mov %r8, 0x4008c0
  { 1, { 0xc7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMov,
    3, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x4008c0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: f4                                           hlt
  { 1, { 0xf4, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstHlt,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 48 8b 05 61 0d 20 00                         mov %rax, [%rip+0x200d61]
  { 1, { 0x8b, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x200d61, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 85 c0                                     test %rax, %rax
  { 1, { 0x85, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstTest,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
000000000040046a: 74 02                                        jz 0x40046e
  { 1, { 0x74, 0x00, 0x00 },
    NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_b),
    InstJz,
    2, {
      { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x40046e, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: ff d0                                        call %rax
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_INDIRECT,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeForce64),
    InstCall,
    4, {
      { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 | ExprJumpTarget },
};
000000000040048d: eb 24                                        jmp 0x4004b3
  { 1, { 0xeb, 0x00, 0x00 },
    NACLi_JMP8,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OperandSize_b),
    InstJmp,
    2, {
      { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x4004b3, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: c9                                           leave
  { 1, { 0xc9, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstLeave,
    2, {
      { RegREBP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRESP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: b8 00 00 00 00                               mov %eax, 0x0
  { 1, { 0xb8, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(OperandSize_v),
    InstMov,
    3, {
      { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: bf 20 10 60 00                               mov %edi, 0x601020
  { 1, { 0xbf, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(OperandSize_v),
    InstMov,
    3, {
      { OpcodeBaseMinus7, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x601020, ExprUsed | ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 48 8b 04 c5 a0 13 60 00                      mov %rax, [%rax*8+0x6013a0]
  { 1, { 0x8b, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 8, ExprSize8 },
  { ExprConstant[0] , 0x6013a0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 89 7d fc                                     mov [%rbp-0x4], %edi
  { 1, { 0x89, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstMov,
    2, {
      { E_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edi, ExprUsed | ExprSize32 },
};
0000000000000000: 3b 45 fc                                     cmp %eax, [%rbp-0x4]
  { 1, { 0x3b, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstCmp,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandZeroExtends_v) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 83 7d f8 08                                  cmp [%rbp-0x8], 0x8
  { 1, { 0x83, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_v),
    InstCmp,
    3, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandZeroExtends_v) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x8, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 8b 45 fc                                     mov %eax, [%rbp-0x4]
  { 1, { 0x8b, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: 41 d3 e4                                     shl %r12d, %cl
  { 1, { 0xd3, 0x00, 0x00 },
    NACLi_OPINMRM,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_v),
    InstShl,
    3, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { RegCL, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r12d, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %cl, ExprUsed | ExprSize8 },
};
0000000000000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 48 c1 fd 03                                  sar %rbp, 0x3
  { 1, { 0xc1, 0x00, 0x00 },
    NACLi_OPINMRM,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstSar,
    3, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_EMPTY_OPFLAGS },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x3, ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 48 8d 2d 0f 07 20 00                         lea %rbp, [%rip+0x20070f]
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstLea,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { M_Operand, NACL_OPFLAG(OpAddress) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rbp, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20070f, ExprSize32 | ExprSignedHex },
};
0000000000000000: a0 88 77 66 55 44 33 22 11                   mov %al, [0x1122334455667788]
  { 1, { 0xa0, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { RegAL, NACL_OPFLAG(OpSet) },
      { O_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: 66 a1 88 77 66 55 44 33 22 11                mov %ax, [0x1122334455667788]
  { 1, { 0xa1, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstMov,
    2, {
      { RegREAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { O_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: a2 88 77 66 55 44 33 22 11                   mov [0x1122334455667788], %al
  { 1, { 0xa2, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { O_Operand, NACL_OPFLAG(OpSet) },
      { RegAL, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 66 a3 88 77 66 55 44 33 22 11                mov [0x1122334455667788], %ax
  { 1, { 0xa3, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstMov,
    2, {
      { O_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { RegREAX, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 b8 88 77 66 55 44 33 22 11                mov %rax, 0x1122334455667788
  { 1, { 0xb8, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMov,
    3, {
      { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant64[2] , 0x1122334455667788, ExprUsed | ExprUnsignedHex },
  { ExprConstant[0] , 0x55667788, ExprUnsignedHex },
  { ExprConstant[0] , 0x11223344, ExprUnsignedHex },
};
0000000000000000: 44 8a 04 00                                  mov %r8b, [%rax+%rax*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 8a 44 05 00                                  mov %al, [%rbp+%rax*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 42 8a 04 20                                  mov %al, [%rax+%r12*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %r12, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 41 8a 44 05 00                               mov %al, [%r13+%rax*1]
  { 1, { 0x8a, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %r13, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
0000000000000000: 0f 38 08 2c 25 00 00 00 00                   psignb %mmx5, [0x0]
  { 3, { 0x0f, 0x38, 0x08 },
    NACLi_SSSE3,
    NACL_IFLAG(OpcodeUsesModRm),
    InstPsignb,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx5, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 66 0f 38 08 2c 25 00 00 00 00                psignb %xmm5, [0x0]
  { 3, { 0x0f, 0x38, 0x08 },
    NACLi_SSSE3,
    NACL_IFLAG(OpcodeUsesModRm),
    InstPsignb,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm5, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
0000000000000000: 66 44 0f 38 08 2c 00                         psignb %xmm13, [%rax+%rax*1]
  { 3, { 0x0f, 0x38, 0x08 },
    NACLi_SSSE3,
    NACL_IFLAG(OpcodeUsesModRm),
    InstPsignb,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm13, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dd 24 00                                     frstor [%rax+%rax*1]
  { 1, { 0xdd, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFrstor,
    2, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 67 dd 24 00                                  frstor [%eax+%eax*1]
  { 1, { 0xdd, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFrstor,
    2, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dc c1                                        fadd %st1, %st0
  { 2, { 0xdc, 0xc1, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    InstFadd,
    3, {
      { OpcodeBaseMinus1, NACL_OPFLAG(OperandExtendsOpcode) },
      { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { RegST0, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st1, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: d8 74 24 10                                  fdiv [%rsp+0x10]
  { 1, { 0xd8, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFdiv,
    3, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
};
0000000000000000: 67 d8 74 24 10                               fdiv [%esp+0x10]
  { 1, { 0xd8, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFdiv,
    3, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
};
0000000000000000: dc 44 00 04                                  fadd [%rax+%rax*1+0x4]
  { 1, { 0xdc, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFadd,
    3, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: da 04 25 04 00 00 00                         fiadd [0x4]
  { 1, { 0xda, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFiadd,
    3, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize32 | ExprSignedHex },
};
0000000000000000: da 70 04                                     fidiv [%rax+0x4]
  { 1, { 0xda, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFidiv,
    3, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: de 50 04                                     ficom [%rax+0x4]
  { 1, { 0xde, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFicom,
    3, {
      { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegST0, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %st0, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x4, ExprSize8 | ExprSignedHex },
};
0000000000000000: dc e5                                        fsubr %st5, %st0
  { 2, { 0xdc, 0xe5, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    InstFsubr,
    3, {
      { OpcodeBaseMinus5, NACL_OPFLAG(OperandExtendsOpcode) },
      { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { RegST0, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st5, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc f3                                        fdivr %st3, %st0
  { 2, { 0xdc, 0xf3, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    InstFdivr,
    3, {
      { OpcodeBaseMinus3, NACL_OPFLAG(OperandExtendsOpcode) },
      { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { RegST0, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st3, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc ea                                        fsub %st2, %st0
  { 2, { 0xdc, 0xea, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    InstFsub,
    3, {
      { OpcodeBaseMinus2, NACL_OPFLAG(OperandExtendsOpcode) },
      { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { RegST0, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st2, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: dc ce                                        fmul %st6, %st0
  { 2, { 0xdc, 0xce, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodePlusR),
    InstFmul,
    3, {
      { OpcodeBaseMinus6, NACL_OPFLAG(OperandExtendsOpcode) },
      { St_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { RegST0, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %st6, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %st0, ExprUsed },
};
0000000000000000: 48 63 c6                                     movsxd %rax, %esi
  { 1, { 0x63, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMovsxd,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { Ev_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 63 c6                                        movsxd %eax, %esi; *NACL Disallows!*
  { 1, { 0x63, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_v),
    InstMovsxd,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 6c                                           insb; *NACL Disallows!*
  { 1, { 0x6c, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_b),
    InstInsb,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 6d                                           insd; *NACL Disallows!*
  { 1, { 0x6d, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_v),
    InstInsd,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 66 6d                                        insw; *NACL Disallows!*
  { 1, { 0x6d, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w),
    InstInsw,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 6e                                           outsb; *NACL Disallows!*
  { 1, { 0x6e, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_b),
    InstOutsb,
    2, {
      { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 6f                                           outsd; *NACL Disallows!*
  { 1, { 0x6f, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_v),
    InstOutsd,
    2, {
      { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 6f                                        outsw; *NACL Disallows!*
  { 1, { 0x6f, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w),
    InstOutsw,
    2, {
      { RegDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 98                                        cbw
  { 1, { 0x98, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OperandSize_w),
    InstCbw,
    2, {
      { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: 98                                           cwde
  { 1, { 0x98, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OperandSize_v),
    InstCwde,
    2, {
      { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 98                                        cdqe
  { 1, { 0x98, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstCdqe,
    2, {
      { RegRAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) | NACL_OPFLAG(OperandSignExtends_v) },
      { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 66 99                                        cwd
  { 1, { 0x99, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OperandSize_w),
    InstCwd,
    3, {
      { RegDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %dx, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 99                                           cdq
  { 1, { 0x99, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OperandSize_v),
    InstCdq,
    3, {
      { RegEDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 48 99                                        cqo
  { 1, { 0x99, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstCqo,
    3, {
      { RegRDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 86 c2                                        xchg %dl, %al
  { 1, { 0x86, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_b),
    InstXchg,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %dl, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 86 40 20                                     xchg [%rax+0x20], %al
  { 1, { 0x86, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_b),
    InstXchg,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 87 40 20                                     xchg [%rax+0x20], %eax
  { 1, { 0x87, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstXchg,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x20, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: a6                                           cmpsb
  { 1, { 0xa6, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OperandSize_b),
    InstCmpsb,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 a7                                        cmpsw
  { 1, { 0xa7, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OperandSize_w),
    InstCmpsw,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: a7                                           cmpsd
  { 1, { 0xa7, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OperandSize_v),
    InstCmpsd,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 a7                                        cmpsq
  { 1, { 0xa7, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstCmpsq,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: aa                                           stosb
  { 1, { 0xaa, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OperandSize_b),
    InstStosb,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
0000000000000000: ab                                           stosd
  { 1, { 0xab, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OperandSize_v),
    InstStosd,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 66 ab                                        stosw
  { 1, { 0xab, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OperandSize_w),
    InstStosw,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: 48 ab                                        stosq
  { 1, { 0xab, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstStosq,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: a4                                           movsb
  { 1, { 0xa4, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OperandSize_b),
    InstMovsb,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 a5                                        movsw
  { 1, { 0xa5, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OperandSize_w),
    InstMovsw,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: a5                                           movsd
  { 1, { 0xa5, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OperandSize_v),
    InstMovsd,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 a5                                        movsq
  { 1, { 0xa5, 0x00, 0x00 },
    NACLi_386R,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMovsq,
    2, {
      { RegES_EDI, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprSet },
  { ExprRegister[0] , %es, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 9c                                           pushfq; *NACL Disallows!*
  { 1, { 0x9c, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    InstPushfq,
    1, {
      { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 9d                                           popfq; *NACL Disallows!*
  { 1, { 0x9d, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_v),
    InstPopfq,
    1, {
      { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ac                                           lodsb; *NACL Disallows!*
  { 1, { 0xac, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_b),
    InstLodsb,
    2, {
      { RegAL, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: ad                                           lodsd; *NACL Disallows!*
  { 1, { 0xad, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_v),
    InstLodsd,
    2, {
      { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 ad                                        lodsw; *NACL Disallows!*
  { 1, { 0xad, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w),
    InstLodsw,
    2, {
      { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 ad                                        lodsq; *NACL Disallows!*
  { 1, { 0xad, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstLodsq,
    2, {
      { RegRAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: ae                                           scasb
  { 1, { 0xae, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OperandSize_b),
    InstScasb,
    2, {
      { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: af                                           scasd
  { 1, { 0xaf, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OperandSize_v),
    InstScasd,
    2, {
      { RegEAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 66 af                                        scasw
  { 1, { 0xaf, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OperandSize_w),
    InstScasw,
    2, {
      { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: 48 af                                        scasq
  { 1, { 0xaf, 0x00, 0x00 },
    NACLi_386RE,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstScasq,
    2, {
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { RegDS_EDI, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %ds, ExprSize16 },
  { ExprRegister[0] , %rdi, ExprSize64 },
};
0000000000000000: c8 2c 01 00                                  enter 0x12c, 0x0; *NACL Disallows!*
  { 1, { 0xc8, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_w) | NACL_IFLAG(OpcodeHasImmed2_b),
    InstEnter,
    2, {
      { I_Operand, NACL_OPFLAG(OpUse) },
      { I2_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprConstant[0] , 0x12c, ExprUsed | ExprSize16 | ExprUnsignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x0, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 80 e4 df                                     and %ah, 0xdf
  { 1, { 0x80, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstAnd,
    3, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0xdf, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 22 24 25 df 00 00 00                         and %ah, [0xdf]
  { 1, { 0x22, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstAnd,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xdf, ExprSize32 | ExprSignedHex },
};
0000000000000000: 40 22 24 25 df 00 00 00                      and %spl, [0xdf]
  { 1, { 0x22, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstAnd,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %spl, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xdf, ExprSize32 | ExprSignedHex },
};
0000000000000000: 8d 04 85 ff ff ff ff                         lea %eax, [%rax*4-0x1]
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstLea,
    2, {
      { G_Operand, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OperandZeroExtends_v) },
      { M_Operand, NACL_OPFLAG(OpAddress) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprAddress },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 4, ExprSize8 },
  { ExprConstant[0] , -0x1, ExprSize32 | ExprSignedHex },
};
0000000000000000: 64 48 33 14 25 28 00 00 00                   xor %rdx, %fs[0x28]
  { 1, { 0x33, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstXor,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprSegmentAddress[2] , 0, ExprUsed },
  { ExprRegister[0] , %fs, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x28, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 b8 cd cc cc cc cc cc cc cc                mov %rax, 0xcccccccccccccccd
  { 1, { 0xb8, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeHasImmed) | NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMov,
    3, {
      { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant64[2] , 0xcccccccccccccccd, ExprUsed | ExprUnsignedHex },
  { ExprConstant[0] , 0xcccccccd, ExprUnsignedHex },
  { ExprConstant[0] , 0xcccccccc, ExprUnsignedHex },
};
0000000000000000: 66 6b c0 16                                  imul %ax, %ax, 0x16
  { 1, { 0x6b, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstImul,
    3, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x16, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 6b d8 16                                  imul %bx, %ax, 0x16
  { 1, { 0x6b, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstImul,
    3, {
      { G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %bx, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x16, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 f7 e8                                     imul %ax
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstImul,
    4, {
      { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegREDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %dx, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprUsed | ExprSize16 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
};
0000000000000000: f6 ec                                        imul %ah
  { 1, { 0xf6, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_b),
    InstImul,
    4, {
      { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %ah, ExprUsed | ExprSize8 },
};
0000000000000000: 0f af 91 70 01 00 00                         imul %edx, [%rcx+0x170]
  { 2, { 0x0f, 0xaf, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstImul,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x170, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f af c1                                     imul %eax, %ecx
  { 2, { 0x0f, 0xaf, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstImul,
    2, {
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ecx, ExprUsed | ExprSize32 },
};
0000000000000000: f6 fc                                        idiv %ah
  { 1, { 0xf6, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    InstIdiv,
    5, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegAL, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAH, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %ah, ExprSet | ExprSize8 },
  { OperandReference[1] , 3, ExprImplicit },
  { ExprRegister[0] , %ax, ExprUsed | ExprSize16 },
  { OperandReference[1] , 4, 0 },
  { ExprRegister[0] , %ah, ExprUsed | ExprSize8 },
};
0000000000000000: f7 f9                                        idiv %ecx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstIdiv,
    4, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegREDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %ecx, ExprUsed | ExprSize32 },
};
0000000000000000: f7 be 70 01 00 00                            idiv [%rsi+0x170]
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstIdiv,
    4, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegREDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x170, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 f7 f9                                     idiv %rcx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstIdiv,
    4, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
};
0000000000000000: fc                                           cld
  { 1, { 0xfc, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstCld,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: f6 d8                                        neg %al
  { 1, { 0xf6, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstNeg,
    2, {
      { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: f7 d9                                        neg %ecx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstNeg,
    2, {
      { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ecx, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 49 f7 de                                     neg %r14
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstNeg,
    2, {
      { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r14, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 48 f7 da                                     neg %rdx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstNeg,
    2, {
      { Opcode3, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: f6 d1                                        not %cl
  { 1, { 0xf6, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstNot,
    2, {
      { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %cl, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: f7 d1                                        not %ecx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstNot,
    2, {
      { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ecx, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 48 f7 d2                                     not %rdx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstNot,
    2, {
      { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: f6 e2                                        mul %dl
  { 1, { 0xf6, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeRex) | NACL_IFLAG(OperandSize_b),
    InstMul,
    4, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegAL, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %dl, ExprUsed | ExprSize8 },
};
0000000000000000: f7 e2                                        mul %edx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstMul,
    4, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegREDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %edx, ExprUsed | ExprSize32 },
};
0000000000000000: 48 f7 e7                                     mul %rdi
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMul,
    4, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rdi, ExprUsed | ExprSize64 },
};
0000000000000000: 41 f7 e6                                     mul %r14d
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstMul,
    4, {
      { Opcode4, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegREDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %r14d, ExprUsed | ExprSize32 },
};
0000000000000000: 48 f7 f1                                     div %rcx
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstDiv,
    4, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
};
0000000000000000: 48 f7 71 38                                  div [%rcx+0x38]
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstDiv,
    4, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rdx, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 3, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x38, ExprSize8 | ExprSignedHex },
};
0000000000000000: f7 35 37 af 57 00                            div [%rip+0x57af37]
  { 1, { 0xf7, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstDiv,
    4, {
      { Opcode6, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegREDX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x57af37, ExprSize32 | ExprSignedHex },
};
0000000000000000: f2 0f 10 05 b5 dc 15 00                      movsd %xmm0, [%rip+0x15dcb5]
  { 2, { 0x0f, 0x10, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovsd,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x15dcb5, ExprSize32 | ExprSignedHex },
};
0000000000000000: f2 0f 11 54 24 10                            movsd [%rsp+0x10], %xmm2
  { 2, { 0x0f, 0x11, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovsd,
    2, {
      { Xmm_E_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x10, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
};
0000000000000000: f3 0f 10 02                                  movss %xmm0, [%rdx]
  { 2, { 0x0f, 0x10, 0x00 },
    NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovss,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: f3 0f 11 44 24 0c                            movss [%rsp+0xc], %xmm0
  { 2, { 0x0f, 0x11, 0x00 },
    NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovss,
    2, {
      { Xmm_E_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xc, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
};
0000000000000000: f3 0f 10 4c 24 1c                            movss %xmm1, [%rsp+0x1c]
  { 2, { 0x0f, 0x10, 0x00 },
    NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovss,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x1c, ExprSize8 | ExprSignedHex },
};
0000000000000000: f3 0f 11 44 24 0c                            movss [%rsp+0xc], %xmm0
  { 2, { 0x0f, 0x11, 0x00 },
    NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovss,
    2, {
      { Xmm_E_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xc, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
};
0000000000000000: f2 0f 5f cf                                  maxsd %xmm1, %xmm7
  { 2, { 0x0f, 0x5f, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMaxsd,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm7, ExprUsed },
};
0000000000000000: 0f c8                                        bswap %eax
  { 2, { 0x0f, 0xc8, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(OperandSize_v),
    InstBswap,
    2, {
      { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 48 0f c8                                     bswap %rax
  { 2, { 0x0f, 0xc8, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstBswap,
    2, {
      { OpcodeBaseMinus0, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 49 0f cd                                     bswap %r13
  { 2, { 0x0f, 0xcd, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstBswap,
    2, {
      { OpcodeBaseMinus5, NACL_OPFLAG(OperandExtendsOpcode) },
      { G_OpcodeBase, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r13, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 0f 6e 11                                     movd %mmx2, [%rcx]
  { 2, { 0x0f, 0x6e, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovd,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx2, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 49 0f 6e 11                                  movd %mmx2, [%r9]
  { 2, { 0x0f, 0x6e, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovd,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx2, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %r9, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 66 0f 6e 11                                  movd %xmm2, [%rcx]
  { 2, { 0x0f, 0x6e, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovd,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f 7e 0e                                     movd [%rsi], %mmx1
  { 2, { 0x0f, 0x7e, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovd,
    2, {
      { E_Operand, NACL_OPFLAG(OpSet) },
      { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 49 0f 7e 0e                                  movd [%r14], %mmx1
  { 2, { 0x0f, 0x7e, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovd,
    2, {
      { E_Operand, NACL_OPFLAG(OpSet) },
      { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %r14, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 0f 77                                        emms
  { 2, { 0x0f, 0x77, 0x00 },
    NACLi_MMX,
    NACL_EMPTY_IFLAGS,
    InstEmms,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: f2 0f c2 c7 01                               cmpsd_xmm %xmm0, %xmm7, 0x1
  { 2, { 0x0f, 0xc2, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b),
    InstCmpsd_xmm,
    3, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm7, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x1, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: f2 0f c2 0d 67 87 10 00 05                   cmpsd_xmm %xmm1, [%rip+0x108767], 0x5
  { 2, { 0x0f, 0xc2, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b),
    InstCmpsd_xmm,
    3, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x108767, ExprSize32 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x5, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 0f 6f 05 ba 87 0f 00                         movq %mmx0, [%rip+0xf87ba]
  { 2, { 0x0f, 0x6f, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovq,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpSet) },
      { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx0, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xf87ba, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 6f c8                                     movq %mmx1, %mmx0
  { 2, { 0x0f, 0x6f, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovq,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpSet) },
      { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx1, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx0, ExprUsed },
};
0000000000000000: 0f 7f 0e                                     movq [%rsi], %mmx1
  { 2, { 0x0f, 0x7f, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovq,
    2, {
      { Mmx_E_Operand, NACL_OPFLAG(OpSet) },
      { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 0f d1 0c 25 08 00 00 00                      psrlw %mmx1, [0x8]
  { 2, { 0x0f, 0xd1, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstPsrlw,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Mmx_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx1, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x8, ExprSize32 | ExprSignedHex },
};
0000000000000000: 0f 71 d1 08                                  psrlw %mmx1, 0x8
  { 2, { 0x0f, 0x71, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(ModRmModIs0x3) | NACL_IFLAG(OpcodeHasImmed_b),
    InstPsrlw,
    3, {
      { Opcode2, NACL_OPFLAG(OperandExtendsOpcode) },
      { Mmx_E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 0f 6e e8                                     movd %mmx5, %eax
  { 2, { 0x0f, 0x6e, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovd,
    2, {
      { Mmx_G_Operand, NACL_OPFLAG(OpSet) },
      { E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %mmx5, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: f3 0f 6f 05 f9 77 0f 00                      movdqu %xmm0, [%rip+0xf77f9]
  { 2, { 0x0f, 0x6f, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovdqu,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0xf77f9, ExprSize32 | ExprSignedHex },
};
0000000000000000: f3 0f 6f 11                                  movdqu %xmm2, [%rcx]
  { 2, { 0x0f, 0x6f, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovdqu,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rcx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: f3 0f 7f 0e                                  movdqu [%rsi], %xmm1
  { 2, { 0x0f, 0x7f, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovdqu,
    2, {
      { Xmm_E_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm1, ExprUsed },
};
0000000000000000: 0f e7 0e                                     movntq [%rsi], %mmx1
  { 2, { 0x0f, 0xe7, 0x00 },
    NACLi_MMX,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm),
    InstMovntq,
    2, {
      { Mo_Operand, NACL_OPFLAG(OpSet) },
      { Mmx_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %mmx1, ExprUsed },
};
0000000000000000: 66 0f 29 0c 24                               movapd [%rsp], %xmm1
  { 2, { 0x0f, 0x29, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeUsesModRm),
    InstMovapd,
    2, {
      { Xmm_E_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm1, ExprUsed },
};
0000000000000000: f3 0f 51 d0                                  sqrtss %xmm2, %xmm0
  { 2, { 0x0f, 0x51, 0x00 },
    NACLi_SSE,
    NACL_IFLAG(OpcodeUsesModRm),
    InstSqrtss,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm2, ExprSet },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
};
0000000000000000: 48 ff c0                                     inc %rax
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: ff 05 a4 76 39 00                            inc [%rip+0x3976a4]
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x3976a4, ExprSize32 | ExprSignedHex },
};
0000000000000000: ff c0                                        inc %eax
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 41 ff c5                                     inc %r13d
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r13d, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: fe c0                                        inc %al
  { 1, { 0xfe, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: fe c4                                        inc %ah
  { 1, { 0xfe, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 41 fe c0                                     inc %r8b
  { 1, { 0xfe, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstInc,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: ff ca                                        dec %edx
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %edx, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: ff 0d 8f 76 39 00                            dec [%rip+0x39768f]
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x39768f, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 ff c8                                     dec %rax
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: 49 ff cc                                     dec %r12
  { 1, { 0xff, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesRexW) | NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r12, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: fe c8                                        dec %al
  { 1, { 0xfe, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: fe cc                                        dec %ah
  { 1, { 0xfe, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %ah, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: 41 fe c8                                     dec %r8b
  { 1, { 0xfe, 0x00, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_b),
    InstDec,
    2, {
      { Opcode1, NACL_OPFLAG(OperandExtendsOpcode) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[2] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %r8b, ExprSet | ExprUsed | ExprSize8 },
};
0000000000000000: f0 0f b1 35 21 c6 31 00                      cmpxchg [%rip+0x31c621], %esi
  { 2, { 0x0f, 0xb1, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstCmpxchg,
    3, {
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x31c621, ExprSize32 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: 0f b1 35 12 c6 31 00                         cmpxchg [%rip+0x31c612], %esi
  { 2, { 0x0f, 0xb1, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstCmpxchg,
    3, {
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rip, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x31c612, ExprSize32 | ExprSignedHex },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: f0 41 0f b1 30                               cmpxchg [%r8], %esi
  { 2, { 0x0f, 0xb1, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstCmpxchg,
    3, {
      { RegREAX, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %r8, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
0000000000000000: f0 0f c1 02                                  xadd [%rdx], %eax
  { 2, { 0x0f, 0xc1, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstXadd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rdx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: f0 0f c1 43 18                               xadd [%rbx+0x18], %eax
  { 2, { 0x0f, 0xc1, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstXadd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %rbx, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x18, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: f0 41 0f c1 00                               xadd [%r8], %eax
  { 2, { 0x0f, 0xc1, 0x00 },
    NACLi_386L,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeLockable) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstXadd,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %r8, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
};
0000000000000000: 0f 05                                        syscall
  { 2, { 0x0f, 0x05, 0x00 },
    NACLi_SYSCALL,
    NACL_IFLAG(Opcode64Only),
    InstSyscall,
    2, {
      { RegRCX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegRIP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rcx, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprUsed | ExprSize64 },
};
0000000000000000: e4 08                                        in %al, 0x8; *NACL Disallows!*
  { 1, { 0xe4, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_b),
    InstIn,
    2, {
      { RegAL, NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 e5 08                                     in %ax, 0x8; *NACL Disallows!*
  { 1, { 0xe5, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstIn,
    2, {
      { RegREAX, NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: e5 08                                        in %eax, 0x8; *NACL Disallows!*
  { 1, { 0xe5, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstIn,
    2, {
      { RegREAX, NACL_OPFLAG(OpSet) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x8, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: ec                                           in %al, %dx; *NACL Disallows!*
  { 1, { 0xec, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_EMPTY_IFLAGS,
    InstIn,
    2, {
      { RegAL, NACL_OPFLAG(OpSet) },
      { RegDX, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 66 ed                                        in %ax, %dx; *NACL Disallows!*
  { 1, { 0xed, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstIn,
    2, {
      { RegREAX, NACL_OPFLAG(OpSet) },
      { RegDX, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %ax, ExprSet | ExprSize16 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: ed                                           in %eax, %dx; *NACL Disallows!*
  { 1, { 0xed, 0x00, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstIn,
    2, {
      { RegREAX, NACL_OPFLAG(OpSet) },
      { RegDX, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %dx, ExprUsed | ExprSize16 },
};
0000000000000000: 55                                           push %rbp
  { 1, { 0x55, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodePlusR) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o) | NACL_IFLAG(OperandSizeDefaultIs64),
    InstPush,
    3, {
      { OpcodeBaseMinus5, NACL_OPFLAG(OperandExtendsOpcode) },
      { RegRSP, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { G_OpcodeBase, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %rsp, ExprSet | ExprUsed | ExprSize64 },
  { OperandReference[1] , 2, 0 },
  { ExprRegister[0] , %rbp, ExprUsed | ExprSize64 },
};
0000000000000000: 0f 18 86 00 03 00 00                         prefetchnta [%rsi+0x300]
  { 2, { 0x0f, 0x18, 0x00 },
    NACLi_SSE,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstPrefetchnta,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { Mb_Operand, NACL_EMPTY_OPFLAGS },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, 0 },
  { ExprRegister[0] , %rsi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x300, ExprSize32 | ExprSignedHex },
};
0000000000000000: 48 0f c3 07                                  movnti [%rdi], %rax
  { 2, { 0x0f, 0xc3, 0x00 },
    NACLi_SSE2,
    NACL_IFLAG(OpcodeLtC0InModRm) | NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(Opcode64Only) | NACL_IFLAG(OperandSize_o),
    InstMovnti,
    2, {
      { M_Operand, NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet },
  { ExprRegister[0] , %rdi, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
};
0000000000000000: 0f ae f8                                     sfence
  { 2, { 0x0f, 0xae, 0x00 },
    NACLi_SFENCE_CLFLUSH,
    NACL_IFLAG(OpcodeInModRm),
    InstSfence,
    1, {
      { Opcode7, NACL_OPFLAG(OperandExtendsOpcode) },
  } };
NaClExpVector[0] = {
};
0000000000000000: 41 0f a3 c0                                  bt %r8d, %eax; *NACL Disallows!*
  { 2, { 0x0f, 0xa3, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v) | NACL_IFLAG(AddressSizeDefaultIs32),
    InstBt,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %r8d, ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
0000000000000000: 41 db 2c 07                                  fld [%r15+%rax*1]
  { 1, { 0xdb, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFld,
    2, {
      { Opcode5, NACL_OPFLAG(OperandExtendsOpcode) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %r15, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: dd 04 24                                     fld [%rsp]
  { 1, { 0xdd, 0x00, 0x00 },
    NACLi_X87,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeLtC0InModRm),
    InstFld,
    2, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { M_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rsp, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
0000000000000000: 0f b3 20                                     btr [%eax], %esp; *NACL Disallows!*
  { 2, { 0x0f, 0xb3, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v) | NACL_IFLAG(AddressSizeDefaultIs32),
    InstBtr,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 0f a3 20                                     bt [%eax], %esp; *NACL Disallows!*
  { 2, { 0x0f, 0xa3, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v) | NACL_IFLAG(AddressSizeDefaultIs32),
    InstBt,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 0f bb 20                                     btc [%eax], %esp; *NACL Disallows!*
  { 2, { 0x0f, 0xbb, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v) | NACL_IFLAG(AddressSizeDefaultIs32),
    InstBtc,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 0f ab 20                                     bts [%eax], %esp; *NACL Disallows!*
  { 2, { 0x0f, 0xab, 0x00 },
    NACLi_ILLEGAL,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v) | NACL_IFLAG(AddressSizeDefaultIs32),
    InstBts,
    2, {
      { E_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { G_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprMemOffset[4] , 0, ExprSet | ExprUsed },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
};
0000000000000000: 66 0f 78 c1 02 04                            extrq %xmm0, 0x2, 0x4
  { 2, { 0x0f, 0x78, 0x00 },
    NACLi_SSE4A,
    NACL_IFLAG(OpcodeInModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeHasImmed2_b),
    InstExtrq,
    4, {
      { Opcode0, NACL_OPFLAG(OperandExtendsOpcode) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) | NACL_OPFLAG(AllowGOperandWithOpcodeInModRm) },
      { I_Operand, NACL_OPFLAG(OpUse) },
      { I2_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[6] = {
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm0, ExprSet | ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x2, ExprUsed | ExprSize8 | ExprUnsignedHex },
  { OperandReference[1] , 3, 0 },
  { ExprConstant[0] , 0x4, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: f2 0f 78 ca 02 04                            insertq %xmm1, %xmm2, 0x2, 0x4
  { 2, { 0x0f, 0x78, 0x00 },
    NACLi_SSE4A,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OpcodeHasImmed2_b),
    InstInsertq,
    4, {
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
      { I_Operand, NACL_OPFLAG(OpUse) },
      { I2_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
  { OperandReference[1] , 2, 0 },
  { ExprConstant[0] , 0x2, ExprUsed | ExprSize8 | ExprUnsignedHex },
  { OperandReference[1] , 3, 0 },
  { ExprConstant[0] , 0x4, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 66 0f 79 ca                                  extrq %xmm1, %xmm2
  { 2, { 0x0f, 0x79, 0x00 },
    NACLi_SSE4A,
    NACL_IFLAG(OpcodeUsesModRm),
    InstExtrq,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
};
0000000000000000: f2 0f 79 ca                                  insertq %xmm1, %xmm2
  { 2, { 0x0f, 0x79, 0x00 },
    NACLi_SSE4A,
    NACL_IFLAG(OpcodeUsesModRm),
    InstInsertq,
    2, {
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OpSet) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %xmm1, ExprSet | ExprUsed },
  { OperandReference[1] , 1, 0 },
  { ExprRegister[0] , %xmm2, ExprUsed },
};
0000000000000000: 66 e9 00 00 01 02                            jmp 0x2010006
  { 1, { 0xe9, 0x00, 0x00 },
    NACLi_JMPZ,
    NACL_IFLAG(OpcodeHasImmed_v) | NACL_IFLAG(Opcode64Only),
    InstJmp,
    2, {
      { RegREIP, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { J_Operand, NACL_OPFLAG(OpUse) | NACL_OPFLAG(OperandNear) | NACL_OPFLAG(OperandRelative) },
  } };
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %rip, ExprSet | ExprSize64 },
  { OperandReference[1] , 1, 0 },
  { ExprConstant[0] , 0x2010006, ExprUsed | ExprUnsignedHex | ExprJumpTarget },
};
0000000000000000: 67 40 a0 00 01 02 03                         mov %al, [0x3020100]
  { 1, { 0xa0, 0x00, 0x00 },
    NACLi_386,
    NACL_IFLAG(OpcodeHasImmed_Addr) | NACL_IFLAG(OperandSize_b),
    InstMov,
    2, {
      { RegAL, NACL_OPFLAG(OpSet) },
      { O_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[8] = {
  { OperandReference[1] , 0, 0 },
  { ExprRegister[0] , %al, ExprSet | ExprSize8 },
  { OperandReference[1] , 1, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %unknown, 0 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x3020100, ExprSize32 | ExprUnsignedHex },
};
0000000000000000: 66 0f 3a 60 00 01                            pcmpestrm %xmm0, [%rax], 0x1
  { 3, { 0x0f, 0x3a, 0x60 },
    NACLi_SSE42,
    NACL_IFLAG(OpcodeUsesModRm) | NACL_IFLAG(OpcodeHasImmed_b) | NACL_IFLAG(OperandSize_w) | NACL_IFLAG(OperandSize_v),
    InstPcmpestrm,
    6, {
      { RegXMM0, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegEAX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { RegEDX, NACL_OPFLAG(OpSet) | NACL_OPFLAG(OpImplicit) },
      { Xmm_G_Operand, NACL_OPFLAG(OpUse) },
      { Xmm_E_Operand, NACL_OPFLAG(OpUse) },
      { I_Operand, NACL_OPFLAG(OpUse) },
  } };
NaClExpVector[16] = {
  { OperandReference[1] , 0, ExprImplicit },
  { ExprRegister[0] , %xmm0, ExprSet },
  { OperandReference[1] , 1, ExprImplicit },
  { ExprRegister[0] , %eax, ExprSet | ExprSize32 },
  { OperandReference[1] , 2, ExprImplicit },
  { ExprRegister[0] , %edx, ExprSet | ExprSize32 },
  { OperandReference[1] , 3, 0 },
  { ExprRegister[0] , %xmm0, ExprUsed },
  { OperandReference[1] , 4, 0 },
  { ExprMemOffset[4] , 0, ExprUsed },
  { ExprRegister[0] , %rax, ExprUsed | ExprSize64 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 5, 0 },
  { ExprConstant[0] , 0x1, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
0000000000000000: 90                                           nop
  { 1, { 0x90, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 90                                        nop
  { 1, { 0x90, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 8d 76 00                                     nop
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 8d 74 26 00                                  nop
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 8d b6 00 00 00 00                            nop
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 8d b4 26 00 00 00 00                         nop
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 89 f6                                        nop
  { 1, { 0x89, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 8d bc 27 00 00 00 00                         nop
  { 1, { 0x8d, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 00                                     nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 40 00                                  nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 44 00 00                               nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 0f 1f 44 00 00                            nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 80 00 00 00 00                         nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 0f 1f 84 00 00 00 00 00                      nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 0f 1f 84 00 00 00 00 00                   nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 2e 0f 1f 84 00 00 00 00 00                nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 2e 0f 1f 84 00 00 00 00 00          nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00       nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
0000000000000000: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 nop
  { 1, { 0x1f, 0x00, 0x00 },
    NACLi_386,
    NACL_EMPTY_IFLAGS,
    InstNop,
    0, {
  } };
NaClExpVector[0] = {
};
