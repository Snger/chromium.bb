# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# To get generated include files.
env.Append(CPPPATH=['${SOURCE_ROOT}/srpc/trusted'])

if env.Bit('linux'):
    env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        # Catch unresolved symbols in libraries.
        LINKFLAGS=['-Wl,-z,defs'],
        )

if env.Bit('mac'):
    env.Append(
        CCFLAGS=['-Wno-long-long'],
        CPPDEFINES = [ ['TARGET_API_MAC_CARBON', '1'], 'USE_SYSTEM_CONSOLE', ],
        FRAMEWORKS = ['Carbon'],
    )

if env.Bit('windows'):
    env.Append(
        CCFLAGS = ['/EHsc',],
        CPPDEFINES = ['WIN32', '_WINDOWS'],
    )
    env.Tool('atlmfc_vc80')

# The PPAPI RPCs are specified abstractly, and proxies and stubs are
# generated automatically with srpcgen.py through the DEPS action.
# These files can be regenerated by using 'gclient runhooks'.
GENERATED = '${SOURCE_ROOT}/srpc/trusted/srpcgen'

ppp_rpc_cc = GENERATED + '/ppp_rpc_client.cc'
ppb_rpc_cc = GENERATED + '/ppb_rpc_server.cc'
upcall_cc = GENERATED + '/upcall_server.cc'

common_obj = env.DualObject(['utility.cc'])

env.DualLibrary('ppapi_browser',
                ['browser_core.cc',
                 'browser_completion_callback_invoker.cc',
                 'browser_globals.cc',
                 'browser_graphics_2d.cc',
                 'browser_image_data.cc',
                 'browser_instance.cc',
                 'browser_ppp.cc',
                 'browser_upcall.cc',
                 'object.cc',
                 'object_proxy.cc',
                 'object_serialize.cc',
                 'objectstub_rpc_impl.cc',
                 ppb_rpc_cc,
                 ppp_rpc_cc,
                 upcall_cc,
                 common_obj,])


env.DualLibrary('ppapi_plugin',
                ['plugin_instance.cc',
                 'plugin_resource.cc',
                 'plugin_resource_tracker.cc',
                 'plugin_var.cc',
                 common_obj])
