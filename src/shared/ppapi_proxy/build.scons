# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.  Use
# of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# To get generated include files.
env.Append(CPPPATH = [ '${TARGET_ROOT}' ])

if env.Bit('linux'):
    env.Append(
        CCFLAGS=['-fPIC', '-Wno-long-long',],
        # Catch unresolved symbols in libraries.
        LINKFLAGS=['-Wl,-z,defs'],
        )

if env.Bit('mac'):
    env.Append(
        CCFLAGS=['-Wno-long-long'],
        CPPDEFINES = [ ['TARGET_API_MAC_CARBON', '1'], 'USE_SYSTEM_CONSOLE', ],
        FRAMEWORKS = ['Carbon'],
    )

if env.Bit('windows'):
    env.Append(
        CCFLAGS = ['/EHsc',],
        CPPDEFINES = ['WIN32', '_WINDOWS'],
    )
    env.Tool('atlmfc_vc80')

# The PPAPI RPCs are specified abstractly, and proxies and stubs are
# generated automatically.
SRPCGEN = '${SOURCE_ROOT}/native_client/tools/srpcgen.py'
GENERATED = '${TARGET_ROOT}/gen/native_client/src/shared/ppapi_proxy'

# Client interfaces for RPCs to the plugin.
ppp_specinputs = ['objectstub.srpc',
                  'completion_callback.srpc',
                  'ppp.srpc',
                  'ppp_instance.srpc',
                  ]

ppp_rpc_h = GENERATED + '/ppp_rpc.h'
ppp_rpc_cc = GENERATED + '/ppp_rpc_client.cc'
ppp_rpc_files = [ ppp_rpc_h, ppp_rpc_cc ]
env.Command(target=ppp_rpc_files,
            source=[SRPCGEN, ppp_specinputs],
            action=[Action('${PYTHON} ${SOURCES[0]} '
                           '-c '
                           'PppRpcs '
                           'GEN_PPAPI_PROXY_PPP_RPC_H_ '
                           + ppp_rpc_h + ' '
                           + ppp_rpc_cc + ' '
                           ' ${SOURCES[1:]}'),
                   ],
           )

# Server interfaces for RPCs exported by the browser.
ppb_specinputs = ['objectstub.srpc',
                  'ppb_core.srpc',
                  'ppb_graphics_2d.srpc',
                  'ppb_image_data.srpc',
                  ]

ppb_rpc_h = GENERATED + '/ppb_rpc.h'
ppb_rpc_cc = GENERATED + '/ppb_rpc_server.cc'
ppb_rpc_files = [ ppb_rpc_h, ppb_rpc_cc ]
env.Command(target=ppb_rpc_files,
            source=[SRPCGEN, ppb_specinputs],
            action=[Action('${PYTHON} ${SOURCES[0]} '
                           '-s '
                           'PpbRpcs '
                           'GEN_PPAPI_PROXY_PPB_RPC_H_ '
                           + ppb_rpc_h + ' '
                           + ppb_rpc_cc + ' '
                           ' ${SOURCES[1:]}'),
                   ],
           )

# Server interfaces exported on the upcall channel.
upcall_specinputs = ['upcall.srpc',
                    ]

upcall_h = GENERATED + '/upcall.h'
upcall_cc = GENERATED + '/upcall_server.cc'
upcall_files = [ upcall_h, upcall_cc ]
env.Command(target=upcall_files,
            source=[SRPCGEN, upcall_specinputs],
            action=[Action('${PYTHON} ${SOURCES[0]} '
                           '-s '
                           'PpbUpcalls '
                           'GEN_PPAPI_PROXY_UPCALL_H_ '
                           + upcall_h + ' '
                           + upcall_cc + ' '
                           ' ${SOURCES[1:]}'),
                   ],
           )

common_obj = env.DualObject(['utility.cc'])


env.DualLibrary('ppapi_browser',
                ['browser_core.cc',
                 'browser_completion_callback_invoker.cc',
                 'browser_globals.cc',
                 'browser_graphics_2d.cc',
                 'browser_image_data.cc',
                 'browser_instance.cc',
                 'browser_ppp.cc',
                 'browser_upcall.cc',
                 'object.cc',
                 'object_proxy.cc',
                 'object_serialize.cc',
                 'objectstub_rpc_impl.cc',
                 ppb_rpc_cc,
                 ppp_rpc_cc,
                 upcall_cc,
                 common_obj,])


env.DualLibrary('ppapi_plugin',
                ['plugin_instance.cc',
                 'plugin_var.cc',
                 common_obj])
