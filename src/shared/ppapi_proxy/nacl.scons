# Copyright (c) 2010 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# To enable getting the generated include files and sources.
env.Append(CPPPATH=['${TARGET_ROOT}'])

env.Append(CPPDEFINES=['XP_UNIX'])
env.FilterOut(CCFLAGS=['-Wswitch-enum'])
env.Append(CCFLAGS=['-Wno-long-long'])

# The PPAPI RPCs are specified abstractly, and proxies and stubs are
# generated automatically.
SRPCGEN = '${SOURCE_ROOT}/native_client/tools/srpcgen.py'
GENERATED = '${TARGET_ROOT}/gen/native_client/src/shared/ppapi_proxy'

# Plugin server interfaces exported via RPCs to the browser.
ppp_specinputs = ['objectstub.srpc',
                  'completion_callback.srpc',
                  'ppp.srpc',
                  'ppp_instance.srpc',
                  ]

ppp_rpc_h = GENERATED + '/ppp_rpc.h'
ppp_rpc_cc = GENERATED + '/ppp_rpc_server.cc'
ppp_rpc_files = [ ppp_rpc_h, ppp_rpc_cc ]
env.Command(target=ppp_rpc_files,
            source=[SRPCGEN, ppp_specinputs],
            action=[Action('${PYTHON} ${SOURCES[0]} '
                           '-s '
                           'PppRpcs '
                           'GEN_PPAPI_PROXY_PPP_RPC_H_ '
                           + ppp_rpc_h + ' '
                           + ppp_rpc_cc + ' '
                           ' ${SOURCES[1:]}'),
                   ],
           )

# Browser interfaces used in client RPCs to the browser.
ppb_specinputs = ['objectstub.srpc',
                  'ppb_core.srpc',
                  ]

ppb_rpc_h = GENERATED + '/ppb_rpc.h'
ppb_rpc_cc = GENERATED + '/ppb_rpc_client.cc'
ppb_rpc_files = [ ppb_rpc_h, ppb_rpc_cc ]
env.Command(target=ppb_rpc_files,
            source=[SRPCGEN, ppb_specinputs],
            action=[Action('${PYTHON} ${SOURCES[0]} '
                           '-c '
                           'PpbRpcs '
                           'GEN_PPAPI_PROXY_PPB_RPC_H_ '
                           + ppb_rpc_h + ' '
                           + ppb_rpc_cc + ' '
                           ' ${SOURCES[1:]}'),
                   ],
           )

# Browser interfaces called on the upcall channel to the browser.
upcall_specinputs = ['upcall.srpc',
                    ]

upcall_h = GENERATED + '/upcall.h'
upcall_cc = GENERATED + '/upcall_client.cc'
upcall_files = [ upcall_h, upcall_cc ]
env.Command(target=upcall_files,
            source=[SRPCGEN, upcall_specinputs],
            action=[Action('${PYTHON} ${SOURCES[0]} '
                           '-c '
                           'PpbUpcalls '
                           'GEN_PPAPI_PROXY_UPCALL_H_ '
                           + upcall_h + ' '
                           + upcall_cc + ' '
                           ' ${SOURCES[1:]}'),
                   ],
           )

env.ComponentLibrary('ppruntime',
                     ['completion_callback_table.cc',
                      'object.cc',
                      'object_proxy.cc',
                      'object_serialize.cc',
                      'objectstub_rpc_impl.cc',
                      'plugin_audio.cc',
                      'plugin_audio_config.cc',
                      'plugin_buffer.cc',
                      'plugin_core.cc',
                      'plugin_file_io.cc',
                      'plugin_file_ref.cc',
                      'plugin_getinterface.cc',
                      'plugin_globals.cc',
                      'plugin_graphics_2d.cc',
                      'plugin_graphics_3d.cc',
                      'plugin_image_data.cc',
                      'plugin_instance.cc',
                      'plugin_main.cc',
                      'plugin_ppp_instance_impl.cc',
                      'plugin_url_loader.cc',
                      'plugin_url_request_info.cc',
                      'plugin_url_response_info.cc',
                      'plugin_var.cc',
                      ppb_rpc_cc,
                      ppp_rpc_cc,
                      'plugin_ppp_impl.cc',
                      upcall_cc,
                      'utility.cc',
                      ])

env.AddLibraryToSdk(['ppruntime'])
