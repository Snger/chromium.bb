# -*- python -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

import os
import gyp_extract

Import('env')

# Underlay $SOURCE_ROOT/ppapi in this directory.
Dir('.').addRepository(Dir('#/../ppapi'))


# Load ppapi_cpp.gypi
ppapi_cpp_gypi = gyp_extract.LoadGypFile(
    env.File('#/../ppapi/ppapi_cpp.gypi').path)

# From ppapi_cpp.gypi:ppapi_cpp_objects:.*\.cc
# From ppapi_cpp.gypi:ppapi_cpp:.*\.cc
cpp_sources = (
    gyp_extract.GypTargetSources(
        ppapi_cpp_gypi, 'ppapi_cpp_objects', '.*\.cc') +
    gyp_extract.GypTargetSources(
        ppapi_cpp_gypi, 'ppapi_cpp', '.*\.cc')
)
env.ComponentLibrary('ppapi_cpp', cpp_sources)


env.Append(CPPPATH=[
    '$SOURCE_ROOT/ppapi/lib/gl/gles2'])

# Load ppapi_gl.gypi
ppapi_gl_gypi = gyp_extract.LoadGypFile(
    env.File('#/../ppapi/ppapi_gl.gypi').path)

# From ppapi_gl.gypi:ppapi_gles2:.*\.c
gles2_sources = gyp_extract.GypTargetSources(
    ppapi_gl_gypi, 'ppapi_gles2', '.*\.c')
env.ComponentLibrary('ppapi_gles2', gles2_sources)


# From ppapi_cpp.gypi:ppapi_c:c/[^/]*\.h
c_headers = gyp_extract.GypTargetSources(
    ppapi_cpp_gypi, 'ppapi_c', 'c/[^/]*\.h')

# From ppapi_cpp.gypi:ppapi_c:c/dev/[^/]*\.h
c_dev_headers = gyp_extract.GypTargetSources(
    ppapi_cpp_gypi, 'ppapi_c', 'c/dev/[^/]*\.h')

# From ppapi_cpp.gypi:ppapi_cpp_objects:cpp/[^/]*\.h
# From ppapi_cpp.gypi:ppapi_cpp:cpp/[^/]*\.h
cpp_headers = (
    gyp_extract.GypTargetSources(
        ppapi_cpp_gypi, 'ppapi_cpp_objects', 'cpp/[^/]*\.h') +
    gyp_extract.GypTargetSources(
        ppapi_cpp_gypi, 'ppapi_cpp', 'cpp/[^/]*\.h')
)

# From ppapi_cpp.gypi:ppapi_cpp_objects:cpp/dev/[^/]*\.h
cpp_dev_headers = gyp_extract.GypTargetSources(
    ppapi_cpp_gypi, 'ppapi_cpp_objects', 'cpp/dev/[^/]*\.h')

# From ppapi_gl.gypi:ppapi_gles2:.*\.h
gles2_headers = gyp_extract.GypTargetSources(
    ppapi_gl_gypi, 'ppapi_gles2', '.*\.h')


c_header_install = env.AddHeaderToSdk(
  ['$SOURCE_ROOT/ppapi/' + h for h in c_headers], os.path.join('ppapi', 'c'))
c_dev_header_install = env.AddHeaderToSdk(
  ['$SOURCE_ROOT/ppapi/' + h for h in c_dev_headers],
  os.path.join('ppapi', 'c', 'dev'))
cpp_header_install = env.AddHeaderToSdk(
  ['$SOURCE_ROOT/ppapi/' + h for h in cpp_headers],
  os.path.join('ppapi', 'cpp'))
cpp_dev_header_install = env.AddHeaderToSdk(
  ['$SOURCE_ROOT/ppapi/' + h for h in cpp_dev_headers],
  os.path.join('ppapi', 'cpp', 'dev'))
env.AddLibraryToSdk(['ppapi_cpp'])
env.Requires('ppapi_cpp', [c_header_install,
                           c_dev_header_install,
                           cpp_header_install,
                           cpp_dev_header_install])

# GLES2 headers go into the GLES2 subdir, Khronos headers into the KHR subdir,
# EGL header go in the EGL subdir.
egl_header_install = env.AddHeaderToSdk([
    'lib/gl/include/EGL/egl.h',
    'lib/gl/include/EGL/eglext.h',
    'lib/gl/include/EGL/eglplatform.h',
    ], 'EGL')
gles2_header_install = env.AddHeaderToSdk([
    'lib/gl/include/GLES2/gl2.h',
    'lib/gl/include/GLES2/gl2ext.h',
    'lib/gl/include/GLES2/gl2platform.h',
    ], 'GLES2')
khr_header_install = env.AddHeaderToSdk([
    'lib/gl/include/KHR/khrplatform.h',
    ], 'KHR')
ppapi_gles2_header_install = env.AddHeaderToSdk(
  ['$SOURCE_ROOT/ppapi/' + h for h in gles2_headers],
  os.path.join('ppapi', 'gles2'))
env.AddLibraryToSdk(['ppapi_gles2'])
env.Requires('ppapi_gles2', [
    egl_header_install,
    gles2_header_install,
    khr_header_install,
    ppapi_gles2_header_install,
])

