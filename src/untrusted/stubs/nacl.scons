# -*- python -*-
# Copyright 2008 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

if ARGUMENTS.get('bitcode'):
  assert env.get('CC_NATIVE')
  # NOTE: we make sure everything in this directory gets compiled
  #       all the way down into native code.
  #       This is tricky when run in a pnacl where tls.c would
  #       normally only compiled into a bitcode file.
  #       As a solution we have a second compiler in the env
  #       that always compiles to native.
  env.Replace(CC='${CC_NATIVE}')

# This directory contains untrusted C and ASM source for low-level
# CPU-specific libraries implicitly supplied by the compiler driver.
# Unlike most untrusted SDK code, conditional compilation may be
# freely used, as the target will never be PNaCl.

platform = env.get('TARGET_FULLARCH')
assert platform in ['x86-32',  'x86-64', 'arm']
 # we do not like hyphens in file names
platform = platform.replace('-', '_')

# the nacl-gcc toolchain does not want to switch to using
# src/untrusted/startup/nacl_startup.c
# c.f. http://code.google.com/p/nativeclient/issues/detail?id=651
if ARGUMENTS.get('bitcode'):
  crt1 = env.ComponentObject('crt1', ['crt1_%s.S' % platform])
else:
  crt1 = env.ComponentObject('crt1', ['crt1_x86.S'])

crti = env.ComponentObject('crti', ['crti_%s.S' % platform])
crtn = env.ComponentObject('crtn', ['crtn_%s.S' % platform])

tls = env.StaticObject('tls.o', ['tls_%s.c' % platform])

# Archive library of modules written in C.
crt_platform = env.StaticLibrary('crt_platform', [tls])

env.AddObjectToSdk([crt1, crti, crtn, crt_platform], is_platform=True)
