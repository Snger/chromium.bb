# -*- python -*-
# Copyright 2011 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.


Import('env')

# NACL_GC_WRAP_SYSCALL uses ({...}) syntax.
env.FilterOut(CCFLAGS=['-pedantic'])
if env['PNACL_FRONTEND'] == 'clang':
  # silence a warning when compiling malloc.c
  env.Append(CCFLAGS=['-Wno-self-assign'])
# Sources are split into essentially one function per file to be in
# alignment with the linker, which resolves symbols by including entire
# object files.  Placing multiple definitions in one file may result in
# object code bloat or possibly multiple definitions.

sources_for_standard_interfaces = [
    'clock.c',
    'close.c',
    'dup.c',
    '_exit.c',
    'fstat.c',
    'getdents.c',
    'getpid.c',
    'gettimeofday.c',
    'lock.c',
    'lseek.c',
    'malloc.c',
    'mmap.c',
    'munmap.c',
    'nanosleep.c',
    'nacl_interface_query.c',
    'nacl_read_tp.c',
    'open.c',
    'read.c',
    'pthread_initialize_minimal.c',
    'pthread_stubs.c',
    'sbrk.c',
    'sched_yield.c',
    'stacktrace.c',
    'start.c',
    'stat.c',
    'sysconf.c',
    'tls.c',
    'write.c',
    ]


sources_for_nacl_extensions = [
    'gc_hooks.c',
    'nacl_irt.c',
    'nacl_tls_get.c',
    'nacl_tls_init.c',
    ]

if env.Bit('nacl_glibc'):
  # For nacl-glibc, the standard interfaces are provided by glibc, so
  # we do not build them here.
  sources = sources_for_nacl_extensions
else:
  sources = sources_for_nacl_extensions + sources_for_standard_interfaces

libnacl = env.NaClSdkLibrary('libnacl', sources)

env.AddLibraryToSdk(libnacl)
header_install = env.AddHeaderToSdk(['nacl_startup.h', 'nacl_thread.h'])
env.Requires('libnacl', header_install)

libnacl_dyncode = env.NaClSdkLibrary('libnacl_dyncode',
                                     ['dyncode.c'],
                                     LIBS=['nacl'])
env.AddLibraryToSdk(libnacl_dyncode)
env.AddHeaderToSdk(['nacl_dyncode.h'])

env.ComponentLibrary('libnacl_dyncode_private', ['dyncode_private.c'])

imc_syscalls = [
    'imc_accept.c',
    'imc_connect.c',
    'imc_makeboundsock.c',
    'imc_mem_obj_create.c',
    'imc_recvmsg.c',
    'imc_sendmsg.c',
    'imc_socketpair.c',
    'nameservice.c',
    ]

libimc_syscalls = env.NaClSdkLibrary('libimc_syscalls', imc_syscalls)
env.AddLibraryToSdk(libimc_syscalls)

sys_private = [
    'null.c',
    'sysbrk.c',
    ]

if not env.Bit('nacl_glibc'):
  sys_private.append(env.ComponentObject(
      'private_blockhook', '${MAIN_DIR}/src/untrusted/irt/irt_blockhook.c'))
  # We must combine these all into a single .o file so that there is no
  # danger of some of this code not being brought in from the archive, and
  # later getting the IRT-based versions from libnacl instead.  e.g., if
  # your test calls only malloc (defined in -lc) and malloc is the only
  # caller of sbrk, then when processing -lsys_private (before -lc) the
  # linker will omit sbrk_private.o, and only when processing -lc (which
  # implicitly includes -lnacl) will it try to pull in some definition of
  # sbrk--so it will get the libnacl one instead of the libsys_private one.
  # Putting everything important into a single .o file avoids this scenario.
  private_combine = [env.ComponentObject(module, '%s.c' % module)
                     for module in ['gc_hooks_private',
                                    'sbrk_private',
                                    'sys_private']]
  sys_private.append(env.Command('combined_private${OBJSUFFIX}',
                                 private_combine,
                                 '${LD} -relocatable -o ${TARGET} ${SOURCES}'))

env.ComponentLibrary('libnacl_sys_private', sys_private)
