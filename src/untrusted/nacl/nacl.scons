# -*- python -*-
# Copyright 2011 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.


Import('env')

# we have some empty source files
env.FilterOut(CCFLAGS=['-pedantic'])

# Sources are split into essentially one function per file to be in
# alignment with the linker, which resolves symbols by including entire
# object files.  Placing multiple definitions in one file may result in
# object code bloat or possibly multiple definitions.

sources_for_standard_interfaces = [
    'clock.c',
    'close.c',
    'dup.c',
    '_exit.c',
    'fstat.c',
    'getdents.c',
    'getpid.c',
    'gettimeofday.c',
    'lock.c',
    'lseek.c',
    'mmap.c',
    'munmap.c',
    'nanosleep.c',
    'nacl_read_tp.c',
    'open.c',
    'read.c',
    'sbrk.c',
    'sched_yield.c',
    'stacktrace.c',
    'stat.c',
    'sysconf.c',
    'tls.c',
    'write.c',
    ]


sources_for_nacl_extensions = [
    'dyncode.c',
    'gc_hooks.c',
    'imc_accept.c',
    'imc_connect.c',
    'imc_makeboundsock.c',
    'imc_mem_obj_create.c',
    'imc_recvmsg.c',
    'imc_sendmsg.c',
    'imc_socketpair.c',
    'nacl_irt.c',
    'nacl_tls_get.c',
    'nacl_tls_init.c',
    'nameservice.c',
    'null.c',
    'sysbrk.c',
    ]

if env.Bit('nacl_glibc'):
  # For nacl-glibc, the standard interfaces are provided by glibc, so
  # we do not build them here.
  sources = sources_for_nacl_extensions
else:
  sources = sources_for_nacl_extensions + sources_for_standard_interfaces

# TODO(mcgrathr): These should eventually live in ../irt/ instead.
# For now we need them as fallback definitions in libnacl when no
# IRT is available.  To simplify build matters, we just include them
# here and the IRT itself gets them from linking with libnacl.
irt_interface_sources = ['irt_basic.c',
                         'irt_file.c',
                         'irt_memory.c',
                         'irt_dyncode.c',
                         'irt_thread.c',
                         'irt_mutex.c',
                         'irt_cond.c',
                         'irt_sem.c',
                         'irt_tls.c',
                         'irt_blockhook.c',
                         ]

env.NaClSdkLibrary('libnacl', sources + irt_interface_sources)

env.AddLibraryToSdk(['libnacl'])
header_install = env.AddHeaderToSdk(['nacl_thread.h'])
env.Requires('libnacl', header_install)
