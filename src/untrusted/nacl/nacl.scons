# -*- python -*-
# Copyright 2011 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.


Import('env')

# we have some empty source files
env.FilterOut(CCFLAGS=['-pedantic'])

# Sources are split into essentially one function per file to be in
# alignment with the linker, which resolves symbols by including entire
# object files.  Placing multiple definitions in one file may result in
# object code bloat or possibly multiple definitions.

sources_for_standard_interfaces = [
    'clock.c',
    'close.c',
    'dup.c',
    '_exit.c',
    'fstat.c',
    'getdents.c',
    'getpid.c',
    'gettimeofday.c',
    'lock.c',
    'lseek.c',
    'mmap.c',
    'munmap.c',
    'nanosleep.c',
    'open.c',
    'read.c',
    'sched_yield.c',
    'stacktrace.c',
    'stat.c',
    'sysconf.c',
    'tls.c',
    'write.c',
    ]

sources_for_nacl_extensions = [
    'av_wait.c',
    'dyncode_copy.c',
    'gc_hooks.c',
    'imc_accept.c',
    'imc_connect.c',
    'imc_makeboundsock.c',
    'imc_mem_obj_create.c',
    'imc_recvmsg.c',
    'imc_sendmsg.c',
    'imc_socketpair.c',
    'nacl_cond_create.c',
    'nacl_cond_signal.c',
    'nacl_cond_broadcast.c',
    'nacl_cond_wait.c',
    'nacl_cond_timed_wait_abs.c',
    'nacl_mutex_create.c',
    'nacl_mutex_lock.c',
    'nacl_mutex_trylock.c',
    'nacl_mutex_unlock.c',
    'nacl_sem_create.c',
    'nacl_sem_wait.c',
    'nacl_sem_post.c',
    'nacl_thread_create.c',
    'nacl_thread_exit.c',
    'nacl_thread_nice.c',
    'nacl_tls_get.c',
    'nacl_tls_init.c',
    'nameservice.c',
    'null.c',
    'srpc_init.c',
    'srpc_wait.c',
    # sbrk.c provides the non-standard sysbrk(), which tests/sysbasic
    # depends on.  However, it also provides the standard(ish) sbrk().
    # TODO(mseaborn): Possibly split this up so that an
    # sbrk()-providing file is not on this list.
    'sbrk.c',
    ]

if env.Bit('nacl_glibc'):
  # For nacl-glibc, the standard interfaces are provided by glibc, so
  # we do not build them here.
  sources = sources_for_nacl_extensions
else:
  sources = sources_for_nacl_extensions + sources_for_standard_interfaces

env.ComponentLibrary('libnacl', sources)

env.AddLibraryToSdk(['libnacl'])
header_install = env.AddHeaderToSdk(['nacl_thread.h'])
env.Requires('libnacl', header_install)
